#include <a_samp>
#include <a_http>

#undef MAX_PLAYERS
#define MAX_PLAYERS 100
#pragma disablerecursion

#define SERVER_BOT       "Nafiz"
#define REVISION         "v1.03"
#define SERVER_NAME      "CyberX RolePlay"
#define SERVER_DIALOG    "{FFFF00}CyberX RolePlay {FFFFFF}v1.03"
#define SERVER_URL       "https://discord.gg/hnuDH3fbwh"
#define SERVER_DISCORD   "https://discord.gg/hnuDH3fbwh"

#define RADIO_HOSTNAME  "localhost"
#define RADIO_DATABASE  "samp"
#define RADIO_USERNAME  "root"
#define RADIO_PASSWORD  ""

#define SERVER_COLOR  0xFFFF00FF
#define CXRP       "{FFFF00}"

#define NT_DISTANCE 10.0
#define STREAMER_OBJECT_SD 250.0
#define STREAMER_OBJECT_DD 250.0 
#define SSCANF_NO_NICE_FEATURES
#define TDN_MODE_DEFAULT
#define BUSTAIM_MAX_CONTINOUS_SHOTS 15
#define BUSTAIM_RANDOM_AIM_PROBES 2
#define BUSTAIM_PROAIM_TELEPORT_PROBES 2
#define DISCORD

new mafiazone;

//Plugins Includes
#if defined DISCORD
	#include <discord-connector>
	#define DCMD_PREFIX '-'
	#include <discord-cmd>
#endif
#include <mapandreas>
#include <a_mysql>
#include <Pawn.CMD>
#include <Pawn.RakNet>
#include <sampvoice>
#include <sscanf2>
#include <streamer>
#include <crashdetect>

//Normal Includes
#include <foreach>
#include <callbacks>
#include <mSelection>
#include <tp>
#include <core>
#include <float>
#include <selection>
#include <MenuStore>
#include <progress>
#include <mobile>
#include <td-notification>
#include <fly>
#include <driveby>
#include <strlib>
#include <BustAim>
#include <dini2>

#define BUTTON_PREVIOUS playerInfoFrameTD[1]
#define BUTTON_NEXT playerInfoFrameTD[2]

new Text:playerInfoFrameTD[6];
new Text:playerInfoTD[7];
new Text:vehicleInfoFrameTD[2];
new Text:vehicleInfoTD[4];
//new Text3D:Nametags[MAX_PLAYERS];
new bool:NameTagEnabled[MAX_PLAYERS];

new PlayerText:playerInfoPTD[MAX_PLAYERS][8];
new PlayerText:vehicleInfoPTD[MAX_PLAYERS][5];



//Speedometer
new PlayerText:cWspeedo[MAX_PLAYERS][9];

new bool:SpawnGlitch[MAX_PLAYERS];
//Colors
#define WHITE				"{FFFFFF}"
#define GREY				"{AFAFAF}"
#define RED					"{FF0000}"
#define GREEN				"{006400}"
#define YELLOW    			"{FFFF00}"
#define ORANGE    			"{FFA500}"
#define AQUA				"{24F0FF}"

#define BIZ_COLOR			0x84a9ffFF
#define BIZ					"{84a9ff}"
#define COLOR_ERROR         0xF9B64AFF
#define COLOR_DISPATCH 		0xff4419ff
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_SYNTAX        0xAFAFAFFF
#define COLOR_YELLOW    	0xFFFF00FF
#define COLOR_YELLOW2       0xF5DEB3FF
#define COLOR_LIGHTORANGE   0xF7A763FF
#define COLOR_AQUA        	0xCCFFFFFF
#define COLOR_GREEN         0x32CD32FF
#define COLOR_GREY          0xAFAFAFFF
#define	COLOR_GREY1    		0xE6E6E6FF
#define COLOR_GREY2 		0xC8C8C8FF
#define COLOR_GREY3 		0xAAAAAAFF
#define COLOR_GREY4 		0x8C8C8CFF
#define COLOR_GREY5 		0x6E6E6EFF
#define COLOR_LIGHTRED      0xFF6347FF
#define COLOR_ORANGE        0xFF9900FF
#define COLOR_RED           0xAA3333FF
#define COLOR_PURPLE        0xC2A2DAFF
#define COLOR_NEWBIE        0x7DAEFFFF
#define COLOR_BLUE          0x233EFAFF
#define COLOR_ROYALBLUE     0x9999FFFF
#define COLOR_DOCTOR        0xFF8282FF
#define COLOR_DARKGREEN     0x00AA00FF
#define COLOR_VIP           0x0F6A89FF
#define COLOR_NAVYBLUE 		0x089DCEFF
#define COLOR_GLOBAL 		0xF7A000FF
#define COLOR_LIGHTGREEN    0x74AF7AFF
#define COLOR_FACTIONCHAT   0xBDF38BFF
#define COLOR_SAMP          0xA9C4E4FF
#define COLOR_REALRED       0xFF0000FF
#define COLOR_LIGHTBLUE		0x91C8FFFF
#define COLOR_BLACK  		0x000000FF

#include "./modules/textdraws.pwn"


//New Payment 
#define Tax_Pay 			0.2  // Tax from player
#define Payment 			0.8  // Job Payment to player
#define JOB_MONEY			0.25 // Applied on All Jobs
#define Shop_Tax			0.18 // Item Purchase
#define GroTTI_TAX			0.32 // Only for Vehicle Purchase
#define Trucker_Tax			0.12 // Delivery
#define ATM_Tax				0.05 // Both Deposit & Withdraw
#define BANK_Tax			0.03 //	Only for Money Transfer

//new seatbelt mode.
#define MODEL_ERROR		0
#define MODEL_CAR       1
#define MODEL_BIKE      2
#define MODEL_MBIKE		3
#define MODEL_BOAT      4
#define MODEL_PLANE     5

#define     HTTP_IP_API_URL			"ip-api.com/csv"
#define     HTTP_IP_API_END         "?fields=country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,reverse,query,status,message"
#define     HTTP_VPN_API_URL        "check.getipintel.net/check.php?contact=rohanzhid3011@gmail.com&ip="

enum dox_PlayerInfo
{
	Status[64],
	Country[64],
	CountryCode[64],
	Region[64],
	RegionName[64],
	City[64],
	Zip[64],
	Lat[64],
	Lon[64],
	TimeZone[64],
	Isp[64],
	Org[64],
	As[64],
	Reverse[64],
	IP[16],
};
new dPlayerInfo[MAX_PLAYERS][dox_PlayerInfo];
new targetID[MAX_PLAYERS];

//SWAT Rope
#define Rp_ropelength 100

new ropes[MAX_PLAYERS][Rp_ropelength];
new Float:pl_pos[MAX_PLAYERS][5];

new pbNext;

#define         PING_LEVEL_UPDATE   -1
#define         PING_LEVEL_1        0
#define         PING_LEVEL_2        1
#define         PING_LEVEL_3        2
#define         PING_LEVEL_4        3
#define         PING_LEVEL_5        4

static PingLevel[MAX_PLAYERS] = { -1, ...};

static Text:WifiBox;
static Text:Bar1;
static Text:Bar2;
static Text:Bar3;
static Text:Bar4;
static Text:Bar5;
static pingTimer;

static PingLevelColors[][5] = {
	{ 0x3692EDFF, 0x3692EDFF, 0x3692EDFF, 0x3692EDFF, 0x3692EDFF  },
	{ 0x00DD00FF, 0x00DD00FF, 0x00DD00FF, 0x00DD00FF, 0xC0C0C0FF  },
	{ 0xFDEB11FF, 0xFDEB11FF, 0xFDEB11FF, 0xC0C0C0FF , 0xC0C0C0FF   },
	{ 0xFF5959FF, 0xFF5959FF, 0xC0C0C0FF , 0xC0C0C0FF , 0xC0C0C0FF   },
	{ 0xFF0000FF, 0xC0C0C0FF , 0xC0C0C0FF , 0xC0C0C0FF , 0xC0C0C0FF   }
};

forward WifiCheck();
public WifiCheck()
{
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;

        else if(GetPlayerPing(i) >= 0 && GetPlayerPing(i) < 99 && PingLevel[i] != PING_LEVEL_1)
        {
            PingLevel[i] = PING_LEVEL_1;

            UpdateConnectionStatus(i, PING_LEVEL_1);
		}
		else if(GetPlayerPing(i) >= 100 && GetPlayerPing(i) < 191 && PingLevel[i] != PING_LEVEL_2)
		{
            PingLevel[i] = PING_LEVEL_2;
            UpdateConnectionStatus(i, PING_LEVEL_2);
		}

		else if(GetPlayerPing(i) >= 190 && GetPlayerPing(i) < 271 && PingLevel[i] != PING_LEVEL_3)
		{
            PingLevel[i] = PING_LEVEL_3;
            UpdateConnectionStatus(i, PING_LEVEL_3);
		}
		else if(GetPlayerPing(i) >= 270 && GetPlayerPing(i) < 349 && PingLevel[i] != PING_LEVEL_4)
		{
            PingLevel[i] = PING_LEVEL_4;
            UpdateConnectionStatus(i, PING_LEVEL_4);
		}
		else if(GetPlayerPing(i) > 350 && PingLevel[i] != PING_LEVEL_5)
		{
            PingLevel[i] = PING_LEVEL_5;
            UpdateConnectionStatus(i, PING_LEVEL_5);
		}
	}
	return 1;
}

UpdateConnectionStatus(playerid, level)
{
    TextDrawHideForPlayer(playerid, Bar1);
    TextDrawHideForPlayer(playerid, Bar2);
    TextDrawHideForPlayer(playerid, Bar3);
    TextDrawHideForPlayer(playerid, Bar4);
    TextDrawHideForPlayer(playerid, Bar5);
    TextDrawBoxColor(Bar1, PingLevelColors[level][0]);
    TextDrawBoxColor(Bar2, PingLevelColors[level][1]);
    TextDrawBoxColor(Bar3, PingLevelColors[level][2]);
    TextDrawBoxColor(Bar4, PingLevelColors[level][3]);
    TextDrawBoxColor(Bar5, PingLevelColors[level][4]);
    TextDrawShowForPlayer(playerid, Bar1);
    TextDrawShowForPlayer(playerid, Bar2);
    TextDrawShowForPlayer(playerid, Bar3);
    TextDrawShowForPlayer(playerid, Bar4);
    TextDrawShowForPlayer(playerid, Bar5);
	return 1;
}

new INVALID_INFORMATION = -1;

new PlayerVeh[MAX_PLAYERS][MAX_VEHICLES];
new VehFuel[MAX_PLAYERS][MAX_VEHICLES] = {100, ...};
new VehLocation[MAX_PLAYERS][MAX_VEHICLES][32];
new Float:VehHealth[MAX_PLAYERS][MAX_VEHICLES];
new SelectedVeh[MAX_PLAYERS];
new VehSpawned[MAX_PLAYERS][MAX_VEHICLES];


GetNextVeh(playerid, current)
{
	if((PlayerVeh[playerid][current + 1]) == INVALID_INFORMATION)
	{
		return -1;
	}
	return current + 1;
}

GetPreviousVeh(playerid, current)
{
	if((PlayerVeh[playerid][current - 1]) == INVALID_INFORMATION)
	{
		return -1;
	}
	return current - 1;
}

ShowVST_TD(playerid)
{
	for(new i = 0; i < 24; i ++)
	{
		TextDrawShowForPlayer(playerid, VST_TD[i]);
	}
	for(new j = 0; j < 8; j ++)
	{
		PlayerTextDrawShow(playerid, VST_TD_Player[playerid][j]);
	}
	SelectTextDraw(playerid, COLOR_YELLOW);
	return 1;
}

HideVST_TD(playerid)
{
	for(new i = 0; i < 24; i ++)
	{
		TextDrawHideForPlayer(playerid, VST_TD[i]);
	}
	for(new j = 0; j < 8; j ++)
	{
		PlayerTextDrawHide(playerid, VST_TD_Player[playerid][j]);
	}
	CancelSelectTextDraw(playerid);
	return 1;
}

//GROTTI
new CurrentVeh[MAX_PLAYERS][MAX_VEHICLES];
new CurrentVehPrice[MAX_PLAYERS][MAX_VEHICLES][128];
new CurrentVehSpeed[MAX_PLAYERS][MAX_VEHICLES];
new CurrentVehType[MAX_PLAYERS][MAX_VEHICLES][16];
new SelectedDealerVeh[MAX_PLAYERS];

ShowGROTTI_TD(playerid)
{
	for(new i = 0; i < 12; i ++)
	{
		TextDrawShowForPlayer(playerid, GROTTI_TD[i]);
	}

	for(new i = 0; i < 6; i ++)
	{
		PlayerTextDrawShow(playerid, GROTTI_TD_PLAYER[playerid][i]);
	}
	SelectTextDraw(playerid, COLOR_YELLOW);
	return 1;
}

HideGROTTI_TD(playerid)
{
	for(new i = 0; i < 12; i ++)
	{
		TextDrawHideForPlayer(playerid, GROTTI_TD[i]);
	}

	for(new i = 0; i < 6; i ++)
	{
		PlayerTextDrawHide(playerid, GROTTI_TD_PLAYER[playerid][i]);
	}
	CancelSelectTextDraw(playerid);
	return 1;
}

GetPreviousDealerVeh(playerid, current)
{
	if(CurrentVeh[playerid][current - 1] == -1)
	{
		return -1;
	}
	return current - 1;
}

GetNextDealerVeh(playerid, current)
{
	if(CurrentVeh[playerid][current + 1] == -1)
	{
		return -1;
	}
	return current + 1;
}

//Shamal & Bus
new sExplode[MAX_VEHICLES] = {-1, ...};
new bExplode[MAX_VEHICLES] = {-1, ...};
new bool:tCount[MAX_VEHICLES];
new bool:bCount[MAX_VEHICLES];

forward ExplodeShamal(vehicleid);
forward ExplodeBus(vehicleid);

#define ATTACH_PLAYER_SEATBELT  19314
#define ATTACH_PLAYER_HELMET1   18645
#define ATTACH_PLAYER_HELMET2   18645

new CagePlayer[MAX_PLAYERS][5];

new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };

// --- Function Shortcuts --- //
#define SCM 	SendClientMessage
#define SCMA 	SendClientMessageToAll
#define SM 		SendMessage 
#define SMA 	SendMessageToAll 
#define SAM 	SendAdminMessage 

// Model Selection
#define MODEL_SELECTION_CLOTHING    2
#define MODEL_SELECTION_CLOTHES   	3

// Defines //
// ---------------------------------------
#define MAX_LISTED_NUMBERS          50
#define MAX_LISTED_OBJECTS          1000
#define MAX_LISTED_STATIONS         50
#define MAX_SPLIT_LENGTH            70
// ---------------------------------------
#define MAX_REPORTS         		50
#define MAX_HOUSES          		1500
#define MAX_RESTAURANTS				100
#define MAX_FUEL_STATIONS			1200
#define MAX_GARAGES         		1000
#define MAX_BUSINESSES      		200
#define MAX_ENTRANCES       		500
#define MAX_MAPICONS                200
#define MAX_SPEED_CAMERAS           50
#define MAX_GATES					200
#define MAX_MAPOBJECTS				5000
#define MAX_PLAYER_CLOTHING     	10
#define MAX_ANTICHEAT_WARNINGS   	5
#define MAX_FACTIONS                20
#define MAX_FACTION_RANKS           20
#define MAX_FACTION_SKINS           15
#define MAX_FACTION_DIVISIONS       7
#define MAX_DEPLOYABLES             50
#define MAX_FIRES                   100
#define MAX_ZONES					30
#define MAX_GANGS                   15
#define MAX_GANG_SKINS              2
#define MAX_POINTS                  15

#define MAX_TURFS                   150
#define MAX_BANK_ROBBERS            7
#define MAX_GRAFFITI_POINTS         200
// ---------------------------------------
// ---------------------------------------
#define THREAD_LOOKUP_BANS          1
#define THREAD_LOOKUP_ACCOUNT    	2
#define THREAD_ACCOUNT_REGISTER     3
#define THREAD_PROCESS_LOGIN        4
#define THREAD_COUNT_FLAGS          5
#define THREAD_TRACE_IP             6
#define THREAD_LIST_CHANGES         8
#define THREAD_LIST_HELPERS         9
#define THREAD_LOAD_HOUSES          10
#define THREAD_LIST_TENANTS         11
#define THREAD_LOAD_FURNITURE       12
#define THREAD_LOAD_GARAGES         13
#define THREAD_LOAD_BUSINESSES      14
#define THREAD_LOAD_ENTRANCES       15
#define THREAD_LOAD_CLOTHING        16
#define THREAD_LOAD_FACTIONS        17
#define THREAD_LOAD_FACTIONRANKS    18
#define THREAD_LOAD_FACTIONSKINS    19
#define THREAD_LOAD_FACTIONPAY      20
#define THREAD_LOAD_DIVISIONS       21
#define THREAD_LOAD_GANGS           24
#define THREAD_LOAD_GANGRANKS       25
#define THREAD_LOAD_GANGSKINS       26
#define THREAD_LOAD_POINTS          27
#define THREAD_LOAD_TURFS           28
#define THREAD_HOUSE_INFORMATION    29
#define THREAD_COUNT_FURNITURE      30
#define THREAD_SELL_FURNITURE       31
#define THREAD_CLEAR_FURNITURE      32
#define THREAD_COUNT_TEXTS          33
#define THREAD_VIEW_TEXTS           34
#define THREAD_LIST_VEHICLES        35
#define THREAD_FACTION_ROSTER       36
#define THREAD_GANG_ROSTER          37
#define THREAD_VIEW_PHONEBOOK       38
#define THREAD_LOAD_VEHICLES        46
#define THREAD_GANG_INFORMATION     47
#define THREAD_OFFLINE_IP           48
#define THREAD_CHECK_REFERRAL       49
#define THREAD_REWARD_REFERRER      50
#define THREAD_LIST_FLAGGED         51
#define THREAD_CAR_STORAGE          52
#define THREAD_LIST_ADMINS	        54
#define THREAD_LOAD_MAPICONS 		55
#define THREAD_LOAD_SETTINGS        56
#define THREAD_SHOW_IMPOUND         57
#define THREAD_LOAD_SAFEZONE		58
#define THREAD_LOAD_RENTS			59
#define THREAD_LOAD_FUELS			60
#define THREAD_WHITE_LIST		    61
#define THREAD_LOAD_INVENTORY		62

#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
#define strcpy(%0,%1)   strcat(((%0[0] = 0), %0), %1)
#define percent(%0,%1)  floatround((float((%0)) / 100) * (%1))
#define Random(%0,%1)   (random((%1) - (%0)) + (%0))
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave



new GiftAllowed;
//paintball kill count
new PaintballKills[MAX_PLAYERS] = 0;

//Android Shooting Ping Issue Fix
new lasthit[MAX_PLAYERS];

// phoneTD
new Text:PhoneTD[12];
new Text:notch;
new Text:body;
new Text:walp;
new Text:wtrmrk;
new Text:cam;
new Text:home;
new Text:call;
new Text:sms;
new Text:chat;
new Text:locate;
new Text:vst;
new Text:noo;
new Text:statss;
new Text:ping;
new Text:inv;
new Text:camera;
new Text:report;
new Text:rdm;

//call td
new Text:call_text[2];
new Text:call_pickup;
new Text:call_hangup;
new Text:call_stat;
new PlayerText:call_number[MAX_PLAYERS];

new bool:ShowingPhone[MAX_PLAYERS];

new takingselfie[MAX_PLAYERS];
new Float:Degree[MAX_PLAYERS];
const Float: Radius = 1.4; //do not edit this
const Float: Speed  = 1.25; //do not edit this
const Float: Height = 1.0; // do not edit this
new Float:slX[MAX_PLAYERS];
new Float:slY[MAX_PLAYERS];
new Float:slZ[MAX_PLAYERS];

new tsstring[2048], psstring[2048];
new PayCheckCode[MAX_PLAYERS];

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
new bool:pCBugging[MAX_PLAYERS];
new ptmCBugFreezeOver[MAX_PLAYERS];
new ptsLastFiredWeapon[MAX_PLAYERS];

#define MINIMUM_PRESS_TIME 20
#define EXCESSIVE_PRESS_COUNT 5
new LastPressTime[MAX_PLAYERS];
new SprintPressCounter[MAX_PLAYERS];

// Tune system
new pvehicleid[MAX_PLAYERS];
new pmodelid[MAX_PLAYERS];
#define DIALOG_TYPE_MAIN 1440
#define DIALOG_TYPE_EXHAUSTS 1470
#define DIALOG_TYPE_FBUMPS 1480
#define DIALOG_TYPE_RBUMPS 1490
#define DIALOG_TYPE_ROOFS 1500
#define DIALOG_TYPE_SPOILERS 1510
#define DIALOG_TYPE_SIDESKIRTS 1520
#define DIALOG_TYPE_BULLBARS 1530
#define DIALOG_TYPE_WHEELS 1540
#define DIALOG_TYPE_CSTEREO 1550
#define DIALOG_TYPE_HYDRAULICS 1560
#define DIALOG_TYPE_NITRO 1570
#define DIALOG_TYPE_LIGHTS 1580
#define DIALOG_TYPE_HOODS 1590
#define DIALOG_TYPE_VENTS 1600

new DialogStrgEx[ 4000 ];

native IsValidVehicle(vehicleid);

stock PlayAnimation(playerid, animlib[32], animname[32], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 1) // ReWrap
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole for use in /veh
{
	return random(max - min) + min;
}

enum e_OffsetTypes {
	VEHICLE_OFFSET_BOOT,
	VEHICLE_OFFSET_HOOD,
	VEHICLE_OFFSET_ROOF
};

#define GetVehicleBoot(%0,%1,%2,%3) \
	(GetVehicleOffset((%0), VEHICLE_OFFSET_BOOT, %1, %2, %3))

#define GetVehicleHood(%0,%1,%2,%3) \
	(GetVehicleOffset((%0), VEHICLE_OFFSET_HOOD, %1, %2, %3))

#define GetVehicleRoof(%0,%1,%2,%3) \
	(GetVehicleOffset((%0), VEHICLE_OFFSET_ROOF, %1, %2, %3))


stock GetVehicleOffset(vehicleid, type, &Float:x, &Float:y, &Float:z)
{
    new Float:fPos[4], Float:fSize[3];

	if (!IsValidVehicle(vehicleid))
	{
		x = 0.0;
		y = 0.0;
		z = 0.0;

		return 0;
	}
	else
	{
		GetVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
		GetVehicleZAngle(vehicleid, fPos[3]);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);

		switch (type)
		{
		    case VEHICLE_OFFSET_BOOT:
		    {
				x = fPos[0] - (floatsqroot(fSize[1] + fSize[1]) * floatsin(-fPos[3], degrees));
				y = fPos[1] - (floatsqroot(fSize[1] + fSize[1]) * floatcos(-fPos[3], degrees));
 				z = fPos[2];
			}
			case VEHICLE_OFFSET_HOOD:
			{
			    x = fPos[0] + (floatsqroot(fSize[1] + fSize[1]) * floatsin(-fPos[3], degrees));
				y = fPos[1] + (floatsqroot(fSize[1] + fSize[1]) * floatcos(-fPos[3], degrees));
	 			z = fPos[2];
			}
			case VEHICLE_OFFSET_ROOF:
			{
			    x = fPos[0];
			    y = fPos[1];
			    z = fPos[2] + floatsqroot(fSize[2]);
			}
		}
	}
	return 1;
}


//VehicleFire
enum ENUM_FIRE_INFO
{
	bool:fire_VALID,
	bool:fire_MIRROR,
	Float:fire_OFFSET_X,
	Float:fire_OFFSET_Y,
	Float:fire_OFFSET_Z,
	Float:fire_ROT_X,
	Float:fire_ROT_Y,
	Float:fire_ROT_Z
};
new FIRE_INFO[][ENUM_FIRE_INFO] =
{
	{true, false, 0.356599, -2.323499, -2.282700, 0.000000, 0.000000, 180.000000}, //400
	{true, false, 0.438600, -2.509499, -2.088700, 0.000000, 0.000000, 180.000000}, //401
	{true, true, 0.502600, -2.623499, -2.136700, 0.000000, 0.000000, 180.000000}, //402
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //403
	{true, false, 0.452600, -2.679299, -2.057499, 0.000000, 0.000000, 180.000000}, //404
	{true, false, 0.484899, -2.694099, -2.203500, 0.000000, 0.000000, 180.000000}, //405
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //406
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //407
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //408
	{true, false, 0.613099, -3.776700, -2.107199, 0.000000, 0.000000, 180.000000}, //409
	{true, false, 0.393799, -2.313999, -2.057199, 0.000000, 0.000000, 180.000000}, //410
	{true, true, 0.307799, -2.537999, -2.083199, 0.000000, 0.000000, 180.000000}, //411
	{true, false, 0.427300, -3.339999, -2.165199, 0.000000, 0.000000, 180.000000}, //412
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //413
	{true, false, 0.516099, -3.160899, -2.317199, 0.000000, 0.000000, 180.000000}, //414
	{true, true, 0.378100, -2.368799, -2.103199, 0.000000, 0.000000, 180.000000}, //415
	{true, false, 0.504199, -3.720499, -2.407199, 0.000000, 0.000000, 180.000000}, //416
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //417
	{true, false, 0.574599, -2.647899, -2.439199, 0.000000, 0.000000, 180.000000}, //418
	{true, false, 0.558099, -2.929099, -2.161200, 0.000000, 0.000000, 180.000000}, //419
	{true, false, 0.574100, -2.639099, -2.137199, 0.000000, 0.000000, 180.000000}, //420
	{true, false, 0.450100, -2.983999, -2.191200, 0.000000, 0.000000, 180.000000}, //421
	{true, false, 0.411700, -2.547899, -2.334000, 0.000000, 0.000000, 180.000000}, //422
	{true, false, -0.369800, -2.315999, -2.404000, 0.000000, 0.000000, 180.000000}, //423
	{true, true, 0.512099, -1.669300, -1.856099, 0.000000, 0.000000, 180.000000}, //424
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //425
	{true, false, 0.578000, -2.621899, -2.136100, 0.000000, 0.000000, 180.000000}, //426
	{true, false, 0.601499, -3.878599, -2.324200, 0.000000, 0.000000, 180.000000}, //427
	{true, false, 0.588999, -2.971599, -2.462199, 0.000000, 0.000000, 180.000000}, //428
	{true, true, 0.503000, -2.523599, -1.965199, 0.000000, 0.000000, 180.000000}, //429
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //430
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //431
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //432
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //433
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //434
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //435
	{true, false, 0.486999, -2.497599, -2.099299, 0.000000, 0.000000, 180.000000}, //436
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //437
	{true, false, 0.490399, -2.705899, -2.371700, 0.000000, 0.000000, 180.000000}, //438
	{true, true, 0.352400, -2.581899, -2.064399, 0.000000, 0.000000, 180.000000}, //439
	{true, false, 0.420700, -2.677599, -2.570899, 0.000000, 0.000000, 180.000000}, //440
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //441
	{true, false, 0.593100, -2.798699, -2.205100, 0.000000, 0.000000, 180.000000}, //442
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //443
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //444
	{true, false, 0.480199, -2.714699, -2.147099, 0.000000, 0.000000, 180.000000}, //445
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //446
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //447
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //448
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //449
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //450
	{true, false, 0.005400, -2.552699, -1.987100, 0.000000, 0.000000, 180.000000}, //451
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //452
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //453
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //454
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //455
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //456
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //457
	{true, false, 0.519200, -2.790499, -2.229899, 0.000000, 0.000000, 180.000000}, //458
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //459
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //460
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //461
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //462
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //463
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //464
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //465
	{true, false, 0.435200, -2.877399, -2.125900, 0.000000, 0.000000, 180.000000}, //466
	{true, false, 0.481200, -2.917399, -2.097899, 0.000000, 0.000000, 180.000000}, //467
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //468
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //469
	{true, false, -1.250200, -2.029500, -0.472800, 0.000000, 0.000000, 180.000000}, //470
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //471
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //472
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //473
	{true, true, 0.584999, -2.822599, -2.209800, 0.000000, 0.000000, 180.000000}, //474
	{true, false, 0.481000, -2.595699, -2.113800, 0.000000, 0.000000, 180.000000}, //475
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //476
	{true, false, 0.587000, -2.805699, -2.071799, 0.000000, 0.000000, 180.000000}, //477
	{true, false, 0.416700, -2.568699, -2.196799, 0.000000, 0.000000, 180.000000}, //478
	{true, false, 0.460799, -2.865999, -2.082799, 0.000000, 0.000000, 180.000000}, //479
	{true, false, 0.483300, -2.409999, -2.163700, 0.000000, 0.000000, 180.000000}, //480
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //481
	{true, false, 0.445899, -2.641699, -2.439800, 0.000000, 0.000000, 180.000000}, //482
	{true, false, -0.340600, -2.846899, -2.512400, 0.000000, 0.000000, 180.000000}, //483
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //484
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //485
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //486
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //487
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //488
	{true, false, 0.446500, -2.771499, -2.240900, 0.000000, 0.000000, 180.000000}, //489
	{true, false, 0.439999, -3.227299, -2.240900, 0.000000, 0.000000, 180.000000}, //490
	{true, false, 0.572200, -2.925899, -2.166899, 0.000000, 0.000000, 180.000000}, //491
	{true, false, 0.579599, -2.606400, -2.116899, 0.000000, 0.000000, 180.000000}, //492
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //493
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //494
	{true, false, 0.596599, -2.335199, -2.332799, 0.000000, 0.000000, 180.000000}, //495
	{true, false, 0.545400, -2.173599, -2.111700, 0.000000, 0.000000, 180.000000}, //496
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //497
	{true, false, -0.473800, -3.108199, -2.361400, 0.000000, 0.000000, 180.000000}, //498
	{true, false, 0.516200, -3.340600, -2.287400, 0.000000, 0.000000, 180.000000}, //499
	{true, false, 0.446900, -1.940299, -2.245399, 0.000000, 0.000000, 180.000000}, //500
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //501
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //502
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //503
	{true, false, 0.430299, -2.876699, -2.117300, 0.000000, 0.000000, 180.000000}, //504
	{true, false, 0.446299, -2.772699, -2.236900, 0.000000, 0.000000, 180.000000}, //505
	{true, true, 0.560599, -2.476300, -2.120100, 0.000000, 0.000000, 180.000000}, //506
	{true, false, 0.485199, -2.971699, -2.262000, 0.000000, 0.000000, 180.000000}, //507
	{true, false, 0.467400, -3.586999, -2.686900, 0.000000, 0.000000, 180.000000}, //508
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //509
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //510
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //511
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //512
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //513
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //514
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //515
	{true, false, 0.447800, -2.946699, -2.141499, 0.000000, 0.000000, 180.000000}, //516
	{true, false, 0.501800, -2.858699, -2.119499, 0.000000, 0.000000, 180.000000}, //517
	{true, false, -0.423400, -2.882499, -2.091500, 0.000000, 0.000000, 180.000000}, //518
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //519
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //520
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //521
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //522
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //523
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //524
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //525
	{true, false, 0.481799, -2.314099, -2.129499, 0.000000, 0.000000, 180.000000}, //526
	{true, false, 0.471799, -2.298099, -1.999199, 0.000000, 0.000000, 180.000000}, //527
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //528
	{true, false, -0.424699, -2.729899, -2.011199, 0.000000, 0.000000, 180.000000}, //529
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //530
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //531
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //532
	{true, true, 0.515100, -2.452399, -2.037100, 0.000000, 0.000000, 180.000000}, //533
	{true, true, 0.483099, -2.958400, -2.167099, 0.000000, 0.000000, 180.000000}, //534
	{true, true, 0.350600, -2.693499, -2.189100, 0.000000, 0.000000, 180.000000}, //535
	{true, true, 0.500000, -2.971299, -2.161099, 0.000000, 0.000000, 180.000000}, //536
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //537
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //538
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //539
	{true, false, -0.410600, -2.748699, -2.265599, 0.000000, 0.000000, 180.000000}, //540
	{true, true, 0.624000, -2.205999, -1.875100, 0.000000, 0.000000, 180.000000}, //541
	{true, false, 0.587400, -2.829499, -1.996899, 0.000000, 0.000000, 180.000000}, //542
	{true, false, -0.411000, -2.764599, -2.099200, 0.000000, 0.000000, 180.000000}, //543
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //544
	{true, true, 0.314900, -2.263700, -2.260600, 0.000000, 0.000000, 180.000000}, //545
	{true, false, 0.581200, -2.833499, -2.020299, 0.000000, 0.000000, 180.000000}, //546
	{true, false, 0.629199, -2.589499, -2.074300, 0.000000, 0.000000, 180.000000}, //547
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //548
	{true, false, 0.441300, -2.511600, -2.030299, 0.000000, 0.000000, 180.000000}, //549
	{true, false, -0.628300, -2.899799, -2.267199, 0.000000, 0.000000, 180.000000}, //550
	{true, false, 0.590799, -3.145499, -2.092799, 0.000000, 0.000000, 180.000000}, //551
	{true, false, 0.446900, -3.063399, -1.924800, 0.000000, 0.000000, 180.000000}, //552
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //553
	{true, false, 0.559300, -2.751999, -2.208499, 0.000000, 0.000000, 180.000000}, //554
	{true, true, 0.136000, -2.282899, -2.003200, 0.000000, 0.000000, 180.000000}, //555
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //556
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //557
	{true, true, 0.465799, -2.558699, -1.977200, 0.000000, 0.000000, 180.000000}, //558
	{true, true, 0.633099, -2.394599, -1.977200, 0.000000, 0.000000, 180.000000}, //559
	{true, true, 0.479999, -2.474699, -1.991199, 0.000000, 0.000000, 180.000000}, //560
	{true, true, 0.446200, -2.739599, -2.166300, 0.000000, 0.000000, 180.000000}, //561
	{true, true, 0.483300, -2.380199, -2.037100, 0.000000, 0.000000, 180.000000}, //562
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //563
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //564
	{true, false, 0.479299, -2.134199, -1.999099, 0.000000, 0.000000, 180.000000}, //565
	{true, false, 0.564700, -2.946699, -2.063100, 0.000000, 0.000000, 180.000000}, //566
	{true, false, 0.628700, -2.776700, -2.252900, 0.000000, 0.000000, 180.000000}, //567
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //568
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //569
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //570
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //571
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //572
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //573
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //574
	{true, false, 0.453399, -2.709800, -1.975300, 0.000000, 0.000000, 180.000000}, //575
	{true, false, 0.658100, -3.092499, -2.043299, 0.000000, 0.000000, 180.000000}, //576
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //577
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //578
	{true, false, -0.424600, -2.890699, -2.102699, 0.000000, 0.000000, 180.000000}, //579
	{true, false, -0.408600, -2.872699, -2.092700, 0.000000, 0.000000, 180.000000}, //580
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //581
	{true, false, 0.444999, -3.395499, -2.334199, 0.000000, 0.000000, 180.000000}, //582
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //583
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //584
	{true, false, -0.428999, -3.143299, -1.889299, 0.000000, 0.000000, 180.000000}, //585
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //586
	{true, true, 0.698000, -2.692600, -2.056400, 0.000000, 0.000000, 180.000000}, //587
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //588
	{true, false, 0.583999, -2.358599, -1.965899, 0.000000, 0.000000, 180.000000}, //589
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //590
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //591
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //592
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //593
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //594
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //595
	{true, false, 0.577000, -2.622299, -2.138499, 0.000000, 0.000000, 180.000000}, //596
	{true, false, 0.577000, -2.622299, -2.138499, 0.000000, 0.000000, 180.000000}, //597
	{true, false, 0.595000, -2.678299, -2.002500, 0.000000, 0.000000, 180.000000}, //598
	{true, false, 0.440600, -2.773699, -2.239099, 0.000000, 0.000000, 180.000000}, //599
	{true, false, 0.442600, -2.763700, -2.054199, 0.000000, 0.000000, 180.000000}, //600
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //601
	{true, true, 0.560999, -2.523999, -2.200700, 0.000000, 0.000000, 180.000000}, //602
	{true, true, 0.587000, -2.661999, -2.192699, 0.000000, 0.000000, 180.000000}, //603
	{true, false, 0.425700, -2.877099, -2.124700, 0.000000, 0.000000, 180.000000}, //604
	{true, false, -0.411900, -2.767699, -2.098700, 0.000000, 0.000000, 180.000000}, //605
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //606
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //607
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //608
	{true, false, -0.477699, -3.106199, -2.359499, 0.000000, 0.000000, 180.000000}, //609
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, //610
	{false, false, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} //611
};

new 
	bool:Player_Fire_Enabled[MAX_PLAYERS],
	Player_Key_Sprint_Time[MAX_PLAYERS];

// Fixed /RELOG CMD
new ReconnectIP[MAX_PLAYERS][32];
new bool: Reconnecting[MAX_PLAYERS];
#define MAX_IP_SIZE 32

new zone_prison;
new IsInPrison[MAX_PLAYERS];

new Border3;
new Border33;
new Border333;
new Border4;
new Border44;
new Border444;
new Border1;
new Border11;
new Border111;
new Border2;
new Border22;
new Border222;
new Border5;
new Border55;
new Border555;
new Border6;
new Border66;
new Border666;
new Border7;
new Border77;
new Border777;
new Border8;
new Border88;
new Border888;
new Border9;
new Border99;
new Border999;
new Border0;
new Border00;
new Border000;

new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};



GetVehicleModelTopSpeed(modelid)
{
	if(!(400 <= modelid <= 611))
	{
		return 0; 
	}
	else
	{
		static const maxspeed[] =
		{
			164, 153, 194, 115, 139, 171, 115, 154, 104, 165, 135, 231, 175, 115, 110, 200, 160, 281, 120, 155, 151, 160, 146, 103, 141, 281, 180, 172, 164, 209, 198, 136, 98, 115, 174, 0, 155,
			165, 148, 175, 142, 151, 145, 131, 115, 171, 281, 281, 116, 0, 0, 201, 281, 63, 141, 164, 111, 99, 164, 142, 281, 167, 116, 148, 151, 151, 153, 146, 150, 281, 164, 115, 198, 198, 155,
			180, 281, 194, 122, 146, 192, 76, 163, 127, 198, 103, 67, 281, 281, 145, 164, 155, 146, 281, 223, 183, 169, 281, 113, 128, 146, 151, 225, 225, 180, 146, 186, 173, 113, 83, 105, 281, 
			281, 281, 125, 148, 164, 164, 171, 281, 281, 167, 183, 157, 136, 167, 165, 155, 183, 155, 63, 73, 115, 174, 175, 165, 180, 0, 0, 281, 155, 211, 171, 157, 156, 153, 155, 148, 281, 159,
			151, 164, 126, 281, 150, 165, 118, 118, 163, 185, 176, 160, 185, 281, 151, 172, 167, 180, 152, 0, 0, 97, 63, 115, 63, 165, 165, 281, 136, 165, 159, 157, 142, 89, 0, 159, 148, 172, 113,
			169, 0, 0, 281, 281, 136, 198, 182, 182, 182, 165, 157, 115, 176, 178, 154, 158, 0, 0, 0, 113, 0, 0
		};
					
		return maxspeed[modelid-400];
	}
}


//Spec System
#define SPECTATE_TYPE_PLAYER 0
#define SPECTATE_TYPE_VEHICLE 1

new Iterator:SpectatePlayers<MAX_PLAYERS>;

new spectateID[MAX_PLAYERS];
new spectateType[MAX_PLAYERS];
new bool:spectateCameraON[MAX_PLAYERS];

new playerVirtualWorld[MAX_PLAYERS];

new oldPlayerVirtualWorld[MAX_PLAYERS];
new oldPlayerInterior[MAX_PLAYERS];
new Float:oldPlayerPosition[MAX_PLAYERS][4];
new Float:oldPlayerHealth[MAX_PLAYERS];
new Float:oldPlayerArmour[MAX_PLAYERS];




Float:GetSpeed(Float:vx, Float:vy, Float:vz) 
{ // units: KM/H
    return floatsqroot(floatpower(vx, 2.0) + floatpower(vy, 2.0) + floatpower(vz, 2.0)) * 180.0;
}

GetVehicleModelName(modelid, dest[], maxlength) {
	return format(dest, maxlength, vehicleNames[modelid - 400]);
}
GetVehicleNameEx(modelid)
{
	new string[32];
	format(string, sizeof(string), "%s", vehicleNames[modelid - 400]);
	return string;
}

ShowPlayerInfo(playerid, targetid) {
	TextDrawSetPreviewModel(playerInfoTD[1], GetPlayerSkin(targetid));

	new name[MAX_PLAYER_NAME];
	GetPlayerName(targetid, name, MAX_PLAYER_NAME);
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][0], name);
	PlayerTextDrawColor(playerid, playerInfoPTD[playerid][0], ((GetPlayerColor(targetid) & ~0xFF) | 0xFF));

	new string[128];
	format(string, sizeof(string), "ID: %i", targetid);
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][1], string);

	for (new i = 0; i < sizeof(playerInfoPTD[]); i++) {
	    PlayerTextDrawShow(playerid, playerInfoPTD[playerid][i]);
	}

	for (new i = 0; i < sizeof(playerInfoFrameTD); i++) {
	    TextDrawShowForPlayer(playerid, playerInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(playerInfoTD); i++) {
	    TextDrawShowForPlayer(playerid, playerInfoTD[i]);
	}
}

HidePlayerInfo(playerid) {
	for (new i = 0; i < sizeof(playerInfoPTD[]); i++) {
	    PlayerTextDrawHide(playerid, playerInfoPTD[playerid][i]);
	}

	for (new i = 0; i < sizeof(playerInfoFrameTD); i++) {
	    TextDrawHideForPlayer(playerid, playerInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(playerInfoTD); i++) {
	    TextDrawHideForPlayer(playerid, playerInfoTD[i]);
	}
}

UpdatePlayerInfo(playerid, targetid) {
	new Float:amount;
	GetPlayerHealth(targetid, amount);

	new string[128];
	format(string, sizeof(string), "HEALTH: ~w~%i", floatround(amount));
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][2], string);

	new Float:barLength = ((clamp(floatround(amount), 0, 100) / 100.0) * 64.0);
	TextDrawTextSize(playerInfoTD[3], barLength, 3.0000);
 	TextDrawShowForPlayer(playerid, playerInfoTD[3]);

	GetPlayerArmour(targetid, amount);
	format(string, sizeof(string), "ARMOUR: ~w~%i", floatround(amount));
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][3], string);

	barLength = ((clamp(floatround(amount), 0, 100) / 100.0) * 64.0);
	TextDrawTextSize(playerInfoTD[5], barLength, 3.0000);
 	TextDrawShowForPlayer(playerid, playerInfoTD[5]);

	if (GetPlayerWeapon(targetid) == 0) {
	    string = "WEAPON: ~w~Unarmed";
	}
	else {
		GetWeaponName(GetPlayerWeapon(targetid), string, sizeof(string));
		format(string, sizeof(string), "WEAPON: ~w~%s (%i)", string, GetPlayerAmmo(targetid));
	}
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][4], string);

	format(string, sizeof(string), "MONEY: ~g~$~w~%s", AddCommas(GetPlayerMoney(targetid)));
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][5], string);

	new Float:vx, Float:vy, Float:vz;
	GetPlayerVelocity(targetid, vx, vy, vz);
	format(string, sizeof(string), "SPEED: ~w~%0.1f MPH", (GetSpeed(vx, vy, vz) / 1.609344));
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][6], string);

	new index;
	foreach (new i : SpectatePlayers) {
		++index;
		if (i == targetid) {
			break;
		}
 	}
	format(string, sizeof(string), "%i/%i", index, Iter_Count(SpectatePlayers));
	PlayerTextDrawSetString(playerid, playerInfoPTD[playerid][7], string);
}

ShowVehicleInfo(playerid, vehicleid) {
	new modelid = GetVehicleModel(vehicleid);
	TextDrawSetPreviewModel(vehicleInfoTD[1], modelid);

	new string[128];
    GetVehicleModelName(modelid, string, sizeof(string));
	PlayerTextDrawSetString(playerid, vehicleInfoPTD[playerid][0], string);

	format(string, sizeof(string), "MODELID: %i", modelid);
	PlayerTextDrawSetString(playerid, vehicleInfoPTD[playerid][1], string);

	format(string, sizeof(string), "[maximum: %0.1f km/h]", GetVehicleModelTopSpeed(modelid));
	PlayerTextDrawSetString(playerid, vehicleInfoPTD[playerid][4], string);

	for (new i = 0; i < sizeof(vehicleInfoPTD[]); i++) {
	    PlayerTextDrawShow(playerid, vehicleInfoPTD[playerid][i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoFrameTD); i++) {
	    TextDrawShowForPlayer(playerid, vehicleInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoTD); i++) {
	    TextDrawShowForPlayer(playerid, vehicleInfoTD[i]);
	}
}

HideVehicleInfo(playerid) {
	for (new i = 0; i < sizeof(vehicleInfoPTD[]); i++) {
	    PlayerTextDrawHide(playerid, vehicleInfoPTD[playerid][i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoFrameTD); i++) {
	    TextDrawHideForPlayer(playerid, vehicleInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoTD); i++) {
	    TextDrawHideForPlayer(playerid, vehicleInfoTD[i]);
	}
}

UpdateVehicleInfo(playerid, vehicleid) {
	new Float:amount;
	GetVehicleHealth(vehicleid, amount);

	new string[128];
	format(string, sizeof(string), "HEALTH: ~w~%i/1000", floatround(amount));
	PlayerTextDrawSetString(playerid, vehicleInfoPTD[playerid][2], string);

	new Float:barLength = ((clamp(floatround(amount), 0, 1000) / 1000.0) * 94.5);
	TextDrawTextSize(vehicleInfoTD[3], barLength, 3.0000);
	TextDrawShowForPlayer(playerid, vehicleInfoTD[3]);

	new Float:vx, Float:vy, Float:vz;
	GetVehicleVelocity(vehicleid, vx, vy, vz);
	format(string, sizeof(string), "SPEED: ~w~%0.1f KM/H", GetSpeed(vx, vy, vz));
	PlayerTextDrawSetString(playerid, vehicleInfoPTD[playerid][3], string);
}

GetNextPlayer(current) {
	new next = INVALID_PLAYER_ID;

	if (Iter_Count(SpectatePlayers) > 1) {
		if (Iter_Contains(SpectatePlayers, current)) {
			next = Iter_Next(SpectatePlayers, current);

			if (next == Iter_End(SpectatePlayers)) {
			    next = Iter_First(SpectatePlayers);
			}
		}
	}

	return next;
}

GetPreviousPlayer(current) {
	new prev = INVALID_PLAYER_ID;

	if (Iter_Count(SpectatePlayers) > 1) {
		if (Iter_Contains(SpectatePlayers, current)) {
			prev = Iter_Prev(SpectatePlayers, current);

			if (prev == Iter_Begin(SpectatePlayers)) {
			    prev = Iter_Last(SpectatePlayers);
			}
		}
	}

	return prev;
}

//MEATCHOPPER JOB====================
forward TimerGiveLumber(playerid);
forward TimerGiveLumberEx(playerid);
forward TimerGiveHarvesterEx(playerid);
forward TimerGiveMeat(playerid);
forward TimerGiveMeatEx(playerid);
//===================================
forward TimerWashMoney(playerid);
forward TimerSelfRepair(playerid, vehicleid);
forward TimerBreakCuff(playerid, targetid);
//===================================
new
	startplant[MAX_PLAYERS],
	onplant[MAX_PLAYERS],
	prinesplant[MAX_PLAYERS],
	countplant[MAX_PLAYERS], inharvesterjob[MAX_PLAYERS],
	prinesplantEx[MAX_PLAYERS],
	countplantEx[MAX_PLAYERS],
	harvesterskin[MAX_PLAYERS];
new skladplants;

new
	startwood[MAX_PLAYERS],
	onwood[MAX_PLAYERS],
	prineswood[MAX_PLAYERS],
	countwood[MAX_PLAYERS], inlumberjob[MAX_PLAYERS],
	prineswoodEx[MAX_PLAYERS],
	countwoodEx[MAX_PLAYERS],
	ExtraWoods[MAX_PLAYERS],
	lumberskin[MAX_PLAYERS];
new skladwoods;

new
	meatstartjob[MAX_PLAYERS],
	onmeat[MAX_PLAYERS],
	prinesmeat[MAX_PLAYERS],
	countmeat[MAX_PLAYERS],
	meatjob[MAX_PLAYERS],
	prinesmeatEx[MAX_PLAYERS],
	countmeatEx[MAX_PLAYERS],
	ExtraMeatall[MAX_PLAYERS],
	meatskin[MAX_PLAYERS];
new skladmeatall;
//===================================
new CITYHALL;
new PAWNSHOP;
new EDM;
new PDM;
// Actor Job Represent
new YFOOD[2];


//Timer TD
new PlayerText: timer_td[MAX_PLAYERS][4];

//DmgInfo
new PlayerText:DmgInfo[MAX_PLAYERS][2];

// Login Textdraws
new Text:PublicTD[2];
new Text:Watermark[5];

// Callsigns
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Label
new Text3D:InjuredLabel[MAX_PLAYERS];

// VIP Callsigns
new Text3D:DonatorCallSign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Car windows
new CarWindows[MAX_VEHICLES] = 0;

// Quiz System
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;

// Seatbelt
new SB[MAX_PLAYERS];

// ELM Lights
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new FlashTimer;

// Mask System
new Maskara[MAX_PLAYERS];
new MaskaraID[MAX_PLAYERS];

// new shop
new TotalPrice[MAX_PLAYERS];
new TotalProducts[MAX_PLAYERS];
new Products[MAX_PLAYERS][2000];
new BuyingBiz[MAX_PLAYERS];
new CurrItem[MAX_PLAYERS];

// Blindfold
new pBlind[MAX_PLAYERS] = 1;
new Text:Blind;

enum gSettings {
	gTax,
	gVault,
	gPlayerRecord,
	gRecordDate[24],
	gServerMOTD[255],
	gConnections,
	gTotalRegistered,
	gTotalKills,
	gTotalDeaths,
	gTotalHours,
	gAnticheatBans,
	adminMOTD[255],
	helperMOTD[255],
	TurfCapCount,
	PointCapCount,
	gDoubleXP,
	gMafiaCash
};

new Settings[gSettings];

// Graffiti
enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D,
	sMapIcon
};

new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];

enum objectData {
	mobjID,
	mobjExists,
	mobjModel,
	Float:mobjPos[6],
	mobjInterior,
	mobjWorld,
	mobjObject,
	mobjRob
};
new ObjectData[MAX_MAPOBJECTS][objectData];

// Poll System
new PollVoted[MAX_PLAYERS];
new PollY;
new PollOn;
new PollN;

// last damage system
new DamageBy[MAX_PLAYERS][MAX_PLAYER_NAME];
new DamageTime[MAX_PLAYERS][256];
new Float:DamageAmount[MAX_PLAYERS];
new DamageBone[MAX_PLAYERS];
new DamageWep[MAX_PLAYERS];
new Damaged[MAX_PLAYERS] = 0;

// PBounds
new pointboundaries[9];
new prison_rect;
new Safe[MAX_PLAYERS];
new ShowingBounds[MAX_PLAYERS];
new God[MAX_PLAYERS];

forward pollend(playerid);
public pollend(playerid)
{
	new string[128];
    format(string, sizeof(string), "The Poll has ended, "WHITE"%d{FF6347} people voted "WHITE"No{FF6347}, "WHITE"%d{FF6347} people voted "WHITE"Yes{FF6347}.", PollN, PollY);
    SCMA(COLOR_LIGHTRED, string);
    PollOn = 0;
	return 1;
}

// Enums //

enum
{
	DIALOG_REGISTER = 1,
	DIALOG_PASS,
	DIALOG_CONFIRMPASS,
	DIALOG_CARSTORAGE,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_AGE,
	DIALOG_REFERRAL,
	DIALOG_INTERIORS,
	DIALOG_BUYFURNITURE1,
	GatePass,
	DIALOG_BUYFURNITURE2,
	DIALOG_GRAFFITICOLOR,
	DIALOG_GRAFFITITEXT,
	DIALOG_CHOOSENUM,
	DIALOG_BUY,
	DIALOG_EDITBUY,
	DIALOG_EDITBUY2,
	DIALOG_TRUCKING,
	DIALOG_CARGO,
	DIALOG_CARGOINFO,
	DIALOG_CARGOCANCEL,
	DIALOG_CARGOCANCELALL,
	DIALOG_PICKLOAD,
	DIALOG_UNREADTEXTS,
	BANK_WITHDRAW,
	BANK_DEPOSIT,
	BANK_WIRETRANSFER,
	BANK_WIRETRANSFER2,
	DIALOG_AWITHDRAW,
	DIALOG_ADEPOSIT,
	DIALOG_CHANGEPASS,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_CLOTHING,
	DIALOG_CLOTHINGMENU,
	DIALOG_CLOTHINGEDIT,
	DIALOG_CLOTHINGBONE,
	DIALOG_CLOTHINGEDITMOB,
	DIALOG_MOBPOS,
	DIALOG_MOBROT,
	DIALOG_MOBSCALE,
	DIALOG_BUYVEHICLE,
	DIALOG_BUYVEHICLE2,
	DIALOG_REDEEM,
	DIALOG_SPAWNCAR,
	DIALOG_RELEASECAR,
    DIALOG_DESPAWNCAR,
    DIALOG_FINDCAR,
	MAFIA_FINDTRUCK,
	MAFIA_SHIPMENT,
	MAFIA_SHIPMENT2,
	DIALOG_BIZINTERIOR,
	DIALOG_FACTIONLOCKER,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_FACTIONSKINS,
	DIALOG_HITMANCLOTHES,
	DIALOG_FMDC,
	DIALOG_MDC,
	DIALOG_MDCWANTED,
	DIALOG_MDCPLAYER1,
	DIALOG_MDCPLAYER2,
	DIALOG_MDCCHARGES,
	DIALOG_PLAYERLOOKUP,
	DIALOG_VEHICLELOOKUP1,
 	DIALOG_VEHICLELOOKUP2,
 	DIALOG_FACTIONPAY1,
 	DIALOG_FACTIONPAY2,
 	DIALOG_PHONEBOOK,
 	DIALOG_CREATEZONE,
 	DIALOG_KIOSK,
 	DIALOG_REFUNDED,
 	DIALOG_PAWNSHOP,
 	DIALOG_CBUG,
	DIALOG_BLACKMARKET,
 	DIALOG_CONFIRMZONE,
 	DIALOG_MP3PLAYER,
 	DIALOG_MP3MUSIC,
 	DIALOG_MP3RADIO,
 	DIALOG_MP3URL,
 	DIALOG_MP3RADIOGENRES,
 	DIALOG_MP3RADIOSUBGENRES,
 	DIALOG_MP3RADIORESULTS,
 	DIALOG_MP3RADIOSEARCH,
 	DIALOG_USECOOKIES,
 	DIALOG_GCLOTHES,
	DIALOG_PSTASH,
	DIALOG_PSTASH2,
	DIALOG_PSTASH_DEPOSIT,
	DIALOG_PSTASH_WITHDRAW,
 	DIALOG_GANGSTASH,
 	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHWEAPONS2,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
 	DIALOG_GANGDEPOSIT,
 	DIALOG_GANGWITHDRAW,
 	DIALOG_GANGSKINS,
 	DIALOG_GANGFINDCAR,
 	DIALOG_GANGPOINTSHOP,
 	DIALOG_GANGARMSDEALER,
 	DIALOG_GANGARMSWEAPONS,
 	DIALOG_GANGARMSEDIT,
 	DIALOG_GANGARMSPRICES,
 	DIALOG_GANGARMSPRICE,
 	DIALOG_GANGARMSDEPOSITMATS,
	DIALOG_GANGARMSWITHDRAWMATS,
	DIALOG_GANGDRUGDEALER,
	DIALOG_GANGDRUGSHOP,
	DIALOG_GANGDRUGEDIT,
	DIALOG_GANGDRUGPRICES,
	DIALOG_GANGDRUGPRICE,
	DIALOG_GANGDRUGBUY,
	DIALOG_GANGDRUGDEPOSITS,
	DIALOG_GANGDRUGDEPOSIT,
	DIALOG_GANGDRUGWITHDRAWS,
	DIALOG_GANGDRUGWITHDRAW,
	DIALOG_REMOVEPVEH,
	DIALOG_FREENAMECHANGE,
    DIALOG_ADMINHELP,
    DIALOG_HELP,
 	DIALOG_BIZMENU,
	DIALOG_BIZNAME,
	DIALOG_BIZFEE,
	DIALOG_BIZSAFE,
	DIALOG_WITHDRAW,
	DIALOG_DEPOSIT,
	DIALOG_MESSAGE,
	DIALOG_BIZLOCK,
	DIALOG_POINTLIST,
	DIALOG_TURFLIST,
	DIALOG_NEWBWELCOME,
	DIALOG_PAYCHECK,
	DIALOG_RULES,
	DIALOG_PAINTBALL,
	DIALOG_LOCATE,
	DIALOG_LOCATE_JOB,
	DIALOG_LOCATE_BIZ,
	DIALOG_LOCATE_GEN,
	DIALOG_LOCATE_TURFS,
	DIALOG_LOCATE_POINTS,
	DIALOG_LOCATE_WASH,
	DIALOG_LOCATE_SIDEJOB,
	DIALOG_LOCATE_STATION,
	DIALOG_CREATEQUIZ,
	DIALOG_DGUN1,
	DIALOG_DGUN2,
	DIALOG_DGUN3,
	DIALOG_LGUN1,
	DIALOG_LGUN2,
	DIALOG_LGUN3,
	DIALOG_LGUN4,
	DIALOG_LGUN5,
	//phone
	PHONE_CALL,
	PHONE_SMS,
	PHONE_SMS2,
	PHONE_911,
	PHONE_9112,
	PHONE_PING,
	PHONE_PING2,
	PHONE_REPORT,
	PHONE_RDM,
	PHONE_CHAT,
	//Rent
	DIALOG_RENTAL,
	DIALOG_RENTTIME,
	//Extra
	DIALOG_TEXT
}

enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
	STASH_CAPACITY_WEAPONS
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_FACTION,
 	E_OBJECT_DONATOR,
	E_OBJECT_GANG,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z,
	E_OBJECT_ROBBING
};

enum
{
	E_OBJECT_FURNITURE,
	E_OBJECT_WEAPON
};

enum
{
	EDIT_FURNITURE_PREVIEW = 1,
	EDIT_OBJECT_PREVIEW,
	EDIT_FURNITURE,
	EDIT_CLOTHING_PREVIEW,
	EDIT_CLOTHING,
	EDIT_GATE_POS,
	EDIT_GATE_MOVE
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE,
	DEPLOY_SPEEDBREAK
};

enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_AGENCY,
 	BUSINESS_BARCLUB
};

enum
{
 	LOADTYPE_STORE,
 	LOADTYPE_GUNSHOP,
 	LOADTYPE_CLOTHES,
 	LOADTYPE_GYM,
 	LOADTYPE_RESTAURANT,
 	LOADTYPE_AGENCY,
 	LOADTYPE_BARCLUB,
	LOADTYPE_ILLEGAL
}

enum
{
	ILLEGAL_DRUGS
};

enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_HITMAN,
	FACTION_FEDERAL,
	FACTION_ARMY
};

enum
{
	RESTAURANT_NONE,
	RESTAURANT_FASTFOOD,
	RESTAURANT_PIZZA,
	RESTAURANT_BURGER
};



enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_YFOOD,
	CHECKPOINT_TEST,
	CHECKPOINT_MINING,
	CHECKPOINT_MEATPACKAGER,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_ROBBERYBIZ,
	CHECKPOINT_ROBBERYHOUSE,
	CHECKPOINT_MISC,
	CHECKPOINT_MAFIA,
	CHECKPOINT_CARJACK,
	CHECKPOINT_LOADTRUCK,
	CHECKPOINT_TRUCKER,
	CHECKPOINT_BUS
};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH,
	ITEM_BACKPACK,
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
};

enum
{
	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
	POINT_MATPICKUP1,
	POINT_MATPICKUP2,
	POINT_MATFACTORY1,
	POINT_MATFACTORY2,
	POINT_MATFACTORY3
};

enum
{
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_SPAS12,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_M4,
	GANGWEAPON_RIFLE,
	GANGWEAPON_SNIPER,
	GANGWEAPON_RPG
};

enum
{
	ZONETYPE_TURF = 1,
	ZONETYPE_SAFE
};

new HOSPITAL_ALLSAINTS = 1;


//ShowID
new PlayerText:Card[MAX_PLAYERS][17];
//Duyze
new PlayerText:ModernPlayerText[MAX_PLAYERS][2];
//LoginTD
new PlayerText:PublicTD2[MAX_PLAYERS];
//HungerTD
new PlayerText:HungerTD[MAX_PLAYERS];
//BankTD
new PlayerText:BankTD[MAX_PLAYERS][16];

new Text: Ad_TD[1];

enum pEnum
{
	PlayerText:pText[6],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pSerial[41],
	pID,
	
	#if defined DISCORD
		pDiscord[DCC_ID_SIZE],
	#endif
	
	pLogged, 
	pKicked,
	pLoginTries,
	pSetup,
	pGender,
	pAge,
	pSkin,
	pPackageTime,
	pPackagingMeat,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pCash,
	pConnectTime,
	pRegDate[20],
	pInsideRental,
	pBank,
	pLevel,
	pAdvertWarnings,
	pEXP,
	pMinutes,
	pHours,
	pAdmin,
	pDyuze,
	pDyuzeTimer,
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditGate,
	pEditmObject,
	pEditPhone,
	pAdminName[MAX_PLAYER_NAME],
	pHelper,
	Float:pHealth,
	Float:pArmor,
	pUpgradePoints,
	pWarnings,
	pComserv,
	pComservSkin,
	pInjured,
	bool:pSurgery,
	bool:pOnSurgery,
	pSurgeryTimer,
	pLastCallSurg,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pProductChoose,
	pRobbingBiz,
	pRobbingAtm,
	pRobbingTimer,
	pRobbingCP,
	pAccent[256],
	pDirtyCash,
	pPhone,
	pNumber,
	pJob,
	pSecondJob,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pPot,
	pCrack,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pCigars,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pTruckerSkill,
	pFishingSkill,
	pWeaponSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDetectiveSkill,
	pToggleTextdraws,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pToggleWT,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleChat,
	pToggleHUD,
	pCarLicense,
	pWeaponLicense,
	pDonator,
	pVIPTime,
	pVIPCooldown,
	pWeapons[13],
	pTempWeapons[13],
	pRPGAmmo,
	pFaction,
	pFactionRank,
	pGang,
	pGangRank,
	pDivision,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pContractReason[256],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pNewbies,
	pHelpRequests,
	pSpeedometer,
	pMafia,
	pFactionMod,
	pGangMod,
	pBanAppealer,
	pAP,
	pHM,
	pMapper,
	pPotPlanted,
	pPotTime,
	pPotGrams,
	Float:pPotX,
	Float:pPotY,
	Float:pPotZ,
	Float:pPotA,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pLaborUpgrade,
	pDMWarnings,
	pWeaponRestricted,
	pReferralUID,
	pWatch,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[256],
	pClothes,
	pShowSafeZones,
	pShowTurfs,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pYFoodCooldown,
	pDeathCooldown,
	pDetectiveCooldown,
	pCarJackCooldown,
	pGasCan,
 	pRope,
 	pTotalPatients,
	pTotalFires,
 	pBlindfold,
	pBombTimer,
	pLastRob,
	pRobStep,
	pLastReport,
	pLastNewbie,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastBreak,
	pLastChat,
	pLastRefuel,
	pLastRam,
	pLastDrug,
	pLastHeal,
	pLastDefend,
	pLastSell,
	pLastEnter,
	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastYFood,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastClean,
	pSpectating,
  	pAdminDuty,
  	pActiveReport,
	pHospitalTime,
	pListen,
	pPMListen,
	pJoinedEvent,
	pPaintball,
	pPaintballTeam,
	pDueling,
	pEventTeam,
	pAwaitingClothing,
	pTutorial,
	pTutorialTimer,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pCarOffer,
	pCarOffered,
	pCarPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pFriskOffer,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pSellOffer,
	pAllianceOffer,
	pSellType,
	pSellExtra,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pDiceBet,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pFurnitureIndex,
	pFurnitureHouse,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pSelected2,
	pFactionEdit,
	pPrice,
	pFurniturePerms,
	pYFoods,
	pYFoodTime,
	pLoadingFood,
	pFoodLoaded,
	pFoodLoadVeh,
	Float:pDistance,
	pCP,
	pShipment,
	pIllegalCargo,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pMiningTime,
	pMiningRock,
	pVIPColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pMask,
	pSpeedTime,
	pBackup,
	pTazer,
	pTazedTime,
	pCuffed,
	pRes,
	pTied,
	pDraggedBy,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced,
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX,
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	Float:plX,
	Float:plY,
	Float:plZ,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation,
	pTurfType,
	pTurfName[32],
	pMenuType,
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pVehicleKeys,
	pCurrentWeapon,
	pCurrentAmmo,
 	pCurrentVehicle,
	pCurrentShamal,
	pCurrentBus,
	bool:pWatchingWindow,
	pCurrVoice,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pACAmmo,
 	pArmorTime,
 	pPotObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro,
	pHunger,
	pHungerTimer,
	pThirst,
	pThirstTimer,
 	pSmuggleTime,
 	pDealerGang,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pMechanicCall,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
	pHurt,
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pRemoveFrom,
 	pToggleWhisper,
 	pBL,
	pBackpack,
	bpWearing,
	bpCash,
	bpMaterials,
	bpPot,
	bpCrack,
	bpMeth,
	bpPainkillers,
	bpWeapons[15],
	pAcceptedEMS,
	pDiamonds,
    pFormerAdmin,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pRareTime,
	pVipTimes,
	pEngine,
	pChatAnim,
	pToolkit,
	pRobPhone,
	pRobWatch,
	pRepairkit,
	pRobbingHouse,
	pFlashlight,
	pUsedFlashlight,
	pRingTimer,
	pLastSign,
	pBusCP,
	pPassCode[129],
	pAgeCode,
	pGenderCode,
	pReferCode,
	pTurfOfferedId,
	pTurfAmount,
	pTurfOffered,
	pFoods,
	pDrinks,
	pMedOfferedby,
	pMedOfferd,
	pMedPrice
};


enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext,
	bool:eFriendlyFire
};

enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5]
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum hEnum
{
	hExists,
	hID,
	hOwnerID,
	hOwner[MAX_PLAYER_NAME],
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hPot,
	hCrack,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hLabels,
	hPickup,
	hRobbing,
	hRobbed,
	Text3D:hText
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};
enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bOwner[MAX_PLAYER_NAME],
	bName[56],
	bMessage[128],
	bType,
	bPrice,
	bLocked,
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bPickup,
	bPrices[25],
	bRobbed,
	bRobbing,
	Text3D:bText,
	bTime
};

enum mpEnum
{
	mpExists,
	mpID,
	mpIcon,
	mpModel,
	Float:mpPosX,
	Float:mpPosY,
	Float:mpPosZ,
	mpInt,
	mpVW
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	ePickup,
	Text3D:eText,
	eColor
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex
};

enum _vehDat
{
	_vehModel,
	Float:_attPos
}

new attInfo[212][_vehDat] = 
{
	{400, 0.85},
	{401, 0.8},
	{402, 0.79},
	{403, 2.15},
	{404, -1.0},
	{405, 0.73},
	{406, -1.0},
	{407, -1.0},
	{408, -1.0},
	{409, 0.8},
	{410, 0.899999},
	{411, 0.699999},
	{412, 0.699999},
	{413, 1.149999},
	{414, 2.4},
	{415, 0.61},
	{416, -1.0},
	{417, -1.0},
	{418, 1.1},
	{419, 0.699999},
	{420, -1.0},
	{421, 0.699999},
	{422, -1.0},
	{423, -1.0},
	{424, -1.0},
	{425, -1.0},
	{426, 0.85},
	{427, -1.0},
	{428, 1.6},
	{429, -1.0},
	{430, -1.0},
	{431, -1.0},
	{432, -1.0},
	{433, -1.0},
	{434, 0.8},
	{435, -1.0},
	{436, 0.8},
	{437, -1.0},
	{438, -1.0},
	{439, -1.0},
	{440, 1.269999},
	{441, -1.0},
	{442, 0.92},
	{443, -1.0},
	{444, -1.0},
	{445, 0.86},
	{446, -1.0},
	{447, -1.0},
	{448, -1.0},
	{449, -1.0},
	{450, -1.0},
	{451, 0.569999},
	{452, -1.0},
	{453, -1.0},
	{454, -1.0},
	{455, -1.0},
	{456, -1.0},
	{457, -1.0},
	{458, 0.759999},
	{459, -1.0},
	{460, -1.0},
	{461, -1.0},
	{462, -1.0},
	{463, -1.0},
	{464, -1.0},
	{465, -1.0},
	{466, 0.86},
	{467, 0.86},
	{468, -1.0},
	{469, -1.0},
	{470, 1.1},
	{471, -1.0},
	{472, -1.0},
	{473, -1.0},
	{474, 0.839999},
	{475, 0.699999},
	{476, -1.0},
	{477, 0.699999},
	{478, -1.0},
	{479, 1.0},
	{480, -1.0},
	{481, -1.0},
	{482, 1.0},
	{483, 1.049999},
	{484, -1.0},
	{485, -1.0},
	{486, -1.0},
	{487, -1.0},
	{488, -1.0},
	{489, 1.1},
	{490, -1.0},
	{491, 0.699999},
	{492, 0.87},
	{493, -1.0},
	{494, 0.74},
	{495, 1.039999},
	{496, 0.839999},
	{497, -1.0},
	{498, -1.0},
	{499, -1.0},
	{500, 1.0},
	{501, -1.0},
	{502, -1.0},
	{503, -1.0},
	{504, 0.899999},
	{505, -1.0},
	{506, -1.0},
	{507, 0.81},
	{508, -1.0},
	{509, -1.0},
	{510, -1.0},
	{511, -1.0},
	{512, -1.0},
	{513, -1.0},
	{514, 1.549999},
	{515, 1.47},
	{516, 0.86},
	{517, 0.86},
	{518, 0.699999},
	{519, -1.0},
	{520, -1.0},
	{521, -1.0},
	{522, -1.0},
	{523, -1.0},
	{524, -1.0},
	{525, -1.0},
	{526, 0.68},
	{527, 0.85},
	{528, 1.1},
	{529, 0.92},
	{530, -1.0},
	{531, -1.0},
	{532, -1.0},
	{533, -1.0},
	{534, 0.649999},
	{535, -1.0},
	{536, -1.0},
	{537, -1.0},
	{538, -1.0},
	{539, -1.0},
	{540, 0.73},
	{541, 0.639999},
	{542, 0.85},
	{543, -1.0},
	{544, -1.0},
	{545, 0.769999},
	{546, 0.85},
	{547, 0.899999},
	{548, -1.0},
	{549, 0.709999},
	{550, 0.74},
	{551, 0.899999},
	{552, -1.0},
	{553, -1.0},
	{554, -1.0},
	{555, -1.0},
	{556, -1.0},
	{557, -1.0},
	{558, 0.87},
	{559, 0.759999},
	{560, 0.87},
	{561, 0.87},
	{562, 0.8},
	{563, -1.0},
	{564, -1.0},
	{565, 0.699999},
	{566, 0.85},
	{567, -1.0},
	{568, -1.0},
	{569, -1.0},
	{570, -1.0},
	{571, -1.0},
	{572, -1.0},
	{573, -1.0},
	{574, -1.0},
	{575, -1.0},
	{576, 0.899999},
	{577, -1.0},
	{578, -1.0},
	{579, 1.24},
	{580, 1.059999},
	{581, -1.0},
	{582, -1.0},
	{583, -1.0},
	{584, -1.0},
	{585, 1.0},
	{586, -1.0},
	{587, 0.73},
	{588, -1.0},
	{589, 1.1},
	{590, -1.0},
	{591, -1.0},
	{592, -1.0},
	{593, -1.0},
	{594, -1.0},
	{595, -1.0},
	{596, -1.0},
	{597, -1.0},
	{598, -1.0},
	{599, -1.0},
	{600, -1.0},
	{601, -1.0},
	{602, 0.709999},
	{603, 0.68},
	{604, -1.0},
	{605, -1.0},
	{606, -1.0},
	{607, -1.0},
	{608, -1.0},
	{609, -1.0},
	{610, -1.0},
	{611, -1.0}
};

enum _sirenInfo
{
	attachObject,
	bool:useAttach
}

new sirenInfo[MAX_VEHICLES][_sirenInfo];

enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vTickets,
	vLocked,
	vPlate[32],
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vMods[14],
	vCash,
	vMaterials,
	vPot,
	vCrack,
	vMeth,
	vPainkillers,
	vWeapons[5],
	vGang,
	vFactionType,
 	vDonator,
	vJob,
	vObjects[2],
	vImpounded,
	v_panels,
	v_tires,
	v_lights,
	v_doors,
	vMafia
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	Float:fLockerX,
	Float:fLockerY,
	Float:fLockerZ,
	fLockerInterior,
	fLockerWorld,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup,
	fsCash,
	fsMats,
	fsPot,
	fsCrack,
	fsMeth,
	fsPainkiller
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum sEnum
{
	sExists,
	sID,
	Float:sMinX,
	Float:sMinY,
	Float:sMaxX,
	Float:sMaxY,
	Float:sHeight,
	Float:sX,
	Float:sY,
	Float:sZ,
	sGangZone,
	sArea
};

enum lEnum
{
	lExists,
	lID,
	lOwnerID,
	lOwner[MAX_PLAYER_NAME],
	lPrice,
	Float:lMinX,
	Float:lMinY,
	Float:lMaxX,
	Float:lMaxY,
	Float:lHeight,
	Float:lX,
	Float:lY,
	Float:lZ,
	lGangZone,
	lArea,
	lLabels,
 	Text3D:lText,
	lPickup
};

enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gPot,
	gCrack,
	gMeth,
	gPainkillers,
	gSkins[MAX_GANG_SKINS],
	gWeapons[14],
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugPot,
	gDrugCrack,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance,
	gMembers
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup,
	pCapturingUser[MAX_PLAYER_NAME],
	pCapturingGang
};

enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer
};

// ---------------------------------------

new MySQL: connectionID;
//new radioConnectionID;
new queryBuffer[1024];




new Text:AnimationTD;
new Text:TimeTD;
new Text:ANN[3];
new Text:UnknownTD[4];

// Capture Limit

new enabledpurge = 0;
new enabledOOC;
new enabledNewbie = 1;
new enabledVip = 1;
new enabledGlobal = 1;
new enabledAdmin = 1;
new enabledReports = 1;
new testVehicles[9];
new MafiaVeh[10];
new dealershipVeh[5];
new RandWeather = 30;
new gHour = 0, gWorldTime, gWeather = 1;
new gCharity, gCharityHealth, gCharityArmor;
new gCanRob = 0;
new gDoubleSalary;
new bool:gTogVault;
new gLastAd;
new gGMX;
new gLastSave;
new gAnticheat = 1;
new gParachutes[3];
new gSeedsStock = 500, gCrackStock = 500, gEphedrineStock = 500;
new Text3D:gSeedsStockText, Text3D:gCrackText , Text3D:gEphedrineStockText;
new gPrisonCells[24];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];

new EventInfo[eventEnum];
new RobberyInfo[robberyEnum];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new PlayerInfo[MAX_PLAYERS+1][pEnum];
new ReportInfo[MAX_REPORTS][rEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new MapIconInfo[MAX_MAPICONS][mpEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new SafeZone[MAX_ZONES][sEnum];
new GangInfo[MAX_GANGS][gaEnum];
new GangRanks[MAX_GANGS][6][32];
new PointInfo[MAX_POINTS][ptEnum];
new TurfInfo[MAX_TURFS][tEnum];

//BaseballBat
new bool:SpecialBat[MAX_PLAYERS];

//Revamped Voice System
new FactionVC[MAX_FACTIONS];
new GangVC[MAX_GANGS];

//New Turf System
new tFlag[MAX_TURFS][9];
new Text3D:tFlagText[MAX_TURFS];

//Ghostrider System
new bool:GhostRider[MAX_PLAYERS];
new OB_GhostRider[6];
new bool:VEH_GhostRider[MAX_VEHICLES];

new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new bool:vehicleEng[MAX_VEHICLES];
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
#define VEHICLE_RIGHT_BACK_WHEEL 0
#define VEHICLE_RIGHT_FRONT_WHEEL 1
#define VEHICLE_LEFT_BACK_WHEEL 2
#define VEHICLE_LEFT_FRONT_WHEEL 3
new VehicleTire[MAX_VEHICLES][4];
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];
new JobSkin[MAX_PLAYERS];
new AdminSkin[MAX_PLAYERS];
new ChoosingNum[MAX_PLAYERS];

// Hitman Poison Vars
new bool:pGloves[MAX_PLAYERS];
new PoisonTimer[MAX_PLAYERS];
new PoisonMsg[MAX_PLAYERS];
new Poisonedby[MAX_PLAYERS];

// Hitman Headshot Vars
new bool:HeadShotSystem[MAX_PLAYERS];

// Hitman Poison Dart Vars
new bool:PoisonDart[MAX_PLAYERS];

#include "./modules/fuel_timer.pwn"



#define MAX_MAFIA_TRUCKS 10
#define MAX_MAFIA_LOAD 50
#define MAX_MAFIA_WEP 6

//Mafia Trucks
new MafiaTruck[MAX_MAFIA_TRUCKS];
new TruckLoads[MAX_VEHICLES][MAX_MAFIA_WEP];
new TruckSpawned=0;
new bool:TruckMafia[MAX_VEHICLES];

new const Float:shipmentSpawns[][] =
{
	{1460.4010, 2845.3264, 10.8203, 180.6932},
	{1465.5264, 2844.9031, 10.8203, 180.6932},
	{1470.3252, 2844.9695, 10.8203, 180.6921},
	{1475.1240, 2845.0359, 10.8203, 180.6921},
	{1479.6229, 2845.0981, 10.8203, 180.6926},
	{1484.7217, 2845.1687, 10.8203, 180.6926},
	{1489.5205, 2845.2351, 10.8203, 180.6926},
	{1494.3193, 2845.3015, 10.8203, 180.6906},
	{1500.5909, 2825.5881, 10.8247,  92.5342},
	{1458.8453, 2823.1685, 10.8247, 269.1010}
};

new const Float:gangLoc[][] =
{
	{0.0,  0.0, 0.0},
	{756.1307,  -1237.0255, 13.5511}, //Slot 1
	{974.7896,  -668.0377,  121.1484}, //Slot 2
	{0.0,  0.0, 0.0},
	{1823.4069, -1551.2256, 13.5402}, //Slot 4
	{2505.4412, -1694.4369, 13.5583}, //Slot 5
	{1516.9307, -694.4552,  94.7500}, //Slot 6
	{185.7441,  -1330.9484, 70.0616}, //Slot 7
	{1751.6875, -2065.4438,  13.6133} //Slot 8
};

// ---------------------------------------


new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};

new const clothesShopSkins[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,  34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273,
	289, 290, 291, 292, 293, 295, 296, 297, 298, 299
};

enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{ // 1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
    {"Apartment",     600000,   1,  244.1997, 305.0676, 999.1484, 270.2194},
	{"Apartment", 	  600000,   2,  1434.0806, -1832.7854, 1313.5573, 270.0000},
	{"Apartment", 	  600000,   10, 2259.7649, -1135.8751, 1050.6328, 270.0000},
	{"Apartment", 	  600000,   8,  2008.8319, -1698.8461, 1165.7001, 90.0000},
	{"Apartment", 	  600000,  5,  2233.6501, -1114.7767, 1050.8828, 0.0000},
	{"Apartment", 	  600000,  1,  2217.9814, -1076.2471, 1050.4844, 90.0000}, //1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
	{"Low Class", 	  1200000,  9,  1178.3398, -419.0833, 1234.7045, 180.0000}, //7-9 Low Class
	{"Low Class", 	  1200000,  3,  828.6323, -1014.0038, 799.9664, 270.0000},
	{"Low Class", 	  1200000,  5,  1320.1091, -167.6174, 1088.0741, 90.0000},
	{"Medium Class",  999999999,  3,  1363.7614, -2145.6965, 1050.5886, 0.0000}, //10-12 Med Class
	{"Medium Class",  999999999,  5,  2654.4524, -1023.7827, 929.9266, 180.0000},
	{"Medium Class",  999999999,  11, 2184.1011, -1130.3905, 1128.7655, 270.0000},
	{"Upper Class",   999999999,  10, 2269.9143, -1210.5028, 1047.5625, 90.0000}, //13-16 Upper
	{"Upper Class",   999999999,  6,  1749.6356, -1822.4457, 1000.3405, 0.0000}, // 17-19
	{"Upper Class",   999999999,  12, 2324.3862, -1148.8784, 1050.7101, 0.0000}, // 20
	{"Upper Class",   999999999,  4,  1282.0646, -1140.2067, 980.0524, 0.0000},
	{"Mansion", 	  999999999,  1,  1834.2408, -1278.7684, 832.1602, 180.0000},
	{"Mansion", 	  999999999, 7,  925.0102, -496.8101, 843.8953, 90.0000},
	{"Mansion",       999999999, 5,  1298.8682, -796.2053, 1084.0078, 0.0000},
	{"Special Class", 999999999, 0, 0.0, 0.0, 0.0, 0.0}
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	800000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Large", 	2000000,  2,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriors[][bizInt] =
{
    {"24/7", 		  			3000000, 6, -27.4377, -57.6114, 1003.5469, 0.0000},
	{"Ammunation",    		    1000000, 6,  316.2873, -169.6470, 999.6010, 0.0000},
	{"Clothing Line",    	  	2000000, 14, 204.3860, -168.4586, 1000.5234, 0.0000},
	{"Gym",         		    1000000, 7,  773.7802, -78.2581, 1000.6619, 0.0000},
	{"Resturant",  		  		3000000, 10, 363.3276, -74.6505, 1001.5078, 315.0000},
	{"Advertisement Agency",  	4000000, 3,  834.1517, 7.4096, 1004.1870, 90.0000},
	{"Club/Bar",              	1000000, 11, 501.8694, -68.0046, 998.7578, 179.6117}
};

enum furnitureEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};

new const furnitureCategories[][] =
{
	{"Appliances"},
	{"Bathroom"},
	{"Bedroom"},
	{"Carpets"},
	{"Kitchen"},
	{"Tables"},
	{"Chairs"},
	{"Posters/Frames"},
	{"Storage"},
	{"Plants"},
	{"Trash"},
	{"Doors & Gates"},
	{"Walls"},
	{"Decor"},
	{"Weapons"}
};

new const furnitureArray[][furnitureEnum] =
{
	{"Appliances", 		"Blender", 					 19830,  1500},
	{"Appliances", 		"Coffee machine",            11743,  1500},
	{"Appliances", 		"Grill",     				 19831,  1500},
	{"Appliances", 		"Electrical outlet", 		 19813,  150},
	{"Appliances", 		"Light switch",      		 19829,  150},
	{"Appliances", 		"Keyboard",          		 19808,  150},
	{"Appliances", 		"White telephone",   		 19807,  150},
	{"Appliances", 		"Black telephone",   		 11705,  150},
	{"Appliances", 		"Large LCD television",  	 19786,  11000},
    {"Appliances", 		"Small LCD television",  	 19787,  1750},
    {"Appliances", 		"Round gold TV", 			 2224,   11500},
    {"Appliances", 		"TV on wheels",  			 14532,  1250},
    {"Appliances", 		"Flat screen TV",        	 1792,   1400},
    {"Appliances",      "Wide screen TV",        	 1786,   1400},
    {"Appliances",      "Surveillance TV",       	 1749,   1400},
    {"Appliances",      "Regular TV",            	 1518,   1250},
    {"Appliances",      "Grey sided TV",         	 2322,   1200},
    {"Appliances",      "Wood sided TV",         	 1429,   1200},
    {"Appliances",      "Microwave",             	 2149,   1100},
    {"Appliances",      "Pizza rack",            	 2453,   150},
    {"Appliances",      "Wide sprunk fridge",  		 2452,   1100},
    {"Appliances",      "Small sprunk fridge",   	 2533,   150},
    {"Appliances",      "Duality game",        		 2779,   1500},
    {"Appliances",      "Bee Bee Gone game",   		 2778,   1500},
    {"Appliances",      "Space Monkeys game",    	 2681,   1500},
    {"Appliances",      "Sprunk machine",        	 1775,   11000},
    {"Appliances",      "Candy machine",         	 1776,   11000},
    {"Appliances",      "Water machine",         	 1808,   1100},
    {"Appliances",      "Radiator",              	 1738,   150},
    {"Appliances",      "Metal fridge",          	 1780,   1100},
    {"Appliances",      "Pizza cooker",         	 2426,   150},
    {"Appliances",      "Deep fryer",            	 2415,   1100},
    {"Appliances",      "Soda dispenser",        	 2427,   1100},
    {"Appliances",      "Aluminum stove",        	 2417,   1100},
    {"Appliances",      "Lamp",                  	 2105,   150},
    {"Appliances",      "Diagnostic machine",    	 19903,  14000},
    {"Appliances",      "VHS player",            	 1785,   1200},
    {"Appliances",      "Playstation console",   	 2028,   1500},
    {"Appliances",      "Retro gaming console",  	 1718,   1500},
    {"Appliances",      "Hi-Fi speaker",         	 1839,   1250},
    {"Appliances",      "Black subwoofer",       	 2232,   1250},
    {"Appliances",      "Subwoofer",             	 1840,   1250},
    {"Appliances",      "Small black speaker",   	 2229,   1250},
    {"Appliances",      "Speaker on a stand",    	 2233,   1100},
    {"Appliances",      "Speaker & stereo system",   2099,   1500},
	{"Appliances",      "Surveillance camera",   	 1886,   150},
	{"Appliances",      "Security camera",       	 1622,   150},
	{"Appliances",      "Exercise bike",         	 2630,   1500},
	{"Appliances",      "Treadmill",             	 2627,   1500},
	{"Appliances",      "Lift bench",            	 2629,   1250},
    {"Appliances",		"Pull up machine",       	 2628,   1500},
    {"Appliances", 		"White turntable",           1954,   1500},
    {"Appliances",      "Open laptop",               19893,  11000},
    {"Appliances",      "Closed laptop",             19894,  1500},
    {"Appliances",  	"Drum Kit",      			 19609,  11000},
    {"Appliances",  	"Microphone",          		 19610,  1500},
    {"Appliances",  	"Microphone Stand",    	 	 19611,  1250},
    {"Appliances",  	"Guitar amp 1",           	 19612,  1500},
    {"Appliances",  	"Guitar amp 2",         	 19613,  1500},
    {"Appliances",  	"Guitar amp 3",       		 19614,  1500},
    {"Appliances",  	"Guitar amp 4",       		 19615,  1500},
    {"Appliances",  	"Guitar amp 5",       		 19616,  1500},
    {"Bathroom",   		"Toilet",                	 2514,   1250},
    {"Bathroom",   		"Bathtub",               	 2519,   1500},
    {"Bathroom",   		"Toilet paper",          	 19873,  150},
    {"Bathroom",        "Towel rack",                11707,  1100},
    {"Bathroom",   		"Toilet with rug",       	 2528,   1500},
	{"Bathroom",   		"Toilet with rolls",     	 2525,   1500},
	{"Bathroom",   		"Sink top",              	 2515,   1100},
	{"Bathroom",   		"Dual sink top",         	 2150,   1200},
	{"Bathroom",   		"Wood sided bathtub",    	 2526,   1500},
	{"Bathroom",   		"Sprunk bathtub",        	 2097,   11000},
	{"Bathroom",  		"Shower curtains",       	 14481,  1100},
	{"Bathroom",   		"Metal shower cabin",    	 2520,   1500},
	{"Bathroom",   		"Glass shower cabin",    	 2517,   1500},
	{"Bathroom",   		"Shower with curtains",  	 2527,   1500},
	{"Bathroom",   		"Wall sink",             	 2518,   1250},
	{"Bathroom",   		"Plain sink",            	 2739,   1250},
	{"Bathroom",   		"Sink with extra soap",  	 2524,   1250},
	{"Bathroom",   		"Sink with rug",         	 2523,   1250},
	{"Bathroom",   		"Industrial sink",       	 11709,  1500},
	{"Bedroom",    		"Prison bed",            	 1800,   1100},
	{"Bedroom",   		"Folding bed",           	 1812,   1100},
	{"Bedroom",    		"Red double bed",        	 11720,  1500},
	{"Bedroom",    		"Wood double bed",       	 14866,  1500},
	{"Bedroom",   	 	"Double plaid bed",      	 1794,   1500},
	{"Bedroom",    		"Brown bed",        		 2299,   1500},
	{"Bedroom",    		"Blue striped bed", 		 2302,   1500},
	{"Bedroom",    		"Dark blue striped bed", 	 2298,   1500},
	{"Bedroom",    		"White striped bed",     	 2090,   1500},
	{"Bedroom",    		"Bed with cabinet",      	 2300,   1500},
	{"Bedroom",    		"Pink & blue striped bed", 	 2301,   1500},
	{"Bedroom",    		"Zebra print bed",       	 14446,  1500},
	{"Bedroom",    		"Low striped bed",  		 1795,   1500},
	{"Bedroom",    		"Low dark striped bed",      1798,   1500},
	{"Bedroom",    		"Single plaid bed",      	 1796,   1500},
	{"Bedroom",    		"Plain striped mattress",    1793,   1500},
	{"Bedroom",    		"Silk sheeted bed",          1701,   1500},
	{"Bedroom",    		"Framed striped bed",        1801,   1500},
	{"Bedroom",    		"Framed brown bed",          1802,   1500},
	{"Bedroom",    		"Wooden cabinet",            2330,   1250},
	{"Bedroom",    		"Cabinet with TV",           2296,   1500},
	{"Bedroom",    		"Dresser",               	 1416,   1250},
	{"Bedroom",    		"Small dresser",             2095,   1250},
	{"Bedroom",    		"Medium dresser",            1743,   1250},
	{"Bedroom",    		"Wide dresser",              2087,   1250},
	{"Bedroom",    		"Small wardrobe",            2307,   1250},
	{"Bedroom",    		"Huge open wardrobe",        14556,  1500},
	{"Bedroom",    		"Busted cabinet",            913,    1500},
	{"Bedroom",    		"Busted dresser",            911,    1250},
	{"Bedroom",    		"Dresser with no drawers",   912,    1100},
	{"Carpets",    		"Rockstar cARPet",           11737,  1250},
    {"Carpets",    		"Plain red cARPet",          2631,   1250},
    {"Carpets",    		"Plain green cARPet",        2632,   1250},
    {"Carpets",    		"Patterned cARPet",          2842,   1250},
    {"Carpets",    		"Zig-zag patterned cARPet",  2836,   1250},
    {"Carpets",    		"Brown red striped cARPet",  2847,   1250},
    {"Carpets",    		"Old timer's cARPet",        2833,   1250},
    {"Carpets",    		"Red checkered cARPet",      2818,   1250},
    {"Carpets",    		"Green circled cARPet",      2817,   1250},
    {"Carpets",    		"Plain polkadot cARPet",     2834,   1250},
    {"Carpets",    		"Tiger rug",                 1828,   11000},
    {"Carpets",    		"Plain round rug",           2835,   1250},
    {"Carpets",    		"Round green rug",           2841,   1250},
    {"Kitchen",    		"CJ's kitchen",              14384,  13000},
    {"Kitchen",    		"Whole kitchen",             14720,  13000},
    {"Kitchen",    		"White kitchen sink",        2132,   1500},
    {"Kitchen",    		"White kitchen counter",  	 2134,   1500},
    {"Kitchen",    		"White kitchen fridge",      2131,   1500},
    {"Kitchen",    		"White kitchen drawers",     2133,   1500},
    {"Kitchen",    		"White kitchen corner",      2341,   1500},
    {"Kitchen",    		"White kitchen cupboard",    2141,   1500},
    {"Kitchen",    		"Green kitchen sink",        2336,   1500},
    {"Kitchen",    		"Green kitchen counter",     2334,   1500},
    {"Kitchen",    		"Green kitchen fridge",      2147,   1500},
    {"Kitchen",    		"Green kitchen corner",      2338,   1500},
    {"Kitchen",    		"Green kitchen washer",      2337,   1500},
    {"Kitchen",    		"Green kitchen cupboard",    2158,   1500},
    {"Kitchen",    		"Green kitchen stove",       2170,   1500},
    {"Kitchen",    		"Red kitchen sink",          2130,   1500},
    {"Kitchen",    		"Red kitchen fridge",        2127,   1500},
    {"Kitchen",    		"Red kitchen cupboard",      2128,   1500},
    {"Kitchen",    		"Red kitchen corner",        2304,   1500},
    {"Kitchen",    		"Red kitchen counter",       2129,   1500},
    {"Kitchen",    		"Wood kitchen sink",         2136,   1500},
    {"Kitchen",    		"Wood kitchen counter",      2139,   1500},
    {"Kitchen",    		"Wood kitchen cupboard",     2140,   1500},
    {"Kitchen",    		"Wood kitchen washer",       2303,   1500},
    {"Kitchen",    		"Wood kitchen unit",         2138,   1500},
    {"Kitchen",    		"Wood kitchen corner",       2305,   1500},
    {"Kitchen",    		"Wood kitchen stove",        2135,   1500},
    {"Kitchen",    		"Modern stove",              19923,  11000},
    {"Kitchen",    		"Old timer's stove",         19915,  11000},
    {"Kitchen",    		"Fork",                      11715,  150},
    {"Kitchen",    		"Butter knife",              11716,  150},
    {"Kitchen",    		"Steak knife",               19583,  150},
    {"Kitchen",    		"Spatula",                   19586,  150},
    {"Kitchen",    		"Double handled pan",        19585,  1100},
    {"Kitchen",    		"Single handled pan",        19584,  1100},
    {"Kitchen",    		"Frying pan",                19581,  1100},
    {"Kitchen",    		"Tall striped saucepan",     11719,  1100},
    {"Kitchen",    		"Striped saucepan",          11718,  1100},
    {"Kitchen",    		"Cooked steak",              19882,  150},
    {"Kitchen",    		"Raw steak",                 19582,  150},
    {"Kitchen",    		"Green apple",               19576,  150},
    {"Kitchen",    		"Red apple",                 19575,  150},
    {"Kitchen",    		"Orange",                    19574,  150},
    {"Kitchen",    		"Banana",                    19578,  150},
    {"Kitchen",         "Tomato",                    19577,  150},
    {"Tables",     		"Lab table",                 3383,   12000},
    {"Tables",     		"Pool table",                2964,   12000},
    {"Tables",     		"Blackjack table",           2188,   12000},
    {"Tables",     		"Betting table",             1824,   12000},
    {"Tables",     		"Roulette table",            1896,   12000},
    {"Tables",     		"Poker table",               19474,  11000},
    {"Tables",     		"Burger shot table",         2644,   1500},
    {"Tables",     		"Cluckin' bell table",       2763,   1500},
    {"Tables",     		"Wide cluckin' bell table",  2762,   1500},
    {"Tables",     		"Square coffee table",       2370,   1500},
    {"Tables",     		"Donut shop table",          2747,   1500},
    {"Tables",     		"Pizza table",               2764,   1500},
    {"Tables",     		"Wide coffee table",         2319,   1500},
    {"Tables",     		"Rectangular green table",   11691,  1500},
    {"Tables",     		"Squared green table",       11690,  1500},
    {"Tables",     		"Round glass table",         1827,   1500},
    {"Tables",     		"Round wooden table",        2111,   1500},
    {"Tables",     		"Wide dining table",         2357,   1500},
    {"Tables",     		"Plain wooden table",        2115,   1500},
    {"Tables",     		"Plain brown wooden table",  1516,   1500},
    {"Tables",     		"White polkadot table",      1770,   1500},
    {"Tables",     		"Brown dining table",        1737,   1500},
    {"Tables",     		"Round stone table",         2030,   1500},
    {"Tables",     		"Wooden table with rim",     2699,   1500},
    {"Tables",     		"Low coffee table",          1814,   1500},
    {"Tables",     		"Low brown wooden table",    1433,   1500},
    {"Tables",     		"Bedroom table",             2333,   1500},
    {"Tables",     		"Round table with chairs",   1432,   1500},
    {"Tables",     		"Table with benches",        1281,   1500},
    {"Tables",     		"Checkered table & chairs",  1594,   1500},
    {"Tables",     		"Wooden workshop table",     19922,  1500},
    {"Tables",     		"Hexagon shaped table",      2725,   1500},
    {"Tables",     		"Table with VCR",            2313,   1500},
    {"Tables",     		"Low wooden TV stand",       2314,   1500},
    {"Tables",     		"Low brown TV stand",        2315,   1500},
    {"Tables",     		"Plain brown office desk",   2206,   1500},
    {"Tables",     		"Office desk with computer", 2181,   11000},
    {"Tables",     		"Plain wooden office desk",  2185,   11000},
    {"Tables",     		"Computer desk",             2008,   11000},
    {"Chairs",     		"Blue swivel chair",         2356,   1250},
    {"Chairs",     		"Brown dining chair",        1811,   1250},
    {"Chairs",     		"Red folding chair",         2121,   1250},
    {"Chairs",    		"Upholstered chair",         2748,   11000},
    {"Chairs",     		"Folding office chair",      1721,   1250},
    {"Chairs",     		"Round black chair",         2776,   1250},
    {"Chairs",     		"Black stool",               1716,   1250},
    {"Chairs",     		"Brown stool",               2350,   1250},
    {"Chairs",     		"Red stool",                 2125,   1250},
    {"Chairs",     		"Tall wooden dining chair",  2124,   1250},
    {"Chairs",     		"Tall brown dining chair",   1739,   1250},
    {"Chairs",     		"Checkered dining chair",    2807,   1250},
    {"Chairs",     		"Plain office chair",        1671,   1250},
    {"Chairs",     		"Brown folding chair",       19996,  1250},
    {"Chairs",     		"Light brown chair",         19994,  1250},
    {"Chairs",     		"Black lounge chair",        1704,   1500},
    {"Chairs",     		"Beige lounge chair",        1705,   1500},
    {"Chairs",     		"Dark blue reclining chair", 1708,   1500},
    {"Chairs",     		"Brown corner chair",  		 11682,  1500},
    {"Chairs",     		"Old timer's lounge chair",  1711,   1500},
    {"Chairs",     		"Old timer's rocking chair", 1735,   1500},
    {"Chairs",     		"Two chairs and a table",    2571,   1500},
    {"Chairs",     		"Dark brown foot stool",     2293,   1500},
    {"Chairs",     		"Rocking chair",             11734,  1250},
    {"Chairs",     		"Plaid sofa",                1764,   1750},
    {"Chairs",     		"Long black sofa",           1723,   1750},
    {"Chairs",     		"Beige sofa",                1702,   1750},
    {"Chairs",     		"Brown couch",               1757,   1750},
    {"Chairs",     		"Old timer's sofa",          1728,   1750},
    {"Chairs",     		"Brown corner couch piece",  2292,   1500},
    {"Chairs",     		"White & grey couch",        1761,   1750},
    {"Chairs",     		"Patterned couch",           1760,   1750},
    {"Chairs",     		"Plaid couch",               1764,   1750},
    {"Chairs",     		"Dark blue couch",           1768,   1750},
    {"Chairs",     		"Wide brown couch",          2290,   1750},
    {"Chairs",     		"Green couch",               1766,   1750},
    {"Chairs",     		"Patterned armrest couch",   1763,   1750},
    {"Chairs",     		"Red couch",                 11717,  1750},
    {"Chairs",     		"Very wide beige couch",     1710,   11500},
    {"Chairs",     		"Ultra wide beige couch",    1709,   12000},
    {"Chairs",     		"Red and white couch",       1707,   1750},
    {"Posters/Frames",  "Burger shot poster",        2641,   150},
    {"Posters/Frames",  "Cluckin' bell poster",      2766,   150},
    {"Posters/Frames",  "Wash wands poster",         2685,   150},
    {"Posters/Frames",  "For lease poster",          11289,  150},
    {"Posters/Frames",  "Monkey juice poster",       19328,  150},
    {"Posters/Frames",  "Ring donuts poster",        2715,   150},
    {"Posters/Frames",  "Battered ring posterr",     2716,   150},
	{"Posters/Frames",  "Pizza poster",         	 2668,   150},
    {"Posters/Frames",  "T-Shirt poster",            2729,   150},
    {"Posters/Frames",  "Suburban poster",           2658,   150},
    {"Posters/Frames",  "Zip poster",                2736,   150},
    {"Posters/Frames",  "Binco poster",              2722,   150},
    {"Posters/Frames",  "99c binco poster",          2719,   150},
    {"Posters/Frames",  "Binco sale poster",         2721,   150},
    {"Posters/Frames",  "Heat poster",               2661,   150},
    {"Posters/Frames",  "Eris poster",               2655,   150},
    {"Posters/Frames",  "Bobo poster",               2662,   150},
    {"Posters/Frames",  "Base 5 poster",             2691,   150},
    {"Posters/Frames",  "Base 5 cutout #1",        	 2693,   150},
    {"Posters/Frames",  "Base 5 cutout #2",        	 2692,   150},
    {"Posters/Frames",  "Long base 5 poster #1",   	 2695,   150},
    {"Posters/Frames",  "Long base 5 poster #2",   	 2696, 	 150},
    {"Posters/Frames",  "White prolaps poster",   	 2697,   150},
    {"Posters/Frames",  "Black prolaps poster",   	 2656,   150},
    {"Posters/Frames",  "San Fierro frame",       	 19175,  1100},
    {"Posters/Frames",  "Flint County frame",     	 19174,  1100},
    {"Posters/Frames",  "Gant Bridge frame",      	 19173,  1100},
    {"Posters/Frames",  "San Fierro frame",       	 19172,  1100},
    {"Posters/Frames",  "City View frame",    		 2289,   1100},
    {"Posters/Frames",  "Los Angeles frame",      	 2258,   1100},
	{"Posters/Frames",  "Wooden frame",           	 2288,   1100},
	{"Posters/Frames",  "Sail Boat frame",        	 2287,   1100},
	{"Posters/Frames",  "Ship frame",             	 2286,   1100},
	{"Posters/Frames",  "Water frame",            	 2285,   1100},
	{"Posters/Frames",  "Church frame",           	 2284,   1100},
    {"Posters/Frames",  "Rural frame",        		 2282,   1100},
    {"Posters/Frames",  "Sunset frame",				 2281,   1100},
    {"Posters/Frames",  "Coast frame",        		 2280,   1100},
    {"Posters/Frames",  "Mount chiliad frame",    	 2279,   1100},
    {"Posters/Frames",  "Cargo ship frame",       	 2278,   1100},
    {"Posters/Frames",  "Cat frame",          		 2277,   1100},
    {"Posters/Frames",  "Bridge frame",          	 2276,   1100},
    {"Posters/Frames",  "Fruit Bowl frame",       	 2275,   1100},
    {"Posters/Frames",  "Flower frame",          	 2274,   1100},
    {"Posters/Frames",  "Bouquet frame",          	 2273,   1100},
    {"Posters/Frames",  "Landscape frame",        	 2272,   1100},
    {"Posters/Frames",  "Paper frame",         		 2271,   1100},
    {"Posters/Frames",  "Leaves frame",         	 2270,   1100},
    {"Posters/Frames",  "Lake frame",         		 2269,   1100},
    {"Posters/Frames",  "Black cat frame",        	 2268,   1100},
    {"Posters/Frames",  "Cruise ship frame",      	 2267,   1100},
    {"Posters/Frames",  "Night downtown frame",		 2266,   1100},
    {"Posters/Frames",  "Dseert rocks frame",     	 2265,   1100},
    {"Posters/Frames",  "Beach frame",         		 2264,   1100},
    {"Posters/Frames",  "Dock frame",         		 2263,   1100},
    {"Posters/Frames",  "Downtown frame",         	 2262,   1100},
    {"Posters/Frames",  "Golden gate frame",      	 2261,   1100},
    {"Posters/Frames",  "Old Boat frame",         	 2260,   1100},
    {"Posters/Frames",  "Bowling frame",          	 2259,   1100},
    {"Posters/Frames",  "Pattern frame",        	 2283,   1100},
    {"Posters/Frames",  "Squares frame",          	 2257,   1100},
    {"Posters/Frames",  "Palm trees frame",       	 2256,   1100},
    {"Posters/Frames",  "Erotic frame",         	 2255,   1100},
    {"Posters/Frames",  "Yellow car frame",       	 2254,   110},
    {"Storage",     	"Book shelf",                1742,   1500},
	{"Storage",     	"Wardrobe",         	     2307,   1400},
	{"Storage",     	"Wooden crate",            	 1217,   1150},
	{"Storage",     	"Metal crate",               964,    1150},
	{"Storage",     	"Wide office cabinet",       2200,   1150},
	{"Storage",    	 	"Yellow cabinet",         	 1730,   1150},
	{"Storage",     	"Open gym locker",        	 11730,  1250},
	{"Storage",     	"Closed gym locker",      	 11729,  1250},
	{"Storage",     	"Toolbox",          		 19921,  1500},
	{"Storage",     	"Chest",                     19918,  1100},
	{"Storage",     	"Dresser",                   2094,   1250},
	{"Storage",     	"Warehouse rack",         	 3761,   1150},
	{"Storage",     	"Barrel rack",           	 925,    1250},
	{"Storage",     	"Sex toy rack",          	 2581,   1250},
	{"Storage",     	"Sex magazine rack #1",      2578,   1250},
	{"Storage",     	"Sex magazine rack #2",      2579,   1250},
	{"Storage",     	"Rack with no shelves",      2509,   1250},
	{"Storage",     	"Rack with 3 shelves",       2482,   1250},
	{"Storage",     	"Rack with 4 shelves",       2475,   1250},
	{"Storage",     	"Small rack",			 	 2463,   1250},
	{"Storage",     	"Wide rack",              	 2462,   1250},
	{"Storage",     	"Dresser with drawers",      1743,   1250},
	{"Storage",     	"Wide dresser",              2087,   1250},
	{"Storage",     	"Tall dresser",              2088,   1250},
	{"Storage",     	"Brown dresser",             2089,   1250},
	{"Storage",     	"Single dresser",            2095,   1250},
	{"Storage",     	"White filing cabinet",   	 2197,   2150},
	{"Storage",     	"Green filing cabinet",   	 2610,   1250},
	{"Storage",     	"Dual filing cabinets",      2007,   1250},
	{"Storage",     	"Black shelf",          	 2078,   1250},
	{"Storage",     	"Brown shelf",               2204,   1250},
	{"Storage",     	"Tool shelf",                19899,  1250},
	{"Storage",    	 	"Tool cabinet",     		 19900,  1250},
	{"Storage",     	"Wall mounted shelf",        19940,  1250},
	{"Storage",     	"Clothes shelf",          	 2708,   1250},
	{"Storage",     	"Gun rack",         		 2046,   1250},
	{"Storage",     	"Shop shelf",             	 19640,  1250},
	{"Storage",     	"Blue office shelf",         2191,   1250},
	{"Storage",     	"Wooden office shelf",       2199,   1250},
	{"Storage",     	"Office book shelf",         2161,   1250},
	{"Storage",     	"Tall office cabinet",       2167,   1100},
	{"Storage",     	"Wide office cabinet",       2163,   1100},
	{"Plants",   		"Palm plant #1",          	 625,    1100},
    {"Plants",   		"Palm plant #2",          	 626,    1100},
    {"Plants",   		"Palm plant #3",          	 627,    1100},
    {"Plants",   		"Palm plant #4",          	 628,  	 1100},
    {"Plants",   		"Palm plant #5",          	 630,    1100},
    {"Plants",   		"Palm plant #6",          	 631,    1100},
    {"Plants",   		"Palm plant #7",          	 632,    1100},
    {"Plants",   		"Palm plant #8",         	 633,    1100},
    {"Plants",  		"Palm plant #9",         	 646,    1100},
    {"Plants",   		"Palm plant #10",            644,    1100},
    {"Plants",   		"Palm plant #11",         	 2001,   1100},
    {"Plants",   		"Palm plant #12",        	 2010,   1100},
    {"Plants",   		"Palm plant #13",        	 2011,   1150},
    {"Plants",   		"Potted plant #1",           948,    1150},
    {"Plants",   		"Potted plant #2",           949,    1150},
    {"Plants",   		"Potted plant #3",           950,  	 1150},
    {"Plants",   		"Potted plant #4",           2194,   1150},
    {"Plants",   		"Potted plant #5",           2195,   1150},
    {"Plants",   		"Potted plant #6",           2203,   1150},
    {"Plants",   		"Potted plant #7",           2240,   1150},
    {"Plants",   		"Potted plant #8",           2241,   1150},
    {"Plants",   		"Potted plant #9",           2242, 	 1150},
    {"Plants",   		"Potted plant #10",          2244, 	 1150},
    {"Plants",   		"Potted plant #11",          2245,   1150},
    {"Plants",   		"Potted plant #12",          2246,   1150},
    {"Plants",   		"Potted plant #13",          2248,   1150},
    {"Plants",   		"Potted plant #14",          2252,   1150},
    {"Plants",   		"Potted plant #15",          2253,   1150},
    {"Plants",   		"Potted plant #16",          2811,   1150},
    {"Plants",   		"Wide plant",      			 638,    1250},
    {"Plants",   		"Single bush plant",         1361,   1250},
    {"Plants",   		"Wide bush plant",           1360,   1250},
    {"Plants",  		"Bush plant and bench",      1364,   1500},
    {"Plants",   		"Window plant #1",           3802,   200},
    {"Plants",   		"Window plant #2",           3810,   1200},
    {"Trash",           "Wastebin",                  11706,  150},
    {"Trash",           "Blue trashcan on wheels",   1339,   1150},
	{"Trash",           "Blue trashcan",     		 1430,   150},
	{"Trash",           "Trashcan with holes",       1359,   150},
	{"Trash",           "Cluckin' bell trashcan", 	 2770,   150},
	{"Trash",           "Burger shot trashcan",   	 2420,   150},
	{"Trash",           "Round bagged trashcan",     1330,   150},
	{"Trash",           "Round white trashcan",      1329,   150},
	{"Trash",           "Metal trashcan",            1328, 	 150},
	{"Trash",           "Full dumpster",          	 1415,   510},
	{"Trash",           "Closed dumpster",           1227,   510},
	{"Trash",           "Bottle disposal unit",      1336,   510},
	{"Trash",           "Blue dumpster",             1334,   510},
	{"Trash",           "Red dumpster",              1333,   510},
	{"Trash",           "Hippo trashcan",            1371,   510},
	{"Trash",           "Poor trashcan",             1347,   510},
	{"Trash",           "Cement trashcan",           1300,   510},
	{"Trash",           "Trashcan filled with wood", 1442,   501},
	{"Trash",           "Two pallets & trash",       1450,   150},
	{"Trash",           "Single pallet",             1448,   150},
	{"Trash",           "Garbage bag",               1265,   150},
	{"Trash",           "Burger shot bag",           2663,   150},
	{"Trash",           "Pile of boxes",             1440,   150},
    {"Trash",     		"Cardboard box",             1221,   150},
    {"Trash",           "Open pizza box",            2860,   150},
    {"Trash",           "Takeaway trash",         	 2866,   150},
    {"Trash",           "Burger shot trash",      	 2840,   150},
	{"Trash",           "Dirty dishes #1",      	 2812,   150},
    {"Trash",           "Dirty dishes #2",   		 2822,   150},
    {"Trash",           "Dirty dishes #3",      	 2829,   150},
    {"Trash",           "Dirty dishes #4",      	 2830,   150},
    {"Trash",           "Dirty dishes #5",      	 2831,   150},
    {"Trash",           "Dirty dishes #6",      	 2832,   150},
    {"Trash",           "Clean dishes #1",   		 2862,   150},
    {"Trash",           "Clean dishes #2",   		 2863,   150},
    {"Trash",           "Clean dishes #3",   		 2864,   150},
    {"Trash",           "Clean dishes #4",   		 2865,   150},
    {"Trash",           "Assorted trash #1",         2672,   150},
    {"Trash",           "Assorted trash #2",         2677,   150},
    {"Trash",           "Assorted trash #3",         2675,   150},
    {"Trash",           "Assorted trash #4",         2676,   150},
    {"Trash",           "Assorted trash #5",         2674,   150},
    {"Trash",           "Assorted trash #6",         2673,   150},
    {"Trash",           "Assorted trash #7",         2670,   150},
    {"Doors & Gates",   "Door with bars",            2930,   1100},
    {"Doors & Gates",   "Petrol door",       		 2911,   1100},
    {"Doors & Gates",   "Flat door",          		 3061,   100},
    {"Doors & Gates",   "Wardrobe door",         	 1567,   1100},
    {"Doors & Gates",   "Green push door",        	 1492,   11100},
    {"Doors & Gates",   "Red windowed door",       	 1493,   100},
    {"Doors & Gates",   "Black wooden door",         1494,   11100},
    {"Doors & Gates",   "Brown windowed door",       3089,   1100},
    {"Doors & Gates",   "Wooden farm door",        	 1497,   1100},
    {"Doors & Gates",   "White wooden door",         1498,   1100},
    {"Doors & Gates",   "Warehouse door",       	 1499,   1100},
    {"Doors & Gates",   "Red door",        			 1504,   1100},
    {"Doors & Gates",   "Blue door",        		 1505,   1100},
    {"Doors & Gates",   "White door",        		 1506,   1100},
    {"Doors & Gates",   "Yellow door",        		 1507,   1100},
    {"Doors & Gates",   "Kitchen door",        		 1523,   1100},
    {"Doors & Gates",   "Motel door",        		 1535,   1100},
    {"Doors & Gates",   "Blue motel door",           2970,   1100},
    {"Doors & Gates",   "24/7 door",     			 1560,   1100},
    {"Doors & Gates",   "Barred door",          	 3061,   1100},
    {"Doors & Gates",   "Red motel door",            3029,   1100},
    {"Doors & Gates",   "Security door",       		 2949,   1100},
    {"Doors & Gates",   "Tall white door",           2948,   1100},
    {"Doors & Gates",   "Bank door",           		 2946,   1100},
    {"Doors & Gates",   "Ship door",     			 2944,   1100},
    {"Doors & Gates",   "Tower door",        		 977,    1100},
    {"Doors & Gates",   "Maintenance doors",         11714,  1100},
    {"Doors & Gates",   "Dual office door",          19176,  1100},
    {"Doors & Gates",   "Screen door #1",        	 1495,   1100},
    {"Doors & Gates",   "Screen door #2",        	 1500,   1100},
    {"Doors & Gates",   "Screen door #3",        	 1501,   1100},
    {"Doors & Gates",   "Shop door #1",        		 1532,   1100},
    {"Doors & Gates",   "Shop door #2",      		 1496,   1100},
    {"Doors & Gates",   "Shop door #3",        		 1533,   1100},
    {"Doors & Gates",   "Shop door #4",        		 1537,   1100},
    {"Doors & Gates",   "Shop door #5",        		 1538,   1100},
    {"Doors & Gates",   "Office door #1",          	 1566,   1100},
    {"Doors & Gates",   "Office door #2",         	 1569,   1100},
    {"Doors & Gates",   "Office door #3",        	 1536,   1100},
    {"Doors & Gates",   "Office door #4",        	 1557,   1100},
    {"Doors & Gates",   "Office door #5",        	 1556,   1100},
    {"Doors & Gates",   "Wooden push door #1",       1491,   1100},
    {"Doors & Gates",   "Wooden push door #2",       1502,   1100},
    {"Doors & Gates",   "Garage door #1",            8957,   1100},
    {"Doors & Gates",   "Garage door #2",            7891,   1100},
    {"Doors & Gates",   "Garage door #3",     	 	 3037,   1100},
    {"Doors & Gates",   "Garage door #4",            19861,  1100},
    {"Doors & Gates",   "Garage door #5",            19864,  1100},
    {"Doors & Gates",   "Plain metal bar gate",      19912,  11000},
    {"Doors & Gates",   "Tall metal bar gate",       971,    11000},
    {"Doors & Gates",   "Long metal bar gate",       975,    11000},
    {"Doors & Gates",   "San Fierro Airport gate",   980,    11000},
    {"Doors & Gates",   "Fenced gate",               985,    11000},
    {"Doors & Gates",   "No parking gate",           19870,  11000},
    {"Doors & Gates",   "Fenced gate on wheels",     988,    11000},
    {"Walls",           "wall001",                   19353,  1100},
    {"Walls",           "wall002",                   19354,  1100},
    {"Walls",           "wall003",                   19355,  1100},
    {"Walls",           "wall004",                   19356,  1100},
    {"Walls",           "wall005",                   19357,  1100},
    {"Walls",           "wall006",                   19358,  1100},
    {"Walls",           "wall007",                   19359,  1100},
    {"Walls",           "wall008",                   19360,  1100},
    {"Walls",           "wall009",                   19361,  1100},
    {"Walls",           "wall010",                   19362,  1100},
    {"Walls",           "wall011",                   19363,  1100},
    {"Walls",           "wall012",                   19364,  1100},
    {"Walls",           "wall013",                   19365,  1100},
    {"Walls",           "wall014",                   19366,  1100},
    {"Walls",           "wall015",                   19367,  1100},
    {"Walls",           "wall016",                   19368,  1100},
    {"Walls",           "wall017",                   19369,  1100},
    {"Walls",           "wall018",                   19370,  1100},
    {"Walls",           "wall019",                   19371,  1100},
    {"Walls",           "wall020",                   19372,  1100},
    {"Walls",           "wall021",                   19373,  1100},
    {"Walls",           "wall023",                   19375,  1100},
    {"Walls",           "wall024",                   19376,  1100},
    {"Walls",           "wall025",                   19377,  1100},
    {"Walls",           "wall026",                   19378,  1100},
    {"Walls",           "wall027",                   19379,  1100},
    {"Walls",           "wall028",                   19380,  1100},
    {"Walls",           "wall029",                   19381,  1100},
    {"Walls",           "wall031",                   19383,  1100},
    {"Walls",           "wall032",                   19384,  1100},
    {"Walls",           "wall033",                   19385,  1100},
    {"Walls",           "wall034",                   19386,  1100},
    {"Walls",           "wall035",                   19387,  1100},
    {"Walls",           "wall036",                   19388,  1100},
    {"Walls",           "wall037",                   19389,  1100},
    {"Walls",           "wall038",                   19390,  1100},
    {"Walls",           "wall039",                   19391,  1100},
    {"Walls",           "wall040",                   19392,  1100},
    {"Walls",           "wall041",                   19393,  1100},
    {"Walls",           "wall042",                   19394,  1100},
    {"Walls",           "wall043",                   19395,  1100},
    {"Walls",           "wall044",                   19396,  1100},
    {"Walls",           "wall045",                   19397,  1100},
    {"Walls",           "wall046",                   19398,  1100},
    {"Walls",           "wall047",                   19399,  1100},
    {"Walls",           "wall048",                   19400,  1100},
    {"Walls",           "wall049",                   19401,  1100},
    {"Walls",           "wall050",                   19402,  1100},
    {"Walls",           "wall051",                   19403,  1100},
    {"Walls",           "wall052",                   19404,  1100},
    {"Walls",           "wall053",                   19405,  1100},
    {"Walls",           "wall054",                   19406,  1100},
    {"Walls",           "wall055",                   19407,  1100},
    {"Walls",           "wall056",                   19408,  1100},
    {"Walls",           "wall057",                   19409,  1100},
    {"Walls",           "wall058",                   19410,  1100},
    {"Walls",           "wall059",                   19411,  1100},
    {"Walls",           "wall060",                   19412,  1100},
    {"Walls",           "wall061",                   19413,  1100},
    {"Walls",           "wall062",                   19414,  1100},
    {"Walls",           "wall063",                   19415,  1100},
    {"Walls",           "wall064",                   19416,  1100},
    {"Walls",           "wall065",                   19417,  1100},
    {"Walls",           "wall066",                   19426,  1100},
    {"Walls",           "wall067",                   19427,  1100},
    {"Walls",           "wall068",                   19428,  1100},
    {"Walls",           "wall069",                   19429,  1100},
    {"Walls",           "wall070",                   19430,  1100},
    {"Walls",           "wall071",                   19431,  1100},
    {"Walls",           "wall072",                   19432,  1100},
    {"Walls",           "wall073",                   19433,  1100},
    {"Walls",           "wall074",                   19434,  1100},
    {"Walls",           "wall075",                   19435,  1100},
    {"Walls",           "wall076",                   19436,  1100},
    {"Walls",           "wall077",                   19437,  1100},
    {"Walls",           "wall078",                   19438,  1100},
    {"Walls",           "wall079",                   19439,  1100},
    {"Walls",           "wall080",                   19440,  1100},
    {"Walls",           "wall081",                   19441,  1100},
    {"Walls",           "wall082",                   19442,  1100},
    {"Walls",           "wall083",                   19443,  1100},
    {"Walls",           "wall084",                   19444,  1100},
    {"Walls",           "wall085",                   19445,  1100},
    {"Walls",           "wall086",                   19446,  1100},
    {"Walls",           "wall087",                   19447,  1100},
    {"Walls",           "wall088",                   19448,  1100},
    {"Walls",           "wall089",                   19449,  1100},
    {"Walls",           "wall090",                   19450,  1100},
    {"Walls",           "wall091",                   19451,  1100},
    {"Walls",           "wall092",                   19452,  1100},
    {"Walls",           "wall093",                   19453,  1100},
    {"Walls",           "wall094",                   19454,  1100},
    {"Walls",           "wall095",                   19455,  1100},
    {"Walls",           "wall096",                   19456,  1100},
    {"Walls",           "wall097",                   19457,  1100},
    {"Walls",           "wall098",                   19458,  1100},
    {"Walls",           "wall099",                   19459,  1100},
    {"Walls",           "wall100",                   19460,  1100},
    {"Walls",           "wall101",                   19461,  1100},
    {"Walls",           "wall102",                   19462,  1100},
    {"Walls",           "wall103",                   19463,  1100},
    {"Walls",           "wall104",                   19464,  1100},
    {"Walls",           "wall105",                   19465,  1100},
 	{"Decor",           "Dance floor",               19128,  11000},
    {"Decor",           "Tool board",                19815,  150},
    {"Decor",           "Mailbox",                   19867,  150},
    {"Decor",           "Single key",                11746,  150},
    {"Decor",           "Oxygen cylinder",           19816,  150},
    {"Decor",           "Cauldron",                  19527,  150},
    {"Decor",           "Valve",                     2983,   150},
    {"Decor",           "Writing board",             19805,  150},
    {"Decor",           "Punching bag",              1985,   150},
    {"Decor",           "Desk fan",           		 2192,   150},
    {"Decor",           "Satellite dish",            3031,   150},
    {"Decor",           "Shopping cart",             1349,   150},
    {"Decor",           "Fireplace logs",			 19632,  150},
    {"Decor",           "Telescope",                 2600,   150},
    {"Decor",           "Ladder",                    1428,   150},
    {"Decor",           "Plank",                     2937,   150},
    {"Decor",           "Blue curtains",             2558,   150},
    {"Decor",           "Old curtains",              14443,  150},
    {"Decor",           "Blinds",                    18084,  150},
    {"Decor",           "United states flag",        11245,  150},
    {"Decor",           "Double US flag",            2614,   150},
    {"Decor",           "Confederate flag",          2048,   150},
    {"Decor",           "Basketball court",          946,    150},
    {"Decor",           "Basketball",                2114,   150},
    {"Decor",           "Fire exit sign",            11710,  150},
    {"Decor",           "Fire extinguisher",         2690,   150},
    {"Decor",           "Fire extinguisher panel",   11713,  150},
    {"Decor",           "Fire alarm",                11713,  150},
    {"Decor",           "Fire hydrant",              1211,   150},
	{"Decor",           "Cocaine packet",            2891,   150},
    {"Decor",           "Drug bundle",         		 1279,   150},
    {"Decor",           "White package",           	 1575,   150},
    {"Decor",           "Orange package",          	 1576,   50},
    {"Decor",           "Yellow package",          	 1577, 	 50},
    {"Decor",           "Green package",           	 1578, 	 50},
    {"Decor",           "Blue package",            	 1579,   50},
    {"Decor",           "Red package",             	 1580,   50},
    {"Decor",           "Marijuana bundle",     	 2901,   50},
    {"Decor",           "Marijuana plant",           3409,   50},
    {"Decor",           "Ashtray",           		 1510, 	 50},
    {"Decor",           "Ashtray with cigar",        1665,   50},
    {"Decor",           "Pumpkin",                   19320,  50},
    {"Decor",           "Christmas tree",            19076,  50},
    {"Decor",           "Stage",         			 19608,  250},
    {"Decor",           "Gold record",          	 19617,  100},
    {"Decor",           "Moose head",        		 1736,   300},
    {"Decor",           "Cow",                       19833,  500},
    {"Decor",           "Rocking horse",             11733,  50},
    {"Decor",			"Deer",						 19315,  50},
    {"Decor",           "Boot",                      11735,  50},
    {"Decor",           "Old radiator",      		 1738,   50},
    {"Decor",           "Radiator",                  11721,  50},
    {"Decor",           "Round light",               11727,  50},
    {"Decor",           "Mop & pail",          		 1778,   50},
    {"Decor",           "Chambermaid",       		 1789,   50},
    {"Decor",           "Bucket",            		 2713,   50},
    {"Decor",           "Trolley",                   2994,   50},
    {"Decor",           "Body bags",        		 16444,  50},
    {"Decor",           "Beach ball",                1598, 	 50},
    {"Decor",           "Blackboard",        		 3077,   50},
    {"Decor",           "Dumbell",       			 3072,   50},
    {"Decor",           "Sports bag",                11745,  50},
    {"Decor",           "Portable toilet",           2984,   50},
    {"Decor",   		"Round burger shot sign", 	 2643,   50},
    {"Decor",           "Stretcher",          		 1997,   50},
    {"Decor",           "Hospital bed",              2146,   50},
    {"Decor",           "Work lamp",                 2196,   50},
    {"Decor",           "Fire bell",       			 1613,   50},
    {"Decor",           "Sword",                     19590,  50},
    {"Decor",           "Wooden bat",                19914,  50},
    {"Decor",           "Hand fan",                  19591,  50},
    {"Decor",           "Shop basket",               19592,  50},
    {"Decor",           "Safe door",                 19619,  50},
    {"Decor",           "Safe enclosure",            19618,  50},
    {"Decor",           "Bag of money",              1550,   50},
    {"Decor",           "Oil can",                   19621,  50},
    {"Decor",           "Wrench",                    19627,  50},
    {"Decor",           "Engine",                    19917,  50},
    {"Decor",           "Broom",                     19622,  50},
    {"Decor",           "Briefcase",                 19624,  50},
    {"Decor",           "Cigarette",                 19625,  50},
    {"Decor",           "Rolled joint",              3027,   50},
    {"Decor",           "Fire wood",                 19632,  50},
    {"Decor",           "Compacted trash",           19772,  50},
    {"Decor",           "Medic kit",                 11738,  50},
    {"Decor",           "Clip",                      19995,  50},
    {"Decor",           "Dippo lighter",             19998,  50},
    {"Decor",           "Briquettes",                19573,  50},
    {"Decor",           "Meat Sack",                 2805,   50},
    {"Decor",           "Small meat sack",           2803,   50},
    {"Decor",           "Stack of magazines",        2855,   50},
    {"Decor",           "Scattered magazines",       2852,   50},
    {"Decor",           "Scattered books",           2854,   50},
    {"Decor",           "Wooden stairs",             3361,   50},
    {"Decor",           "Long concrete stairs",      14410,  50},
    {"Decor",           "Short concrete stairs",     14416,  50},
    {"Decor",           "Short stairs",              14877,  50},
    {"Decor",           "Big window",      			 19325,  100},
    {"Decor",           "Small window",           	 19466,  50},
    {"Decor",           "Breakable window",       	 1649,   75},
    {"Decor",           "Red neon tube",             18647,  100},
    {"Decor",           "Blue neon tune",            18648,  100},
    {"Decor",           "Green neon tube",           18649,  100},
    {"Decor",           "Yellow neon tube",          18650,  100},
    {"Decor",           "Pink neon tube",            18651,  100},
    {"Decor",           "White neon tube",           18652,  100},
    {"Decor",           "Beer bottle",               1543,   10},
    {"Decor",           "Yellow beer bottle",        1544,   10},
    {"Decor",           "Medicine bottle",           1950,   10},
    {"Decor",           "Green beer bottle",         19818,  10},
    {"Decor",           "Whiskey bottle",            19823,  10},
    {"Decor",           "Wine bottle",               19820,  10},
    {"Decor",           "Red wine bottle",           19822,  10},
    {"Decor",           "Champagne bottle",          19824,  10},
    {"Decor",           "Beer",                      19821,  10},
    {"Decor",           "Target #1",           		 2056,   50},
    {"Decor",           "Target #2",           		 2055,   50},
    {"Decor",           "Target #3",           		 2051,   50},
    {"Decor",           "Target #4",           		 2050,   50},
    {"Decor",           "Target #5",           		 2049,   50},
    {"Decor",           "Clothes pile #1",     		 2819,   50},
    {"Decor",           "Clothes pile #2",      	 2843,   50},
    {"Decor",           "Clothes pile #3",      	 2844,   50},
    {"Decor",           "Clothes pile #4",      	 2845,   50},
    {"Decor",           "Clothes pile #5",      	 2846,   50},
    {"Decor",           "Dragon Head",          	 3528,   150},
    {"Decor",           "Fountain",             	 9833,   150},
    {"Decor",           "Light",                 	 1231,   150},
    {"Decor",           "Blue Light",             	19122,   150},
    {"Decor",           "Green Light",              19123,   150},
    {"Decor",           "Red Light",           	    19124,   150},
    {"Weapons",         "Knuckles",                 331,    1500},
    {"Weapons",         "Golf Club",                333,    1500},
    {"Weapons",         "Nitestick",                334,    1500},
    {"Weapons",         "Knife",                    335,    1500},
    {"Weapons",         "Baseball Bat",             336,    1500},
    {"Weapons",         "Shovel",                   337,    1500},
    {"Weapons",         "Pool Cue",                 338,    1500},
    {"Weapons",         "Katana",                   339,    1500},
    {"Weapons",         "Chainsaw",                 341,    1500},
    {"Weapons",         "Purple Dildo",             321,    1500},
    {"Weapons",         "Dildo",                    322,    1500},
    {"Weapons",         "Vibrator",                 323,    1500},
    {"Weapons",         "Silver Vibrator",          324,    1500},
    {"Weapons",         "Flowers",                  325,    1500},
    {"Weapons",         "Cane",                     326,    1500},
    {"Weapons",         "Grenade",                  342,    1500},
    {"Weapons",         "Tear Gas",                 343,    1500},
    {"Weapons",         "Molotov",                  344,    1500},
    {"Weapons",         "9mm",                      346,    1500},
    {"Weapons",         "SD Pistol",                347,    1500},
    {"Weapons",         "Deagle",                   348,    1500},
    {"Weapons",         "Shotgun",                  349,    1500},
    {"Weapons",         "Shawnoff",                 350,    1500},
    {"Weapons",         "Spas-12",                  351,    1500},
    {"Weapons",         "UZI",                      352,    1500},
    {"Weapons",         "MP5",                      353,    1500},
    {"Weapons",         "AK-47",                    355,    1500},
    {"Weapons",         "Tec-9",                    372,    1500},
    {"Weapons",         "Rifle",                    357,    1500},
    {"Weapons",         "Sniper",                   358,    1500},
    {"Weapons",         "RPG",                      359,    1500},
    {"Weapons",         "Rocket Launcher",          359,    1500},
    {"Weapons",         "Flamethrower",             361,    1500},
    {"Weapons",         "Minigun",                  362,    1500},
    {"Weapons",         "Spraycan",                 365,    1500},
    {"Weapons",         "Fire Extinguisher",        366,    1500},
    {"Weapons",         "Parachute",                371,    1500},
    {"Weapons",         "Camera",                   367,    1500}
};

enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA
};

enum
{
	JOB_NONE = -1,
	JOB_YFOOD,
	JOB_TRUCKER,
	JOB_TAXIDRIVER,
	JOB_BUS,
	JOB_CARGO,
	JOB_FISHERMAN,
	JOB_BODYGUARD,
	JOB_ARMSDEALER,
	JOB_MINER,
	JOB_MEATPACKAGER,
	JOB_DRUGDEALER,
	JOB_LAWYER,
	JOB_DETECTIVE,
	JOB_TRASHMASTER,
	JOB_SWEEPER
	
};

enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	jobSkin
};

new const jobLocations[][jobEnum] =
{
	{"Pizza Man",	 	372.7074, -118.8039, 1001.4922, 155},
	{"Trucker",     	2773.3611, -2500.4216, 13.6578, 261},
	{"Taxi Driver",     1752.6432, -1867.0131, 13.5707, 15},
	{"Bus Driver",		951.1879, -1742.1991, 13.5615, 1},
	{"Purity Delivery Service", 2493.6248, -2106.4834, 13.5469},
	{"Fisherman",   	-2972.4631, 484.2192, 4.9110, 14},
	{"Bodyguard",   	2227.2852, -1718.0883, 13.5152, 163},
	{"Arms Dealer",  	1881.5491, -1317.5194, 14.5004, 73},
	{"Miner",           -1987.1823, -1582.8440, 87.1345, 27},
	{"Meat Packager",   843.6680, -1626.6592, 13.5469, 168},
	{"Drug Dealer",     412.2065, -1728.7268, 9.2038, 28},
	{"Lawyer",          -2764.4419, 366.1842, 6.3360, 113},
	{"Detective",       -1623.5729, 718.0555, 14.6094, 71},
	{"Trashmaster",     1383.3407, -21.7605, 1000.8535, 50}
	
};

enum JobVehicle
{
	JobName[32],
	Float:jvPosX,
	Float:jvPosY,
	Float:jvPosZ,
	jvModel
};

new const jobsvehicle[][JobVehicle]=
{
	{"Pizza Man", 		2095.5588, -1796.9363, 13.3828, 448},
	{"Trucker",			2770.8027, -2506.4480, 13.6353, 414},
	{"Taxi Driver",		1759.0427, -1866.0350, 13.5719, 420},
	{"Bus Driver",		940.3368, -1694.1256, 13.5690, 431},
	{"Purity Deliver Service", 2498.4153, -2105.3032, 13.5469, 499}
};

//=======================JOB VEHICLE==================
new pizzatime = 0;
new pizzatimer[MAX_PLAYERS];
new PizzaPay[MAX_PLAYERS];
new JobVeh[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new const Float:PizzaVeh[][] =
{
	{2097.3848, -1791.6395, 12.9316, 90.0000},
	{2097.3848, -1792.9052, 12.9316, 90.0000},
	{2097.3848, -1794.1727, 12.9316, 90.0000},
	{2097.3848, -1795.4402, 12.9316, 90.0000},
	{2097.3848, -1796.7076, 12.9316, 90.0000},
	{2097.3848, -1797.9752, 12.9316, 90.0000},
	{2097.3848, -1799.2427, 12.9316, 90.0000},
	{2097.3848, -1800.5103, 12.9316, 90.0000}
};

new const Float:TruckerVeh[][] =
{
	{2736.9175, -2484.2610, 13.7487, 179.1364},
	{2759.2952, -2519.8132, 13.7349, 357.7559},
	{2768.0010, -2477.1609, 13.7423, 359.1113},
	{2748.1243, -2469.4021, 13.7421, 271.8884},
	{2746.4863, -2465.4539, 13.7422, 271.7086},
	{2753.4121, -2478.9451, 13.7421, 182.1379},
	{2737.2874, -2496.1211, 13.7580, 89.7860},
	{2721.9465, -2490.9385, 13.7485, 179.0986},
	{2774.3208, -2494.2283, 13.7605, 88.4549},
	{2750.5105, -2509.1018, 13.7422, 114.0453}
};
new const Float:TaxiVeh[][] =
{
	{1736.9255,-1857.4340,13.1217,87.4963},
	{1742.7471,-1857.6084,13.1209,88.7267},
	{1748.7461,-1857.5616,13.1213,89.5147},
	{1754.5947,-1857.7161,13.1208,88.8428},
	{1764.2449,-1864.7603,13.2798,6.5083},
	{1796.4294,-1862.7667,13.2833,268.9485},
	{1783.9695,-1850.7214,13.1998,88.9888}
};
new const Float:Bus[][] = 
{
	{947.4827, -1685.4159, 13.6135, 179.7657},
	{950.1547, -1684.3519, 13.6222, 180.7650}
};

new const Float:Cargo[][] =
{
	{2457.5676,-2079.2974,13.5398,180.7992},
	{2433.7178,-2107.4209,13.5414,270.1381},
	{2448.6479,-2077.2910,13.5385,178.4479},
	{2437.6553,-2079.3115,13.5394,178.2587},
	{2477.4568,-2079.7351,13.5396,181.6044},
	{2495.1135,-2076.6018,13.5399,269.3597},
	{2516.9705,-2093.1951,13.5398,90.7630}
};
//Pizzaaaa
ShowTimerTD(playerid)
{
	PlayerTextDrawShow(playerid, timer_td[playerid][0]);
	PlayerTextDrawShow(playerid, timer_td[playerid][1]);
	PlayerTextDrawShow(playerid, timer_td[playerid][2]);
	PlayerTextDrawShow(playerid, timer_td[playerid][3]);
}

HideTimerTD(playerid)
{
	PlayerTextDrawHide(playerid, timer_td[playerid][0]);
	PlayerTextDrawHide(playerid, timer_td[playerid][1]);
	PlayerTextDrawHide(playerid, timer_td[playerid][2]);
	PlayerTextDrawHide(playerid, timer_td[playerid][3]);
}

//Truckkkk
enum DepoEnum {
	dName[ 48 ],
	Type,
	dynamic_area,
	pickup,
	Float:dep_x,
	Float:dep_y,
	Float:dep_z,
	Float:dep_pickupx,
	Float:dep_pickupy,
	Float:dep_pickupz
}
//Trashmaster
#define     TRASH_BAG_VALUE     (150)    	// value of a collected trash bag (default: 125)
#define     REFILL_TIME         (350)   	// trash container refill time - in seconds (default: 300)
#define     ATTACHMENT_INDEX    (4)     	// for setplayerattachedobject (default: 4)
#define     TRASH_LIMIT         (15)    	// trashmaster capacity (default: 10)bh 

#define 	MAX_TRUCKING_SPOTS		11 
new TruckDepots[ MAX_TRUCKING_SPOTS ][ DepoEnum ] = {
	{ "Market Mall", 0, -1, -1, 1045.8033, -1549.6445, 13.5454, 1047.5555,-1541.2601,13.5547},
	{ "Montogomery", 0, -1, -1, 1239.3572, 181.2494, 19.8604, 1228.2817,182.7619,20.2474},
	{ "Octane Springs", 0, -1, -1, 578.6710, 1220.5863, 11.7113, 585.8778,1226.7640,11.7188},
	{ "Jefferson Warehouse", 0, -1, -1, 2149.0168, -1185.1830, 23.8203, 2141.5398, -1185.0944, 23.9922},
	{ "Fallen Tree Warehouse", 0, -1, -1, -543.7518, -547.3500, 25.5234, -535.7458,-541.6443,25.5234},
	{ "Angel Pine Warehouse", 0, -1, -1, -2000.1433, -2417.4087, 30.6250, -2003.9116,-2410.6179,30.6250},
	{ "San Fierro Shipping", 0, -1, -1, -1953.3076, 1334.4752, 7.1875, -1957.5630,1343.7958,7.1875},
	{ "Bayside Warehouse", 0, -1, -1, -2458.7986, 2292.7852, 4.9844, -2455.7778,2283.3772,4.9786},
	{ "Randolph Industrial Estate", 0, -1, -1, 1662.0819, 729.8788, 10.8203, 1675.3390,732.0153,10.8203},
	{ "Blueberry Warehouse", 0, -1, -1, 293.7807, -218.5725, 1.5781, 279.7838,-219.4135,1.5781},
	{ "Julius Thruway East", 0, -1, -1, 2867.4036, 2574.1096, 10.8203, 2859.4763,2572.5693,10.8203}

};

#define DELIVERY_AVAILABLE 0
#define DELIVERY_PENDING 1
#define DELIVERY_DONE 2

enum deliveryEnum {
	delivery_name[ 48 ],
	delivery_type,
	delivery_cash,
	delivery_weight,
	delivery_depot
}
#define 	MAX_DELIVERIES		20 
new Deliveries[ MAX_TRUCKING_SPOTS ][ MAX_DELIVERIES ][ deliveryEnum ];

new ChosenDepot[MAX_PLAYERS];
new PlayerDeliveryList[MAX_PLAYERS][MAX_DELIVERIES];

enum player_del_data {
	player_del_id,
	player_del_taken,
	player_del_vehicle,
	player_del_weight,
	player_del_to,
	player_del_from,
	player_del_marker
}
new PlayerDeliveries[MAX_PLAYERS][ MAX_DELIVERIES ][ player_del_data ];

new RandomDeliveryName[ 19 ][ 48 ] = {

	"Glassware",
	"Furniture",
	"Carpets",
	"Military Weaponary",
	"Nuclear Waste",
	"Appliances",
	"Workshop Items",
	"Farming Goods",
	"Food Items",
	"Cold Drinks",
	"Construction Material",
	"Toiletries",
	"Clothes",
	"Cement",
	"Metal Pipes",
	"Farm Animals",
	"Fossils",
	"Sugar and Wheat",
	"Steel Frames"
};

enum MechEnum {
	Float:MechX,
	Float:MechY,
	Float:MechZ
};

new const MechStation[][MechEnum] = {
	{1375.3829, -1745.8518, 13.7080},
	{1375.1467, -1751.6824, 13.7097},
	{1375.5006, -1757.7637, 13.7076}
};

enum FuelEnum {
	fid,
	fExists,
	Float:FuelX,
	Float:FuelY,
	Float:FuelZ,
	fprice,
	max_fuel,
	total_fuel,
	Float:Stash_X,
	Float:Stash_Y,
	Float:Stash_Z,
	fcash,
	flevel,
	Text3D:fText,
	fPickup
};
new FuelStationInfo[MAX_FUEL_STATIONS][FuelEnum];

enum pns 
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:Pos_X,
	Float:Pos_Y,
	Float:Pos_Z,
	Float:Pos_A,
	Float:PosX1,
	Float:PosY1,
	Float:PosZ1

}

new const Float:pns_label[][pns] =
{
	{2072.6567, -1831.4891, 13.5469, 2065.6052, -1831.8505, 13.0867, 90.9206, 2074.2058, -1831.1638, 13.1757},
	{488.6199, -1734.0464, 11.1772, 487.0652, -1741.0774, 10.6661, 168.4633, 488.9392, -1732.0375, 10.8840},
	{1024.8943, -1030.2682, 32.0624, 1024.7214, -1024.3871, 31.6417, 2.9842, 1024.8960, -1032.2974, 31.5181}
};

stock GetVehicleRepairPrice(vehicleid)
{
	new Float:h, price, health;
	GetVehicleHealth(vehicleid, h);
	health = floatround(h);
	price = (1000 - health) * 3;

	return price;
}

forward AfterSpray(playerid, index, price);
public AfterSpray(playerid, index, price)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	RepairVehicle(vehicleid);
	VehicleTire[vehicleid][0]=0;
	VehicleTire[vehicleid][1]=0;
	VehicleTire[vehicleid][2]=0;
	VehicleTire[vehicleid][3]=0;
	GivePlayerCash(playerid, -price);
	SM(playerid, COLOR_AQUA, "We fixed your vehicle for $%i only. Thanks for using Pay 'N' spray service", price);
	SetVehiclePos(vehicleid, pns_label[index][PosX1], pns_label[index][PosY1], pns_label[index][PosZ1]);
	TogglePlayerControllable(playerid,1);
	return 1;
}
enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},
    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};


new const Float:butcherPositions[][] =
{
    {956.806335, 2141.716796, 1011.018493},
	{960.798034, 2141.754394, 1011.020446}
};

new const Float:paintballSpawns[][] =
{
    //   X         Y        Z          R
	{605.8008, 916.3759, 6001.5869, 215.6556},
	{656.6979, 912.3976, 5998.7813, 146.2872},
	{660.9122, 883.8274, 6000.4976, 53.2365},
	{640.8688, 867.5626, 6000.5513, 153.6635},
	{675.4540, 857.0353, 5999.2197, 30.9968},
	{694.5205, 873.4476, 5998.1519, 86.9196},
	{665.2404, 875.7312, 6004.0835, 270.1501},
	{637.0836, 875.5860, 6003.9668, 89.5444},
	{635.5612, 837.6899, 6001.3208, 17.1863},
	{602.8322, 838.1549, 5999.1460, 309.0241},
	{635.9294, 875.5152, 6000.5000, 90.0088},
	{600.0383, 886.6245, 6004.8438, 253.7885}

};

new const Float:hospitalspawns[][] =
{
	{1250.7042,1699.1895,1061.1350,227.2921},
	{1258.7426,1699.3230,1061.1350,136.7795}
};

new const Float:bus_cps[][] =
{
	{919.8408, -1695.0680, 13.4692},
	{934.6290, -1491.9094, 13.4652},
	{1062.9465, -1449.6230, 13.4641},
	{1326.6080, -1407.4791, 13.4325},
	{1395.4945, -1431.2830, 13.4827},
	{1442.2295, -1507.9622, 13.4824},
	{1427.0621, -1693.0248, 13.4834},
	{1511.4802, -1734.7578, 13.4835},
	{1720.5658, -1734.3672, 13.4841},
	{1979.8843, -1753.9562, 13.4831},
	{2106.9131, -1713.0376, 13.4887},
	{2113.6646, -1534.3403, 24.1730},
	{2075.9443, -1379.4276, 23.9296},
	{2072.7878, -1163.7611, 23.7773},
	{1956.1355, -1042.5381, 24.1657},
	{1863.7609, -1147.7690, 23.8277},
	{1785.9722, -1170.2866, 23.7550},
	{1556.0052, -1158.8320, 24.0069},
	{1453.1354, -1159.2799, 23.7712},
	{1254.1343, -1141.5492, 23.7523},
	{1081.1322, -1139.3826, 23.7572},
	{941.0589, -1296.2251, 14.1792},
	{914.4598, -1690.7823, 13.4665},
	{944.7635, -1691.2836, 13.6703}
};

new const Float:drivingTestCPs[][] =
{
    {2045.0232, -2084.2908, 13.1991}, // 1
    {2033.7052, -2076.3362, 13.1956}, // 2
    {2026.7626, -2070.4031, 13.1963}, // 3
    {2026.9766, -2084.4634, 13.2048}, // 4
    {2021.2805, -2066.1960, 13.1987}, // 5
    {2011.9360, -2070.2915, 13.1993}, // 6
    {2008.3639, -2080.2124, 13.2006}, // 7
    {2008.2670, -2088.9253, 13.1968}, // 8
    {2008.3203, -2095.9060, 13.1999}, // 9
    {2000.7772, -2106.9290, 13.0124}, // 10
    {1975.4117, -2107.4231, 13.0237}, // 11
    {1964.7363, -2096.2795, 13.0396}, // 12
    {1964.6019, -2075.9111, 13.0359}, // 13
    {1964.4567, -2058.1160, 13.1194}, // 14
    {1964.0371, -2019.7123, 13.0367}, // 15
    {1963.4878, -1967.8868, 13.1581}, // 16
    {1963.2476, -1947.2777, 13.2558}, // 17
    {1980.1492, -1935.2999, 13.0383}, // 18
	{2019.7421, -1934.6768, 12.9831}, // 19
	{2072.4250, -1934.0610, 13.0478}, // 20
	{2083.7478, -1914.3685, 13.0345}, // 21
	{2084.3909, -1874.8220, 12.9878}, // 22
	{2084.6335, -1841.9336, 13.0351}, // 23
	{2084.6335, -1824.0977, 13.0359}, // 24
	{2055.4185, -1811.2987, 13.0350}, // 25
	{2012.8605, -1810.3138, 13.0351}, // 26
	{1983.1346, -1809.5353, 13.0379}, // 27
	{1971.6639, -1809.2338, 13.0350}, // 28
	{1959.4532, -1824.2045, 13.0341}, // 29
	{1958.8180, -1845.1096, 13.0351}, // 30
	{1959.1505, -1895.8854, 13.0368}, // 31
	{1959.3740, -1918.5677, 13.0351}, // 32
	{1959.6323, -1945.0608, 13.1545}, // 33
	{1958.9084, -1967.8129, 13.1635}, // 34
	{1959.1946, -2007.4017, 13.0437}, // 35
	{1958.7819, -2055.0891, 13.0381}, // 36
	{1958.4401, -2095.3604, 13.0437}, // 37
	{1976.3822, -2112.2896, 13.0233}, // 38
	{2008.5474, -2113.0276, 13.0386}, // 39
	{2046.9696, -2112.5012, 13.0342}, // 40
	{2067.5583, -2113.2546, 12.9784}, // 41
	{2077.1831, -2098.0742, 13.2005}  // 42
};

new const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

new const Float:arrestPoints[][] =
{
    {1567.7997,-1691.8090,5.8906, 0.0, 0.0},
	{60.2852,1065.6210,-50.9141, 0.0, 0.0}
};

new const Float:selfRepairPoints[][] =
{
	{1903.5763,-1789.2418,13.7349},
	{2129.1377,-1873.8595,13.6787},
	{2109.4817,-1873.6683,13.6787},
	{2113.7695,-1873.7136,13.6787},
	{2118.0269,-1873.8239,13.6787},
	{1360.3832,-1643.3362,13.4347},
	{1544.5037,-1614.4739,13.8247}
};

new const Float:comservpoint[][] =
{
    {-2432.6536, 680.5864, 35.1021},
    {-2415.9207, 646.1093, 34.5527},
    {-2483.2258, 611.1913, 26.2710},
    {-2498.7688, 664.1330, 30.9183},
    {-2447.8447, 667.4169, 34.7108}
};

new const factionTypes[][] =
{
	{"Civilian"},
	{"Law Enforcement"},
	{"Medical & Fire"},
	{"News Agency"},
	{"Government"},
	{"Hitman Agency"},
	{"Federal Police"},
	{"Army"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"},
	{"Speed Breaker"}
};

new const clothingTypes[][] =
{
	{"Glasses"},
	{"Bandanas & masks"},
	{"Hats & caps"},
	{"Misc clothing"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone
};

new const clothingArray[][clothingEnum] =
{
    {"Glasses",		        "Red tinted shades",        19006, 2},
    {"Glasses",		        "Brown tinted shades",      19007, 2},
    {"Glasses",		        "Green tinted shades",      19008, 2},
    {"Glasses",		        "Blue tinted shades",       19009, 2},
    {"Glasses",		        "Pink tinted shades",       19010, 2},
    {"Glasses",		        "Spiralled shades",         19011, 2},
    {"Glasses",		        "Black tinted shades",      19012, 2},
    {"Glasses",		        "Gag glasses",       	    19013, 2},
    {"Glasses",		        "Checkered shades",         19014, 2},
    {"Glasses",		        "Reading glasses",    	    19015, 2},
    {"Glasses",		        "X-Ray glasses",            19016, 2},
    {"Glasses",		        "Plastic black shades",     19017, 2},
    {"Glasses",		        "Plastic orange shades",    19018, 2},
    {"Glasses",		        "Plastic red shades",       19019, 2},
    {"Glasses",		        "Plastic blue shades",      19020, 2},
    {"Glasses",		        "Plastic green shades",     19021, 2},
    {"Glasses",		        "Clear sunglasses",         19022, 2},
    {"Glasses",		        "Blue sunglasses",          19023, 2},
    {"Glasses",		        "Purple sunglasses",        19024, 2},
    {"Glasses",		        "Pink sunglasses",          19025, 2},
    {"Glasses",		        "Red sunglasses",           19026, 2},
    {"Glasses",		        "Brown sunglasses",         19027, 2},
    {"Glasses",		        "Yellow sunglasses",        19028, 2},
    {"Glasses",		        "Green sunglasses",         19029, 2},
    {"Glasses",		        "Plain brown shades",       19030, 2},
    {"Glasses",		        "Plain yellow shades",      19031, 2},
    {"Glasses",		        "Plain red shades",         19032, 2},
    {"Glasses",		        "Plain black shades",       19033, 2},
    {"Glasses",		        "Checkered glasses",        19034, 2},
    {"Glasses",		        "Wavy glasses",             19035, 2},
    {"Bandanas & masks",	"Balaclava", 			    19801, 2},
    {"Bandanas & masks",	"Dark blue bandana", 	   	18891, 2},
    {"Bandanas & masks",	"Red bandana", 			   	18892, 2},
    {"Bandanas & masks",	"Red & white bandana", 	   	18893, 2},
    {"Bandanas & masks",	"Orange star bandana", 	   	18894, 2},
    {"Bandanas & masks",	"Skull bandana", 		   	18895, 2},
    {"Bandanas & masks",	"Black bandana", 		   	18896, 2},
    {"Bandanas & masks",	"Blue bandana", 		   	18897, 2},
    {"Bandanas & masks",	"Green bandana", 		   	18898, 2},
    {"Bandanas & masks",	"Pink bandana", 		   	18899, 2},
    {"Bandanas & masks",	"Hippie bandana", 		   	18900, 2},
    {"Bandanas & masks",	"Tiger bandana", 		   	18901, 2},
    {"Bandanas & masks",	"Yellow bandana",		   	18902, 2},
    {"Bandanas & masks",	"Purple bandana", 		   	18903, 2},
    {"Bandanas & masks",	"Cool blue bandana", 	   	18904, 2},
    {"Bandanas & masks",	"Brown bandana", 		   	18905, 2},
    {"Bandanas & masks",	"Skull bandana mask", 	   	18911, 2},
    {"Bandanas & masks",	"Black bandana mask", 	   	18912, 2},
    {"Bandanas & masks",	"Grove bandana mask", 	   	18913, 2},
    {"Bandanas & masks",	"Camo bandana mask", 	   	18914, 2},
    {"Bandanas & masks",	"Hippie bandana mask", 	   	18915, 2},
    {"Bandanas & masks",	"Yellow bandana mask", 	   	18916, 2},
    {"Bandanas & masks",	"Blue bandana mask", 	   	18917, 2},
    {"Bandanas & masks",	"Green bandana mask", 	   	18918, 2},
    {"Bandanas & masks",	"White bandana mask", 	   	18919, 2},
    {"Bandanas & masks",	"Flower bandana mask", 	   	18920, 2},
    {"Bandanas & masks",	"White hockey mask", 	    19036, 2},
	{"Bandanas & masks",	"Red hockey mask", 		    19037, 2},
	{"Bandanas & masks",	"Green hockey mask", 	    19038, 2},
	{"Bandanas & masks",	"Sexy mask", 			    19557, 2},
	{"Bandanas & masks",	"Devil mask", 			   	11704, 2},
	{"Bandanas & masks",	"Gas mask", 			    19472, 2},
	{"Bandanas & masks",	"Zorro mask", 			   	18974, 2},
	{"Bandanas & masks",	"Gimp mask", 			    19163, 2},
	{"Hats & caps",         "Santa hat",                19064, 2},
    {"Hats & caps",			"Dude hat", 			    19160, 2},
	{"Hats & caps",			"Top hat", 				    19352, 2},
    {"Hats & caps",			"Witch hat",                19528, 2},
    {"Hats & caps",			"Yellow fire hat", 		    19330, 2},
	{"Hats & caps",			"Black fire hat", 	  	    19331, 2},
	{"Hats & caps",			"Black beret", 			   	18921, 2},
    {"Hats & caps",			"Brown beret", 			   	18922, 2},
    {"Hats & caps",			"Blue beret", 			   	18923, 2},
    {"Hats & caps",			"Camo beret", 			   	18924, 2},
    {"Hats & caps",			"Red beret", 			   	18925, 2},
    {"Hats & caps",			"Camo cap", 			   	18926, 2},
    {"Hats & caps",			"Wave cap", 			   	18927, 2},
    {"Hats & caps",			"Hippy cap", 			   	18928, 2},
    {"Hats & caps",			"Green cap", 			   	18929, 2},
    {"Hats & caps",			"Red cap", 				   	18930, 2},
    {"Hats & caps",			"Blue cap", 			  	18931, 2},
    {"Hats & caps",			"Orange cap", 			   	18932, 2},
    {"Hats & caps",			"White cap", 			   	18933, 2},
    {"Hats & caps",			"Plain pink cap", 		   	18934, 2},
    {"Hats & caps",			"Plain yellow cap", 	   	18935, 2},
    {"Hats & caps",			"Blue back cap", 		   	18939, 2},
    {"Hats & caps",			"Wave back cap", 		   	18940, 2},
    {"Hats & caps",			"Black back cap", 		   	18941, 2},
    {"Hats & caps",			"White back cap", 		   	18942, 2},
    {"Hats & caps",			"Green back cap", 		   	18943, 2},
    {"Hats & caps",			"Red boater hat", 		   	18944, 2},
    {"Hats & caps",			"Green boater hat", 	   	18945, 2},
    {"Hats & caps",			"Striped boater hat", 	   	18946, 2},
    {"Hats & caps",			"Black bowler hat", 	   	18947, 2},
    {"Hats & caps",			"White bowler hat",		    19488, 2},
    {"Hats & caps",			"Blue bowler hat", 		   	18948, 2},
    {"Hats & caps",			"Green bowler hat", 	   	18949, 2},
    {"Hats & caps",			"Red bowler hat", 		   	18950, 2},
    {"Hats & caps",			"Yellow bowler hat", 	   	18951, 2},
    {"Hats & caps",			"Black knit cap", 		   	18953, 2},
    {"Hats & caps",			"White knit cap", 		   	18954, 2},
    {"Hats & caps",			"Hippie hat", 			   	18960, 2},
    {"Hats & caps",			"Born 2 truck hat", 	   	18961, 2},
    {"Hats & caps",			"Brown cowboy hat", 	    19098, 2},
	{"Hats & caps",			"Black cowboy hat",		    19096, 2},
    {"Hats & caps",			"Skully cap", 			   	18964, 2},
    {"Hats & caps",			"Black bucket hat", 	   	18967, 2},
    {"Hats & caps",			"Plaid bucket hat", 	   	18968, 2},
    {"Hats & caps",			"Zig-Zag bucket hat", 	   	18969, 2},
    {"Hats & caps",			"Camo bucket hat", 		    19106, 2},
    {"Hats & caps",			"Hippy hat", 			    19113, 2},
    {"Hats & caps",			"Don't shoot me hat", 	    19114, 2},
    {"Hats & caps",			"Skull hat", 			    19115, 2},
    {"Hats & caps",			"Tiger hat", 			   	18970, 2},
    {"Hats & caps",			"Hard hat", 			   	18638, 2},
	{"Hats & caps",			"Straw hat", 			    19553, 2},
	{"Hats & caps",			"Pizza hat", 			    19558, 2},
	{"Hats & caps",			"Beanie hat", 			    19554, 2},
    {"Hats & caps",			"Checkered fedora", 	   	18971, 2},
    {"Hats & caps",			"Orange fedora", 		   	18972, 2},
    {"Hats & caps",			"Yellow fedora", 		   	18973, 2},
    {"Hats & caps",			"Camoflauge helmet", 	    19101, 2},
    {"Hats & caps",			"Black helmet", 		    19116, 2},
    {"Hats & caps",			"Red helmet", 			    19117, 2},
    {"Hats & caps",			"Green helmet",	 		    19118, 2},
    {"Hats & caps",			"Blue helmet", 			    19119, 2},
    {"Hats & caps",			"Yellow helmet", 		    19120, 2},
    {"Hats & caps",			"Boxing helmet", 		   	18952, 2},
    {"Hats & caps",			"Motorcycle helmet",   	   	18645, 2},
    {"Misc clothing",	    "Gold watch",	 			19039, 6},
	{"Misc clothing",	    "Silver watch", 			19040, 6},
	{"Misc clothing",	    "Bronze watch", 			19041, 6},
	{"Misc clothing",	    "Yellow watch", 			19042, 6},
	{"Misc clothing",	    "White watch", 			 	19043, 6},
	{"Misc clothing",	    "Purple watch", 			19044, 6},
	{"Misc clothing",	    "Pink watch", 				19045, 6},
	{"Misc clothing",	    "Green watch", 			 	19046, 6},
	{"Misc clothing",	    "Blue watch", 				19047, 6},
	{"Misc clothing",	    "Camo watch", 				19053, 6},
	{"Misc clothing",	    "White headphones", 		19421, 2},
    {"Misc clothing",	    "Black headphones", 		19422, 2},
    {"Misc clothing",	    "Orange headphones", 		19423, 2},
    {"Misc clothing",	    "Blue headphones", 		 	19424, 2},
	{"Misc clothing",	    "Red clown hair", 			19274, 2},
    {"Misc clothing",	    "Grey clown hair", 		 	19518, 2},
    {"Misc clothing",	    "Black hair", 				19077, 2},
    {"Misc clothing",	    "Grey hair", 				19517, 2},
	{"Misc clothing",	    "Bass guitar", 			 	19317, 1},
	{"Misc clothing",	    "White guitar", 		 	19318, 1},
	{"Misc clothing",	    "Black guitar", 			19319, 1},
	{"Misc clothing",	    "Pilot hat", 				19520, 2},
	{"Misc clothing",       "Bag of money",             1550,  1},
	{"Misc clothing",	    "Shop basket", 			 	19592, 6},
	{"Misc clothing",	    "Oil can", 				 	19621, 6},
	{"Misc clothing",	    "Broom", 				 	19622, 1},
	{"Misc clothing",	    "Camera", 					19623, 6},
	{"Misc clothing",	    "Briefcase", 				19624, 6},
	{"Misc clothing",	    "Cigarette", 				19625, 2},
	{"Misc clothing",	    "Spade", 					19626, 1},
	{"Misc clothing",	    "Left boxing glove", 		19555, 5},
	{"Misc clothing",	    "Right boxing glove", 		19556, 6},
	{"Misc clothing",	    "Scarf", 					19469, 2},
	{"Misc clothing",	    "Eye patch", 				19085, 2},
	{"Misc clothing",	    "Hiker backpack", 			19559, 1},
	{"Misc clothing",	    "Construction vest", 		19904, 1},
	{"Misc clothing",	    "Police radio", 			19942, 1},
	{"Misc clothing",	    "Bodybag", 				 	19944, 1},
	{"Misc clothing",	    "Sports bag", 				11745, 1},
	{"Misc clothing",	    "Holster", 				 	19773, 8},
    {"Misc clothing",	    "Fedora", 					18639, 2},
    {"Misc clothing",	    "Afro", 					18640, 2},
    {"Misc clothing",	    "Moustache", 				19351, 2},
    {"Misc clothing",	    "Hair02", 				    18975, 2},
    {"Misc clothing",	    "Flashlight",          		18641, 6},
    {"Misc clothing",	    "Hammer",              		18635, 6},
    {"Misc clothing",	    "Wrench",              		18633, 2},
    {"Misc clothing",		"Gas Mask",					19472,	2},
	{"Misc clothing",		"FireHat1",					19330,	2},
	{"Misc clothing",		"FireHat2",					19331,	2},
	{"Misc clothing",		"SWATArmour1",				19142,	2},
	{"Misc clothing",		"Red Guitar",				19317,	2},
	{"Misc clothing",		"White Guitar",				19318,	2},
	{"Misc clothing",		"Black Guitar",				19319,	2},
	{"Misc clothing",		"TheParrot1",				19078,	2},
	{"Misc clothing",		"TheParrot2",				19079,	2},
    {"Misc clothing",       "Katana",         			3028,	2}

};

enum carEnum
{
	carCategory[16],
	carModel,
	cARPrice
};

new const vehicleArray[][carEnum] =
{
	{"Bikes",       	461, 200000}, // PCJ
	//{"Bikes",       	521, 400000}, // FCR
	//{"Bikes",       	463, 300000}, // Freeway
	{"Bikes",       	481, 10000}, // BMX
	{"Bikes",       	509, 8000}, // Bike
	//{"Bikes",       	581, 450000}, // BF-400
	{"Bikes",       	462, 180000}, // Faggio
	{"Bikes",       	510, 280000}, // Mountain Bike

	//{"Cars",       		560, /*Sultan*/ 720000},
	//{"Cars",       		477, /*Zr-350*/ 650000},
	//{"Cars",       		562, /*Elegy*/ 820000},
	//{"Cars",       		506, /*Super-GT*/ 480000},
	//{"Cars",       		480, /*Comet*/ 480000},
	{"Cars",       		400, /*Landstalker*/ 300000},
	//{"Cars",       		579, /*Huntley*/ 650000},
	//{"Cars",       		567, /*Savanna*/ 340000},
	//{"Cars",       		466, /*Glendale*/ 320000},
	{"Cars",       		575, /*Broadway*/ 350000},
	//{"Cars",       		559, /*Jester*/ 820000},
	//{"Cars", 			602, /*Alpha*/ 680000},
	{"Cars", 			517, /*Majestic*/ 680000},
//	{"Cars", 			578, /*DFT-30*/ 650000},
	{"Cars",       		565, /*Flash*/ 560000},
	{"Cars",       		412, /*Voodoo*/ 380000},
	//{"Cars",       		418, /*Moonbeam*/ 400000},
	{"Cars",       		475, /*Sabre*/ 400000},
	//{"Cars",       		536, /*Blade*/ 660000},
	//{"Cars",       		491, /*Virgo*/ 380000},
	{"Cars",       		492, /*Greenwood*/ 350000},
	{"Cars",       		496, /*Blista Compact*/ 400000},
	//{"Cars",       		489, /*Rancher*/ 560000},
	{"Cars",       		516, /*Nebula*/ 480000},
	//{"Cars",       		518, /*Buccaneer*/ 500000},
	{"Cars",       		527, /*Cadrona*/ 480000},
	//{"Cars",       		540, /*Vincent*/ 400000},
	//{"Cars",       		542, /*Clover*/ 380000},
	//{"Cars",       		549, /*Tampa*/ 360000},
	{"Cars",       		554, /*Yosemite*/ 500000},
	//{"Cars",       		558, /*Uranus*/ 680000},
	{"Cars",       		589, /*Club*/ 420000}
	//{"Cars",       		600, /*Picador*/ 200000}
};

UpdateGrotti_TD(playerid, index)
{
	new string[64];
	PlayerTextDrawSetPreviewModel(playerid, GROTTI_TD_PLAYER[playerid][0], CurrentVeh[playerid][index]);
	format(string, sizeof(string), "%s", vehicleNames[CurrentVeh[playerid][index] - 400]);
	PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][1], string);
	format(string, sizeof(string), "%i KM/H", CurrentVehSpeed[playerid][index]);
	PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][2], string);
	format(string, sizeof(string), "%i", CurrentVeh[playerid][index]);
	PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][3], string);
	format(string, sizeof(string), "%s", CurrentVehType[playerid][index]);
	PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][4], vehicleArray[index][carCategory]);
	format(string, sizeof(string), "%s", CurrentVehPrice[playerid][index]);
	PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][5], string);
	HideGROTTI_TD(playerid);
	ShowGROTTI_TD(playerid);
	return 1;
}

enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
    {"24/7 (Version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (Version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (Version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (Version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (Version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (Version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (Version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (Version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (Version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (Version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (Version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 2, 2543.4625, -1679.3883, 1015.7283, 90.00},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
	{"Las Venturas Warehouse", 0, 1059.895996, 2081.685791, 10.820312},
	{"Las Venturas Warehouse(Hidden)", 0, 1059.1801, 2148.9387, 10.820312},
    {"CXRP Special", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 4, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
	{"Well Stacked pizza", 5, 372.3019, -133.1221, 1001.4921, 0.0000},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839},
    {"Gang 1", 0, 2148.660400, -1168.468627, -11.906100},
    {"Gang 2", 0, 1533.297729, 105.979721, 2.932528}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (Version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (Version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (Version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (Version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (Version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (Version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (Version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (Version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (Version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (Version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (Version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 2, 2543.4625, -1679.3883, 1015.7283, 90.00},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
	{"Las Venturas Warehouse", 0, 1059.895996, 2081.685791, 10.820312},
	{"Las Venturas Warehouse(Hidden)", 0, 1059.1801, 2148.9387, 10.820312},
    {"CXRP Special", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 4, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
	{"Well Stacked pizza", 5, 372.3019, -133.1221, 1001.4921, 0.0000},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839},
    {"Gang 1", 0, 2148.660400, -1168.468627, -11.906100},
    {"Gang 2", 0, 1533.297729, 105.979721, 2.932528}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Classical", "Classical"},
    {"Classical", "Choral"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Western"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Electronic", "Electronic"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "House"},
    {"Electronic", "EDM"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Folk Rock"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabic"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
	{"International", "Bangali"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"Jazz", "Jazz"},
    {"Jazz", "Naga"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Vocal Jazz"},
    {"Metal", "Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Power Metal"},
    {"Misc", "Misc"},
    {"Pop", "Pop"},
    {"Pop", "Barbershop"},
    {"Pop", "Dance Pop"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Soft Rock"},
    {"R&B and Urban", "R&B and Urban"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Mixtapes"},
    {"Rock", "Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Hard Rock"},
    {"Rock", "JROCK"},
    {"Rock", "Rock & Roll"},
	{"Special", "CXRP Specials"},
	{"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "Comedy"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Political"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Chill"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};

new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Venturas Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Venturas Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"CXRP Special", -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Venturas",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

// ---------------------------------------
native WP_Hash(buffer[], len, const str[]);
// ---------------------------------------

// Variables //
main(){
	print("Modified by Nafiz Rohan");
}

#define STORE_247 1

//----------------------//

GetClosestSelfRepair(playerid)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

    for(new i = 0; i < sizeof(selfRepairPoints); i ++)
	{
		distance[1] = GetPlayerDistanceFromPoint(playerid, selfRepairPoints[i][0], selfRepairPoints[i][1], selfRepairPoints[i][2]);

		if(distance[0] > distance[1])
		{
		    distance[0] = distance[1];
		    index = i;
		}
	}
	return index;
}


GetClosestFuel(playerid)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
	{
		if((FuelStationInfo[i][fExists]))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, FuelStationInfo[i][FuelX], FuelStationInfo[i][FuelY], FuelStationInfo[i][FuelZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}
	return index;
}

IsInSelfRepair(playerid)
{
    for(new i = 0; i < sizeof(selfRepairPoints); i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, selfRepairPoints[i][0], selfRepairPoints[i][1], selfRepairPoints[i][2]))
		{
		    return true;
		}
	}
	return false;
}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}



LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Null Error - failed to locate properly - contact a developer.");
	    return 1;
	}
	if(!strcmp(params, "dmv", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2065.5879, -2080.6707, 13.5593, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of DMV.");
	}
	else if(!strcmp(params, "paintball", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1310.1492, -1366.7960, 13.5064, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of paintball.");
	}
	else if(!strcmp(params, "mall", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1130.1531, -1434.9547, 15.7969, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Market Mall.");
	}
	else if(!strcmp(params, "hospital", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540, -1323.4713, 14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Central Hospital.");
	}
	else if(!strcmp(params, "pdhq", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1544.4407, -1675.5522, 13.5584, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Police Department HQ.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 546.7000, -1281.5160, 17.2482, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Vehicle Dealership (PDM).");
	}
	else if(!strcmp(params, "redeem", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1640.6244,1203.0166,7.2384, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the boat EDM Voucher Redeem Agent.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1457.2012,-1010.2146,26.8438, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Central Bank.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1283.6522, -1160.7734, 23.9610, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Casino.");
	}
	else if(!strcmp(params, "cityhall", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1481.0729, -1772.0929, 18.7958, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the City Hall.");
	}
	else if(!strcmp(params, "lumberjack", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1991.550659, -2389.910644, 30.625000, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Lumberjack Sidejob.");
	}
	else if(!strcmp(params, "harvester", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -988.0164,-1638.0801,76.3884, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Harvester Sidejob.");
	}
	else if(!strcmp(params, "meatchopper", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -16.9641, 1543.6111, 12.7560, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the MeatChopper Sidejob.");
	}
    else if(!strcmp(params, "matpickup2", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -2213.6377, 604.8768, 35.1641, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd Materials Pickup.");
	}
    else if(!strcmp(params, "matfactory2", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -2173.3887, -219.2933, 35.3203, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd Materials Factory.");
	}
	else if(!strcmp(params, "matpickup1", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -792.1086, 1528.8477, 27.1172, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st Materials Pickup.");
	}
	else if(!strcmp(params, "matfactory1", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1410.2485, 1496.3809, 1.8672, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st Materials Factory.");
	}
	else if(!strcmp(params, "pawnshop", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1954.2811, 1341.1578, 7.1875, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Pawnshop.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1903.3043, 486.8969, 35.1719, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the VIP Lounge.");
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1356.8105, -1750.2814, 13.3769, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Mechanic Station.");
	}
	else if(!strcmp(params, "yfood", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2105.4399, -1806.5000, 13.5547, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Pizza Man job.");
	}
	else if(!strcmp(params, "trucker", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TRUCKER][jobX], jobLocations[JOB_TRUCKER][jobY], jobLocations[JOB_TRUCKER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Trucker job.");
	}

	else if(!strcmp(params, "purity", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_CARGO][jobX], jobLocations[JOB_CARGO][jobY], jobLocations[JOB_CARGO][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Trucker job.");
	}

	else if(!strcmp(params, "fisherman", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FISHERMAN][jobX], jobLocations[JOB_FISHERMAN][jobY], jobLocations[JOB_FISHERMAN][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Fisherman job.");
	}
	else if(!strcmp(params, "bodyguard", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_BODYGUARD][jobX], jobLocations[JOB_BODYGUARD][jobY], jobLocations[JOB_BODYGUARD][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Bodyguard job.");
	}
	else if(!strcmp(params, "armsdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_ARMSDEALER][jobX], jobLocations[JOB_ARMSDEALER][jobY], jobLocations[JOB_ARMSDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Arms Dealer job.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Miner job.");
	}
	else if(!strcmp(params, "meatpackager", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MEATPACKAGER][jobX], jobLocations[JOB_MEATPACKAGER][jobY], jobLocations[JOB_MEATPACKAGER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Meat Packager.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Taxi Driver job.");
	}
	else if(!strcmp(params, "drugdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DRUGDEALER][jobX], jobLocations[JOB_DRUGDEALER][jobY], jobLocations[JOB_DRUGDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Drug Dealer job.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Lawyer job.");
	}
	else if(!strcmp(params, "detective", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DETECTIVE][jobX], jobLocations[JOB_DETECTIVE][jobY], jobLocations[JOB_DETECTIVE][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Detective job.");
	}
	else if(!strcmp(params, "grave", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 815.4244, -1107.9791, 25.7899, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Graveyard Dirty Money Laundry.");
	}
	else if(!strcmp(params, "selfrepair", true))
	{
	    new selfrepair = GetClosestSelfRepair(playerid);
	    if(selfrepair == -1)
	    {
			return SCM(playerid, COLOR_GREY, "Something went wrong! Please contact the developer.");
	    }
	    
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, selfRepairPoints[selfrepair][0],selfRepairPoints[selfrepair][1],selfRepairPoints[selfrepair][2], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest Self Repair Point to you.");
	}
	else if(!strcmp(params, "fuel", true))
	{
	    new fuel = GetClosestFuel(playerid);
	    if(fuel == -1)
	    {
			return SCM(playerid, COLOR_GREY, "Something went wrong! Please contact the developer.");
	    }
	    
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, FuelStationInfo[fuel][FuelX], FuelStationInfo[fuel][FuelY], FuelStationInfo[fuel][FuelZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest Fuel Pump Point to you.");
	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest supermarket to you.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gun shop to you.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest clothes shop to you.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gym to you.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest restaurant to you.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest club/bar to you.");
	}
	return 1;
}

Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Diploma", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
        Graffiti_Save(id);
	}
	return 1;
}

IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerInfo[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = \"%s\" WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	new rows;
	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_value_name(i, "graffitiText", GraffitiData[i][graffitiText], 64);

    	GraffitiData[i][graffitiExists] = 1;
	    cache_get_value_name_int(i, "graffitiID", GraffitiData[i][graffitiID]);
	    cache_get_value_name_float(i, "graffitiX", GraffitiData[i][graffitiPos][0]);
	    cache_get_value_name_float(i, "graffitiY", GraffitiData[i][graffitiPos][1]);
	    cache_get_value_name_float(i, "graffitiZ", GraffitiData[i][graffitiPos][2]);
	    cache_get_value_name_float(i, "graffitiAngle", GraffitiData[i][graffitiPos][3]);
		cache_get_value_name_int(i, "graffitiColor", GraffitiData[i][graffitiColor]);

		Graffiti_Refresh(i);
	}
	return 1;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(distance < 200.0) return 1;
	if((gAnticheat) && PlayerInfo[playerid][pAdminDuty] == 0 && PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pKicked] && PlayerInfo[playerid][pSetup] == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
	    {
		    PlayerInfo[playerid][pACWarns]++;

		    if(PlayerInfo[playerid][pACWarns] < 4)
		    {
	    	    SAM(COLOR_YELLOW, "AdmWarning: %s [%i] is possibly teleport hacking (distance: %.1f).", GetPlayerNameEx(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], distance);
			}
			else
			{
		    	SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport Hacks", GetRPName(playerid), SERVER_BOT);
		    	KickPlayer(playerid);
			}
		}
	}
	return 1;
}

public TimerGiveHarvesterEx(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "You produced marijuana. Now, take them to the warehouse.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
    ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.1, 1, 0, 0, 0, 5000, 1);
	SetPlayerAttachedObject(playerid, 1, 2901, 5, 0.101, -0.0, 0.0, 5.50, 90, 90, 1, 1);
	SetPlayerCheckpoint(playerid, -988.2253, -1655.7943, 76.3672, 3.0);
	ClearAnimations(playerid, 1);
	Unfreeze(playerid);
	return 1;
}

public TimerGiveLumber(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "You produced average firewood. Now, take them to the warehouse.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	SetPlayerCheckpoint(playerid, -1996.929321, -2374.846435, 30.625000, 3.0);
	Unfreeze(playerid);
	ExtraWoods[playerid] = 0;
	return 1;
}

public OnPlayerClickMap(playerid, Float: fX, Float: fY, Float: fZ)
{
	new Float:new_z;
	if(PlayerInfo[playerid][pAdminDuty])
	{
		MapAndreas_FindZ_For2DCoord(fX, fY, new_z);
		if(IsPlayerInAnyVehicle(playerid))
		{
			TeleportToCoords(playerid, fX, fY, new_z+2.0, 90.0, 0, 0, true, true);
			SetCameraBehindPlayer(playerid);
		}
		else
		{
			TeleportToCoords(playerid, fX, fY, new_z+2.0, 90.0, 0, 0, true, false);
			SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

StartSpectate(playerid, targetid)
{
	PlayerInfo[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	SAM(COLOR_RED, "%s is now spectating to %s (ID:%i).", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	SCM(playerid, COLOR_WHITE, "Use "ORANGE"/spec off "WHITE"to stop spectating. "ORANGE"/speccam"WHITE" to move camera.");

	TogglePlayerSpectating(playerid, true);

    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	new vehicleid = GetPlayerVehicleID(targetid);
	if (vehicleid != 0) {
		PlayerSpectateVehicle(playerid, vehicleid, SPECTATE_MODE_NORMAL);
		ShowPlayerInfo(playerid, targetid);
		ShowVehicleInfo(playerid, vehicleid);
	}
	else {
	    PlayerSpectatePlayer(playerid, targetid, SPECTATE_MODE_NORMAL);
		ShowPlayerInfo(playerid, targetid);
		HideVehicleInfo(playerid);
	}

    spectateID[playerid] = targetid;
    spectateType[playerid] = (vehicleid != 0) ? SPECTATE_TYPE_VEHICLE : SPECTATE_TYPE_PLAYER;



	return SelectTextDraw(playerid, 0xAA0000FF);
}

StopSpectate(playerid)
{
	SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	SAM(COLOR_RED, "%s stops spectating %s (ID:%i).", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	Unfreeze(playerid);

	TogglePlayerSpectating(playerid, false);
    HidePlayerInfo(playerid);
    HideVehicleInfo(playerid);

	spectateID[playerid] = INVALID_PLAYER_ID;

	return CancelSelectTextDraw(playerid);
}

TogSelfie(playerid)
{
	if(takingselfie[playerid] == 0)
	{
		GetPlayerPos(playerid, slX[playerid], slY[playerid], slZ[playerid]);
		static Float: n1X, Float: n1Y;
		if(Degree[playerid] >= 360) Degree[playerid] = 0;
		Degree[playerid] += Speed;
		n1X = slX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		n1Y = slY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, slZ[playerid] + Height);
		SetPlayerCameraLookAt(playerid, slX[playerid], slY[playerid], slZ[playerid]+1);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		takingselfie[playerid] = 1;
		Freeze(playerid);
		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
		SCM(playerid, COLOR_ORANGE, "___________________________________");
		SCM(playerid, COLOR_WHITE, "Press "ORANGE"Y"WHITE" to move Right & "ORANGE"N"WHITE" to move Left");
		if(!IsPlayerMobile(playerid))
			SCM(playerid, COLOR_WHITE, "Press "ORANGE"Y"WHITE" to move Right & "ORANGE"N"WHITE" to move Left");
		SCM(playerid, COLOR_WHITE, "Open the phone and click on Camera again to turn selfie mode off");
		SCM(playerid, COLOR_ORANGE, "___________________________________");
		if(!PlayerInfo[playerid][pToggleTextdraws])
		{
			HideGPSTextdraw(playerid);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	        TextDrawHideForPlayer(playerid, TimeTD);
		}
	}
	else
	{
        TogglePlayerControllable(playerid,1);
        SetCameraBehindPlayer(playerid);
        takingselfie[playerid] = 0;
        ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
		if(!PlayerInfo[playerid][pToggleTextdraws])
		{
			if(PlayerInfo[playerid][pGPSOn])
	        {
	            ShowGPSTextdraw(playerid);
	        }
	        if(PlayerInfo[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerInfo[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
	        }
		}
	}
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (spectateID[playerid] != INVALID_PLAYER_ID) {
		if (clickedid == Text:INVALID_TEXT_DRAW) {
        	spectateCameraON[playerid] = true;
        	
        	GameTextForPlayer(playerid, "~w~Spectate Camera Mode: ~g~ON~n~~w~You can rotate camera with your mouse~n~~w~Type ~y~/speccam ~w~to switch to mouse", 5000, 3);
		}
		else if (clickedid == BUTTON_PREVIOUS) {
		    new prev = GetPreviousPlayer(spectateID[playerid]);
		    if (prev == INVALID_PLAYER_ID) {
			    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			else {
			    StartSpectate(playerid, prev);
			}
		}
		else if (clickedid == BUTTON_NEXT) {
		    new next = GetNextPlayer(spectateID[playerid]);
		    if (next == INVALID_PLAYER_ID) {
			    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			else {
			    StartSpectate(playerid, next);
			}
		}
	}
    if(clickedid == Text:INVALID_TEXT_DRAW || clickedid == home)//ESC
    {
    	if(ShowingPhone[playerid])
    	{
    		HidePhone(playerid);
			ShowingPhone[playerid] = false;
			if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
			{
				callcmd::hangup(playerid, "\1");
			}
			TextDrawHideForPlayer(playerid, call_text[0]);
			TextDrawHideForPlayer(playerid, call_text[1]);
			TextDrawHideForPlayer(playerid, call_stat);
			TextDrawHideForPlayer(playerid, call_pickup);
			TextDrawHideForPlayer(playerid, call_hangup);
			PlayerTextDrawHide(playerid, call_number[playerid]);
			CancelSelectTextDraw(playerid);
    	}
    }
	if(clickedid == call_pickup)
	{
		callcmd::pickup(playerid, "\1");
	}
	if(clickedid == call_hangup)
	{
		callcmd::hangup(playerid, "\1");
	}
	if(clickedid == call)
	{
		ShowPlayerDialog(playerid, PHONE_CALL, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Phone Call", "Please enter the number of the person you want to call:", "Call", "Cancel");
	}
	if(clickedid == sms)
	{
		ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Text Messaging", "Please enter the number of the person you want to send the SMS:", "Next", "Cancel");
	}
	if(clickedid == chat)
	{
		if(gettime() - PlayerInfo[playerid][pLastChat] < 15)
		{
			return SM(playerid, COLOR_SYNTAX, "You can use yChat in every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - PlayerInfo[playerid][pLastChat]));
		}
		if(PlayerInfo[playerid][pToggleChat])
		{
			HidePhone(playerid);
			ShowingPhone[playerid] = false;
			SCM(playerid, COLOR_SYNTAX, "You have yChat disabled! Use /toggle chat to enable it again!");
		}
		else
		{
			ShowPlayerDialog(playerid, PHONE_CHAT, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - yChat Communication", "Type the message you wanna send!", "Send", "Cancel");
		}
	}
	if(clickedid == locate)
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
		callcmd::nb(playerid, "\1");
	}
	if(clickedid == vst)
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
		callcmd::vst(playerid, "\1");
	}
	if(clickedid == noo)
	{
		ShowPlayerDialog(playerid, PHONE_911, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "Hello this is 911 Emergecy! What emergency service do you require?\n\n(( Type \"police\" or \"medic\" )):", "Next", "Cancel");
	}
	if(clickedid == statss)
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
		callcmd::stats(playerid, "\1");
	}
	if(clickedid == ping)
	{
		ShowPlayerDialog(playerid, PHONE_PING, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Location Pinging", "Please enter the ID or the name of the person you want to ping your location to", "Ping", "Cancel");
	}
	if(clickedid == inv)
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
		callcmd::inv(playerid, "\1");
	}
	if(clickedid == camera)
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
		TogSelfie(playerid);
	}
	if(clickedid == report)
	{
		ShowPlayerDialog(playerid, PHONE_REPORT, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Report System", "Please tell us detailed on what you want to report:", "Reort", "Cancel");
	}
	if(clickedid == rdm)
	{
		ShowPlayerDialog(playerid, PHONE_RDM, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Report System", "Please tell us detailed on what you want to report:", "Reort", "Cancel");
	}
	if(clickedid == VST_TD[13])
	{
		HideVST_TD(playerid);
	}
	if(clickedid == VST_TD[19])
	{
		new prev = GetPreviousVeh(playerid, SelectedVeh[playerid]);
		new string[64];
		if(prev == -1)
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			return 1;
		}
		PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "%s", vehicleNames[PlayerVeh[playerid][prev] - 400]);
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][6], string);
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][7], VehLocation[playerid][prev]);
		PlayerTextDrawSetPreviewModel(playerid, VST_TD_Player[playerid][0], PlayerVeh[playerid][prev]);
		PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][1], (1.2301 * (VehHealth[playerid][prev]/10)), 5.447);
		PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][2], (1.2301 * VehFuel[playerid][prev]), 5.447);
		format(string, sizeof(string), "0.2%f%", (VehHealth[playerid][prev]/10));
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][3], string);
		format(string, sizeof(string), "%i%", VehFuel[playerid][prev]);
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][4], string);
		if(VehSpawned[playerid][prev] == 1)
		{
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "DESPAWN");
		}
		else 
		{
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "SPAWN");
		}
		SelectedVeh[playerid] = prev;
		HideVST_TD(playerid);
		ShowVST_TD(playerid);
	}
	if(clickedid == VST_TD[20])
	{
		new next = GetNextVeh(playerid, SelectedVeh[playerid]);
		new string[64];
		if(next == -1)
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			return 1;
		}
		else 
		{
			PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "%s", vehicleNames[PlayerVeh[playerid][next] - 400]);
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][6], string);
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][7], VehLocation[playerid][next]);
			PlayerTextDrawSetPreviewModel(playerid, VST_TD_Player[playerid][0], PlayerVeh[playerid][next]);
			PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][1], (1.2301 * (VehHealth[playerid][next]/10)), 5.447);
			PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][2], (1.2301 * VehFuel[playerid][next]), 5.447);
			format(string, sizeof(string), "%0.2f%", (VehHealth[playerid][next]/10));
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][3], string);
			format(string, sizeof(string), "%i%", VehFuel[playerid][next]);
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][4], string);
			if(VehSpawned[playerid][next] == 1)
			{
				PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "DESPAWN");
			}
			else 
			{
				PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "SPAWN");
			}
			SelectedVeh[playerid] = next;
			HideVST_TD(playerid);
			ShowVST_TD(playerid);
		}
	}
	if(clickedid == VST_TD[21])
	{
		callcmd::findcar(playerid, "\1");
		HideVST_TD(playerid);
		return 1;
	}
	if(clickedid == VST_TD[22])
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], SelectedVeh[playerid]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
		SelectedVeh[playerid] = -1;
		HideVST_TD(playerid);
		return 1;
	}
	if(clickedid == VST_TD[23])
	{
		callcmd::park(playerid, "\1");
		HideVST_TD(playerid);
		return 1;
	}
	if(clickedid == GROTTI_TD[1])
	{
		new prev = GetPreviousDealerVeh(playerid, SelectedDealerVeh[playerid]);
		printf("%i", prev);
		if(prev == -1)
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			return 1;
		}
		PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		UpdateGrotti_TD(playerid, prev);
		SelectedDealerVeh[playerid] = prev;
		return 1;
	}
	if(clickedid == GROTTI_TD[2])
	{
		new next = GetNextDealerVeh(playerid, SelectedDealerVeh[playerid]);
		printf("%i", next);
		if(next == -1)
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			return 1;
		}
		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
		UpdateGrotti_TD(playerid, next);
		SelectedDealerVeh[playerid] = next;
		return 1;
	}
	if(clickedid == GROTTI_TD[8])
	{
		{
			if(PlayerInfo[playerid][pCash] < vehicleArray[SelectedDealerVeh[playerid]][cARPrice])
			{
				return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
			}

			new
				string[128];

			PlayerInfo[playerid][pSelected] = SelectedDealerVeh[playerid];

			format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "CXRP"$%i{FFD700}?", vehicleNames[vehicleArray[SelectedDealerVeh[playerid]][carModel] - 400], vehicleArray[SelectedDealerVeh[playerid]][cARPrice]);
			ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
			HideGROTTI_TD(playerid);
		}
	}
    return 1;
}


public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new string[256];
	if(playertextid == BankTD[playerid][11])
	{
		HideBankTD(playerid);
		if(PlayerInfo[playerid][pLevel] < 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only use this command if you are level 2+.");
		}
		ShowPlayerDialog(playerid, BANK_WIRETRANSFER, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Transfer", "Who would you like to transfer money? {FF0000}((Type the player ID.))", "Submit", "Cancel");
        return 1;
	}
	if(playertextid == BankTD[playerid][12])
	{
		HideBankTD(playerid);
		format(string, sizeof(string), "How much would you like to deposit? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
	    ShowPlayerDialog(playerid, BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Deposit", string, "Deposit", "Cancel");
        return 1;
	}
	if(playertextid == BankTD[playerid][13])
	{
		HideBankTD(playerid);
		format(string, sizeof(string), "How much would you like to withdraw? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
	    ShowPlayerDialog(playerid, BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Withdrawal", string, "Withdraw", "Cancel");
        return 1;
	}
	if(playertextid == BankTD[playerid][14])
	{
		HideBankTD(playerid);
        return 1;
	}
	// Register & Login
	if(playertextid == Register_TD[playerid][1])
	{
		ShowDialogToPlayer(playerid, DIALOG_REGISTER);
		return 1;
	}
	if(playertextid == Register_TD[playerid][2])
	{
		ShowDialogToPlayer(playerid, DIALOG_AGE);
		return 1;
	}
	if(playertextid == Register_TD[playerid][3])
	{
		ShowDialogToPlayer(playerid, DIALOG_GENDER);
		return 1;
	}
	if(playertextid == Register_TD[playerid][4])
	{
		ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
		return 1;
	}
	if(playertextid == Register_TD[playerid][5])
	{
		if(PlayerInfo[playerid][pPassCode] && PlayerInfo[playerid][pAgeCode] == 1 && PlayerInfo[playerid][pGenderCode] == 1)
		{
			Settings[gTotalRegistered]++;
			SaveServerInfo();
			PlayerInfo[playerid][pSetup] = 1;
			for(new i = 0; i < 6; i ++)
			{
				PlayerTextDrawHide(playerid, Register_TD[playerid][i]);
			}
			for(new j = 0; j < 17; j ++)
			{
				TextDrawHideForPlayer(playerid, RegisterGlobal[j]);
			}
			CancelSelectTextDraw(playerid);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users (username, password, regdate, lastlogin, ip, age, gender) VALUES(\"%s\", \"%s\", NOW(), NOW(), \"%s\", %i, %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPassCode], GetPlayerIP(playerid), PlayerInfo[playerid][pAge], PlayerInfo[playerid][pGender]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
			return 1;
			
		}
		SCM(playerid, COLOR_REALRED, "Something went wrong. Please Try again.");
	}
    return 1;
}

public TimerGiveLumberEx(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "You produced excellent firewood. Now, take them to the warehouse.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	SetPlayerCheckpoint(playerid, -1996.929321, -2374.846435, 30.625000, 3.0);
	Unfreeze(playerid);
	ExtraWoods[playerid] = 1;
	return 1;
}

public TimerGiveMeat(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "{00FF00}Average {FFFFFF}meat produced. Take it to the warehouse to be examined.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 2806, 1, 0.184699, 0.426247, 0.000000, 259.531341, 60.949592, 0.000000, 0.476124, 0.468181, 0.470769);
	SetPlayerCheckpoint(playerid, -21.8623, 1545.5533, 12.7560, 3.0);
    ExtraMeatall[playerid] = 0;
	Unfreeze(playerid);
	return 1;
}

public TimerGiveMeatEx(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "{FFFF00}Big Sized {FFFFFF}meat produced. Take it to the warehouse to be examined.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 2805, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769);
	SetPlayerCheckpoint(playerid, -21.8623, 1545.5533, 12.7560, 3.0);
    ExtraMeatall[playerid] = 1;
    Unfreeze(playerid);
    return 1;
}

public TimerWashMoney(playerid)
{
    new dirty = PlayerInfo[playerid][pDirtyCash];
	new discount = (dirty/100)*25; // 3 discount percent
 	new total = dirty-discount;

 	SM(playerid, COLOR_WHITE, "You washed your money and earn %s.", AddCommas(total));
 	SendClientMessage(playerid, -1, "You are done washing the dirty money, it's time for you to go or else cops will arrest you.");

	PlayerInfo[playerid][pDirtyCash] -= dirty;
	GivePlayerCash(playerid, total);

	ClearAnimations(playerid, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

public TimerBreakCuff(playerid, targetid)
{
    Unfreeze(playerid);
    Unfreeze(targetid);
	ClearAnimations(playerid);
	ClearAnimations(targetid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has successfully broke %s's handcuffs.", GetRPName(playerid), GetRPName(targetid));
	PlayerInfo[targetid][pCuffed] = 0;
	PlayerInfo[targetid][pRes] = 0;
 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerPlaySound(playerid, 1100, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1100, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pToolkit]--;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toolkit = %i WHERE uid = %i", PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);	
	return 1;
}

forward TimerSelfRepairEx(playerid, vehicleid);
public TimerSelfRepairEx(playerid, vehicleid)
{
	VehicleTire[vehicleid][0]=0;
	VehicleTire[vehicleid][1]=0;
	VehicleTire[vehicleid][2]=0;
	VehicleTire[vehicleid][3]=0;
    Unfreeze(playerid);
    ClearAnimations(playerid);
    SetVehicleHealth(vehicleid, 750.0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has successfully repaired the vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}


public TimerSelfRepair(playerid, vehicleid)
{
	VehicleTire[vehicleid][0]=0;
	VehicleTire[vehicleid][1]=0;
	VehicleTire[vehicleid][2]=0;
	VehicleTire[vehicleid][3]=0;
    SCM(playerid, COLOR_WHITE, "You have repaired the vehicle you're riding...");
    Unfreeze(playerid);
	SetVehicleHealth(vehicleid, 750.0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s successfully repaired his/her vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

forward FlasherFunc();
public FlasherFunc() {
	new panelsx,doorsx,lightsx,tiresx;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    PlayerInfo[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward CBugFreezeOver(playerid);
public CBugFreezeOver(playerid)
{
	Unfreeze(playerid);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	pCBugging[playerid] = false;
	return 1;
}

ResetPlayerVariables(playerid)
{
	pCBugging[playerid] = false;
	KillTimer(ptmCBugFreezeOver[playerid]);
	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}

GetDate()
{
	new date[5], datestring[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(datestring, sizeof(datestring), "%02d-%02d-%i %02d:%02d", date[2], date[1], date[0], date[3], date[4]);
	return datestring;
}

GetAdminDivision(playerid)
{
	new division[4];
	if(PlayerInfo[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(PlayerInfo[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(PlayerInfo[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else if(PlayerInfo[playerid][pHM])
	{
	    division = "HM";
	}
	else if(PlayerInfo[playerid][pAP])
	{
	    division = "SM";
	}
	else
	{
	    division = "";
	}
	return division;
}

GetAdminRank(playerid)
{
	new string[35];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0: string = "None";
	    case 1: string = "Secret Admin";
	    case 2: string = "Junior Admin";
	    case 3: string = "General Admin";
	    case 4: string = "Senior Admin";
		case 5: string = "Head Admin";
		case 6: string = "Executive Admin";
		case 7: string = "Management";
		case 8: string = "Developer";
		case 9: string = "Owner";
	}

	return string;
}

GetColorARank(playerid)
{
	new string[35];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0: string = "None";
	    case 1: string = "{A7A7A7}Secret Admin";
	    case 2: string = "{1f8b4c}Junior Admin";
	    case 3: string = "{206694}General Admin";
	    case 4: string = "{71368a}Senior Admin";
		case 5: string = "{ad1457}Head Admin";
		case 6: string = "{c27c0e}Executive Admin";
		case 7: string = "{992d22}Management";
		case 8: string = "{992d22}Developer";
		case 9: string = "{992d22}Owner";
	}
	return string;
}

GetHelperRank(playerid)
{
	new string[24];

	switch(PlayerInfo[playerid][pHelper])
	{
	    case 0: string = "None";
	    case 1: string = "General Helper";
	    case 2: string = "Senior Helper";
	    case 3: string = "Lead Helper";
	}

	return string;
}

GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

GetBoneName(boneid)
{
	new
	    string[16];

	switch(boneid)
	{
	    case 3: string = "Chest";
	    case 4: string = "Lower Body";
	    case 5: string = "Left Arm";
	    case 6: string = "Right Arm";
	    case 7: string = "Left Leg";
	    case 8: string = "Right Leg";
	    case 9: string = "Head";
		default: string = "Unknown";
	}

	return string;
}

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetDonatorRank(level)
{
	new string[16];
	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "Silver";
	    case 2: string = "Gold";
	    case 3: string = "Platinum";
	}
	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "None";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_TRUCKER:
		{
			if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0)
			{
		    	PlayerInfo[playerid][pTruckerSkill] += 2;
				SCM(playerid, COLOR_YELLOW, "You've earned 2x XP due to running Double XP session.");
			}
			else
			{
				PlayerInfo[playerid][pTruckerSkill] += 1;
			}

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET truckerskill = %i WHERE uid = %i", PlayerInfo[playerid][pTruckerSkill], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your trucker skill level is now %i/5. You will deliver more products and earn more money now.", level + 1);
			}
		}
		case JOB_FISHERMAN:
		{
			if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0)
			{
		    	PlayerInfo[playerid][pFishingSkill] += 2;
				SCM(playerid, COLOR_YELLOW, "You've earned 2x XP due to running Double XP session.");
			}
			else
			{
				PlayerInfo[playerid][pFishingSkill] += 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", PlayerInfo[playerid][pFishingSkill], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
				SM(playerid, COLOR_YELLOW, "Your fishing skill level is now %i/5. You will catch bigger fish and your cooldowns are reduced.", level + 1);
			}
		}
		case JOB_ARMSDEALER:
		{
			if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0)
			{
			    PlayerInfo[playerid][pWeaponSkill] += 2;
				SCM(playerid, COLOR_YELLOW, "You've earned 2x XP due to running Double XP session.");
			}
			else
			{
			    PlayerInfo[playerid][pWeaponSkill] += 1;
			}

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", PlayerInfo[playerid][pWeaponSkill], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your arms dealer skill level is now %i/4. You have unlocked more weapons.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
			if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0)
			{
		    	PlayerInfo[playerid][pSmugglerSkill] += 2;
				SCM(playerid, COLOR_YELLOW, "You've earned 2x XP due to running Double XP session.");
			}
			else
			{
			    PlayerInfo[playerid][pSmugglerSkill] += 1;
			}

    	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET smugglerskill = %i WHERE uid = %i", PlayerInfo[playerid][pSmugglerSkill], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);


			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your drug smuggler skill level is now %i/5. You will now earn more cash for smuggling.", level + 1);
			}
		}
		case JOB_LAWYER:
		{
			if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0)
			{
			    PlayerInfo[playerid][pLawyerSkill] += 2;
				SCM(playerid, COLOR_YELLOW, "You've earned 2x XP due to running Double XP session.");
			}
			else
			{
			    PlayerInfo[playerid][pLawyerSkill] += 1;
			}

    	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", PlayerInfo[playerid][pLawyerSkill], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your lawyer skill level is now %i/5. Your cooldown times are reduced and you can free people for more time.", level + 1);
			}
		}
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_TRUCKER)
	{
	    if(0 <= PlayerInfo[playerid][pTruckerSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pTruckerSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pTruckerSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pTruckerSkill] <= 349) {
			return 4;
		} else if(PlayerInfo[playerid][pTruckerSkill] >= 350) {
		    return 5;
		}
	}
	if(jobid == JOB_FISHERMAN)
	{
	    if(0 <= PlayerInfo[playerid][pFishingSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pFishingSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pFishingSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pFishingSkill] <= 349) {
			return 4;
		} else if(PlayerInfo[playerid][pFishingSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_ARMSDEALER)
	{
	    if(0 <= PlayerInfo[playerid][pWeaponSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pWeaponSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pWeaponSkill] <= 199) {
			return 3;
		} else if(PlayerInfo[playerid][pWeaponSkill] >= 200) {
			return 4;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= PlayerInfo[playerid][pSmugglerSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerInfo[playerid][pSmugglerSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerInfo[playerid][pSmugglerSkill] <= 74) {
			return 3;
		} else if(75 <= PlayerInfo[playerid][pSmugglerSkill] <= 99) {
			return 4;
		} else if(PlayerInfo[playerid][pSmugglerSkill] >= 100) {
		    return 5;
		}
	}
	else if(jobid == JOB_LAWYER)
	{
	    if(0 <= PlayerInfo[playerid][pLawyerSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerInfo[playerid][pLawyerSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerInfo[playerid][pLawyerSkill] <= 99) {
			return 3;
		} else if(100 <= PlayerInfo[playerid][pLawyerSkill] <= 199) {
			return 4;
		} else if(PlayerInfo[playerid][pLawyerSkill] >= 200) {
		    return 5;
		}
	}
	return 0;
}

GetPlayerCapacity(playerid, item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 5000 + (PlayerInfo[playerid][pInventoryUpgrade] * 1000);
		}
		case CAPACITY_WEED:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
		    {
		        case 0: return 50;
		        case 1: return 100;
		        case 2: return 150;
		        case 3: return 200;
		        case 4: return 250;
		        case 5: return 300;
			}
		}
		case CAPACITY_COCAINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 125;
		        case 5: return 150;
			}
		}
		case CAPACITY_METH:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 20;
		        case 1: return 40;
		        case 2: return 60;
		        case 3: return 80;
		        case 4: return 100;
		        case 5: return 150;
			}
		}
        case CAPACITY_PAINKILLERS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 5;
		        case 1: return 10;
		        case 2: return 20;
		        case 3: return 30;
		        case 4: return 40;
		        case 5: return 50;
			}
		}
		case CAPACITY_SEEDS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 20;
		        case 2: return 30;
		        case 3: return 40;
		        case 4: return 50;
		        case 5: return 60;
			}
		}
		case CAPACITY_EPHEDRINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 15;
		        case 2: return 20;
		        case 3: return 25;
		        case 4: return 30;
		        case 5: return 40;
			}
		}
	}
	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        for(new i = 0; i < MAX_HOUSES; i ++)
	        {
	            if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
	        for(new i = 0; i < MAX_BUSINESSES; i ++)
	        {
	            if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
	        for(new i = 0; i < MAX_GARAGES; i ++)
	        {
	            if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        switch(PlayerInfo[playerid][pDonator])
			{
			    case 2: return 4;
			    case 3: return 6;
			}

			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
            switch(PlayerInfo[playerid][pDonator])
			{
			    case 1: return 10;
			    case 2: return 15;
			    case 3: return 20;
			}

	        switch(PlayerInfo[playerid][pAssetUpgrade])
	        {
	            case 0: return 3;
	            case 1: return 4;
	            case 2: return 5;
	            case 3: return 7;
	            case 4: return 10;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			} else if(type == DEPLOY_SPEEDBREAK) {
			    DeployInfo[i][dObject] = CreateDynamicObject(19425, x+0.5, y, z-1.0, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(GetFactionType(killerid) == FACTION_HITMAN && PlayerInfo[killerid][pContractTaken] == playerid)
	{
	    new price = PlayerInfo[playerid][pContracted];

	    SM(playerid, COLOR_YELLOW, "You have been killed by a hitman and lost $%i.", price);

		if(Poisonedby[playerid] != INVALID_PLAYER_ID)
		{
			KillTimer(PoisonTimer[playerid]);
			Poisonedby[playerid] = INVALID_PLAYER_ID;
			PoisonMsg[playerid] = 0;
		}

		new contractedby = GetPlayerID(PlayerInfo[playerid][pContractBy]);
		if(contractedby != INVALID_PLAYER_ID)
		{
			SM(contractedby, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contracts has been completed and target has been killed.");
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = -1 WHERE uid = %i", PlayerInfo[contractedby][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = 1 WHERE username = \"%e\"", PlayerInfo[playerid][pContractBy]);
			mysql_tquery(connectionID, queryBuffer);
		}

        foreach(new i : Player)
        {
            if(GetFactionType(i) == FACTION_HITMAN)
            {
                SM(i, COLOR_YELLOW, "%s has completed their contract on %s and received $%i", GetRPName(killerid), GetRPName(playerid), price);
			}
		}

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[killerid][pCompletedHits]++;
	    PlayerInfo[playerid][pContracted] = 0;
	    PlayerInfo[playerid][pContractBy] = 0;
		PlayerInfo[playerid][pContractReason] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET completedhits = %i WHERE uid = %i", PlayerInfo[killerid][pCompletedHits], PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == playerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) successfully completed their hit on %s (uid: %i) for $%i.", GetRPName(killerid), PlayerInfo[killerid][pID], GetRPName(playerid), PlayerInfo[playerid][pID], price);
	}
	else if(PlayerInfo[playerid][pContractTaken] == killerid)
	{
	    new price = PlayerInfo[killerid][pContracted];

	    SM(killerid, COLOR_YELLOW, "You have killed a hitman chasing after you and received $%i. The contract on your head has been removed.", price);

		if(Poisonedby[killerid] != INVALID_PLAYER_ID)
		{
			KillTimer(PoisonTimer[killerid]);
			Poisonedby[killerid] = INVALID_PLAYER_ID;
			PoisonMsg[killerid] = 0;
		}

		new contractedby = GetPlayerID(PlayerInfo[killerid][pContractBy]);
		if(contractedby != INVALID_PLAYER_ID)
		{
			SM(contractedby, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contracts has been failed and the hitman got killed.");
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = -1 WHERE uid = %i", PlayerInfo[contractedby][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = 0 WHERE username = \"%e\"", PlayerInfo[killerid][pContractBy]);
			mysql_tquery(connectionID, queryBuffer);
		}

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pFaction] == FACTION_HITMAN && PlayerInfo[i][pFaction] == 5)
            {
                SM(i, COLOR_YELLOW, "%s has failed their contract on %s and lost $%i", GetRPName(playerid), GetRPName(killerid), price);
			}
		}

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pFailedHits]++;
	    PlayerInfo[killerid][pContracted] = 0;
	    PlayerInfo[killerid][pContractBy] = 0;
		PlayerInfo[killerid][pContractReason] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET failedhits = %i WHERE uid = %i", PlayerInfo[playerid][pFailedHits], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == killerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) failed their hit on %s (uid: %i) and lost $%i.", GetRPName(playerid), PlayerInfo[playerid][pID], GetRPName(killerid), PlayerInfo[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(Maskara[playerid])
	{
		strcpy(name, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);
	}
	else
	{
		GetPlayerName(playerid, name, sizeof(name));
	}
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

 	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));
	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;
	if((id = GetInsideHouse(playerid)) >= 0)
	{
	    x = HouseInfo[id][hPosX];
	    y = HouseInfo[id][hPosY];
	    z = HouseInfo[id][hPosZ];
	}
	else if((id = GetInsideBusiness(playerid)) >= 0)
	{
	    x = BusinessInfo[id][bPosX];
	    y = BusinessInfo[id][bPosY];
	    z = BusinessInfo[id][bPosZ];
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    x = GarageInfo[id][gPosX];
	    y = GarageInfo[id][gPosY];
	    z = GarageInfo[id][gPosZ];
	}
	else if((id = GetInsideEntrance(playerid)) >= 0)
	{
	    x = EntranceInfo[id][ePosX];
	    y = EntranceInfo[id][ePosY];
	    z = EntranceInfo[id][ePosZ];
	}
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    return 1;
	}
	return 0;
}

GetVehicleLinkedID(id)
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}
GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

BuyClothing(playerid, index)
{
	new businessid = GetInsideBusiness(playerid);
    if(BusinessInfo[businessid][bProducts] <= 0)
    {
 		return SCM(playerid, COLOR_SYNTAX, "This business is out of stock now.");
	}
    if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrices][1] && !IsBusinessOwner(playerid, businessid))
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		new modelid = clothingArray[index][clothingModel], boneid = clothingArray[index][clothingBone], Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0;
		for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	    {
	    	if(!ClothingInfo[playerid][i][cExists])
      		{
	            ClothingInfo[playerid][i][cModel] = modelid;
	            ClothingInfo[playerid][i][cBone] = boneid;
	            ClothingInfo[playerid][i][cPosX] = fOffsetX;
	            ClothingInfo[playerid][i][cPosY] = fOffsetY;
	            ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	            ClothingInfo[playerid][i][cRotX] = fRotX;
	            ClothingInfo[playerid][i][cRotY] = fRotY;
	            ClothingInfo[playerid][i][cRotZ] = fRotZ;
	            ClothingInfo[playerid][i][cScaleX] = fScaleX;
	            ClothingInfo[playerid][i][cScaleY] = fScaleY;
				ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

				if(!IsBusinessOwner(playerid, businessid))
				{
					BusinessInfo[businessid][bCash] += BusinessInfo[businessid][bPrices][1];
					GivePlayerCash(playerid, -BusinessInfo[businessid][bPrices][1]);
				}
				BusinessInfo[businessid][bProducts]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
				if(!IsBusinessOwner(playerid, businessid))
				{
					SM(playerid, COLOR_AQUA, "%s purchased for $%i. /clothing to find your new item.", clothingArray[index][clothingName], BusinessInfo[businessid][bPrices][1]);
				}
				else
				{
					SM(playerid, COLOR_AQUA, "%s purchased for free from your own business, /clothing to find your new item.", clothingArray[index][clothingName]);
				}

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, \"%e\", %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pID], clothingArray[index][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isi", playerid, clothingArray[index][clothingName], i);
				return 1;
			}
		}
	}
	return 1;
}

AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(PlayerInfo[playerid][pAFKPos][0] == x && PlayerInfo[playerid][pAFKPos][1] == y && PlayerInfo[playerid][pAFKPos][2] == z && PlayerInfo[playerid][pAFKPos][3] == cx && PlayerInfo[playerid][pAFKPos][4] == cy && PlayerInfo[playerid][pAFKPos][5] == cz)
	{
		PlayerInfo[playerid][pAFKTime]++;

	    if(!PlayerInfo[playerid][pAFK] && PlayerInfo[playerid][pAFKTime] >= 60)
	    {
		    SCM(playerid, COLOR_WHITE, "You are now marked as "CXRP"Away from keyboard"WHITE" as you haven't moved in one minute.");
		    PlayerInfo[playerid][pAFK] = 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][pAFK])
		{
		    if(PlayerInfo[playerid][pAFKTime] < 120) {
		    	SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i seconds.", PlayerInfo[playerid][pAFKTime]);
			} else {
			    SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i minutes.", PlayerInfo[playerid][pAFKTime] / 60);
			}

			PlayerInfo[playerid][pAFK] = 0;
		}

		PlayerInfo[playerid][pAFKTime] = 0;
	}
	PlayerInfo[playerid][pAFKPos][0] = x;
	PlayerInfo[playerid][pAFKPos][1] = y;
	PlayerInfo[playerid][pAFKPos][2] = z;
	PlayerInfo[playerid][pAFKPos][3] = cx;
	PlayerInfo[playerid][pAFKPos][4] = cy;
	PlayerInfo[playerid][pAFKPos][5] = cz;
}

ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerInfo[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerInfo[playerid][pCategory]]))
        {
	        if(PlayerInfo[playerid][pClothingIndex] == -1)
	        {
	            PlayerInfo[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[PlayerInfo[playerid][pCategory]], models, index);
}


ShowClothesSelectionMenu(playerid)
{
	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkins, sizeof(clothesShopSkins));
}


ClearChat(playerid)
{
	for(new i = 0; i < 29; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

ClearAllChat(playerid)
{
	for(new i = 0; i < 65; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}

EnterCheck(playerid)
{
	new id, string[40], entercheck;

	if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}
	if(PlayerInfo[playerid][pHurt] - 05 > 0)
		return SM(playerid, COLOR_GREY, "You are too hurt to operate/enter anything. Please wait %i seconds before trying again.", (PlayerInfo[playerid][pHurt] - 05));
	if((entercheck = GetNearbyEntrance(playerid)) >= 0)
	{
		if(!EntranceInfo[entercheck][eVehicles])
		{
			if(PlayerUseAnims(playerid) == 0)
			{
 	 			return SCM(playerid, COLOR_GREY, "You can't enter now.");
			}
		}
	}

    if((id = GetNearbyHouse(playerid)) >= 0 && PlayerUseAnims(playerid) == 1)
	{
	    if(HouseInfo[id][hLocked])
	    {
			Dyuze(playerid, "Notice", "This house is ~r~Locked.", 3000);
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
		}
		else
		{
			SM(playerid, COLOR_SYNTAX, "** This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
		}
        format(string, sizeof(string), "~r~Objects Loading...", 3000);
  		Dyuze(playerid, "Please wait", string);
        PlayerInfo[playerid][pLastEnter] = gettime();
		TeleportToCoords(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ], HouseInfo[id][hIntA], HouseInfo[id][hInterior], HouseInfo[id][hWorld], true, false);
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
			Dyuze(playerid, "Notice", "This garage is ~r~Locked.", 3000);
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their garage.", GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the garage.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToGarage(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    PlayerInfo[playerid][pLastEnter] = gettime();
			TeleportToCoords(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ], garageInteriors[GarageInfo[id][gType]][intPA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld], true, false);
		}
		format(string, sizeof(string), "~r~Objects Loading...");
  		Dyuze(playerid, "Please wait", string, 3000);
		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0 && PlayerUseAnims(playerid) == 1)
	{
	    if(BusinessInfo[id][bLocked])
	    {
			Dyuze(playerid, "Notice", "This store is ~r~Closed.");
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);
			SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bName]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bName]);
            SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			SM(playerid, COLOR_SYNTAX, "** This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		}

		PlayerInfo[playerid][pLastEnter] = gettime();
		TeleportToCoords(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ], BusinessInfo[id][bIntA], BusinessInfo[id][bInterior], BusinessInfo[id][bWorld], true, false);
		SetCameraBehindPlayer(playerid);
		format(string, sizeof(string), "~r~Objects Loading...");
  		Dyuze(playerid, "Please wait", string, 3000);
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
			Dyuze(playerid, "Notice", "This door is ~r~Locked.");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SCM(playerid, COLOR_SYNTAX, "This entrance has no interior and therefore cannot be entered.");
		    return 0;
		}

		if(!PlayerInfo[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SCM(playerid, COLOR_SYNTAX, "Your administrator level is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType] && EntranceInfo[id][eFactionType] != 5)
			{
		    	SCM(playerid, COLOR_SYNTAX, "This entrance is only accesible to a specific faction type. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType] && EntranceInfo[id][eFactionType] == 5)
			{
		    	return 0;
			}
			if(EntranceInfo[id][eVIP] && PlayerInfo[playerid][pDonator] < EntranceInfo[id][eVIP])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Your VIP rank is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eVIP] && PlayerInfo[playerid][pWantedLevel] != 0)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't enter a donator door while being a wanted");
				return 0;
			}
		}


        PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the building.", GetRPName(playerid));
		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true, true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], false, true);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true, false);
			}
			else
			{
			    TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], false, false);
  			}
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    Dyuze(playerid, "Notice", string, 3000);
		}
		else
		{
		    format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    Dyuze(playerid, "Objects Loading...", string, 3000);
		}
		return 1;
	}
	return 0;
}

ExitCheck(playerid)
{
	new id;
    if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}
	if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the house.", GetRPName(playerid));
		TeleportToCoords(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ], HouseInfo[id][hPosA], HouseInfo[id][hOutsideInt], HouseInfo[id][hOutsideVW], true, false);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if((GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) || ((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the garage.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0, true, true);
			}
			else
			{
		    	TeleportToCoords(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ], GarageInfo[id][gPosA], 0, 0, true, false);
				SetCameraBehindPlayer(playerid);
			}
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if(PlayerUseAnims(playerid) && (id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the business.", GetRPName(playerid));
		TeleportToCoords(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ], BusinessInfo[id][bPosA], BusinessInfo[id][bOutsideInt], BusinessInfo[id][bOutsideVW], false, false);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true, true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], false, true);
			}
		}
		if(!EntranceInfo[id][eVehicles] && PlayerUseAnims(playerid))
		{
		    if(EntranceInfo[id][eFreeze])
		    {
			    TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true, false);
			}
			else
			{
			    TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], false, false);
			}
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        PlayerInfo[playerid][pLastReport] = gettime();
	        SAM(SERVER_COLOR, "Report from [%i]%s (RID: %i): %s", playerid, GetRPName(playerid), i, text);
			#if defined DISCORD
				DCC_SendText(1, playerid, text, "1118611215946629220", INVALID_PLAYER_ID, -1);
			#endif
			return 1;
		}
	}

	return 0;
}

AddDMReportToQueue(playerid, targetid)
{
	new string[256];
	format(string, sizeof(string), "DM Report: %s [%i]", GetRPName(targetid), targetid);
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], string, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        PlayerInfo[playerid][pLastReport] = gettime();
	        SAM(COLOR_YELLOW2, "%s has reported "RED"DM{F5DEB3} report for the following player: %s (ReportID: %i)", GetRPName(playerid), GetRPName(targetid), i);
			#if defined DISCORD
				DCC_SendText(2, playerid, "", "1118611215946629220", targetid, -1);
			#endif
			return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = \"%s\" OR ip = \"%s\"", username, ip);
	mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(!strcmp(from, SERVER_BOT))
	{
	    Settings[gAnticheatBans]++;
    	SaveServerInfo();
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
	KickIP(GetPlayerIP(playerid));
}

Rangeban(playerid, from[], reason[])
{
	AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	KickIP(GetPlayerIP(playerid));
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetHealth(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetArmor(playerid)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id();
	Graffiti_Save(id);

	return 1;
}

GivePlayerCash(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		new string[256];
		if(amount > 0)
			format(string, sizeof(string), "~g~+%s$", AddCommas(amount));
		else
			format(string, sizeof(string), "~r~%s$", AddCommas(amount));
		GameTextForPlayer(playerid, string, 5000, 1);

		PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] + amount;
		if(!PlayerInfo[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

FriskPlayer(playerid, targetid)
{
	SM(playerid, SERVER_COLOR, "%s's Items:", GetRPName(targetid));

	SM(playerid, COLOR_GREEN, "Cash ($%i)", PlayerInfo[targetid][pCash]);
	SM(playerid, COLOR_GREEN, "Backpack: Cash ($%i)", PlayerInfo[targetid][bpCash]);
	if(PlayerInfo[targetid][pMaterials] > 0)
	{
	    SM(playerid, COLOR_GREEN, "Materials (%i)", PlayerInfo[targetid][pMaterials]);
	}

	SM(playerid, COLOR_REALRED, "Dirty Money ($%i)", PlayerInfo[targetid][pDirtyCash]);

	if(PlayerInfo[targetid][pBackpack])
	{
	    SCM(playerid, COLOR_GREY2, "Backpack");
	}
	if(PlayerInfo[targetid][pPhone])
	{
	    SCM(playerid, COLOR_GREY2, "Mobile Phone");
	}
	if(PlayerInfo[targetid][pNumber] != 0)
	{
	    SM(playerid, COLOR_GREY2, "Phone Number: %i", PlayerInfo[targetid][pNumber]);
	}
	if(PlayerInfo[targetid][pWalkieTalkie])
	{
	    SCM(playerid, COLOR_GREY2, "Portable Radio");
	}
    if(PlayerInfo[targetid][pSpraycans])
	{
	    SM(playerid, COLOR_GREY2, "Spraycans (%i)", PlayerInfo[targetid][pSpraycans]);
	}
	if(PlayerInfo[targetid][pBoombox])
	{
	    SCM(playerid, COLOR_GREY2, "Boombox");
	}
	if(PlayerInfo[targetid][pMP3Player])
	{
	    SCM(playerid, COLOR_GREY2, "MP3 player");
	}
	if(PlayerInfo[targetid][pPhonebook])
	{
	    SCM(playerid, COLOR_GREY2, "Phonebook");
	}
    if(PlayerInfo[targetid][pPot])
	{
	    SM(playerid, COLOR_REALRED, "Pot (%ig)", PlayerInfo[targetid][pPot]);
	}
	if(PlayerInfo[targetid][pCrack])
	{
	    SM(playerid, COLOR_REALRED, "Crack (%ig)", PlayerInfo[targetid][pCrack]);
	}
	if(PlayerInfo[targetid][pMeth])
	{
	    SM(playerid, COLOR_REALRED, "Meth (%ig)", PlayerInfo[targetid][pMeth]);
	}
	if(PlayerInfo[targetid][pPainkillers])
	{
	    SM(playerid, COLOR_REALRED, "Painkillers (%i)", PlayerInfo[targetid][pPainkillers]);
	}
	if(PlayerInfo[targetid][pSeeds])
	{
	    SM(playerid, COLOR_REALRED, "Marijuana Seeds (%i)", PlayerInfo[targetid][pSeeds]);
	}
	if(PlayerInfo[targetid][pEphedrine])
	{
	    SM(playerid, COLOR_REALRED, "Raw Ephedrine (%i)", PlayerInfo[targetid][pEphedrine]);
	}
	if(PlayerInfo[targetid][bpMaterials] > 0)
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Materials (%i)", PlayerInfo[targetid][bpMaterials]);
	}
    if(PlayerInfo[targetid][bpPot])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Pot (%ig)", PlayerInfo[targetid][bpPot]);
	}
	if(PlayerInfo[targetid][bpCrack])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Crack: (%ig)", PlayerInfo[targetid][bpCrack]);
	}
	if(PlayerInfo[targetid][bpMeth])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Meth (%ig)", PlayerInfo[targetid][bpMeth]);
	}
	if(PlayerInfo[targetid][bpPainkillers])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Painkillers (%i)", PlayerInfo[targetid][bpPainkillers]);
	}

	switch(PlayerInfo[targetid][pSmuggleDrugs])
	{
	    case 1: SM(playerid, COLOR_REALRED, "Seeds package");
	    case 2: SM(playerid, COLOR_REALRED, "Crack package");
	    case 3: SM(playerid, COLOR_REALRED, "Raw ephedrine package");
	}

	for(new i = 0; i < 13; i ++)
	{
	    if(PlayerInfo[targetid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_REALRED, "%s", GetWeaponNameEx(PlayerInfo[targetid][pWeapons][i]));
		}
 	    else if(PlayerInfo[targetid][bpWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_REALRED, "Backpack: %s", GetWeaponNameEx(PlayerInfo[targetid][bpWeapons][i]));
		}
	}

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s searches for items on %s.", GetRPName(playerid), GetRPName(targetid));
}

DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	new package[12];
	switch(PlayerInfo[playerid][pSmuggleDrugs])
	{
	    case 0: package = "None";
	    case 1: package = "Seeds";
	    case 2: package = "Crack";
	    case 3: package = "Ephedrine";
	}
	SM(targetid, COLOR_REALRED, "_______ %s's inventory [Inventory Skill: %i/5] [%s] _______", GetRPName(playerid), PlayerInfo[playerid][pInventoryUpgrade], GetDate());
	SM(targetid, COLOR_WHITE, "(Pot: %i/%ig) - (Crack: %i/%ig) - (Meth: %i/%ig) - (Painkillers: %i/%ip) - (Seeds: %i/%i) - (Food: %i/5)\n", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED),
		PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE), PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH), PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS), PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS), PlayerInfo[playerid][pFoods]);
	SM(targetid, SERVER_COLOR, "(Materials: %s/%i) - (Ephedrine: %i/%ig) - (Muriatic acid: %i/20) - (Baking soda: %i/20) - (Drinks: %i)\n", AddCommas(PlayerInfo[playerid][pMaterials]), GetPlayerCapacity(playerid, CAPACITY_MATERIALS),
		PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE), PlayerInfo[playerid][pMuriaticAcid], PlayerInfo[playerid][pBakingSoda], PlayerInfo[playerid][pDrinks]);

	SM(targetid, COLOR_WHITE, "(Fishing rod: %s) - (Fish bait: %i/20) - (Boombox: %s) - (MP3 player: %s) - (Phonebook: %s)\n", (PlayerInfo[playerid][pFishingRod]) ? ("Yes") : ("No"), PlayerInfo[playerid][pFishingBait], (PlayerInfo[playerid][pBoombox]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pMP3Player]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SM(targetid, SERVER_COLOR, "(Drivers License: %s) - (Cigars: %i) - (Spraycans: %i/20) - (Bombs: %i/3) - (Repairkits: %i/10)\n", (PlayerInfo[playerid][pCarLicense]) ? ("Yes") : ("No"), PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pRepairkit]);
	SM(targetid, COLOR_WHITE, "(Portable Radio: %s) - (Mobile Phone: %s) - (Drug Package: %s) - (Rope: %i/10) - (Gascans: %i/10)\n", (PlayerInfo[playerid][pWalkieTalkie]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pPhone] == 0) ? ("Yes") : ("No"), package, PlayerInfo[playerid][pRope], PlayerInfo[playerid][pGasCan]);
    SM(targetid, SERVER_COLOR, "(Watch: %s) - (GPS: %s) - (Diamonds: %i) - (Dirty Cash: %i) - (Toolkit: %i/5)", (PlayerInfo[playerid][pWatch]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pGPS]) ? ("Yes") : ("No"), PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pToolkit]);
    SM(targetid, SERVER_COLOR, "(Robbed Watches: %s) - (Robbed Phones: %s)", AddCommas(PlayerInfo[playerid][pRobWatch]), AddCommas(PlayerInfo[playerid][pRobPhone]));
    SCM(targetid, COLOR_REALRED, "______________________________________________________________________");
	return 1;
}

DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], division[32], Float:health, Float:armor, Float:maxarmor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, PlayerInfo[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(PlayerInfo[playerid][pGender] == 1) gender = "Male";
	else if(PlayerInfo[playerid][pGender] == 2) gender = "Female";
	else if(PlayerInfo[playerid][pGender] == 3) gender = "Shemale";
	else if(PlayerInfo[playerid][pGender] == 4) gender = "Gay";
	else if(PlayerInfo[playerid][pGender] == 5) gender = "Lesbian";

	if(PlayerInfo[playerid][pFaction] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
	{
	    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "None", true))
	    {
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		}
		else
		{
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fShortName]);
		}

	    format(facrank, sizeof(facrank), "%s (%i)", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);

	    if(PlayerInfo[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A";
	    division = "None";
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[PlayerInfo[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A";
	}

	switch(PlayerInfo[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}

	if(playerid == MAX_PLAYERS)
	{
	    health = PlayerInfo[playerid][pHealth];
	    armor = PlayerInfo[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}

	SM(targetid, 0x7514F6FF,  	"_______________________________________________________________________________");
 	SM(targetid, COLOR_WHITE, 		"%s - (Level: %i) - (Gender: %s) - (Age: %i) - (Cash: $%s) - (Bank: $%s) - (Hours: %i) - (Ph Num: %i)\n", name, PlayerInfo[playerid][pLevel], gender, PlayerInfo[playerid][pAge], AddCommas(PlayerInfo[playerid][pCash]), AddCommas(PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pHours], PlayerInfo[playerid][pNumber]);
	SM(targetid, COLOR_NAVYBLUE,  	 	"(Total Wealth: $%s) - (Addict: %i/3) - (Asset: %i/4) - (Channel: %i) - (Report Warnings: %i/3)\n", AddCommas(PlayerInfo[playerid][pCash] + PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pChannel], PlayerInfo[playerid][pReportWarns]);
	SM(targetid, COLOR_WHITE, 		"(Job: %s / %s) - (Job Skill: %i) - (Crimes: %i) - (Arrested: %i) - (Jail Time: %i seconds)\n", GetJobName(PlayerInfo[playerid][pJob]), GetJobName(PlayerInfo[playerid][pSecondJob]), GetJobLevel(playerid, PlayerInfo[playerid][pJob]), PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pArrested], PlayerInfo[playerid][pJailTime]);
	SM(targetid, COLOR_NAVYBLUE,  	 	"(Spawn Health: %.1f/100.0) - (Spawn Armor: %.1f/%.1f)\n", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnArmor], maxarmor);
    SM(targetid, COLOR_WHITE, 		"(Faction: %s [%s %i -%s]) - (Gang: %s [%s %i]) - (Helper: %s) - (DM Warnings: %i/5) - (Weapon Restriction: %i Hrs)\n", faction, facrank, PlayerInfo[playerid][pFactionRank], division, gang, gangrank, PlayerInfo[playerid][pGangRank], GetHelperRank(playerid), PlayerInfo[playerid][pDMWarnings], PlayerInfo[playerid][pWeaponRestricted]);
	SM(targetid, COLOR_NAVYBLUE, 		"(VIP Package: %s) - (Married to: %s) - (Warnings: %i) - (Wanted Level: %i)\n", GetDonatorRank(PlayerInfo[playerid][pDonator]), PlayerInfo[playerid][pMarriedName], PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pWantedLevel]);
	SM(targetid, COLOR_WHITE,       "(Experience: %s/%s) - (Next Level: %s) - (Inventory Level: %i/5)\n",  AddCommas(PlayerInfo[playerid][pEXP]), AddCommas(PlayerInfo[playerid][pLevel] * 4), AddCommas((PlayerInfo[playerid][pLevel] + 1) * 200), PlayerInfo[playerid][pInventoryUpgrade]);

	if(PlayerInfo[targetid][pAdmin] > 0)
	{
	    SM(targetid, COLOR_WHITE, 	"(Interior: %i) - (Virtual: %i) - (AFK: %s) - (Reports: %i) - (Help Requests: %i)", (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? ("No") : ((PlayerInfo[playerid][pAFK]) ? ("Yes") : ("No")),
			PlayerInfo[playerid][pReports], PlayerInfo[playerid][pHelpRequests]);
	}
	SM(targetid, 0x7514F6FF,  	"_______________________________________________________________________________");
	return 1;
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];
    switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			format(string, sizeof(string), ""WHITE"Welcome to "SERVER_NAME"!\nYou can {AA3333}register "WHITE"an account by entering your desired password.\n\n"CXRP"Username: "WHITE"%s\n\n"RED"NOTE"WHITE":\nAn admin will never ask for your password.\nForgot the password? Create an account recovery request on discord.\n\n"CXRP"Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,""CXRP"Registration",string,"Register","Exit");
		}
		case DIALOG_LOGIN:
		{
			format(string, sizeof(string), ""WHITE"Welcome back to "SERVER_NAME"!\nThis account is already registered, please login below.\n\n"CXRP"Username: "WHITE"%s\n\n"RED"NOTE"WHITE":\nAn admin will never ask for your password.\nForgot the password? Create an account recovery request on discord.\n\n"CXRP"Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,""CXRP"Logging-in",string,"Login","Exit");
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, ""CXRP"Gender", "Male\nFemale\nShemale\nGay\nLesbian", "Select", "");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""CXRP"Age", ""WHITE"What age would you like your character to be (Between 13-99 years old):", "Submit", "Back");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""CXRP"Referral", ""WHITE"Have you been invited here by one of our players? Put their name:\n(Click on 'Skip' if you haven't been referred by anyone.)", "Submit", "Skip");
		}
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Cancel");
		}
		case DIALOG_CARGO:
		{
			ShowPlayerDialog( playerid, DIALOG_CARGO, DIALOG_STYLE_LIST, "Cargo", "Current Deliveries\nCancel Delivery\nCancel All Deliveries", "Select", "Close" );
		}
		case DIALOG_CARGOCANCEL:
		{
			new count = 0, weight = 0;
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			strcat( DialogStrgEx, "Item\tLocation\tWeight\tCash" );
			for(new j = 0; j < MAX_DELIVERIES; j++)
			{
				if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
				{
					PlayerDeliveryList[playerid][count] = j;
					count++;
					weight = weight + PlayerDeliveries[playerid][ j ][ player_del_weight ];
					new del = PlayerDeliveries[playerid][ j ][ player_del_id ];
					new fromdepot = PlayerDeliveries[playerid][ j ][ player_del_from ];
					new todepot = PlayerDeliveries[playerid][ j ][ player_del_to ];
					new cash = Deliveries[ fromdepot ][ del ][ delivery_cash ];
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s\n%s\t%s\t%d\t$%d", DialogStrgEx, Deliveries[ fromdepot ][ del ][ delivery_name ], TruckDepots[ todepot ][ dName ], Deliveries[ fromdepot ][ del ][ delivery_weight ], cash );
				}
			}
			if(count == 0)
			{
				ShowDialogToPlayer(playerid, DIALOG_CARGO);
			}
			else
			{
				new header[32];
				format(header, sizeof(header), "Deliveries | Total Weight: %d", weight);
				ShowPlayerDialog( playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, header, DialogStrgEx, "Select", "Back" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
		

		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s ($%i)", string, furnitureArray[i][fName], furnitureArray[i][fPrice]);
                }
            }

            PlayerInfo[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_AWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is $%i.)", PlayerInfo[playerid][pBank]);
	        ShowPlayerDialog(playerid, DIALOG_AWITHDRAW, DIALOG_STYLE_INPUT, ""WHITE"Cash Withdrawal | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_ADEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to deposit? (Your account balance is $%i.)", PlayerInfo[playerid][pBank]);
	        ShowPlayerDialog(playerid, DIALOG_ADEPOSIT, DIALOG_STYLE_INPUT, ""WHITE"Cash Deposit | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model", "Select", "Back");
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[PlayerInfo[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t"CXRP"$%i"WHITE"", string, i, FactionRanks[PlayerInfo[playerid][pFactionEdit]][i], FactionInfo[PlayerInfo[playerid][pFactionEdit]][fPaycheck][i]);
			}

			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, FactionInfo[PlayerInfo[playerid][pFactionEdit]][fName], string, "Change", "Cancel");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_MP3PLAYER:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nRadio Stations\nStop Music", "Select", "Cancel");
		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Browse Genres\nSearch by Name", "Select", "Back");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Choose a genre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], PlayerInfo[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Choose a subgenre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    /*if(PlayerInfo[playerid][pSearch])
		    {
		        mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pGenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
			else
			{
			    mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE genre = \"%e\" AND subgenre = \"%e\" ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pSubgenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}*/
			SCM(playerid, COLOR_SYNTAX, "Found noting.");
			return 1;
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Search by Name | "SERVER_NAME"", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}

		case DIALOG_GCLOTHES:
		{
		    if(!GetGangSkinCount(PlayerInfo[playerid][pGang]))
    		{
        		return SCM(playerid, COLOR_SYNTAX, "There are no skins setup for your gang.");
			}
			PlayerInfo[playerid][pSkinSelected] = -1;
    		ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "CXRP"Next{A9C4E4} to browse through available gang skins.", "Next", "Confirm");
		}

		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Gang Locker ($%i/$%i) (Materials: %i/%i)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH), GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Weapons\nDrugs\nMaterials\nCash\nClothes", "Select", "Cancel");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] 9mm (R1+)\n[%i] Sdpistol (R1+)\n[%i] Deagle (R3+)\n[%i] Shotgun (R1+)\n[%i] SPAS-12 (R4+)\n[%i] Tec-9 (R3+)\n[%i] Micro Uzi (R3+)\n[%i] MP5 (R3+)\n[%i] AK-47 (R4+)\n[%i] M4 (R4+)\n[%i] Rifle (R2+)\n[%i] Sniper (R4+)\n[%i] RPG (R5)",
		        GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RPG]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Gang Locker | Weapons", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Pot (%i/%ig)\nCrack (%i/%ig)\nMeth (%i/%ig)",
				GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang Locker | Drugs", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Pot", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Crack", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Meth", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Painkillers", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Withdraw (%i/%i)\nDeposit", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			ShowPlayerDialog(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Gang Locker | Materials", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Withdraw ($%i/$%i)\nDeposit", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang Locker | Cash", string, "Select", "Back");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to withdraw? (The safe contains $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
			}
			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang Stash Withdraw | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to deposit? (The safe contains $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang Stash Deposit | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSPRICES:
		{
		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tUZI\t$%s\t800 materials\n2\tTec-9\t$%s\t800 materials\n3\tMP5\t$%s\t1000 materials\n4\tDesert Eagle\t$%s\t1800 materials\n5\tShotgun\t$%s\t400 materials\n6\tRifle\t$%s\t600 materials\n7\tSD Pistol\t$%s\t200 materials\n8\t9mm\t$%s\t150 materials",
		        AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][0]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][1]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][2]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][3]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][4]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][5]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][6]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][7]));
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a weapon price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Arms dealer", "Buy Guns\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Gang arms dealer (Materials available: %s.)", AddCommas(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials]));

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tUZI\t$%s\t800 materials\n2\tTec-9\t$%s\t800 materials\n3\tMP5\t$%s\t1000 materials\n4\tDesert Eagle\t$%s\t1800 materials\n5\tShotgun\t$%s\t400 materials\n6\tRifle\t$%s\t600 materials\n7\tSD Pistol\t$%s\t200 materials\n8\t9mm\t$%s\t150 materials",
		        AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][0]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][1]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][2]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][3]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][4]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][5]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][6]), AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][7]));
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Back");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Arms dealer (Materials available: %s.)", AddCommas(GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]));
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit Mats\nWithdraw Mats", "Select", "Back");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "How much materials would you like to deposit? (This arms dealer contains %i materials.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Arms dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "How much materials would you like to withdraw? (This arms dealer contains %i materials.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEALER, DIALOG_STYLE_LIST, "Drug dealer", "Buy Drugs\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Drug dealer", string, "Buy", "Back");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot]);
			} else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Drug dealer | Buy", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Drug dealer (Pot: %i) (Crack: %i) (Meth: %i)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit drugs\nWithdraw drugs", "Select", "Back");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a drug price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Drug dealer | Deposit", string, "Select", "Back");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Drug dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Drug dealer | Withdraw", string, "Select", "Back");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Drug dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "List of Destination", "Job Locations\nNearest Businesses\nGeneral Locations\nPoints\nTurfs\nWash Money Locations\nNearby Stations", "Locate", "Close");
		}
		case DIALOG_PAINTBALL:
		{
		    string =  "Name\tType\tCurrent Players\n";
		    format(string, sizeof(string), "%sDeathmatch Arena\tFFA\t%i\n", string, GetArenaPlayers(1));
		    format(string, sizeof(string), "%sTeam Deathmatch Arena\tTDM\t%i\n", string, GetArenaPlayers(2));
		    format(string, sizeof(string), "%sDeagle Arena\t1Shot\t%i\n", string, GetArenaPlayers(3));
		    format(string, sizeof(string), "%sSniper Arena\t1Shot\t%i\n", string, GetArenaPlayers(4));
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball", string, "Select", "Cancel");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Question", "What should the question be? (displayed globally)", "Submit", "Back");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Answer", "What should the answer be? (displayed once answered)", "Submit", "Back");
			}
		}
	}
	return 1;
}

GetArenaPlayers(arena)
{
	new players;
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPaintball] == arena)
	    {
	        players++;
	    }
	}
	return players;
}

SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(PlayerInfo[playerid][pPosX] == 0.0 && PlayerInfo[playerid][pPosY] == 0.0 && PlayerInfo[playerid][pPosZ] == 0.0)
		{
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], -1962.7605, 137.8021, 27.6940, 89.9295, -1, -1, -1, -1, -1, -1);
		}
		else
		{
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ], 1.0, -1, -1, -1, -1, -1, -1);
		}		
		TogglePlayerSpectating(playerid, false);
	    SpawnPlayer(playerid);
	}
	else
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
			Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    if(IsPlayerInAnyVehicle(playerid))
	    {
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], x,y,z+5.0, a, -1, -1, -1, -1, -1, -1);
			TeleportToCoords(playerid, x, y, z + 5.0, a, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false);
	    }
		else
		{
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], x,y,z, a, -1, -1, -1, -1, -1, -1);
		}
	    SpawnPlayer(playerid);
	}
	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

SavePlayerWeapons(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pWeapons][8], PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pWeapons][12], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ResetBackpack(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty])
	{
		PlayerInfo[playerid][pBackpack] = 0;
		PlayerInfo[playerid][bpCash] = 0;
		PlayerInfo[playerid][bpMaterials] = 0;
		PlayerInfo[playerid][bpPot] = 0;
		PlayerInfo[playerid][bpCrack] = 0;
		PlayerInfo[playerid][bpMeth] = 0;
		PlayerInfo[playerid][bpPainkillers] = 0;
		PlayerInfo[playerid][bpWeapons][0] = 0;
		PlayerInfo[playerid][bpWeapons][1] = 0;
		PlayerInfo[playerid][bpWeapons][2] = 0;
		PlayerInfo[playerid][bpWeapons][3] = 0;
		PlayerInfo[playerid][bpWeapons][4] = 0;
		PlayerInfo[playerid][bpWeapons][5] = 0;
		PlayerInfo[playerid][bpWeapons][6] = 0;
		PlayerInfo[playerid][bpWeapons][7] = 0;
		PlayerInfo[playerid][bpWeapons][8] = 0;
		PlayerInfo[playerid][bpWeapons][9] = 0;
		PlayerInfo[playerid][bpWeapons][10] = 0;
		PlayerInfo[playerid][bpWeapons][11] = 0;
		PlayerInfo[playerid][bpWeapons][13] = 0;
		PlayerInfo[playerid][bpWeapons][14] = 0;
	}
	SavePlayerVariables(playerid);
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && !PlayerInfo[playerid][pAcceptedHelp] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY], PlayerInfo[playerid][pCameraZ]);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
			GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i WHERE uid = %i", PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY],
			PlayerInfo[playerid][pCameraZ], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld], PlayerInfo[playerid][pHealth], PlayerInfo[playerid][pArmor], PlayerInfo[playerid][pMinutes], PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pInjured], PlayerInfo[playerid][pHospital], PlayerInfo[playerid][pSpawnHealth],
			PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pJailType], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pID]); 
		mysql_tquery(connectionID, queryBuffer);


		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, dirtycash = %i, speedometer = %i, toggletextdraws = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i, backpack = %i, repairkit = %i, toolkit = %i, rob_phone = %i, rob_watch = %i, gascan = %i, flashlight = %i, chatanim = %i WHERE uid = %i", PlayerInfo[playerid][pNewbieMuted], PlayerInfo[playerid][pHelpMuted], PlayerInfo[playerid][pAdMuted],
			PlayerInfo[playerid][pLiveMuted], PlayerInfo[playerid][pGlobalMuted], PlayerInfo[playerid][pReportMuted], PlayerInfo[playerid][pReportWarns], PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pSpeedometer], PlayerInfo[playerid][pToggleTextdraws], PlayerInfo[playerid][pToggleOOC], PlayerInfo[playerid][pTogglePhone], PlayerInfo[playerid][pToggleAdmin], PlayerInfo[playerid][pToggleHelper], PlayerInfo[playerid][pToggleNewbie], PlayerInfo[playerid][pToggleWT],
			PlayerInfo[playerid][pToggleVIP], PlayerInfo[playerid][pBackpack], PlayerInfo[playerid][pRepairkit], PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pRobPhone], PlayerInfo[playerid][pRobWatch], PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pFlashlight], PlayerInfo[playerid][pChatAnim], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglechat = %i, togglehud = %i, pottime = %i, potgrams = %i, showturfs = %i, showzones=%i, watchon = %i, gpson = %i, pizzacooldown = %i, deathcooldown = %i, detectivecooldown = %i, carjackcooldown = %i, duty = %i, bandana = %i WHERE uid = %i", PlayerInfo[playerid][pToggleRadio], PlayerInfo[playerid][pToggleMusic],
			PlayerInfo[playerid][pToggleFaction], PlayerInfo[playerid][pToggleNews], PlayerInfo[playerid][pToggleGlobal], PlayerInfo[playerid][pToggleChat], PlayerInfo[playerid][pToggleHUD], PlayerInfo[playerid][pPotTime], PlayerInfo[playerid][pPotGrams], PlayerInfo[playerid][pShowTurfs], PlayerInfo[playerid][pShowSafeZones], PlayerInfo[playerid][pWatchOn], PlayerInfo[playerid][pGPSOn], PlayerInfo[playerid][pYFoodCooldown], PlayerInfo[playerid][pDeathCooldown],
			PlayerInfo[playerid][pDetectiveCooldown], PlayerInfo[playerid][pCarJackCooldown], PlayerInfo[playerid][pDuty], PlayerInfo[playerid][pBandana], PlayerInfo[playerid][pID]);
  		mysql_tquery(connectionID, queryBuffer);

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpcash = %i, bpmaterials = %i, bppot = %i, bpcrack = %i, bpmeth = %i, bppainkillers = %i, totalpatients = %i, totalfires = %i, rarecooldown = %i WHERE uid = %i", PlayerInfo[playerid][bpCash], PlayerInfo[playerid][bpMaterials], PlayerInfo[playerid][bpPot], PlayerInfo[playerid][bpCrack], PlayerInfo[playerid][bpMeth],
			PlayerInfo[playerid][bpPainkillers], PlayerInfo[playerid][pTotalPatients], PlayerInfo[playerid][pTotalFires], PlayerInfo[playerid][pRareTime], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_0 = %i, bpweapon_1 = %i, bpweapon_2 = %i, bpweapon_3 = %i, bpweapon_4 = %i, bpweapon_5 = %i, bpweapon_6 = %i, bpweapon_7 = %i, bpweapon_8 = %i, bpweapon_9 = %i, bpweapon_10 = %i, bpweapon_11 = %i, bpweapon_12 = %i, bpweapon_13 = %i, bpweapon_14 = %i WHERE uid = %i", PlayerInfo[playerid][bpWeapons][0], PlayerInfo[playerid][bpWeapons][1], PlayerInfo[playerid][bpWeapons][2], PlayerInfo[playerid][bpWeapons][3],
			PlayerInfo[playerid][bpWeapons][4], PlayerInfo[playerid][bpWeapons][5], PlayerInfo[playerid][bpWeapons][6], PlayerInfo[playerid][bpWeapons][7], PlayerInfo[playerid][bpWeapons][8], PlayerInfo[playerid][bpWeapons][9], PlayerInfo[playerid][bpWeapons][10], PlayerInfo[playerid][bpWeapons][11], PlayerInfo[playerid][bpWeapons][12], PlayerInfo[playerid][bpWeapons][13], PlayerInfo[playerid][bpWeapons][14], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i, thirst = %i, thirsttimer = %i, comserv = %i, comservskin = %i where uid = %d", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pHungerTimer], PlayerInfo[playerid][pThirst], PlayerInfo[playerid][pThirstTimer], PlayerInfo[playerid][pComserv],PlayerInfo[playerid][pComservSkin],PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

SendPaycheck(playerid)
{
    new interest, rate;
    new tax = Settings[gTax];
    new rent = 0, renting = -1;
	new total;
	switch(PlayerInfo[playerid][pDonator])
	{
	    case 0: rate = 1;
	    case 1: rate = 2;
	    case 2: rate = 3;
	    case 3: rate = 4;
	}

	interest = (PlayerInfo[playerid][pBank]/300) * rate;

	if(PlayerInfo[playerid][pLevel] < 22) interest += PlayerInfo[playerid][pLevel];

	if(interest > 50000)
	{
	    interest = 50000;
	}
	total += interest;
	tax = percent(total, tax);

	total -= tax;

 	if(PlayerInfo[playerid][pRentingHouse])
	{
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == PlayerInfo[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}
	SCM(playerid, SERVER_COLOR, "_______________________________");
	if(PlayerInfo[playerid][pFaction] >= 0 && FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]] > 0)
	{
	    SM(playerid, COLOR_GREY2, "Faction Pay: {33CC33}+$%i", FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]]);
	    total += FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]];
	}

	SM(playerid, COLOR_GREY2, "Interest: {33CC33}+$%i {C8C8C8}(Rate: %i Percent) [MAX: 50K]", interest, rate);
	SM(playerid, COLOR_GREY2, "Income Tax: "CXRP"-$%i {C8C8C8}(%i Percent)", tax, Settings[gTax]);

	if(renting != -1)
	{
		if(total >= rent || PlayerInfo[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	PlayerInfo[playerid][pBank] -= rent;
			}

			SM(playerid, COLOR_GREY2, "Rent Paid: "CXRP"-$%i", rent);
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}

	SM(playerid, COLOR_GREY2, "Old Balance: $%i", PlayerInfo[playerid][pBank]);
	SCM(playerid, SERVER_COLOR, "_______________________________");
	SM(playerid, COLOR_GREY2, "New Balance: $%i", PlayerInfo[playerid][pBank] + total);
	Dyuze(playerid, "Payday", "Added to bank account.");
    GiftAllowed = 1;
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = 0;
	    SCM(playerid, COLOR_RED, "You couldn't afford to pay rent and were evicted as a result.");
	}

	AddToTaxVault(tax);

	if((Settings[gDoubleXP]) || PlayerInfo[playerid][pDoubleXP] > 0) {
		PlayerInfo[playerid][pEXP] += 2;
	} else {
	    PlayerInfo[playerid][pEXP]++;
	}

    PlayerInfo[playerid][pHours]++;
    PlayerInfo[playerid][pMinutes] = 0;
	PlayerInfo[playerid][pBank] += total;	

	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		PlayerInfo[playerid][pWeaponRestricted]--;
	}
	if((!Settings[gDoubleXP]) && PlayerInfo[playerid][pDoubleXP] > 0)
	{
	    PlayerInfo[playerid][pDoubleXP]--;

	    if(PlayerInfo[playerid][pDoubleXP] > 0)
	        SM(playerid, COLOR_YELLOW, "Your double XP token expires in %i more hours.", PlayerInfo[playerid][pDoubleXP]);
		else
		    SCM(playerid, COLOR_YELLOW, "Your double XP token has expired.");
	}

	RandomGift(playerid);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", PlayerInfo[playerid][pEXP], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pWeaponRestricted], PlayerInfo[playerid][pDoubleXP], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    Settings[gTotalHours]++;
    SaveServerInfo();
}

RandomGift(playerid)
{
	new day, rand;
	getdate(.day=day);
	rand = Random(1, 5);
	if(PlayerInfo[playerid][pLastSign] != day)
	{
		switch(PlayerInfo[playerid][pDonator])
		{
			case 0:
			{
				switch(rand)
				{
					case 1: 
					{
						SetScriptArmour(playerid, 100.0);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won Full Armor as your first signcheck random gift of the day!");
					}
					case 2: 
					{
						GivePlayerCash(playerid, 1000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 1,000$ Cash as your first signcheck random gift of the day!");
					}
					case 3: 
					{
						GivePlayerCash(playerid, 2000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 2,000$ Cash as your first signcheck random gift of the day!");
					}
					case 4: 
					{
						GivePlayerCash(playerid, 2500);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 2,500$ Cash as your first signcheck random gift of the day!");
					}
					case 5: 
					{
						GiveWeapon(playerid, 22);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won a 9mm Pistol as your first signcheck random gift of the day!");
					}
					case 6: 
					{
						PlayerInfo[playerid][pPainkillers] += 4;
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4p Painkillers as your first signcheck random gift of the day!");
			    		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i, painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
    					mysql_tquery(connectionID, queryBuffer);
					}
				}
			}
			case 1:
			{
				switch(rand)
				{
					case 1: 
					{
						SetScriptArmour(playerid, 100.0);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won Full Armor as your first signcheck random gift of the day!");
					}
					case 2: 
					{
						GivePlayerCash(playerid, 3000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 3,000$ Cash as your first signcheck random gift of the day!");
					}
					case 3: 
					{
						GivePlayerCash(playerid, 3500);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 3,500$ Cash as your first signcheck random gift of the day!");
					}
					case 4: 
					{
						GivePlayerCash(playerid, 4000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4,000$ Cash as your first signcheck random gift of the day!");
					}
					case 5: 
					{
						GiveWeapon(playerid, 23);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won a Silenced Pistol as your first signcheck random gift of the day!");
					}
					case 6: 
					{
						PlayerInfo[playerid][pPainkillers] += 6;
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 6p Painkillers as your first signcheck random gift of the day!");
			    		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i, painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
    					mysql_tquery(connectionID, queryBuffer);
					}
				}
			}
			case 2:
			{
				switch(rand)
				{
					case 1: 
					{
						SetScriptArmour(playerid, 100.0);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won Full Armor as your first signcheck random gift of the day!");
					}
					case 2: 
					{
						GivePlayerCash(playerid, 3500);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 3,500$ Cash as your first signcheck random gift of the day!");
					}
					case 3: 
					{
						GivePlayerCash(playerid, 4000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4,000$ Cash as your first signcheck random gift of the day!");
					}
					case 4: 
					{
						GivePlayerCash(playerid, 4500);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4,500$ Cash as your first signcheck random gift of the day!");
					}
					case 5: 
					{
						GiveWeapon(playerid, 8);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won a Katana as your first signcheck random gift of the day!");
					}
					case 6: 
					{
					
						PlayerInfo[playerid][pPainkillers] += 8;
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 8p Painkillers as your first signcheck random gift of the day!");
			    		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i, painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
    					mysql_tquery(connectionID, queryBuffer);
					}
				}
			}
			case 3:
			{
				switch(rand)
				{
					case 1: 
					{
						SetScriptArmour(playerid, 100.0);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won Full Armor as your first signcheck random gift of the day!");
					}
					case 2: 
					{
						GivePlayerCash(playerid, 4000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4,000$ Cash as your first signcheck random gift of the day!");
					}
					case 3: 
					{
						GivePlayerCash(playerid, 4500);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 4,500$ Cash as your first signcheck random gift of the day!");
					}
					case 4: 
					{
						GivePlayerCash(playerid, 5000);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 5,000$ Cash as your first signcheck random gift of the day!");
					}
					case 5: 
					{
						GiveWeapon(playerid, 46);
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won a Parachute as your first signcheck random gift of the day!");
					}
					case 6: 
					{
						PlayerInfo[playerid][pPainkillers] += 10;
						SCM(playerid, COLOR_YELLOW, "Congratulations! You've won 10p Painkillers as your first signcheck random gift of the day!");
			    		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i, painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
    					mysql_tquery(connectionID, queryBuffer);
					}
				}
			}
		}
	}
	PlayerInfo[playerid][pLastSign] = day;
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastsign = %i WHERE uid = %i", PlayerInfo[playerid][pLastSign], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

HangupCall(playerid, reason)
{
	new callerid = PlayerInfo[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SCM(playerid, COLOR_WHITE, "** The call has been dropped...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
    	SCM(playerid, COLOR_WHITE, "** You hung up your phone and ended the call.");
		if(callerid != playerid)
		{
			SCM(callerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
			GivePlayerCash(callerid, -5);
		}
	}

	if(callerid != playerid)
	{
		if(ShowingPhone[playerid])
		{
			TextDrawHideForPlayer(playerid, notch);
			TextDrawHideForPlayer(playerid, body);
			TextDrawHideForPlayer(playerid, walp);
			TextDrawHideForPlayer(playerid, wtrmrk);
			TextDrawHideForPlayer(playerid, cam);
			TextDrawHideForPlayer(playerid, home);
			TextDrawHideForPlayer(playerid, call_text[0]);
			TextDrawHideForPlayer(playerid, call_text[1]);
			TextDrawHideForPlayer(playerid, call_stat);
			TextDrawHideForPlayer(playerid, call_pickup);
			TextDrawHideForPlayer(playerid, call_hangup);
			PlayerTextDrawHide(playerid, call_number[playerid]);
			CancelSelectTextDraw(playerid);
			ShowingPhone[playerid] = false;
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		if(IsPlayerAttachedObjectSlotUsed(callerid, 9))
		{
			RemovePlayerAttachedObject(callerid, 9);
		}

		PlayerInfo[callerid][pCallStage] = 0;
		PlayerInfo[callerid][pCallLine] = INVALID_PLAYER_ID;
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
	{
		RemovePlayerAttachedObject(playerid, 9);
	}

	KillTimer(PlayerInfo[playerid][pRingTimer]);
	KillTimer(PlayerInfo[PlayerInfo[playerid][pCallLine]][pRingTimer]);

	PlayerInfo[playerid][pCallStage] = 0;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	Settings[gVault] += amount;
	SaveServerInfo();
}

SaveServerInfo()
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET tax = %i", Settings[gTax]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET vault = %i", Settings[gVault]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET playerrecord = %i", Settings[gPlayerRecord]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET connections = %i", Settings[gConnections]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET registered = %i", Settings[gTotalRegistered]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET kills = %i", Settings[gTotalKills]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET deaths = %i", Settings[gTotalDeaths]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET hours = %i", Settings[gTotalHours]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET bans = %i", Settings[gAnticheatBans]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET turfcap = %i", Settings[TurfCapCount]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET pointcap = %i", Settings[PointCapCount]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET recorddate = \"%e\"", Settings[gRecordDate]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET motd = \"%e\"", Settings[gServerMOTD]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET adminmotd = \"%e\"", Settings[adminMOTD]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET helpermotd = \"%e\"", Settings[helperMOTD]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET doublexp = %i", Settings[gDoubleXP]);
    mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE settings SET mafiacash = %i", Settings[gMafiaCash]);
    mysql_tquery(connectionID, queryBuffer);
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);
}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        PlayerInfo[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[rRobbers][0], COLOR_AQUA, "You are now the leader of this bank heist!");
	            break;
			}
		}
	}

	PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The bank robbery is now finished. $%i was stolen from the bank.", RobberyInfo[rStolen]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 6;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}

ResetEvent()
{
	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

	if(EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pJoinedEvent] && IsPlayerConnected(i))
	        {
	            PlayerInfo[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}
    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;
	EventInfo[eFriendlyFire] = true;
	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}

CheckServerAd(szInput[])
{
	if(strfind(szInput, ":", true) != -1)
	{
		new
			iCount,
			iPeriod,
			iDash,
			iPos,
			iChar,
			iColon;

		while((iChar = szInput[iPos++]))
		{
			if('0' <= iChar <= '9') iCount++;
			else if(iChar == '.') iPeriod++;
			else if(iChar == '-') iDash++;
			else if(iChar == ':') iColon++;
		}
		if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, "play.") > -1 || strfind(szInput, ":7777") > -1) {
			return 1;
		}
	}

	return 0;
}

CheckValidText(szInput[])
{
	new count=0;
	for(new i = 0, l = strlen(szInput); i < l; i ++)
	{
	    if(szInput[i] == '{' || szInput[i] == '}' || szInput[i] == '|') count++;
	}

	if(count==0)
		return 0;
	else
		return 1;
}

PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

PlayerUseAnims(playerid)
{
	if(PlayerInfo[playerid][pOnSurgery] || PlayerInfo[playerid][pSurgery] || PlayerInfo[playerid][pJailTime] > 0 || pBlind[playerid] == 1 || PlayerInfo[playerid][pRes] == 1 || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED ||PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}
PlayerUseAnimsEx(playerid)
{
	if(PlayerInfo[playerid][pOnSurgery] || PlayerInfo[playerid][pSurgery] || PlayerInfo[playerid][pJailTime] > 0 || pBlind[playerid] == 1 || PlayerInfo[playerid][pRes] == 1 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED ||PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}

CanPlayerVehAnims(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) || PlayerInfo[playerid][pJailTime] > 0 || pBlind[playerid] == 1 || PlayerInfo[playerid][pRes] == 1 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED ||PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = PlayerInfo[playerid][pTaxiPassenger],
		bill = PlayerInfo[playerid][pTaxiBill],
		earned = PlayerInfo[playerid][pTaxiBill];

    if(PlayerInfo[playerid][pLaborUpgrade] != 0)
	{
	    earned += percent(earned, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
	    earned = earned*2;
	    SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	SM(passengerid, COLOR_AQUA, "This ride costed you "CXRP"$%i{CCFFFF}.", bill);
	SM(playerid, COLOR_AQUA, "You earned $%i on your paycheck for this ride.", bill);

	GivePlayerCash(passengerid, -bill);
	GivePlayerCash(playerid, earned);

	PlayerInfo[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pTaxiBill] = 0;
	PlayerInfo[playerid][pTaxiTime] = 0;
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (PlayerInfo[playerid][pJob] == job || PlayerInfo[playerid][pSecondJob] == job);
}

SetScriptArmour(playerid, Float:amount)
{
    PlayerInfo[playerid][pACTime] = gettime() + 5;
	PlayerInfo[playerid][pArmorTime] = gettime() + 5;
	PlayerInfo[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	PlayerInfo[playerid][pACTime] = gettime() + 2;
	PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}


GiveWeapon(playerid, weaponid, bool:temp = false)
{
    if(PlayerInfo[playerid][pWeaponRestricted]) return SCM(playerid, COLOR_RED, "One of weapons got removed due to you having weapon restrictions.");
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 19999);
	    }
		else
		{
			PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 28, 29, 32:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerInfo[playerid][pACTime] = gettime() + 2;
	}
	return 1;
}

IsAFlashingEXB(carid)
{
	switch(GetVehicleModel(carid)) {
		case 596, 597, 598, 599, 541, 426, 427, 416, 407, 560, 490: return 1;
	}
	return 0;
}
SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_escape_string(string, entry, .handle = connectionID);
	return entry;
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerInfo[playerid][pACTime] = gettime() + 2;
	}
}

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}
AddCommas(number, const separator[] = ",")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);

	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}

	return output;
}
PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (PlayerInfo[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}

	if((temp) && PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}
	return PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pJailType] && !PlayerInfo[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    if(PlayerInfo[playerid][pWeapons][i] > 0)
		    {
				if(16 <= PlayerInfo[playerid][pWeapons][i] <= 18)
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 1);
				else if(PlayerInfo[playerid][pWeapons][i] == 35)
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], PlayerInfo[playerid][pRPGAmmo]);
	    		else
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 19999);
			}
		}
	
		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
				SetPlayerArmedWeapon(playerid, 0);
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}

DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}
	return DestroyVehicle(vehicleid);
}

ResetVehicleObjects(vehicleid)
{
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}
 	adminVehicle{vehicleid} = false;
}

SetPlayerClothing(playerid)
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	PlayerInfo[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid, type)
{
	new rand = random(sizeof(paintballSpawns));
    if(PlayerInfo[playerid][pPaintball] == 0)
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}
	if(type == 1)
	{
		TeleportToCoords(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2], paintballSpawns[rand][3], 0, 1000, true, false);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 1;
	}
	else if(type == 2)
	{
		TeleportToCoords(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2], paintballSpawns[rand][3], 0, 1000+1, true, false);
		SetCameraBehindPlayer(playerid);

	    SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 2;
	}
	else if(type == 3)
	{
		TeleportToCoords(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2], paintballSpawns[rand][3], 0, 1000+2, true, false);
		SetCameraBehindPlayer(playerid);
	    SetPlayerHealth(playerid, 25.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 24, true);

		PlayerInfo[playerid][pPaintball] = 3;
	}
	else if(type == 4)
	{
		TeleportToCoords(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2], paintballSpawns[rand][3], 0, 1000+3, true, false);
		SetCameraBehindPlayer(playerid);
	    SetPlayerHealth(playerid, 38.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 4;
	}
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	PlayerInfo[playerid][bpWearing] = 0;
	PlayerInfo[playerid][pBandana] = 0;
	PlayerInfo[playerid][pJoinedEvent] = 1;

	if(EventInfo[eType] == 2)
	{
		PlayerInfo[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(PlayerInfo[playerid][pEventTeam] == RED_TEAM) {
			Dyuze(playerid, "Notice", "You are on ~r~Red Team.");
		} else if(PlayerInfo[playerid][pEventTeam] == BLUE_TEAM) {
			Dyuze(playerid, "Notice", "You are on ~b~Red Team.");
		}
	}
	else
	{
	    PlayerInfo[playerid][pEventTeam] = 0;
	}

	TeleportToCoords(playerid, EventInfo[ePosX][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosY][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosZ][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosA][PlayerInfo[playerid][pEventTeam]], EventInfo[eInterior], EventInfo[eWorld], true, false);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		Dyuze(playerid, "Event", EventInfo[eJoinText]);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SM(playerid, COLOR_YELLOW, "Event: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eQS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eHeal]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""));
	}

	if(EventInfo[eStarted] == 1)
	{
    	for(new x = 0; x < 5; x ++)
    	{
        	if(EventInfo[eWeapons][x])
        	{
        		GiveWeapon(playerid, EventInfo[eWeapons][x], true);
			}
    	}

	}

	return 1;
}

SetPlayerInHospital(playerid, time = 15)
{
    PlayerInfo[playerid][pHospitalTime] = time;
    PlayerInfo[playerid][pHospital] = 1;
	SetPlayerHealth(playerid, 50.0);
    TeleportToCoords(playerid, 1250.4784, 1684.3027 ,1061.8871, 270.0, 1, random(100)+4, true, false);
    Freeze(playerid);
    InterpolateCameraPos(playerid, 1390.5394,-29.0251,1002.9169, 1387.2024,-29.4142,1001.7923, 14000);
	InterpolateCameraLookAt(playerid, 1250.4784, 1684.3027, 1061.8871, 1250.4784, 1684.3027, 1061.8871, 14000);
}

SetPlayerInJail(playerid)
{
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(PlayerInfo[playerid][pJailType] == 2) // /jail /prison
	{
		switch(random(18))
        {
            case 0:
			{
				TeleportToCoords(playerid, 1843.8120,-1734.5715,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 1:
			{
				TeleportToCoords(playerid, 1840.6055,-1733.4417,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 2:
			{
				TeleportToCoords(playerid, 1837.4178,-1734.1273,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 3:
			{
				TeleportToCoords(playerid, 1834.2089,-1733.9061,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 4:
			{
				TeleportToCoords(playerid, 1831.0153,-1733.6606,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 5:
			{
				TeleportToCoords(playerid, 1827.8103,-1734.2410,5209.6860, 139.4496, 15, 3, true, false);
			}
			case 6:
			{
				TeleportToCoords(playerid, 1827.7245,-1712.1235,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 7:
			{
				TeleportToCoords(playerid, 1827.5768,-1732.1350,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 8:
			{
				TeleportToCoords(playerid, 1830.6626,-1732.5638,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 9:
			{
				TeleportToCoords(playerid, 1830.7206,-1711.0592,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 10:
			{
				TeleportToCoords(playerid, 1834.1281,-1711.2302,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 11:
			{
				TeleportToCoords(playerid, 1834.1409,-1732.5369,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 12:
			{
				TeleportToCoords(playerid, 1827.7245,-1712.1235,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 13:
			{
				TeleportToCoords(playerid, 1827.5768,-1732.1350,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 14:
			{
				TeleportToCoords(playerid, 1830.6626,-1732.5638,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 15:
			{
				TeleportToCoords(playerid, 1830.7206,-1711.0592,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 16:
			{
				TeleportToCoords(playerid, 1834.1281,-1711.2302,5202.5859, 139.4496, 15, 3, true, false);
			}
			case 17:
			{
				TeleportToCoords(playerid, 1834.1409,-1732.5369,5202.5859, 139.4496, 15, 3, true, false);
			}
		}
	}
	else if(PlayerInfo[playerid][pJailType] == 3) // IC prison
	{
		switch(random(6))
        {
            case 0:
			{
				TeleportToCoords(playerid, 251.5856,200.6198,1042.7686,180.1900, 10, 1, true, false);
			}
			case 1:
			{
				TeleportToCoords(playerid, 255.2264,200.6376,1042.7686,180.1954, 10, 1, true, false);
			}
			case 2:
			{
				TeleportToCoords(playerid, 258.5052,200.6535,1042.7686,180.1920, 10, 1, true, false);
			}
			case 3:
			{
				TeleportToCoords(playerid, 258.5064,194.1906,1042.7686,1.0673, 10, 1, true, false);
			}
			case 4:
			{
				TeleportToCoords(playerid, 255.0442,194.3200,1042.7686,1.0679, 10, 1, true, false);
			}
			case 5:
			{
				TeleportToCoords(playerid, 251.5441,194.3485,1042.7686,1.0668, 10, 1, true, false);
			}
		}
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
}

TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if(freeze)
	{
        Freeze(playerid);
		SetTimerEx("Unfreeze", 5000, false, "i", playerid);
	}

	if(vehicle && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 5000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        Freeze(playerid);
	}
}
TeleportToGarage(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = true, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
		Dyuze(playerid, "~r~Notice", "Loading objects...");
        Freeze(playerid);        
	}
}

ShowSafeZonesForPlayer(playerid, enable)
{
	for(new i = 0; i < MAX_ZONES; i ++)
	{
	    if(SafeZone[i][sExists])
	    {
		    if(enable) {
	            GangZoneShowForPlayer(playerid, SafeZone[i][sGangZone], 0xFF64fa7d);
			} else {
		    	GangZoneHideForPlayer(playerid, SafeZone[i][sGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowSafeZones] = enable;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET showzones = %i WHERE uid = %i", (PlayerInfo[playerid][pShowSafeZones]) ? (1) : (0), PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
}


ShowTurfsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1 && (GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE || GetFactionType(TurfInfo[i][tCapturer]) == FACTION_ARMY || GetFactionType(TurfInfo[i][tCapturer]) == FACTION_FEDERAL))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowTurfs] = enable;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET showturfs = %i WHERE uid = %i", (PlayerInfo[playerid][pShowTurfs]) ? (1) : (0), PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
}

ShowPointsOnMap(playerid, enable)
{
	if(enable)
	{
	    GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C);
	    GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C);
		ShowingBounds[playerid] = 1;
	}
	else
	{
		GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
		GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
		GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
		GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
		GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
		GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
		GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
		GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
		GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
		ShowingBounds[playerid] = 0;
	}
}

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
        PlayerInfo[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(PlayerInfo[playerid][pZoneID]);

	PlayerInfo[playerid][pZoneID] = -1;
	PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pMinX] = 0.0;
    PlayerInfo[playerid][pMinY] = 0.0;
    PlayerInfo[playerid][pMaxX] = 0.0;
    PlayerInfo[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    PlayerInfo[playerid][pCookMeth] = 0;
	PlayerInfo[playerid][pCookGrams] = 0;
	PlayerInfo[playerid][pCookTime] = 0;
}
new Float:StopaniFloats[MAX_PLAYERS][3];

ResetPlayer(playerid)
{
    for(new i = 0; i < 3; i++) {
		StopaniFloats[playerid][i] = 0;
	}

    if(PlayerInfo[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pJoinedEvent] = 0;
	}
	if(PlayerInfo[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);
	    PlayerInfo[playerid][pHospital] = 0;
	    PlayerInfo[playerid][pHospitalTime] = 0;
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
	}
	if(PlayerInfo[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(PlayerInfo[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    Unfreeze(playerid);
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    Unfreeze(playerid);
	    
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	    PlayerInfo[playerid][pPlantedBomb] = 0;
	}
	if(PlayerInfo[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(PlayerInfo[playerid][pFreezeTimer]);
	    Unfreeze(playerid);
	    
		PlayerInfo[playerid][pFreezeTimer] = -1;
	}
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pRobbingHouse] = -1;
	PlayerInfo[playerid][pRes] = 0;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pSpeedTime] = 0;
	PlayerInfo[playerid][pGraffiti] = -1;
	PlayerInfo[playerid][pGraffitiTime] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDelivered] = 0;
	PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pCapturingPoint] = -1;
    PlayerInfo[playerid][pCaptureTime] = 0;

 	CancelActiveCheckpoint(playerid);
 	RemovePlayerAttachedObject(playerid, 9);
}

CancelActiveCheckpoint(playerid)
{
    if(PlayerInfo[playerid][pDrivingTest])
	{
	    SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pYFoods] = 0;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pTestCP] = 0;
    PlayerInfo[playerid][pMiningRock] = 0;
    PlayerInfo[playerid][pShipment] = -1;
    PlayerInfo[playerid][pIllegalCargo] = -1;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", PlayerInfo[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	return 1;
}

SendNewbieChatMessage(playerid, text[])
{
	new string[64];

	if(PlayerInfo[playerid][pAdmin] > 1)
	{
	    format(string, sizeof(string), ""CXRP"%s{7DAEFF} %s", GetColorARank(playerid), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "{33CCFF}%s{7DAEFF} %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin %s", GetRPName(playerid));
	} else if(PlayerInfo[playerid][pDonator] > 0) {
		format(string, sizeof(string), "%s Donator %s", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Level %i Player %s", PlayerInfo[playerid][pLevel], GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_NEWBIE, "[?] %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SM(i, COLOR_NEWBIE, "[?] %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWBIE, "[?] %s: %s", string, text);
			}
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] == 0)
	{
 		PlayerInfo[playerid][pLastNewbie] = gettime();
	}
}

SellWeapon(playerid, targetid, weaponid, price = 0)
{
	new cost;

	switch(weaponid)
	{
	    case 1: cost = 50;
	    case 2, 5..8, 15: cost = 100;
	    case 22: cost = 1000;
	    case 23: cost = 1250;
	    case 25: cost = 2500;
	    case 29: cost = 10000;
	    case 28: cost = 7500;
	    case 33: cost = 5000;
		case 32: cost = 8500;
	}

    if(PlayerInfo[playerid][pMaterials] >= cost)
    {
		PlayerInfo[playerid][pMaterials] -= cost;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(targetid == playerid)
		{
		    SM(playerid, COLOR_AQUA, "You have crafted yourself a "CXRP"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts themselves a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SM(playerid, COLOR_AQUA, "You have sold %s a "CXRP"%s{CCFFFF} for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
			SM(targetid, COLOR_AQUA, "%s has sold you a "CXRP"%s{CCFFFF} for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
			GivePlayerCash(playerid, price);
			GivePlayerCash(targetid, -price);
		}
		if(cost > 100)
		{
			IncreaseJobSkill(playerid, JOB_ARMSDEALER);
		}
		else
		{
			SCM(playerid, COLOR_WHITE, "You did not make a gun. Therefore, you didn't get any Arms Dealer skill point.");
		}

		GiveWeapon(targetid, weaponid);
		return 1;
	}
	else
	{
	    SCM(targetid, COLOR_SYNTAX, "That player has ran out of materials.");
	}

	return 0;
}

Namechange(playerid, oldname[], newname[])
{
	if(Maskara[playerid])
	{
		SCM(playerid, COLOR_WHITE, "Your name changed while you were wearing a mask and now it has been taken off. You have to wear again");
	}
	Maskara[playerid] = 0;
	MaskaraID[playerid] = INVALID_PLAYER_ID;
    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
        {
            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
            ReloadHouse(i);
        }
    }

    for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
        {
            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
            ReloadGarage(i);
        }
    }

    for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
        {
            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
            ReloadBusiness(i);
        }
    }

    for(new i = 0; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
        {
            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
        }
    }

	// Updating queries.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE whitelist SET name = \"%s\" WHERE name = \"%s\"", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = \"%s\" WHERE owner = \"%s\"", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = \"%s\" WHERE owner = \"%s\"", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = \"%s\" WHERE owner = \"%s\"", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = \"%s\" WHERE owner = \"%s\"", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = \"%s\" WHERE uid = %i", newname, PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

	strcpy(PlayerInfo[playerid][pUsername], newname, MAX_PLAYER_NAME);

    SetPlayerName(playerid, newname);
    SavePlayerVariables(playerid);
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

NotAuth(playerid)
{
	return SCM(playerid, COLOR_GREY, "You are not authorized to use this command!");
}

forward Freeze(playerid);
public Freeze(playerid)
{
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Frozen", 1);
	return 1;
}

forward Unfreeze(playerid);
public Unfreeze(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetPVarInt(playerid, "Frozen", 0);
	return 1;
}

IsTactical(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE && (PlayerInfo[playerid][pDivision] == 1 || PlayerInfo[playerid][pFactionRank] >= 9);
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_ARMY;
}

IsMafia(playerid)
{
	return PlayerInfo[playerid][pMafia] == 1 || PlayerInfo[playerid][pMafia] == 2;
}

IsMedic(playerid)
{
    return GetFactionType(playerid) == FACTION_MEDIC;
}

IsNews(playerid)
{
	return GetFactionType(playerid) == FACTION_NEWS;
}

IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFindPlayer] == playerid && PlayerInfo[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}

IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}

IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Doors & Gates") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
			ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been deleted by an administrator.");
            SetPlayerSkin(i, 230);

	        PlayerInfo[i][pFaction] = -1;
	        PlayerInfo[i][pFactionRank] = 0;
	        PlayerInfo[i][pDivision] = -1;
	        PlayerInfo[i][pDuty] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;
	FactionInfo[factionid][fsCash] = 0;
	FactionInfo[factionid][fsMats] = 0;
	FactionInfo[factionid][fsPot] = 0;
	FactionInfo[factionid][fsCrack] = 0;
	FactionInfo[factionid][fsMeth] = 0;
	FactionInfo[factionid][fsPainkiller] = 0;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vFactionType] == FactionInfo[factionid][fType])
	    {
	        DespawnVehicle(i, false);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[i][vID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetFactionType(playerid)
{
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return FactionInfo[PlayerInfo[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

ReloadFaction(factionid)
{
	if(FactionInfo[factionid][fType] != FACTION_NONE)
	{
	    new facstring[128];

	    DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	    DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

	    if(FactionInfo[factionid][fLockerX] != 0.0 && FactionInfo[factionid][fLockerY] != 0.0 && FactionInfo[factionid][fLockerZ] != 0.0)
	    {
		    format(facstring, sizeof(facstring), "["WHITE"%s{FFFF00}]\n"WHITE"Locker Access\nType "CXRP"/lo "WHITE"to access locker.", FactionInfo[factionid][fName]);
	        FactionInfo[factionid][fText] = CreateDynamic3DTextLabel(facstring, COLOR_YELLOW, FactionInfo[factionid][fLockerX], FactionInfo[factionid][fLockerY], FactionInfo[factionid][fLockerZ], 10.0, .worldid = FactionInfo[factionid][fLockerWorld], .interiorid = FactionInfo[factionid][fLockerInterior]);
    	    FactionInfo[factionid][fPickup] = CreateDynamicPickup(1242, 1, FactionInfo[factionid][fLockerX], FactionInfo[factionid][fLockerY], FactionInfo[factionid][fLockerZ], .worldid = FactionInfo[factionid][fLockerWorld], .interiorid = FactionInfo[factionid][fLockerInterior]);
		}
	}
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
   	strcpy(FactionInfo[factionid][fShortName], "None", 24);
	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;
	FactionInfo[factionid][fsCash] = 0;
	FactionInfo[factionid][fsMats] = 0;
	FactionInfo[factionid][fsPot] = 0;
	FactionInfo[factionid][fsCrack] = 0;
	FactionInfo[factionid][fsMeth] = 0;
	FactionInfo[factionid][fsPainkiller] = 0;
	
    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, \"%e\", %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "Pending", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 6; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, \"%e\")", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable in %i hours.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable to capture!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1254, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128];

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "[(Level %i) Gang Stash]\n"WHITE"Owned by: %s", GangInfo[gangid][gLevel], GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1275, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Arms Dealer]\n"WHITE"Owned by: %s\nType /armsdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Drug Dealer]\n"WHITE"Owned by: %s\nType /drugdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}
	}
}



GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == gangid)
	    {
	        SM(i, COLOR_LIGHTRED, "The gang you were apart of has been deleted by an administrator.");
	        PlayerInfo[i][pGang] = -1;
	        PlayerInfo[i][pGangRank] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        DespawnVehicle(i, false);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[i][vID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}

    for(new i = 0; i < 6; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 4;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 15;
	    case 2: return 30;
	    case 3: return 50;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

IsAEdmCar(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 541, 451, 495, 487, 469, 411, 415, 506, 522: return 1;
	}
	return 0;
}

IsASportsCar(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 402, 475, 477, 494, 502, 503, 558, 559, 587, 602, 603, 535, 480, 424:return 1;
	}
	return 0;
}

IsAFourSeater(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 400, 560, 579, 567, 466, 540, 516, 492, 418:return 1;
	}
	return 0;
}

IsAUniqueCar(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 444, 470, 500, 556, 557, 568, 573:return 1;
	}
	return 0;
}

IsVehicleModel(modelid)
{
	new mod;
	switch(modelid)
	{
	    case 0: mod = MODEL_ERROR;
	    case 481,509,510: mod = MODEL_BIKE;
	    case 448,461,462,463,468,471,521,522,523,581,586: mod = MODEL_MBIKE;
		case 430,446,452,453,454,472,473,484,493,595: mod = MODEL_BOAT;
	    case 417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593: mod = MODEL_PLANE;
	    default: mod = MODEL_CAR;
	}
	return mod;
}

GetVehicleGarage(vehicleid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == PlayerInfo[playerid][pID]) || (VehicleInfo[vehicleid][vOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		// ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

#pragma unused ReloadVehicleNeon
#pragma unused SetVehicleNeon

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    // if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	// {
	// 	ReloadVehicleNeon(vehicleid);
    // }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
			if(IsComponentidCompatible(GetVehicleModel(vehicleid), VehicleInfo[vehicleid][vMods][i]))
	        	AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE)
	{
		new string[128];
		if(VehicleInfo[vehicleid][vFactionType] == FACTION_POLICE)
		{
			format(string, sizeof(string), "SFPD-%i", vehicleid);
		}
		else if(VehicleInfo[vehicleid][vFactionType] == FACTION_MEDIC)
		{
			format(string, sizeof(string), "EFMD-%i", vehicleid);
		}
		else if(VehicleInfo[vehicleid][vFactionType] == FACTION_NEWS)
		{
			format(string, sizeof(string), "LSNB-%i", vehicleid);
		}
		else if(VehicleInfo[vehicleid][vFactionType] == FACTION_GOVERNMENT)
		{
			format(string, sizeof(string), "GOV-%i", vehicleid);
      	}
		SetVehicleNumberPlate(vehicleid, string);
	}
	else if(VehicleInfo[vehicleid][vDonator] != 0)
	{
		switch(VehicleInfo[vehicleid][vDonator])
		{
			case 3:
			{
				SetVehicleNumberPlate(vehicleid, "P. VIP");
			}
			case 2:
			{
				SetVehicleNumberPlate(vehicleid, "G. VIP");
			}
			case 1:
			{
				SetVehicleNumberPlate(vehicleid, "S. VIP");
			}
		}
	}

	else if(strval(VehicleInfo[vehicleid][vPlate]) == -1)
	{
	    new plate[15];
	    format(plate, sizeof(plate), "BRTC-%i", vehicleid);
	    SetVehicleNumberPlate(vehicleid, plate);
	}
	else
	{
		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
	}
	
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
	ResyncVehicle(vehicleid);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);
	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vPlate], "-1", 32);

    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vOwner] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vPot] = 0;
	VehicleInfo[vehicleid][vCrack] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vWeapons][3] = 0;
	VehicleInfo[vehicleid][vWeapons][4] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vDonator] = 0;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vImpounded] = 0;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}
	ResetVehicleObjects(vehicleid);
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

ReloadSafeZone(zoneid)
{
	if(SafeZone[zoneid][sExists])
	{
	    new
	        string[128];

	    DestroyDynamicArea(SafeZone[zoneid][sArea]);
	    GangZoneDestroy(SafeZone[zoneid][sGangZone]);

	    SafeZone[zoneid][sArea] = CreateDynamicRectangle(SafeZone[zoneid][sMinX], SafeZone[zoneid][sMinY], SafeZone[zoneid][sMaxX], SafeZone[zoneid][sMaxY]);
	    SafeZone[zoneid][sGangZone] = GangZoneCreateEx(SafeZone[zoneid][sMinX], SafeZone[zoneid][sMinY], SafeZone[zoneid][sMaxX], SafeZone[zoneid][sMaxY]);

		format(string, sizeof(string), "{00FF00}Safe Zone Area\n{FFFFFF}Roleplays allowed but fights aren't allowed.");

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pShowSafeZones])
	        {
	            GangZoneShowForPlayer(i, SafeZone[zoneid][sGangZone], 0xFF64fa7d);
			}
		}
	}
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Atm_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if ((ObjectData[i][mobjModel] == 2942 || ObjectData[i][mobjModel] == 19324) && GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			return i;
	}
	return -1;
}

Object_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return i;
	}
	return -1;
}

Object_Nearest_Model(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return ObjectData[i][mobjModel];
	}
	return -1;
}


forward Toll_G10();
forward Toll_G9();
forward Toll_G8();
forward Toll_G7();
forward Toll_G6();
forward Toll_G5();
forward Toll_G4();
forward Toll_G3();
forward Toll_G2();
forward Toll_G();

public Toll_G10()
{
      DestroyDynamicObject( Border000 );
      Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
      Border00 = 0;
      return 1;
}
public Toll_G9()
{
      DestroyDynamicObject( Border999 );
      Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
      Border99 = 0;
      return 1;
}
public Toll_G8()
{
      DestroyDynamicObject( Border888 );
      Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
      Border88 = 0;
      return 1;
}
public Toll_G7()
{
      DestroyDynamicObject( Border777 );
      Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
      Border77 = 0;
      return 1;
}
public Toll_G5()
{
      DestroyDynamicObject( Border555 );
      Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
      Border55 = 0;
      return 1;
}
public Toll_G6()
{
      DestroyDynamicObject( Border666 );
      Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
      Border66 = 0;
      return 1;
}
public Toll_G3()
{
      DestroyDynamicObject( Border333 );
      Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
      Border33 = 0;
      return 1;
}
public Toll_G4()
{
      DestroyDynamicObject( Border444 );
      Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
      Border44 = 0;
      return 1;
}
public Toll_G2()
{
      DestroyDynamicObject( Border222 );
      Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);
      Border22 = 0;
      return 1;
}

public Toll_G()
{
      DestroyDynamicObject( Border111 );
	  Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);//
      Border11 = 0;
      return 1;
}

IsPlayerSpawned(playerid)
{
	switch(GetPlayerState(playerid))
	{
	    case PLAYER_STATE_ONFOOT:
	    {
	        return 1;
	    }
	    case PLAYER_STATE_DRIVER:
	    {
	        return 1;
	    }
		case PLAYER_STATE_PASSENGER:
		{
		    return 1;
		}
		case PLAYER_STATE_SPAWNED:
		{
		    return 1;
		}
	}
	return 0;
}

SetVehicleTireStatus(vehicleid, tire)
{
	VehicleTire[vehicleid][tire]=1;
	new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	tires=encode_tires(GetVehicleTireStatus(vehicleid,0), GetVehicleTireStatus(vehicleid,1), GetVehicleTireStatus(vehicleid,2), GetVehicleTireStatus(vehicleid,3));
	UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	return 1;
}

GetVehicleTireStatus(vehicleid,tire)
{
	if(VehicleTire[vehicleid][tire]==1)
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}


// Jeck
ShowGPSTextdraw(playerid) {
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][1]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][2]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
}

HideGPSTextdraw(playerid) {
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][1]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][2]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
}

ShowAdTD()
{
	TextDrawShowForAll(Ad_TD[0]);
}

GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionInfo[i][fType] == sqlid)
	    return i;

	return -1;
}

GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

forward OnObjectCreated(gateid);
public OnObjectCreated(gateid)
{
	if (gateid == -1 || !ObjectData[gateid][mobjExists])
	    return 0;

	ObjectData[gateid][mobjID] = cache_insert_id();
	Object_Save(gateid);
	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id();
	Gate_Save(gateid);

	return 1;
}

Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "%.0f MPH Speed Limit\n"GREY"(( Type '/rules' > 'Speed Laws' for info. ))", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, 0xFF0000FF, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

GiftBox(playerid, giveplayerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || playerid == MAX_PLAYERS)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 90)
		{
		    new gift = Random(1, 7);
		    if(gift == 1)
		    {
          		if(PlayerInfo[giveplayerid][pWeaponRestricted])
          		{
				    return GiftBox(playerid, giveplayerid);
				}
				GiveWeapon(playerid, 25);
		        SendClientMessage(giveplayerid, COLOR_GREY2, " Congratulations! - You won Shotgun");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a shotgun, enjoy!", GetRPName(giveplayerid));
		    }
		    else if(gift == 2)
		    {
          		if(PlayerInfo[giveplayerid][pWeaponRestricted])
          		{
				    return GiftBox(playerid, giveplayerid);
				}
		        GiveWeapon(playerid, 23);
		        SM(giveplayerid, COLOR_GREY2, "Congratulations, you have won a Silenced Pistol!");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a Silenced Pistol, enjoy!", GetRPName(giveplayerid));
		    }
		    else if(gift == 3)
		    {
		        PlayerInfo[giveplayerid][pMaterials] += 2000;
		        SM(giveplayerid, COLOR_GREY2, "Congratulations, you have won 2,000 materials!");
	         	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[giveplayerid][pMaterials], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 4)
		    {
				PlayerInfo[giveplayerid][pPot] += 50;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 50 grams of pot!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 50 grams of pot, enjoy!", GetRPName(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[giveplayerid][pPot], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 5)
		    {
		        PlayerInfo[giveplayerid][pCrack] += 25;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 25 grams of crack!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 25 grams of cocaine, enjoy!", GetRPName(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[giveplayerid][pCrack], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 6)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $20,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $20,000, enjoy!", GetRPName(giveplayerid));
		    }
		}
		else if(randgift > 90 && randgift <= 99)
		{
		    new gift = Random(1, 5);
			if(gift == 1)
			{
			    GivePlayerCash(giveplayerid, 15000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $15,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $15,000, enjoy!", GetRPName(giveplayerid));
			}
			else if(gift == 2)
			{
			    PlayerInfo[giveplayerid][pMaterials] += 15000;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 15,000 materials!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 15,000 materials, enjoy!", GetRPName(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[giveplayerid][pMaterials], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 3)
			{
			    PlayerInfo[giveplayerid][pUpgradePoints] += 10;
				SM(giveplayerid, COLOR_GREY, " Congratulations, you have won 10 upgrade points!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 10 upgrade points, enjoy!", GetRPName(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", PlayerInfo[giveplayerid][pUpgradePoints], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 4)
			{
			    GivePlayerCash(giveplayerid, 20000);
				SM(giveplayerid, COLOR_GREY, " Congratulations, you have won a $20,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $20,000, enjoy!", GetRPName(giveplayerid));
			}
		}
		else if(randgift > 99 && randgift <= 100)
		{
		    new gift = Random(1, 4);
			if(gift == 1 && PlayerInfo[giveplayerid][pDonator] <= 2)
			{
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 5 days of Diamond VIP!");
				SM(giveplayerid, COLOR_GREY, " Note: This rare reward may take up to 48 hours to be rewarded.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Diamond VIP')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just won one month of {D909D9}Diamond VIP{FFFF00} from giftbox.", GetRPName(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 5 days of Diamond VIP, enjoy!", GetRPName(giveplayerid));
			}
			if(gift == 1)
			{
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won a free house!");
				SM(giveplayerid, COLOR_GREY, " Note: This rare reward may take up to 48 hours to be rewarded.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Free House')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just won a free house from giftbox.", GetRPName(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a free house, enjoy!", GetRPName(giveplayerid));
			}
			else if(gift == 2)
			{
				GivePlayerCash(giveplayerid, 100000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $100,000!");
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}:%s has just won $100,000 from the giftbox.", GetRPName(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $100,000, enjoy!", GetRPName(giveplayerid));
			}
		}
	}
	return 1;
}

Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}
forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id();
	Speed_Save(speedid);

	return 1;
}
forward Speed_Load();
public Speed_Load()
{
	new rows;
	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	   	cache_get_value_name_int(i, "speedID", SpeedData[i][speedID]);
	    cache_get_value_name_float(i, "speedRange", SpeedData[i][speedRange]);
	    cache_get_value_name_float(i, "speedLimit", SpeedData[i][speedLimit]);
	    cache_get_value_name_float(i, "speedX", SpeedData[i][speedPos][0]);
	    cache_get_value_name_float(i, "speedY", SpeedData[i][speedPos][1]);
	    cache_get_value_name_float(i, "speedZ", SpeedData[i][speedPos][2]);
	    cache_get_value_name_float(i, "speedAngle", SpeedData[i][speedPos][3]);

	    Speed_Refresh(i);
	}
	return 1;
}

IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }   
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
} 


forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

Object_Duplicate(playerid, idx)
{
	for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
	{
		ObjectData[i][mobjExists] = true;
		ObjectData[i][mobjModel] = ObjectData[idx][mobjModel];

		ObjectData[i][mobjPos][0] = ObjectData[idx][mobjPos][0];
		ObjectData[i][mobjPos][1] = ObjectData[idx][mobjPos][1];
		ObjectData[i][mobjPos][2] = ObjectData[idx][mobjPos][2];
		ObjectData[i][mobjPos][3] = ObjectData[idx][mobjPos][3];
		ObjectData[i][mobjPos][4] = ObjectData[idx][mobjPos][4];
		ObjectData[i][mobjPos][5] = ObjectData[idx][mobjPos][5];

		ObjectData[i][mobjInterior] = ObjectData[idx][mobjInterior];
		ObjectData[i][mobjWorld] = ObjectData[idx][mobjWorld];

		ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[idx][mobjModel], ObjectData[idx][mobjPos][0], ObjectData[idx][mobjPos][1], ObjectData[idx][mobjPos][2], ObjectData[idx][mobjPos][3], ObjectData[idx][mobjPos][4], ObjectData[idx][mobjPos][5], ObjectData[idx][mobjWorld], ObjectData[idx][mobjInterior]);

		mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

		PlayerInfo[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[i][mobjObject]);
		PlayerInfo[playerid][pEditmObject] = i;
		PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
		return i;
	}
	return -1;
}

Object_Create(playerid, idx)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
		{
		    ObjectData[i][mobjExists] = true;
			ObjectData[i][mobjModel] = idx;

			ObjectData[i][mobjPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][mobjPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][mobjPos][2] = z;
			ObjectData[i][mobjPos][3] = 0.0;
			ObjectData[i][mobjPos][4] = 0.0;
			ObjectData[i][mobjPos][5] = angle;

            ObjectData[i][mobjInterior] = GetPlayerInterior(playerid);
            ObjectData[i][mobjWorld] = GetPlayerVirtualWorld(playerid);

            ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);
			ObjectData[i][mobjRob] = 0;
			mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

			PlayerInfo[playerid][pEditmObject] = -1;
			EditDynamicObject(playerid, ObjectData[i][mobjObject]);
			PlayerInfo[playerid][pEditmObject] = i;
			PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
			SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
			return i;
		}
	}
	return -1;
}

Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(connectionID, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

Object_Delete(gateid)
{
	if (gateid != -1 && ObjectData[gateid][mobjExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `object` WHERE `mobjID` = '%d'", ObjectData[gateid][mobjID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(ObjectData[gateid][mobjObject]))
		    DestroyDynamicObject(ObjectData[gateid][mobjObject]);

	    ObjectData[gateid][mobjExists] = false;
	    ObjectData[gateid][mobjID] = 0;
	}
	return 1;
}

Object_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `object` SET `mobjModel` = '%d', `mobjX` = '%.4f', `mobjY` = '%.4f', `mobjZ` = '%.4f', `mobjRX` = '%.4f', `mobjRY` = '%.4f', `mobjRZ` = '%.4f', `mobjInterior` = '%d', `mobjWorld` = '%d' WHERE `mobjID` = '%d'",
	    ObjectData[gateid][mobjModel],
	    ObjectData[gateid][mobjPos][0],
	    ObjectData[gateid][mobjPos][1],
	    ObjectData[gateid][mobjPos][2],
	    ObjectData[gateid][mobjPos][3],
	    ObjectData[gateid][mobjPos][4],
	    ObjectData[gateid][mobjPos][5],
	    ObjectData[gateid][mobjInterior],
	    ObjectData[gateid][mobjWorld],
	    ObjectData[gateid][mobjID]
	);
	return mysql_tquery(connectionID, query);
}

Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = \"%s\" WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(connectionID, query);
}

forward Gate_Load();
public Gate_Load()
{
    new rows;
	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    cache_get_value_name_int(i, "gateID", GateData[i][gateID]);
	    cache_get_value_name_int(i, "gateModel", GateData[i][gateModel]);
	    cache_get_value_name_float(i, "gateSpeed", GateData[i][gateSpeed]);
	    cache_get_value_name_float(i, "gateRadius", GateData[i][gateRadius]);
	    cache_get_value_name_int(i, "gateTime", GateData[i][gateTime]);
	    cache_get_value_name_int(i, "gateInterior", GateData[i][gateInterior]);
	    cache_get_value_name_int(i, "gateWorld", GateData[i][gateWorld]);

	    cache_get_value_name_float(i, "gateX", GateData[i][gatePos][0]);
	    cache_get_value_name_float(i, "gateY", GateData[i][gatePos][1]);
	    cache_get_value_name_float(i, "gateZ", GateData[i][gatePos][2]);
	    cache_get_value_name_float(i, "gateRX", GateData[i][gatePos][3]);
	    cache_get_value_name_float(i, "gateRY", GateData[i][gatePos][4]);
	    cache_get_value_name_float(i, "gateRZ", GateData[i][gatePos][5]);

        cache_get_value_name_float(i, "gateMoveX", GateData[i][gateMove][0]);
	    cache_get_value_name_float(i, "gateMoveY", GateData[i][gateMove][1]);
	    cache_get_value_name_float(i, "gateMoveZ", GateData[i][gateMove][2]);
	    cache_get_value_name_float(i, "gateMoveRX", GateData[i][gateMove][3]);
	    cache_get_value_name_float(i, "gateMoveRY", GateData[i][gateMove][4]);
	    cache_get_value_name_float(i, "gateMoveRZ", GateData[i][gateMove][5]);

        cache_get_value_name_int(i, "gateLinkID", GateData[i][gateLinkID]);
	    cache_get_value_name_int(i, "gateFaction", GateData[i][gateFaction]);

	    cache_get_value_name(i, "gatePass", GateData[i][gatePass], 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward saveBiz(businessid);
public saveBiz(businessid)
{
	for (new j = 0; j < 21; j ++)
	{
	 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%i = %i WHERE id = %i", j, BusinessInfo[businessid][bPrices][j], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", BusinessInfo[businessid][bType], BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = \"%s\" WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i, locked = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i, cash = %i, biztime = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bCash], BusinessInfo[businessid][bTime], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET name = \"%s\", message = \"%s\" WHERE id = %i", BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);
}

forward Object_Load();
public Object_Load()
{
    static
	    rows;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAPOBJECTS)
	{
	    ObjectData[i][mobjExists] = true;
	    cache_get_value_name_int(i, "mobjID", ObjectData[i][mobjID]);
	    cache_get_value_name_int(i, "mobjModel", ObjectData[i][mobjModel]);
	    cache_get_value_name_int(i, "mobjInterior", ObjectData[i][mobjInterior]);
	    cache_get_value_name_int(i, "mobjWorld", ObjectData[i][mobjWorld]);
	    cache_get_value_name_float(i, "mobjX", ObjectData[i][mobjPos][0]);
	    cache_get_value_name_float(i, "mobjY", ObjectData[i][mobjPos][1]);
	    cache_get_value_name_float(i, "mobjZ", ObjectData[i][mobjPos][2]);
	    cache_get_value_name_float(i, "mobjRX", ObjectData[i][mobjPos][3]);
	    cache_get_value_name_float(i, "mobjRY", ObjectData[i][mobjPos][4]);
	    cache_get_value_name_float(i, "mobjRZ", ObjectData[i][mobjPos][5]);
		ObjectData[i][mobjRob] = 0;

	    ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

		if(ObjectData[i][mobjExists] && (ObjectData[i][mobjModel] == 19324 || ObjectData[i][mobjModel] == 2942))
		{
			CreateDynamic3DTextLabel("ATM Machine\n"CXRP"(( Type '/atmhelp' to withdraw cash. ))", COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2] + 0.4, 10.0, .worldid=ObjectData[i][mobjWorld], .interiorid=ObjectData[i][mobjInterior]);
		}
	}
	return 1;
}

number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

RBS(bizid)
{
	new string[128];
	if(BusinessInfo[bizid][bLocked] == 1) format(string, sizeof(string), "{AA3333}Closed"WHITE"");
    else if(BusinessInfo[bizid][bLocked] == 0) format(string, sizeof(string), "{00FF00}Opened"WHITE"");
	return string;
}

FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

TerminateInfo(playerid, reason)
{
	if(IsPlayerNPC(playerid)) return 1;


	PlayerTextDrawDestroy(playerid, call_number[playerid]);

	if(inharvesterjob[playerid] == 1)
	{
	    new money = countplant[playerid]*1 + countplantEx[playerid]*2;
	    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
		{
			money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
		}
		if(gDoubleSalary)
		{
		    money = money*2;
		}
		SetPlayerSkin(playerid, harvesterskin[playerid]);
		GivePlayerCash(playerid, money);
		inharvesterjob[playerid] = 0;
	}

	if(onmeat[playerid] == 1)
	{
	    new money = countmeat[playerid]*1 + countmeatEx[playerid]*2;
	    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
		{
			money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
		}
		if(gDoubleSalary)
		{
		    money = money*2;
		}
		SetPlayerSkin(playerid, meatskin[playerid]);
		GivePlayerCash(playerid, money);
		onmeat[playerid] = 0;
	}

	if(onwood[playerid] == 1)
	{
	    new money = countwood[playerid]*1 + countwoodEx[playerid]*2;
	    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
		{
			money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
		}
		if(gDoubleSalary)
		{
		    money = money*2;
		}
		SetPlayerSkin(playerid, lumberskin[playerid]);
		GivePlayerCash(playerid, money);
		onwood[playerid] = 0;
	}

	Damaged[playerid] = 0;
	DamageAmount[playerid] = 0.0;
	DamageBone[playerid] = -1;
	strcpy(DamageBy[playerid], "N/A", MAX_PLAYER_NAME);
	DamageWep[playerid] = -1;
	strcpy(DamageTime[playerid], "N/A", 256);

	new string[256];
    format(string, sizeof(string), "unbanip %s", ReconnectIP[playerid]);
    SendRconCommand(string);
    Reconnecting[playerid] = false;
	PlayerTextDrawDestroy(playerid, HungerTD[playerid]);

	DestroyDynamic3DTextLabel(InjuredLabel[playerid]);
	Maskara[playerid] = 0;
	ResetPlayerVariables(playerid);
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SM(i, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerInfo[i][pSpectating]), PlayerInfo[i][pSpectating]);
	    	PlayerInfo[i][pSpectating] = INVALID_PLAYER_ID;
	    	StopSpectate(i);
		}
		if(PlayerInfo[i][pHouseOffer] == playerid)
		{
		    PlayerInfo[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pGarageOffer] == playerid)
		{
		    PlayerInfo[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pBizOffer] == playerid)
		{
		    PlayerInfo[i][pBizOffer] = INVALID_PLAYER_ID;
		}
 		if(PlayerInfo[i][pMarriageOffer] == playerid)
		{
		    PlayerInfo[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pVestOffer] == playerid)
		{
		    PlayerInfo[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pCarOffer] == playerid)
		{
		    PlayerInfo[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFactionOffer] == playerid)
		{
		    PlayerInfo[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pGangOffer] == playerid)
		{
		    PlayerInfo[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFriskOffer] == playerid)
		{
		    PlayerInfo[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveOffer] == playerid)
		{
		    PlayerInfo[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveBroadcast] == playerid)
		{
		    PlayerInfo[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pShakeOffer] == playerid)
		{
		    PlayerInfo[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pSellOffer] == playerid)
		{
		    PlayerInfo[i][pSellOffer] = INVALID_PLAYER_ID;
		}
 		if(PlayerInfo[i][pAllianceOffer] == playerid)
		{
		    PlayerInfo[i][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pDefendOffer] == playerid)
		{
		    PlayerInfo[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDiceOffer] == playerid)
		{
		    PlayerInfo[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pInviteOffer] == playerid)
		{
		    PlayerInfo[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRobberyOffer] == playerid)
		{
		    PlayerInfo[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTextFrom] == playerid)
		{
		    PlayerInfo[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pWhisperFrom] == playerid)
		{
		    PlayerInfo[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFindPlayer] == playerid)
		{
		    PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRemoveFrom] == playerid)
		{
		    PlayerInfo[i][pRemoveFrom] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SM(i, COLOR_YELLOW, "Your chat with %s (ID %i) has ended as they left the server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(PlayerInfo[i][pActiveReport] >= 0 && (ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[PlayerInfo[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid)
				SCM(i, COLOR_YELLOW, "The admin who accepted the report has left the server.");
			else
                SCM(i, COLOR_YELLOW, "The player who made the report has left the server.");

		    ReportInfo[PlayerInfo[i][pActiveReport]][rExists] = 0;
		    PlayerInfo[i][pActiveReport] = -1;
		}
		if(PlayerInfo[i][pDueling] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Your duel target has left the server.");
		    PlayerInfo[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(PlayerInfo[i][pContractTaken] == playerid)
		{
		    SCM(i, COLOR_YELLOW, "Your contract target has disconnected from the server.");
		    PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDraggedBy] == playerid)
		{
		    SCM(i, COLOR_AQUA, "The person dragging you has disconnected. You are free!");
			PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}
		if(PlayerInfo[i][pCallLine] == playerid)
		{
		    HangupCall(PlayerInfo[i][pCallLine], HANGUP_DROPPED);
		}
	}
	if(PlayerInfo[playerid][pLogged])
	{
	    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s left the server while tazed or cuffed.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

			switch(reason)
			{
				case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest (Timeout)' WHERE uid = %i", PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest (Leaving)' WHERE uid = %i", PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				case 2:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest (Kicked)' WHERE uid = %i", PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}
	if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SM(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has left the server while injured.", GetRPName(playerid));
		PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAcceptedEMS] == playerid)
	    {
	        SCM(i, COLOR_YELLOW, "Your medic has left the server while rescuing you. (you can now accept your fate)");
	        PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(PlayerInfo[playerid][pTutorial])
	{
	    KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pEditObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
	}
	
	if(IsValidDynamicObject(PlayerInfo[playerid][pBombObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pPotObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pPotObject]);
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
	}

	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(PlayerInfo[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(PlayerInfo[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	if(PlayerInfo[playerid][pDyuze])
	{
	    KillTimer(PlayerInfo[playerid][pDyuzeTimer]);
	}
	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(PlayerInfo[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
	    }
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}


	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0 || reason == 1)
			{
				if(PlayerInfo[playerid][pGang] >= 0)
		        {
		            GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(PlayerInfo[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(PlayerInfo[playerid][pFaction] >= 0)
		        {
		            FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new rstext[10];
		switch(reason)
		{
			case 0: strcpy(rstext, "Timeout", sizeof(rstext));
			case 1: strcpy(rstext, "Leaving", sizeof(rstext));
			case 2: strcpy(rstext, "Kicked", sizeof(rstext));
		}
		if(PlayerInfo[playerid][pGang] >= 0 && PlayerInfo[playerid][pPassport] == 0)
		{
			SendGangMessage(PlayerInfo[playerid][pGang], COLOR_AQUA, "(( %s %s has left the server (%s). ))", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), rstext);
		}
		if(PlayerInfo[playerid][pFaction] >= 0)
		{
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has left the server (%s). ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), rstext);
		}
		SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "** %s has left the server. (%s)", GetRPName(playerid), rstext);
		#if defined DISCORD
			DCC_SendText(4, playerid, rstext, "1118611293000188055", INVALID_PLAYER_ID, -1);
		#endif
	}
	SavePlayerVariables(playerid);
    RemovePlayerAttachedObject(playerid, 3);
	return 1;
}

GetNearbySafeZone(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_ZONES; i ++)
		{
			if(SafeZone[i][sExists] && IsPlayerInDynamicArea(playerid, SafeZone[i][sArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    amount = percent(amount, 10);

	    SM(playerid, COLOR_AQUA, "You have been taxed a 10 percent fee of "CXRP"$%i{CCFFFF} for selling in %s's turf.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
	    GivePlayerCash(playerid, -amount);

	    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

GetNearbyTurf(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_TURFS; i ++)
		{
			if(TurfInfo[i][tExists] && IsValidDynamicArea(TurfInfo[i][tArea]) && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
			{
			    return i;
			}
		}
	}
	return -1;
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}
	return -1;
}


GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

	    foreach(new i : Player)
	    {
		    if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
		    {
	            GangZoneStopFlashForPlayer(i, TurfInfo[turfid][tGangZone]);
		    }
		    else
		    {
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] == -1 && (GetFactionType(TurfInfo[turfid][tCapturer]) == FACTION_POLICE || GetFactionType(TurfInfo[turfid][tCapturer]) == FACTION_ARMY || GetFactionType(TurfInfo[turfid][tCapturer]) == FACTION_FEDERAL))
			        GangZoneFlashForPlayer(i, TurfInfo[turfid][tGangZone], 0x2B60DEAA);
				else if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0)
					GangZoneFlashForPlayer(i, TurfInfo[turfid][tGangZone], (GangInfo[PlayerInfo[TurfInfo[turfid][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
			}
	        if(PlayerInfo[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = PlayerInfo[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = \"%s\" WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadMapicon(mapiconid)
{
	if(MapIconInfo[mapiconid][mpExists])
	{
		DestroyDynamicMapIcon(mapiconid);
		MapIconInfo[mapiconid][mpIcon] = CreateDynamicMapIcon(MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ], MapIconInfo[mapiconid][mpModel], 0, MapIconInfo[mapiconid][mpVW], MapIconInfo[mapiconid][mpInt], .style = MAPICON_GLOBAL);
	}
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nOwned by %s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
			else
			{
		        format(string, sizeof(string), "%s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
            new color = COLOR_GREY1;
			if(EntranceInfo[entranceid][eColor] != -256)
			{
				color = EntranceInfo[entranceid][eColor];
			}
			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, color, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == PlayerInfo[playerid][pID]) || (EntranceInfo[entranceid][eOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}
	return index;
}


CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublesalary(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}

	if(!gDoubleSalary)
	{
		gDoubleSalary = true;
	    SMA(COLOR_AQUA, "** Admin enabled double salary. You will now gain double of any jobs salary.");
	}
	else
	{
		gDoubleSalary = false;
	    SMA(COLOR_AQUA, "** Admin disabled double salary.");
	}
	return 1;
}

CMD:doublexp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}

	if(!Settings[gDoubleXP])
	{
		SendRconCommand("hostname [2XP!] "SERVER_NAME"("REVISION")");
		Settings[gDoubleXP] = 1;
	    SMA(COLOR_AQUA, "** Admin enabled double experience. You will now gain double the respect points and job skill points.");
	}
	else
	{
		SendRconCommand("hostname "SERVER_NAME"("REVISION")");
		Settings[gDoubleXP] = 0;
	    SMA(COLOR_AQUA, "** Admin disabled double experience.");
	}
	SaveServerInfo();
	return 1;
}


CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;
    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 200.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The speed limit can't be below 5 or above 200.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for speed cameras.");

	SM(playerid, COLOR_GREY, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:gotospeed(playerid, params[])
{
	new houseid;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotospeed [gateid]");
	}
	if(!(0 <= houseid < MAX_SPEED_CAMERAS) || !SpeedData[houseid][speedExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	TeleportToCoords(playerid, SpeedData[houseid][speedPos][0] - (2.5 * floatsin(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][1] - (2.5 * floatcos(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][2], 90.0, 0, 0, true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	DestroyDynamicMapIcon(SpeedData[id][sMapIcon]);
	SM(playerid, COLOR_GREY, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", type))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /createhouse [type (1-%i)]", sizeof(houseInteriors));
		SCM(playerid, COLOR_SYNTAX, "Types: 1-6 Apartment | 7-9 Low Class | 10-12 Med Class | 13-16 Upper | 17-19 Mansion | 20 Custom House");
		return 1;
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "House slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}


CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, World, Type, Owner, Price, RentPrice, Level, Locked");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of house %i.", houseid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of house %i to %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of house %i to %i.", houseid, locked);
	}

	return 1;
}

CMD:removefurniture(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefurniture [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	RemoveAllFurniture(houseid);
	SM(playerid, COLOR_AQUA, "** You have removed all furniture for house %i.", houseid);
	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	RemoveAllFurniture(houseid);

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	TeleportToCoords(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerVirtualWorld(playerid), true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Nearest Items:");

	if((id = GetNearbyMapicon(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of mapicon ID %i", id);
	}
	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyPoint(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of point ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = Gate_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of gate ID %i.", id);
	}
	if((id = Graffiti_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of graffiti ID %i.", id);
	}
	if((id = Graffiti_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of graffiti ID %i.", id);
	}
	if((id = Object_Nearest(playerid)) >= 0)
	{
	    new model = Object_Nearest_Model(playerid);
		SM(playerid, COLOR_GREY2, "You are in range of object ID %i - %i.", id, model);
	}
	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Houses:"WHITE" /createhouse, /edithouse, /removehouse, /gotohouse, /asellhouse, /removefurniture.");
	SCM(playerid, SERVER_COLOR, "Garages:"WHITE" /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SCM(playerid, SERVER_COLOR, "Business:"WHITE" /createbiz, /editbiz, /removebiz, /gotobiz, /asellbiz, /stockbiz.");
	SCM(playerid, SERVER_COLOR, "Entrances:"WHITE" /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SCM(playerid, SERVER_COLOR, "Points:"WHITE" /createpoint, /editpoint, /removepoint, /gotopoint.");
    SCM(playerid, SERVER_COLOR, "Turfs:"WHITE" /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SCM(playerid, SERVER_COLOR, "Fires:"WHITE" /randomfire, /killfire, /spawnfire.");
	SCM(playerid, SERVER_COLOR, "Gates:"WHITE" /creategate, /destroygate, /editgate, /gotogate.");
	SCM(playerid, SERVER_COLOR, "SpeedCameras:"WHITE" /createspeed, /destroyspeed, /gotospeed.");
	SCM(playerid, SERVER_COLOR, "MapIcons:"WHITE" /createdmp, /editdmp, /gotodmp, /removedmp");
	SCM(playerid, SERVER_COLOR, "Graffiti:"WHITE" /creategangtag, /editgangtag, /destroygangtag");
	SCM(playerid, SERVER_COLOR, "SafeZones:"WHITE" /createsafezone, /removesafezone, /gotosafezone");
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold house %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold business %i.", businessid);
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this house yours! /househelp for a list of commands.", HouseInfo[houseid][hPrice]);
	Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid);

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[houseid][hID] || PlayerInfo[playerid][pFurniturePerms] == houseid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || PlayerInfo[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == PlayerInfo[playerid][pGang])))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their house door.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their house door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their garage door.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their garage door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SCM(playerid, COLOR_SYNTAX, "Usage: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SCM(playerid, COLOR_SYNTAX, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their entrance door.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their entrance door.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /buyhouse, /lock, /stash, /furniture, /sellhouse, /sellmyhouse.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /lopen, /renthouse, /unrent, /setrent, /tenants, /evict, /evictall, /houseinfo.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /houseinvite, /upgradehouse");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", HouseInfo[houseid][hPot], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCrack], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to $%i at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hPot] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of pot at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pPot] -= value;
			    HouseInfo[houseid][hPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCrack] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of Crack at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCrack] -= value;
			    HouseInfo[houseid][hCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
				if(GetFactionType(playerid) != FACTION_NONE)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't store painkillers as a Faction Member!");
				}
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
				if(GetFactionType(playerid) != FACTION_NONE)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't store weapon as a Faction Member!");
				}
   				if(PlayerInfo[playerid][pDonator] != 0)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't store weapon as a Donator!");
				}
			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Your house stash has no more slots available for weapons.");
			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pPot] += value;
			    HouseInfo[houseid][hPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCrack] += value;
			    HouseInfo[houseid][hCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);
	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	new cost = (HouseInfo[houseid][hLevel] * 25000) + 25000;
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level] [confirm]");
	    SM(playerid, COLOR_WHITE, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
		return 1;
	}

    if(HouseInfo[houseid][hLevel] >= 5)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your house is already at the maximum level possible.");
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much cash.");
	}

	HouseInfo[houseid][hLevel]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -cost);
	ReloadHouse(houseid);

	if(HouseInfo[houseid][hLevel] == 1)
	{
	    SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
	}
	else
	{
		SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
	}

	SM(playerid, COLOR_YELLOW, "Your tenant and furniture capacity were also both increased to %i/%i.", GetHouseTenantCapacity(houseid), GetHouseFurnitureCapacity(houseid));
	Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellhouse [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pHouseOffer] = playerid;
	PlayerInfo[targetid][pHouseOffered] = houseid;
	PlayerInfo[targetid][pHousePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their house for $%i (/accept house).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your house for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyhouse [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your house back to the state. You will receive $%i back.", percent(HouseInfo[houseid][hPrice], 75));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your house to the state and received $%i back.", percent(HouseInfo[houseid][hPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}

CMD:setadmin(playerid, params[])
{
	new targetid, level;

    if(!PlayerInfo[playerid][pAP] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setadmin [playerid] [level]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 9))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if((PlayerInfo[playerid][pAdmin] != 9 ) && (PlayerInfo[playerid][pAdmin] < level || PlayerInfo[playerid][pAdmin] == level))
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not allowed to set higher level admin");
	}
	if(level == 0 && PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		PlayerInfo[targetid][pAdminDuty] = 0;
		PlayerInfo[targetid][pFactionMod] = 0;
		PlayerInfo[targetid][pGangMod] = 0;
		PlayerInfo[targetid][pBanAppealer] = 0;
		PlayerInfo[targetid][pAP] = 0;
		PlayerInfo[targetid][pHM] = 0;
    }

    PlayerInfo[targetid][pAdmin] = level;
	if(level != 0)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have set %s's admin level to "CXRP"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s has set your admin level to "CXRP"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHM] == 0)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makehelper [playerid] [level]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 3.");
	}
	if(level < 2)
	{
		if(PlayerInfo[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}

	PlayerInfo[targetid][pHelper] = level;
	SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a level %i helper (%s).", GetRPName(playerid), GetRPName(targetid), level, GetHelperRank(targetid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"%s{CCFFFF} (%i).", GetRPName(targetid), GetHelperRank(targetid), level);
	SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"%s{CCFFFF} (%i).", GetRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:osetadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pAP])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /osetadmin [username] [level]");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /setadmin instead.");
	}
	if((PlayerInfo[playerid][pAdmin] != 7 ) && (PlayerInfo[playerid][pAdmin] < level || PlayerInfo[playerid][pAdmin] == level))
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not allowed to set higher level admin");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHM] == 0)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 3.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makehelper instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addtoevent [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no active events which you can add this player to.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already in the event.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently playing paintball.");
	}

	SetPlayerInEvent(targetid);

	SM(targetid, COLOR_WHITE, "** %s has added you to the event.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the event.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:ohelpers(playerid, params[]) return callcmd::olisthelpers(playerid, params);

CMD:olisthelpers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHM] == 0)
	{
	    return NotAuth(playerid);
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 AND passport = 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}

CMD:oadmins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 AND passport = 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:specialbat(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 1;
	if(SpecialBat[playerid])
	{
		SpecialBat[playerid] = false;
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
	else
	{
		SpecialBat[playerid] = true;
		SetPlayerSkin(playerid, 264);
		GiveWeapon(playerid, 5);
	}
	return 1;
}

CMD:ghostrider(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 1;

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) != 463) return 1;

	if(GhostRider[playerid])
	{
		VEH_GhostRider[vehicleid] = false;
		GhostRider[playerid] = false;
		RemovePlayerAttachedObject(playerid, 0);
		RemovePlayerAttachedObject(playerid, 1);
		RemovePlayerAttachedObject(playerid, 2);
		RemovePlayerAttachedObject(playerid, 3);
		RemovePlayerAttachedObject(playerid, 8);
		if(IsValidDynamicObject(OB_GhostRider[0]))
			DestroyDynamicObject(OB_GhostRider[0]);
		if(IsValidDynamicObject(OB_GhostRider[1]))
			DestroyDynamicObject(OB_GhostRider[1]);
		if(IsValidDynamicObject(OB_GhostRider[2]))
			DestroyDynamicObject(OB_GhostRider[2]);
		if(IsValidDynamicObject(OB_GhostRider[3]))
			DestroyDynamicObject(OB_GhostRider[3]);
		if(IsValidDynamicObject(OB_GhostRider[4]))
			DestroyDynamicObject(OB_GhostRider[4]);
		if(IsValidDynamicObject(OB_GhostRider[5]))
			DestroyDynamicObject(OB_GhostRider[5]);
	}
	else
	{
		GhostRider[playerid] = true;
		VEH_GhostRider[vehicleid] = true;
		OB_GhostRider[0] = CreateDynamicObject(18694, 2215.5949, -1735.2979, 13.3800, 0.0000, 0.0000, 0.0000); // fire trail
		OB_GhostRider[1] = CreateDynamicObject(18688, 1962.7968, -1884.0394, 13.3828, 0.0000, 0.0000, 0.0000); // front wheel fire
		OB_GhostRider[2] = CreateDynamicObject(18699, 2278.3420, -1738.0881, 13.5467, 0.0000, 0.0000, 0.0000); // exhaust flame 1
		OB_GhostRider[3] = CreateDynamicObject(18699, 2340.1408, -1669.6278, 12.5768, 0.0000, -90.0000, 83.5579); // exhaust flame 2
		OB_GhostRider[4] = CreateDynamicObject(18688, 2369.1694, -1743.9272, 10.8870, 0.0000, 0.0000, 284.1333); // rear wheel fire
		OB_GhostRider[5] = CreateDynamicObject(18718, 2411.1164, -1867.5786, 13.3828, 0.0000, 0.0000, 0.0000); // friction sparks
		AttachDynamicObjectToVehicle(OB_GhostRider[0], vehicleid, 0.0000, 1.1000, 1.1000, 180.0000, 0.0000, 0.0000);
		AttachDynamicObjectToVehicle(OB_GhostRider[1], vehicleid, -0.1598, 0.7500, -2.2000, 0.0000, 0.0000, 0.0000);
		AttachDynamicObjectToVehicle(OB_GhostRider[2], vehicleid, 0.2240, -2.0999, -0.3249, 0.0000, -90.0000, -90.0000);
		AttachDynamicObjectToVehicle(OB_GhostRider[3], vehicleid, 0.2240, -2.1198, -0.2500, 0.0000, -90.0000, -90.0000);
		AttachDynamicObjectToVehicle(OB_GhostRider[4], vehicleid, -0.2599, -1.1000, -2.2000, 0.0000, 0.0000, 0.0000);
		AttachDynamicObjectToVehicle(OB_GhostRider[5], vehicleid, 0.0000, 2.5000, -0.5099, 90.0000, 0.0000, 0.0000);
		SetPlayerAttachedObject(playerid, 0, 3524, 2, -0.6118, -0.1457, 0.0049, 88.3999, 104.4999, 91.9000, 0.2619, 0.3898, 0.3030, 0xFFF8F8FF, 0x00FFEBCD); // skull
		SetPlayerAttachedObject(playerid, 1, 3065, 2, -0.0178, 0.0178, 0.0000, 0.0000, 0.0000, 0.0000, 1.2318, 0.9448, 0.7649, 0xFF000000, 0xFFFFFFFF); // hide head
		SetPlayerAttachedObject(playerid, 2, 2680, 1, 0.0908, 0.0370, -0.2398, 99.1997, 76.1996, -4.3000, 1.1940, 1.3848, 1.7238, 0x00FF0000, 0x00FFEBCD); // chain
		SetPlayerAttachedObject(playerid, 3, 2899, 1, 0.2890, -0.0139, -0.0090, 91.4999, 91.9000, -0.3999, 0.1049, 0.0920, 0.5699, 0xFF2F4F4F, 0xFFFFFFFF); // jacket spikes
		SetPlayerAttachedObject(playerid, 8, 18693, 2, -1.6398, 0.1248, 0.0159, 0.0000, 90.5998, 0.0000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF); // skull flame 
	}
	return 1;
}

CMD:selldynamics(playerid, params[])
{
	new houses, garages, businesses;

	if(!IsPlayerAdmin(playerid))
	{
		return NotAuth(playerid);
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sell %i houses, %i garages and %i businesses.", houses, garages, businesses);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 1209600)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 1209600)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all inactive properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pGangMod])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		Settings[TurfCapCount] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active turf claim limit for gangs to %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    Settings[PointCapCount] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active point cap limit for gangs to %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}

CMD:setmotd(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHM] == 0)
	{
	    return NotAuth(playerid);
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6) return NotAuth(playerid);
 		if(!strcmp(newval, "none", true))
		{
	    	Settings[gServerMOTD] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the global MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(Settings[gServerMOTD], newval, 255);
	    	SAM(COLOR_YELLOW, "AdmCmd: %s has set the global MOTD to \"%s\"", GetRPName(playerid), Settings[gServerMOTD]);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pAP] == 0) return NotAuth(playerid);
 		if(!strcmp(newval, "none", true))
		{
	    	Settings[adminMOTD] = 0;
      		SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the admin MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(Settings[adminMOTD], newval, 255);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the admin MOTD to \"%s\"", GetRPName(playerid), Settings[adminMOTD]);
		}
	}
	if(!strcmp(option, "helper", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHM] == 0) return NotAuth(playerid);
 		if(!strcmp(newval, "none", true))
		{
	    	Settings[helperMOTD] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the helper MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(Settings[helperMOTD], newval, 255);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the helper MOTD to \"%s\"", GetRPName(playerid), Settings[helperMOTD]);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(Settings[gServerMOTD]))
	{
		SM(playerid, COLOR_YELLOW, "News: %s", Settings[gServerMOTD]);
	}
	if(!isnull(Settings[adminMOTD]) && PlayerInfo[playerid][pAdmin] > 0)
	{
		SM(playerid, COLOR_LIGHTRED, "Admin News: %s", Settings[adminMOTD]);
	}
	if(!isnull(Settings[helperMOTD]) && (PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0))
	{
		SM(playerid, COLOR_AQUA, "Helper News: %s", Settings[helperMOTD]);
	}
	if(PlayerInfo[playerid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SM(playerid, COLOR_GREEN, "Gang News: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(!PlayerInfo[playerid][pAP] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstaff [playerid] [option] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Available options: FM, GM, BA, SM, HM");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	if(!strcmp(option, "fm", true))
	{
	    PlayerInfo[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", PlayerInfo[targetid][pFactionMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Faction Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Faction Moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Faction Moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Faction Moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Faction Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Faction Noderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Faction Moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Faction Moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gm", true))
	{
	    PlayerInfo[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", PlayerInfo[targetid][pGangMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Gang Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Gang Moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Gang Moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Gang Moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Gang Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Gang Moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Gang Moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Gang Moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "ba", true))
	{
	    PlayerInfo[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", PlayerInfo[targetid][pBanAppealer], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Ban Appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Ban Appealer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Ban Appealer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Ban Appealer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Ban Appealer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Ban Appealer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Ban Appealer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Ban Appealer{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "sm", true))
	{
	    PlayerInfo[targetid][pAP] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ap = %i WHERE uid = %i", PlayerInfo[targetid][pAP], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Staff Manager.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Staff Manager.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Staff Manager{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Staff Manager{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Staff Manager status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Staff Manager status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Staff Manager{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Staff Manager{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "hm", true))
	{
	    PlayerInfo[targetid][pHM] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hm = %i WHERE uid = %i", PlayerInfo[targetid][pHM], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Helper Manager.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Helper Manager.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Helper Manager{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Helper Manager{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Helper Manager.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Helper Manager.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Helper Manager{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Helper Manager{CCFFFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:updates(playerid,params[])
{
	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	return 1;
}

CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, \"%e\") ON DUPLICATE KEY UPDATE text = \"%e\"", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i changed to \"%s\".", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pAP])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forceaduty [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player needs to be at least a level 2 administrator.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!PlayerInfo[targetid][pAdminDuty])
	{
		SM(targetid, COLOR_WHITE, "** %s has forced you to be on admin duty.", GetRPName(playerid));
	}
	else
	{
	    SM(targetid, COLOR_WHITE, "** %s has forced you to be off admin duty.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Help Requests:");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pHelpRequest]))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] asks: %s", GetRPName(i), i, PlayerInfo[i][pHelpRequest]);
		}
	}

	SCM(playerid, COLOR_AQUA, "** Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SCM(playerid, COLOR_AQUA, "** Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:clearall(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 5)
	{
		return NotAuth(playerid);
    }
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
    foreach(new i : Player)
	{
    	PlayerInfo[i][pWantedLevel] = 0;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[i][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[i][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared everyone's Wanted Level.", GetRPName(playerid));
    return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 2 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to leave the paintball arena first.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /accepthelp [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	Freeze(targetid);
	
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767.0);

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[playerid][pAcceptedHelp] = 1;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "** You accepted %s's help request and were sent to their position. /return to go back.", GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has accepted your help request. They are now assisting you.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 2 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhelp [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You denied %s's help request.", GetRPName(targetid));
	SM(targetid, COLOR_LIGHTRED, "** %s has denied your help request.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:sta(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pHelper] < 2 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sta [playerid] (Sends /gethelp to admins)");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, PlayerInfo[targetid][pHelpRequest]);
    PlayerInfo[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You sent %s's help request to all online admins.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}

CMD:return(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 2 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't accepted any help requests.");
	}

	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);

	TeleportToCoords(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld], true, false);
	SetCameraBehindPlayer(playerid);

	SCM(playerid, COLOR_WHITE, "** You were returned to your previous position.");
    PlayerInfo[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /answerhelp [playerid] [message]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "You");

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: ...%s **", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %s **", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetRPName(playerid), GetRPName(targetid));

	return 1;
}

CMD:c(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pFormerAdmin])
	{
	    return NotAuth(playerid);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /c [staff chat]");
	}
	if(PlayerInfo[playerid][pToggleHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the staff chat as you have it toggled.");
	}

	if(PlayerInfo[playerid][pFormerAdmin] == 1)
	{
        if(strlen(params) > MAX_SPLIT_LENGTH)
		{
	    	SendStaffMessage(COLOR_GREEN, "** Former Admin %s: %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	    	SendStaffMessage(COLOR_GREEN, "** Former Admin %s: ...%s **", GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendStaffMessage(COLOR_GREEN, "** Former Admin %s: %s **", GetRPName(playerid), params);
		}
	}
	if(PlayerInfo[playerid][pHelper] >= 1)
	{
        if(strlen(params) > MAX_SPLIT_LENGTH)
		{
	    	SendStaffMessage(COLOR_GREEN, "** %s %s: %.*s... **", GetHelperRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	    	SendStaffMessage(COLOR_GREEN, "** %s %s: ...%s **", GetHelperRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendStaffMessage(COLOR_GREEN, "** %s %s: %s **", GetHelperRank(playerid), GetRPName(playerid), params);
		}
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
        if(strlen(params) > MAX_SPLIT_LENGTH)
		{
	    	SendStaffMessage(COLOR_GREEN, "** %s %s: %.*s... **", GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	    	SendStaffMessage(COLOR_GREEN, "** %s %s: ...%s **", GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendStaffMessage(COLOR_GREEN, "** %s %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}


CMD:helperhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] == 0 && PlayerInfo[playerid][pAdmin] == 0)
	{
	    return NotAuth(playerid);
	}

	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SCM(playerid, COLOR_AQUA, "General Helper:"WHITE" /helpers, /newb, /answerhelp.");
	}
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
		SCM(playerid, COLOR_AQUA, "Senior Helper:"WHITE" /c, /accepthelp, /denyhelp, /sta, /return, /nmute, /hmute");
	}
    if(PlayerInfo[playerid][pHelper] >= 3)
	{
		SCM(playerid, COLOR_AQUA, "Lead Helper:"WHITE" /checknewbies.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SCM(playerid, COLOR_AQUA, "General Helper:"WHITE" /helpers, /newb, /answerhelp.");
		SCM(playerid, COLOR_AQUA, "Senior Helper:"WHITE" /c, /accepthelp, /denyhelp, /sta, /return, /nmute, /hmute");
		SCM(playerid, COLOR_AQUA, "Lead Helper:"WHITE" /checknewbies.");
	}
	return 1;
}

CMD:properties(playerid, params[])
{
	new type[16];

	SCM(playerid, SERVER_COLOR, "My Properties:");

    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

	        if((gettime() - HouseInfo[i][hTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as "CXRP"Inactive{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as "CXRP"Active{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
		}
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
	        if((gettime() - GarageInfo[i][gTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as "CXRP"Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as "CXRP"Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
	        if((gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as "CXRP"Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as "CXRP"Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Your properties become inactive if you don't enter them for 14+ days.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, COLOR_AQUA, "** You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house's owner has chosen to disable renting for this house.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!PlayerInfo[playerid][pRentingHouse])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pRentingHouse] = 0;
	SCM(playerid, COLOR_WHITE, "** You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\" AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            PlayerInfo[i][pRentingHouse] = 0;
            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "** You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	PlayerInfo[targetid][pInviteOffer] = playerid;
	PlayerInfo[targetid][pInviteHouse] = houseid;

	SM(targetid, COLOR_AQUA, "** %s has offered you an invitation to their house in %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SM(playerid, COLOR_AQUA, "** You have offered %s an invitation to your house.", GetRPName(targetid));
	return 1;
}

CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[10], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Buy, Edit, Sell, Clear, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pEditType] = EDIT_FURNITURE;
        PlayerInfo[playerid][pEditObject] = objectid;
        PlayerInfo[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [clear] [confirm]");
			SCM(playerid, COLOR_WHITE, "This sells all of your furniture in your house. This action is irreversible.");
			return 1;
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] == houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You already allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = houseid;

		SM(targetid, COLOR_AQUA, "%s has allowed you to access their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have allowed %s to access your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] != houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You haven't allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = -1;

		SM(targetid, COLOR_AQUA, "%s has removed your access to their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have removed %s's access to your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SCM(playerid, COLOR_AQUA, "You will now see labels appear above all of your furniture.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your furniture.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}

CMD:gate(playerid, params[]) return callcmd::open(playerid, params);
CMD:door(playerid, params[]) return callcmd::open(playerid, params);
CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerInfo[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				{
				    //Dyuze(playerid, "Notice", "You have closed the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to close the gate/door.", GetRPName(playerid));
				}
                case 1:
				{
				    //Dyuze(playerid, "Notice", "You have opened the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to open the gate/door.", GetRPName(playerid));
				}
			}
		}
	}
	return 1;
}

CMD:setmapper(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /setmapper [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(PlayerInfo[targetid][pMapper])
	{
	    PlayerInfo[targetid][pMapper] = 0;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mapper = %i WHERE uid = %i", PlayerInfo[targetid][pMapper], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from Server-Mapper.", GetRPName(playerid), GetRPName(targetid));
     	Log_Write("log_admin", "%s (uid: %i) has removed %s (uid: %i) from Server-Mapper.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SM(targetid, COLOR_AQUA, "%s has removed you from "CXRP"Server-Mapper{CCFFFF}.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pMapper] = 1;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mapper = %i WHERE uid = %i", PlayerInfo[targetid][pMapper], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Server-Mapper.", GetRPName(playerid), GetRPName(targetid));
     	Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Server-Mapper.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Server-Mapper{CCFFFF}.", GetRPName(playerid));
	}
	return 1;
}

CMD:maphelp(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] != 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	SCM(playerid, COLOR_WHITE, "** Mapper: /mc /createobj, /dupobj, /nearobj, /editobj, /delobj ");
	return 1;
}

CMD:mc(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] != 1)
	{
	    return NotAuth(playerid);
	}
    if(isnull(params))
 	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /mc [text]");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMapper] == 1)
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_AQUA, "** [Mapper] {F9B64A}%s"WHITE": %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_AQUA, "** [Mapper] {F9B64A}%s"WHITE": ...%s **", GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, COLOR_AQUA, "** [Mapper] {F9B64A}%s"WHITE": %s **", GetRPName(playerid), params);
			}
		}
	}
	return 1;
}

CMD:nearobj(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] == 1)
	{
		new id, model;
		if((id = Object_Nearest(playerid)) >= 0)
		{
		    model = Object_Nearest_Model(playerid);
			SM(playerid, COLOR_GREY2, "You are in range of object ID %i - %i.", id, model);
		}
	}
	else
	{
        SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	return 1;
}

CMD:dupobj(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] == 1)
	{
		static id = -1, idx;
		if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /dupobj [id]");

		id = Object_Duplicate(playerid, idx);
		if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
		SM(playerid, COLOR_WHITE, "You have successfully duplicate object ID: %d.", id);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	return 1;
}

CMD:createobj(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] == 1)
	{
		static id = -1, idx;
		if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /createobj [objid]");

		id = Object_Create(playerid, idx);
		if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
		SM(playerid, COLOR_WHITE, "You have successfully created object ID: %d.", id);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	return 1;
}

CMD:editobj(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] == 1)
	{
		static id;
		if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /editobj [id]");
		if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

		PlayerInfo[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[id][mobjObject]);
		PlayerInfo[playerid][pEditmObject] = id;
		PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", id);
	}
	else
	{
 		SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	return 1;
}

CMD:delobj(playerid, params[])
{
	if(PlayerInfo[playerid][pMapper] == 1)
	{
		static id = 0;
		if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /delobj [id]");
		if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

		Object_Delete(id);
		SM(playerid, COLOR_WHITE, "You have successfully destroyed object ID: %d.", id);
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return NotAuth(playerid);

	id = Gate_Create(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for gates.");

	SM(playerid, COLOR_WHITE, "You have successfully created gate ID: %d.", id);
	return 1;
}

CMD:gotogate(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return NotAuth(playerid);

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_GATES) || !GateData[houseid][gateExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	TeleportToCoords(playerid, GateData[houseid][gatePos][0] - (2.5 * floatsin(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][1] - (2.5 * floatcos(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][2], 90.0, GateData[houseid][gateInterior], GateData[houseid][gateWorld], true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}


CMD:destroygate(playerid, params[])
{
	static
	    id = 0;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return NotAuth(playerid);

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if (sscanf(params, "d", id))
	    return SCM(playerid, COLOR_WHITE, "Usage: /destroygate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

	Gate_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerInfo[playerid][pAdmin] < 5)
		return NotAuth(playerid);

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "Names:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the position of gate ID: %d.", GetRPName(playerid), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified speed can't be below 0 or above 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the speed of gate ID: %d to %.2f.", GetRPName(playerid), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified radius can't be below 0 or above 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the radius of gate ID: %d to %.2f.", GetRPName(playerid), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [time] [close time] (0 to disable)");

		if (time < 0 || time > 60000)
		    return SCM(playerid, COLOR_SYNTAX, "The specified time can't be 0 or above 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the close time of gate ID: %d to %d.", GetRPName(playerid), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [model] [gate model]");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the model of gate ID: %d to %d.", GetRPName(playerid), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    PlayerInfo[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerInfo[playerid][pEditGate] = id;
		PlayerInfo[playerid][pEditType] = EDIT_GATE_POS;

		SM(playerid, COLOR_WHITE, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    PlayerInfo[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerInfo[playerid][pEditGate] = id;
		PlayerInfo[playerid][pEditType] = EDIT_GATE_MOVE;

		SM(playerid, COLOR_WHITE, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no gate.", GetRPName(playerid), id);

		else
		    SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to ID: %d.", GetRPName(playerid), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = 0;

		if (sscanf(string, "d", factionid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [faction] [gate faction] (-1 for none)");

		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
			return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");


        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionInfo[factionid][fType]);
		Gate_Save(id);

		if (factionid == -1)
			SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no faction.", GetRPName(playerid), id);

		else
		    SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to \"%s\".", GetRPName(playerid), id, FactionInfo[factionid][fName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(pass, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the password of gate ID: %d to %s.", GetRPName(playerid), id, pass);
		return 1;
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategarage [small/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "large", true)) {
	    type = 1;
	}

	if(type == -1)
	{
	     SCM(playerid, COLOR_SYNTAX, "Invalid size. Valid sizes range from Small and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "Garage slots are currently full. Ask managements to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Entrance, Exit, Type, Owner, Price, Locked");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [type] [small/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "large", true)) {
		    type = 1;
		}

		if(type == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of garage %i to %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], 0, 0, true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "** GARAGE: /buygarage, /lock, /sellgarage, /sellmygarage.");
	SCM(playerid, COLOR_WHITE, "** GARAGE: /repair, /tune, /garageinfo.");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This garage already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this garage yours! /garagehelp for a list of commands.", GarageInfo[garageid][gPrice]);
    Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}
CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellgarage [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pGarageOffer] = playerid;
	PlayerInfo[targetid][pGarageOffered] = garageid;
	PlayerInfo[targetid][pGaragePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their garage for $%i (/accept garage).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your garage for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmygarage [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your garage back to the state. You will receive $%i back.", percent(GarageInfo[garageid][gPrice], 75));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your garage to the state and received $%i back.", percent(GarageInfo[garageid][gPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}

    SM(playerid, SERVER_COLOR, "Garage ID %i:", garageid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Size: %s) - (Location: %s) - (Active: %s) - (Locked: %s)", GarageInfo[garageid][gPrice], garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 1209600) ? (""CXRP"No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}

CMD:createdmp(playerid, params[])
{
	new model, Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", model))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /createdmp [modelid]");
	}
	if((model <= 4) || (model > 63))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid model ID. Model ID cannot be more than 63 or lower than 4.");
	}
	GetPlayerPos(playerid, x, y, z);

 	for(new i = 0; i < MAX_MAPICONS; i ++)
	{
	    if(!MapIconInfo[i][mpExists])
	    {
	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO mapicons (mp_model, mp_x, mp_y, mp_z, mp_int, mp_vw) VALUES(%i, %f, '%f', '%f', '%i', '%i')", model, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateMapIcon", "iiifff", playerid, i, model, x, y, z);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Dynamic Map Icon slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}


CMD:editdmp(playerid, params[])
{
	new mapiconid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[32]", mapiconid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editdmp [mapiconid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Pos, Model");
	    return 1;
	}
	if(!(0 <= mapiconid < MAX_MAPICONS) || !MapIconInfo[mapiconid][mpExists] || !IsValidDynamicMapIcon(MapIconInfo[mapiconid][mpIcon]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid map icon.");
	}

	if(!strcmp(option, "pos", true))
	{
	    GetPlayerPos(playerid, MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ]);
	    MapIconInfo[mapiconid][mpInt] = GetPlayerInterior(playerid);
	    MapIconInfo[mapiconid][mpVW] = GetPlayerVirtualWorld(playerid);
	    
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE mapicons SET mp_x = '%f', mp_y = '%f', mp_z = '%f', mp_int = '%i', mp_vw = %i WHERE mid = %i", MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ], MapIconInfo[mapiconid][mpInt], MapIconInfo[mapiconid][mpVW], MapIconInfo[mapiconid][mpID]);
	    mysql_tquery(connectionID, queryBuffer);
	    ReloadMapicon(mapiconid);
	    SM(playerid, COLOR_AQUA, "** You've changed the position of mapicon %i.", mapiconid);
	}
	else if(!strcmp(option, "model", true))
	{
	    new model;

	    if(sscanf(param, "i", model))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editdmp [mapiconid] [model] [modeid]");
		}

		if((model <= 4) || (model > 63))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid model ID. Model ID cannot be more than 63 or lower than 4.");
		}

		MapIconInfo[mapiconid][mpModel] = model;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE mapicons SET mp_model = %i WHERE mid = %i", MapIconInfo[mapiconid][mpModel], MapIconInfo[mapiconid][mpID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadMapicon(mapiconid);
	    SM(playerid, COLOR_AQUA, "** You've changed the model id of mapicon %i to %i.", mapiconid, model);
	}
	return 1;
}


CMD:gotodmp(playerid, params[])
{
	new mapiconid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", mapiconid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotodmp [mapiconID]");
	}
	if(!(0 <= mapiconid < MAX_MAPICONS) || !MapIconInfo[mapiconid][mpExists] || !IsValidDynamicMapIcon(MapIconInfo[mapiconid][mpIcon]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid map icon.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ], 90.0, MapIconInfo[mapiconid][mpInt], MapIconInfo[mapiconid][mpVW], true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removedmp(playerid, params[])
{
	new mapiconid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", mapiconid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedmp [mapiconid]");
	}
	if(!(0 <= mapiconid < MAX_MAPICONS) || !MapIconInfo[mapiconid][mpExists] || !IsValidDynamicMapIcon(MapIconInfo[mapiconid][mpIcon]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid mapicon.");
	}

	DestroyDynamicMapIcon(MapIconInfo[mapiconid][mpIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM mapicons WHERE mid = %i", MapIconInfo[mapiconid][mpID]);
	mysql_tquery(connectionID, queryBuffer);

	MapIconInfo[mapiconid][mpExists] = 0;
	MapIconInfo[mapiconid][mpID] = 0;
	MapIconInfo[mapiconid][mpIcon] = -1;

	SM(playerid, COLOR_AQUA, "** You have removed map icon %i.", mapiconid);
	return 1;
}


CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createbiz [type]");
	    SCM(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
// 	   													0			1			2				3			4				5			6				    
		return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Entrance, Exit, Interior, World, Type, Time, Owner, Price, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exit of business %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    PlayerInfo[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SCM(playerid, COLOR_GREY2, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of business %i to %s.", businessid, GetRPName(targetid));
	}
	else if(!strcmp(option, "time", true))
	{
	    new days;

	    if(sscanf(param, "u", days))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [time] [time in days] (use -1 for no expiry time)");
		}
		if(!(1 <= days <= 365) && days != -1)
		{
			return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365 or -1.");
		}

		if(days != -1)
			BusinessInfo[businessid][bTime] = gettime() + (days * 86400);
		else
			BusinessInfo[businessid][bTime] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biztime = %i WHERE id = %i", BusinessInfo[businessid][bTime], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(days >= 30)
		{
			SM(playerid, COLOR_WHITE, "You've set businessid %i's expiry time to %i months.", businessid, days / 30);
		}
		else
		{
			SM(playerid, COLOR_WHITE, "You've set businessid %i's expiry time to %i days.", businessid, days);
		}
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the products amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	RemoveAllFurniture(businessid);

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** Business Commands: /buybiz, /lock, /bwithdraw, /bdeposit.");
	SCM(playerid, COLOR_LIGHTORANGE, "** Business Commands: /businessmenu, /products, /bizinfo.");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This business already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bwithdraw [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the business vault. There is now $%i remaining.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bdeposit [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the business vault. There is now $%i available.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

// CMD:sellbiz(playerid, params[])
// {
// 	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

// 	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
// 	}
// 	if(sscanf(params, "ui", targetid, amount))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellbiz [playerid] [amount]");
// 	}
// 	if(IsPlayerNPC(targetid))
// 	{
// 		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
// 	}
// 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
// 	}
// 	if(targetid == playerid)
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
// 	}
// 	if(amount < 1)
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
// 	}

// 	PlayerInfo[targetid][pBizOffer] = playerid;
// 	PlayerInfo[targetid][pBizOffered] = businessid;
// 	PlayerInfo[targetid][pBizPrice] = amount;

// 	SM(targetid, COLOR_AQUA, "** %s offered you their business for $%i (/accept business).", GetRPName(playerid), amount);
// 	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your business for $%i.", GetRPName(targetid), amount);
// 	return 1;
// }

// CMD:sellmybiz(playerid, params[])
// {
// 	new businessid = GetNearbyBusinessEx(playerid);

// 	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
// 	}
// 	if(strcmp(params, "confirm", true) != 0)
// 	{
// 	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmybiz [confirm]");
// 	    SM(playerid, COLOR_WHITE, "This command sells your business back to the state. You will receive $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
// 	    return 1;
// 	}

// 	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
// 	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

// 	SM(playerid, COLOR_YELLOW, "You have sold your business to the state and received $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
//     Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
// 	return 1;
//}

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}

	new time = BusinessInfo[businessid][bTime] - gettime(), string[32];

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""CXRP"%i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i days", time / 86400);
		}
	}
    SM(playerid, SERVER_COLOR, "Business ID %i:", businessid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Type: %s) - (Location: %s) - (Active: %s) - (Status: %s)", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 1209600) ? (""CXRP"No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SM(playerid, COLOR_GREY2, "(Vault: $%i) - (Products: %i) - (Expiry Time: %s Left)", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], string);
	return 1;
}

CMD:businessmenu(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	ShowPlayerDialog(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Business Menu","Change Store Name\nChange Message\nSafe\nLock Business", "Select", "Cancel");
	return 1;
}

ShowStore(playerid, businessid)
{
	MenuStore_AddItem(playerid, 0, 18871, "Mobile Phone", BusinessInfo[businessid][bPrices][0], "Your personal cell phone with which you can call or send sms.", 200, true, 1, 37.0, 0.0, 249.0);
	MenuStore_AddItem(playerid, 1, 19942, "Portable Radio", BusinessInfo[businessid][bPrices][1], "A private radio to talk with anyone within a frequency.", 200, true, 1, 5.0, 0.0, 217.0);
	MenuStore_AddItem(playerid, 2, 19897, "Cigar", BusinessInfo[businessid][bPrices][2], "Smoke, relax and be a worry-free person!", 200, true, 1, 222.0, 6.0, 36.0);
	MenuStore_AddItem(playerid, 3, 365, "Spraycan", BusinessInfo[businessid][bPrices][3], "Color/paint your vehicle or tag gang graffitis.", 200, true, 1, 5.0, 0.0, 217.0);
	MenuStore_AddItem(playerid, 4, 2894, "Phonebook", BusinessInfo[businessid][bPrices][4], "Save all of your numbers and save them for later use.", 200, true, 1, -42.0, 0.0, 213.0);
	MenuStore_AddItem(playerid, 5, 19623, "Camera", BusinessInfo[businessid][bPrices][5], "Say Cheeeeeeeese!", 200, true, 1, -5.0, 0.0, 208.0);
	MenuStore_AddItem(playerid, 6, 19617, "Mp3 Player", BusinessInfo[businessid][bPrices][6], "Listen to radio stations or music anywhere.", 200, true, 1, -15.0, 0.0, 139.0);
	MenuStore_AddItem(playerid, 7, 18632, "Fishing Rod", BusinessInfo[businessid][bPrices][7], "Be a professional fisherman and earn money.", 200, true, 1, -332.0, 0.0, 199.0);
	MenuStore_AddItem(playerid, 8, 1604, "Fish Bait", BusinessInfo[businessid][bPrices][8], "How you will catch fishes? A bait is here to save the day", 200, true, 1, -1.0, 0.0, 278.0, 1.960);
	//MenuStore_AddItem(playerid, 9, 1580, "Muriatic Acid", BusinessInfo[businessid][bPrices][9], "Some acid to make illegal narcotics", 200, true, 1, -34.0, 0.0, 314.0);
	//MenuStore_AddItem(playerid, 10, 1577, "Baking Soda", BusinessInfo[businessid][bPrices][10], "Soda? Yes soda to cook drugs!", 200, true, 1, -34.0, 0.0, 314.0);
	MenuStore_AddItem(playerid, 11, 19039, "Pocket Watch", BusinessInfo[businessid][bPrices][11], "Time is money, get the money on your wrist.", 200, true, 1, -51.0, 0.0, 319.0);
	MenuStore_AddItem(playerid, 12, 19130, "GPS System", BusinessInfo[businessid][bPrices][12], "Don't get lost! Get a GPS and stay updated about location.", 200, true, 1, -10.0, 0.0, 309.0);
	MenuStore_AddItem(playerid, 13, 19088, "Rope", BusinessInfo[businessid][bPrices][13], "Trying to tie something? maybe someone? This helps to kidnap.", 200, true, 1, -10.0, 0.0, 270.0);
	MenuStore_AddItem(playerid, 14, 19085, "Blindfold", BusinessInfo[businessid][bPrices][14], "Make someone blinded!", 200, true, 1, -10.0, 0.0, 231.0);
	MenuStore_AddItem(playerid, 15, 19921, "Toolkit", BusinessInfo[businessid][bPrices][15], "Make several life changing tools with materials!", 200, true, 1, -28.0, 0.0, 200.0);
	MenuStore_AddItem(playerid, 16, 18641, "Flashlight", BusinessInfo[businessid][bPrices][16], "No fear blindness in dark, Shine the way!", 200, true, 1, 59.0, 30.0, 236.0);
	MenuStore_AddItem(playerid, 17, 371, "Parachute", BusinessInfo[businessid][bPrices][17], "Protect yourself from fall-damage", 200, true, 1, -5.0, 0.0, 208.0);
	//MenuStore_AddItem(playerid, 18, 19163, "Mask", BusinessInfo[businessid][bPrices][18], "Stay unknown or maybe hidden by covering your face.", 200, true, 1, 0.0, 0.0, 264.0);
	MenuStore_AddItem(playerid, 19, 19627, "Repair-Kit", BusinessInfo[businessid][bPrices][19], "Repair any vehicle at anytime anywhere!", 200, true, 1, -44.0, 0.0, 264.0);
	MenuStore_AddItem(playerid, 20, 19897, "Gascan", BusinessInfo[businessid][bPrices][20], "Ran out of fuel? No worries, you got portable gascan.", 200, true, 1, -12.0, 0.0, 333.0);
	MenuStore_Show(playerid, 247_Shop, "24/7 Grocery Shop");
}

Store:247_Shop(playerid, response, itemid, modelid, price, amount, itemname[])
{
	new businessid = GetInsideBusiness(playerid);
    if(!response)
        return true;
    if(GetPlayerMoney(playerid) < price && !IsBusinessOwner(playerid, businessid))
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money.");

	switch(itemid)
	{
		case 0:
		{
			if(PlayerInfo[playerid][pPhone] == 1 && PlayerInfo[playerid][pNumber] != 0)
			{
				ChoosingNum[playerid] = 1;
				ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");
				return 1;
			}
			if(PlayerInfo[playerid][pPhone] == 0)
			{
				if(!IsBusinessOwner(playerid, businessid))
				{
					GivePlayerCash(playerid, -price);
					BusinessInfo[businessid][bCash] += price;

					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
					SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your phone number is %i.", PlayerInfo[playerid][pNumber]);
				}
				else
				{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a new mobile phone from their business.", GetRPName(playerid));
					SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your phone number is %i.", PlayerInfo[playerid][pNumber]);
				}
				BusinessInfo[businessid][bProducts]--;
				PlayerInfo[playerid][pPhone] = 1;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
				ChoosingNum[playerid] = 1;
				ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			else
			{
				ChoosingNum[playerid] = 1;
				ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");
				SCM(playerid, COLOR_SYNTAX, "You already have a cellphone.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
		}
		case 1:
		{
			if(PlayerInfo[playerid][pWalkieTalkie])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a Portable Radio already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			PlayerInfo[playerid][pWalkieTalkie] = 1;
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 2:
		{
			if(PlayerInfo[playerid][pCigars] + 10 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 cigars.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pCigars] += 10;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);	
		}
		case 3:
		{
			if(PlayerInfo[playerid][pSpraycans] + 10 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 spraycans.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pSpraycans] += 10;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 4:
		{
			if(PlayerInfo[playerid][pPhonebook])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a phonebook already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pPhonebook] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 5:
		{
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			GiveWeapon(playerid, 43);
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 6:
		{
			if(PlayerInfo[playerid][pMP3Player])
			{
				SCM(playerid, COLOR_SYNTAX, "You have an MP3 player already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pMP3Player] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 7:
		{
			if(PlayerInfo[playerid][pFishingRod])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a fishing rod already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pFishingRod] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 8:
		{
			if(PlayerInfo[playerid][pFishingBait] + 10 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 pieces of bait.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pFishingBait] += 10;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = %i WHERE uid = %i", PlayerInfo[playerid][pFishingBait], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 9:
		{
			if(PlayerInfo[playerid][pMuriaticAcid] + 1 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of muriatic acid.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pMuriaticAcid] += 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", PlayerInfo[playerid][pMuriaticAcid], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 10:
		{
			if(PlayerInfo[playerid][pBakingSoda] + 1 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of baking soda.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pBakingSoda] += 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", PlayerInfo[playerid][pBakingSoda], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 11:
		{
			if(PlayerInfo[playerid][pWatch])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a pocket watch already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pWatch] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 12:
		{
			if(PlayerInfo[playerid][pGPS])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a GPS already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pGPS] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 13:
		{
			if(PlayerInfo[playerid][pRope] + 2 > 10)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 ropes.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pRope] += 2;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 14:
		{
			if(PlayerInfo[playerid][pBlindfold] + 2 > 10)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 blindfolds.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pBlindfold] += 2;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 15:
		{
			if(PlayerInfo[playerid][pToolkit] == 5)
			{
				SCM(playerid, COLOR_SYNTAX, "You already have a full toolkit.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pToolkit] = 5;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toolkit = %i WHERE uid = %i", PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 16:
		{
			if(PlayerInfo[playerid][pFlashlight] == 1)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 flashlight.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pFlashlight] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET flashlight = %i WHERE uid = %i", PlayerInfo[playerid][pFlashlight], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 17:
		{
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			GiveWeapon(playerid, 46);
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 18: {
			if(PlayerInfo[playerid][pMask])
			{
				SCM(playerid, COLOR_SYNTAX, "You have a mask already.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}	
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pMask] = 1;
			BusinessInfo[businessid][bProducts]--;	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 19:
		{
			if(PlayerInfo[playerid][pRepairkit] >= 10)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't hold any more repairkits.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pRepairkit]++;
			BusinessInfo[businessid][bProducts]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", PlayerInfo[playerid][pRepairkit], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case 20:
		{
			if(PlayerInfo[playerid][pGasCan] + 2 > 20)
			{
				SCM(playerid, COLOR_SYNTAX, "You can't hold any more gascans.");
				CalculateShop(playerid, amount, price, itemname);
				return 1;
			}
			if(!IsBusinessOwner(playerid, businessid))
			{
				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
			}
			PlayerInfo[playerid][pGasCan] += 2;
			BusinessInfo[businessid][bProducts]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	CalculateShop(playerid, amount, price, itemname);
	return 1;
}

CalculateShop(playerid, amount, price, itemname[])
{
	CurrItem[playerid]--;
	TotalPrice[playerid] += price;
	TotalProducts[playerid]++;
	new string[256];
	format(string, sizeof(string), "%ix %s,\n", amount, itemname);
	strcat(Products[playerid], string, 2000);
	if(CurrItem[playerid] == 0)
	{
		SM(playerid, COLOR_WHITE, "You just bought %i items and spent total %s$ cash.", TotalProducts[playerid], AddCommas(TotalPrice[playerid]));
		SM(playerid, COLOR_AQUA, Products[playerid]);
	}
}

CMD:sellwatch(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), cost = 4200;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can sell stolen phones.");
 	}
	if(BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside a 24/7 Store");
	}
	if(!PlayerUseAnims(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command now");
	}
	if(PlayerInfo[playerid][pRobWatch] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any stolen Wristwatch which you can sell");
	}
	new amount;
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "Usage: /sellwatch [amount] %s(You currently have %s watches)", GREY, AddCommas(PlayerInfo[playerid][pRobWatch]));
	}
	if(amount > PlayerInfo[playerid][pRobWatch])
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
	}
	if(amount < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
	}

	PlayerInfo[playerid][pRobWatch] -= amount;
	GivePlayerCash(playerid, amount*cost);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rob_watch = %i WHERE uid = %i", PlayerInfo[playerid][pRobWatch], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "You've sold %s%s%s of stolen Wristwatches for %s$%s", CXRP, amount, WHITE, CXRP, AddCommas(amount * cost));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s sells some products to the business.", GetRPName(playerid));
	return 1;
}

CMD:sellphone(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), cost = 3500;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can sell stolen phones.");
 	}
	if(BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside a 24/7 Store");
	}
	if(!PlayerUseAnims(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command now");
	}
	if(PlayerInfo[playerid][pRobPhone] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any stolen Smart yPhones which you can sell");
	}
	new amount;
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "Usage: /sellphone [amount] %s(You currently have %s phones)", GREY, AddCommas(PlayerInfo[playerid][pRobPhone]));
	}
	if(amount > PlayerInfo[playerid][pRobPhone])
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
	}
	if(amount < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
	}
	PlayerInfo[playerid][pRobPhone] -= amount;
	GivePlayerCash(playerid, amount*cost);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rob_phone = %i WHERE uid = %i", PlayerInfo[playerid][pRobPhone], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "You've sold %s%s%s of stolen Smart yPhone for %s$%s", CXRP, amount, WHITE, CXRP, AddCommas(amount * cost));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s sells some products to the business.", GetRPName(playerid));
	return 1;
}

CMD:buyclothes(playerid, params[]) return callcmd::buy(playerid, params);
CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64], string[1024];

	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can buy stuff.");
 	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
   	}

	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	BuyingBiz[playerid] = businessid;
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			ShowStore(playerid, businessid);
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "9mm Pistol\t%s\nKevlar Vest\t%s\nBat\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nMountain Dew\t%s\nFuchka\t%s\nCha Porota\t%s\nKacchi Biriyani\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nMountain Dew\t%s\nBangla\t%s\nOscar\t%s\nWine\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 10;

	if((businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any advertisement business.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(ad)vertise [advertisement] ($10/char)");
	}
	if(PlayerInfo[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a number. Buy the phone again to set a number!.");
	}
	if(strlen(params) > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your ad text is too large.");
	}
	if(strlen(params) < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your ad text is too short.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(PlayerInfo[playerid][pDonator] < 2 && PlayerInfo[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}
	gLastAd = gettime();

	GivePlayerCash(playerid, -price);

	if(businessid >= 0)
	{
		BusinessInfo[businessid][bCash] += price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	new string[128];
	format(string, sizeof(string), "Advert: %s - contact %s(%i)", params, GetRPName(playerid), PlayerInfo[playerid][pNumber]);
	TextDrawSetString(Ad_TD[0], string);
	ShowAdTD();
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SM(playerid, COLOR_AQUA, "** Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no position in the slot selected.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Loading objects...", 5000, 1);

	TeleportToCoords(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ], MarkedPositions[playerid][slot][mPosA], MarkedPositions[playerid][slot][mInterior], MarkedPositions[playerid][slot][mWorld], true);
	SetCameraBehindPlayer(playerid);

	return 1;
}
CMD:createdoor(playerid, params[]) { return callcmd::createentrance(playerid, params); }
CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES(\"%e\", '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Entrance slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:editdoor(playerid, params[]) { return callcmd::editentrance(playerid, params); }
CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SCM(playerid, COLOR_WHITE, "Available options: Faction, VIP, Vehicles, Freeze, Label, Password, Color");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = \"%e\" WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the name of entrance %i to \"%s\".", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SM(playerid, COLOR_AQUA, "** You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of entrance %i to %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type of entrance %i.", entranceid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vip] [rankid]");
	        SCM(playerid, COLOR_GREY2, "List of ranks: (0)None (1) Silver (2) Gold (3) Platinum");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the VIP rank of entrance %i to {C2A2DA}%s{CCFFFF} (%i).", entranceid, GetDonatorRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = \"%e\" WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the password of entrance %i to \"%s\".", entranceid, param);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SM(playerid, COLOR_AQUA, "** You have set the {%06x}color{33CCFF} of entrance ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removedoor(playerid, params[]) { return callcmd::removeentrance(playerid, params); }
CMD:removeentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotodoor(playerid, params[]) { return callcmd::gotoentrance(playerid, params); }
CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:join(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	        if(PlayerInfo[playerid][pJob] != JOB_NONE)
	        {
	            if(PlayerInfo[playerid][pDonator] >= 1 || PlayerInfo[playerid][pLevel] >= 25)
	        	{
	        	    if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
	        	    }
	        	    if(PlayerInfo[playerid][pJob] == i)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
	        	    }

	        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					PlayerInfo[playerid][pSecondJob] = i;
					SM(playerid, COLOR_AQUA, "You are now a "CXRP"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
					SetJobSkin(playerid, 2);
	            }
	            else
	            {
	            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
				}

				return 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pJob] = i;
			SM(playerid, COLOR_AQUA, "You are now a "CXRP"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			SetJobSkin(playerid);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any job icon.");
	return 1;
}

SetJobSkin(playerid, job = 1)
{
	if(job == 1)
	{
		switch(PlayerInfo[playerid][pJob])
		{
			case JOB_YFOOD:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 155);
			}
			case JOB_TRUCKER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 72);
			}
			case JOB_MEATPACKAGER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 79);
			}
			case JOB_MINER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 27);
			}
			case JOB_TAXIDRIVER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 142);
			}
			case JOB_BUS:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 1);
			}
		}
	}
	if(job == 2)
	{
		switch(PlayerInfo[playerid][pSecondJob])
		{
			case JOB_YFOOD:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 155);
			}
			case JOB_TRUCKER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 72);
			}
			case JOB_MEATPACKAGER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 79);
			}
			case JOB_MINER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 27);
			}
			case JOB_TAXIDRIVER:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 142);
			}
			case JOB_BUS:
			{
				JobSkin[playerid] = PlayerInfo[playerid][pSkin];
				SetPlayerSkin(playerid, 1);
			}
		}
	}
}

CMD:jv(playerid, params[]) return callcmd::jobveh(playerid, params);
CMD:jobveh(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You do no have any job. Take a job first.");
	}
	if(PlayerInfo[playerid][pJob] == JOB_YFOOD)
	{
		if(JobVeh[playerid] != INVALID_VEHICLE_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already spawned a vehicle.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 6.5, jobsvehicle[JOB_YFOOD][jvPosX], jobsvehicle[JOB_YFOOD][jvPosY], jobsvehicle[JOB_YFOOD][jvPosZ]))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of vehicle station(YFOOD).");
		}
		new rand = random(sizeof(PizzaVeh));
		JobVeh[playerid] = CreateVehicle(jobsvehicle[JOB_YFOOD][jvModel], PizzaVeh[rand][0], PizzaVeh[rand][1], PizzaVeh[rand][2], PizzaVeh[rand][3], 3, 6, 30000000000);
		SCM(playerid, COLOR_AQUA, "You spawned a Pizza Bike. To return in type /rjv");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
	{
		if(JobVeh[playerid] != INVALID_VEHICLE_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already spawned a vehicle.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 6.5, jobsvehicle[JOB_TRUCKER][jvPosX], jobsvehicle[JOB_TRUCKER][jvPosY], jobsvehicle[JOB_TRUCKER][jvPosZ]))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of vehicle station(TRUCKER).");
		}
		new rand = random(sizeof(TruckerVeh));
		JobVeh[playerid] = CreateVehicle(jobsvehicle[JOB_TRUCKER][jvModel], TruckerVeh[rand][0], TruckerVeh[rand][1], TruckerVeh[rand][2], TruckerVeh[rand][3], 0, 0, 30000000000);
		
		SCM(playerid, COLOR_AQUA, "You spawned a Benson. To return in type /rjv");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == JOB_TAXIDRIVER)
	{
		if(JobVeh[playerid] != INVALID_VEHICLE_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already spawned a vehicle.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 6.5, jobsvehicle[JOB_TAXIDRIVER][jvPosX], jobsvehicle[JOB_TAXIDRIVER][jvPosY], jobsvehicle[JOB_TAXIDRIVER][jvPosZ]))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of vehicle station(TAXI).");
		}
		new rand = random(sizeof(TaxiVeh));
		JobVeh[playerid] = CreateVehicle(jobsvehicle[JOB_TAXIDRIVER][jvModel], TaxiVeh[rand][0], TaxiVeh[rand][1], TaxiVeh[rand][2], TaxiVeh[rand][3], 6, 1, 30000000000);
		SCM(playerid, COLOR_AQUA, "You spawned a Taxi. To return in type /rjv");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == JOB_BUS)
	{
		
		if(JobVeh[playerid] != INVALID_VEHICLE_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already spawned a vehicle.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 6.5, jobsvehicle[JOB_BUS][jvPosX], jobsvehicle[JOB_BUS][jvPosY], jobsvehicle[JOB_BUS][jvPosZ]))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of vehicle station(BUS).");
		}
		new rand = random(sizeof(Bus));
		JobVeh[playerid] = AddStaticVehicleEx(jobsvehicle[JOB_BUS][jvModel], Bus[rand][0], Bus[rand][1], Bus[rand][2], Bus[rand][3], 0, 0, -1);
		SCM(playerid, COLOR_AQUA, "You spawned a BUS. To return in type /rjv");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == JOB_CARGO)
	{
		
		if(JobVeh[playerid] != INVALID_VEHICLE_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already spawned a vehicle.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 6.5, jobsvehicle[JOB_CARGO][jvPosX], jobsvehicle[JOB_CARGO][jvPosY], jobsvehicle[JOB_CARGO][jvPosZ]))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of vehicle station(CARGO).");
		}
		new rand = random(sizeof(Cargo));
		JobVeh[playerid] = CreateVehicle(jobsvehicle[JOB_CARGO][jvModel], Cargo[rand][0], Cargo[rand][1], Cargo[rand][2], Cargo[rand][3], 0, 0, -1);
		SCM(playerid, COLOR_AQUA, "You spawned a Cargo. To return in type /rjv");
		return 1;
	}
	SCM(playerid, COLOR_YELLOW, "You are not in range of any station.");
	return 1;
}

CMD:rjv(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any job. LOL");
	}
	if(JobVeh[playerid] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(JobVeh[playerid]);
		JobVeh[playerid] = INVALID_VEHICLE_ID;
		return 	SCM(playerid, COLOR_AQUA, "Your job vehicle has been despawned.");
	}
	SCM(playerid, COLOR_SYNTAX, "You do not have any spawned vehicle at the moment.");
	return 1;
}

CMD:leavejob(playerid, params[]) return callcmd::quitjob(playerid, params);
CMD:quitjob(playerid, params[])
{
	new slot;

	if(PlayerInfo[playerid][pDonator] >= 1 && sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /quitjob [1/2]");
	}

	if((PlayerInfo[playerid][pDonator] < 1) || (PlayerInfo[playerid][pDonator] >= 1 && slot == 1))
	{
	    if(PlayerInfo[playerid][pJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your job as a "CXRP"%s{CCFFFF}.", GetJobName(PlayerInfo[playerid][pJob]));
		PlayerInfo[playerid][pJob] = JOB_NONE;
		if(JobSkin[playerid] != -1)
		{
			SetPlayerSkin(playerid, JobSkin[playerid]);
			JobSkin[playerid] = -1;
		}
	}
	else if(slot == 2 && PlayerInfo[playerid][pDonator] >= 1)
	{
	    if(PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job in this slot which you can quit.");
	    }
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your secondary job as a "CXRP"%s{CCFFFF}.", GetJobName(PlayerInfo[playerid][pSecondJob]));
		PlayerInfo[playerid][pSecondJob] = JOB_NONE;
		if(JobSkin[playerid] != -1)
		{
			SetScriptSkin(playerid, JobSkin[playerid]);
			JobSkin[playerid] = -1;
		}
	}
	if(JobVeh[playerid] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(JobVeh[playerid]);
		JobVeh[playerid] = INVALID_VEHICLE_ID;
	}
	if( IsPlayerAttachedObjectSlotUsed( playerid, 5 ) ) RemovePlayerAttachedObject( playerid, 5 );
	return 1;
}

forward LoadFood(playerid, houseid);
public LoadFood(playerid, houseid)
{
	Unfreeze(playerid);
	PlayerInfo[playerid][pLoadingFood] = 0;
	PlayerInfo[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    PlayerInfo[playerid][pYFoods] = 1;
	PlayerInfo[playerid][pLastYFood] = gettime();
    PlayerInfo[playerid][pYFoodTime] = 0;
    PlayerInfo[playerid][pYFoodCooldown] = 60;

	SetPlayerAttachedObject( playerid, 4, 1582, 1, 0.006999, 0.539000, 0.014999, 0.000000,94.099998,0.000000, 1.000000,1.000000,1.000000, 0, 0 );
	PlayAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
	SCM( playerid, COLOR_AQUA, "You took a pizza, now go to the pizza bike and type /loadfood.");
	SCM( playerid, COLOR_LIGHTGREEN, "When you add the pizza, order timer activates. ");
	PlayerInfo[playerid][pFoodLoaded] = 1;
	return 1;
}

CMD:checktruck(playerid, params[]) return callcmd::checkcargo(playerid, params);
CMD:checkcargo(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkcargo [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_WHITE, "The player currently doesn't have a cargo to deliver.");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == -1)
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {28c12d}LEGAL PRODUCTS");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
   		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL DRUGS");
	}
	return 1;
}

SetLoadTruck(playerid, type)
{
	new businessid;
	switch(type)
	{
		case LOADTYPE_STORE:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_STORE);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}

			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Grocery Supplies{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_STORE;
			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_BARCLUB:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_BARCLUB);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}
			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Beverages{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_BARCLUB;

			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_CLOTHES:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_CLOTHES);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}

			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Clothing Items{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_CLOTHES;
			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_GUNSHOP:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_GUNSHOP);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}
			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Legel Weapon Parts{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_GUNSHOP;

			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_RESTAURANT:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_RESTAURANT);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}
			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Food & Drinks{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_RESTAURANT;

			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_AGENCY:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_AGENCY);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}

			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Paper Bundles{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_AGENCY;
			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_GYM:
		{
			businessid = GetRandomBiz(playerid, BUSINESS_GYM);

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}
			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Boxing Supplies{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
			PlayerInfo[playerid][pShipment] = LOADTYPE_GYM;

			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
		case LOADTYPE_ILLEGAL:
		{
			switch(random(4))
			{
				case 0: businessid = GetRandomBiz(playerid, BUSINESS_BARCLUB);
				case 1: businessid = GetRandomBiz(playerid, BUSINESS_GUNSHOP);
				case 2: businessid = GetRandomBiz(playerid, BUSINESS_GUNSHOP);
				case 3: businessid = GetRandomBiz(playerid, BUSINESS_BARCLUB);
			}

			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found nearby, Please try again!");
			}
    		SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Drugs{33CCFF}. Deliver this shipment to the checkpoint (red marker on map)");
        	SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
			PlayerInfo[playerid][pShipment] = LOADTYPE_ILLEGAL;
			PlayerInfo[playerid][pIllegalCargo] = LOADTYPE_ILLEGAL;

			PlayerInfo[playerid][pCP] = CHECKPOINT_TRUCKER;
			SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6.0);
		}
	}
	return 1;
}

CMD:loadtruck(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_TRUCKER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 499)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2733.7070,-2512.6345,13.6641))
	{
        SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock. A checkpoint has been set to the dock point.");
        PlayerInfo[playerid][pCP] = CHECKPOINT_LOADTRUCK;
	    SetPlayerCheckpoint(playerid, 2733.7070,-2512.6345,13.6641, 6.0);
		return 1;
	}
	if(PlayerInfo[playerid][pShipment] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a shipment loaded already. You need to deliver it first.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery Supplies\nClothing Items\nFood & Drinks\nBeverages\nLegal Weapon Parts\nPaper Bundles\nBoxing Supplies\nIllegal Drugs", "Load", "Cancel");
	return 1;
}

CMD:skill(playerid, params[]) return callcmd::skills(playerid, params);
CMD:skills(playerid, params[])
{
	new formatstring[1024], str[2048], job1[64], job2[64], job3[64],
	job4[64], job5[64];
	if(GetJobLevel(playerid, JOB_TRUCKER) < 5)
	{
		if(PlayerInfo[playerid][pTruckerSkill] < 50) {
			format(job1, sizeof(job1), "Deliver %i more shipments to level up.", 50 - PlayerInfo[playerid][pTruckerSkill]);
		} else if(PlayerInfo[playerid][pTruckerSkill] < 100) {
			format(job1, sizeof(job1), "Deliver %i more shipments to level up.", 100 - PlayerInfo[playerid][pTruckerSkill]);
		} else if(PlayerInfo[playerid][pTruckerSkill] < 200) {
			format(job1, sizeof(job1), "Deliver %i more shipments to level up.", 200 - PlayerInfo[playerid][pTruckerSkill]);
		} else if(PlayerInfo[playerid][pTruckerSkill] < 350) {
			format(job1, sizeof(job1), "Deliver %i more shipments to level up.", 350 - PlayerInfo[playerid][pTruckerSkill]);
		}
	}
	else
	{
		format(job1, sizeof(job1), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	{
		if(PlayerInfo[playerid][pFishingSkill] < 50) {
			format(job2, sizeof(job2), "Catch %i more fish to level up.", 50 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 100) {
			format(job2, sizeof(job2), "Catch %i more fish to level up.", 100 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 200) {
			format(job2, sizeof(job2), "Catch %i more fish to level up.", 200 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 350) {
			format(job2, sizeof(job2), "Catch %i more fish to level up.", 350 - PlayerInfo[playerid][pFishingSkill]);
		}
	}
	else
	{
		format(job2, sizeof(job2), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	{
		if(PlayerInfo[playerid][pWeaponSkill] < 50) {
			format(job3, sizeof(job3), "Sell %i more weapons to level up.", 50 - PlayerInfo[playerid][pWeaponSkill]);
		} else if(PlayerInfo[playerid][pWeaponSkill] < 100) {
			format(job3, sizeof(job3), "Sell %i more weapons to level up.", 100 - PlayerInfo[playerid][pWeaponSkill]);
		} else if(PlayerInfo[playerid][pWeaponSkill] < 200) {
			format(job3, sizeof(job3), "Sell %i more weapons to level up.", 200 - PlayerInfo[playerid][pWeaponSkill]);
		}
	}
	else
	{
		format(job3, sizeof(job3), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	{
		if(PlayerInfo[playerid][pSmugglerSkill] < 25) {
			format(job4, sizeof(job4), "Smuggle %i more packages to level up.", 25 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 50) {
			format(job4, sizeof(job4), "Smuggle %i more packages to level up.", 50 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 75) {
			format(job4, sizeof(job4), "Smuggle %i more packages to level up.", 75 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 100) {
			format(job4, sizeof(job4), "Smuggle %i more packages to level up.", 100 - PlayerInfo[playerid][pSmugglerSkill]);
		}
	}
	else
	{
		format(job4, sizeof(job4), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	{
		if(PlayerInfo[playerid][pLawyerSkill] < 25) {
			format(job5, sizeof(job5), "Defend %i more clients to level up.", 25 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 50) {
			format(job5, sizeof(job5), "Defend %i more clients to level up.", 50 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 100) {
			format(job5, sizeof(job5), "Defend %i more clients to level up.", 100 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 200) {
			format(job5, sizeof(job5), "Defend %i more clients to level up.", 200 - PlayerInfo[playerid][pLawyerSkill]);
		}
	}
	else
	{
		format(job5, sizeof(job5), "You have reached the maximum skill level for this job.");
	}

	format(formatstring, sizeof(formatstring), "Trucker\t{FFFF00}Level: %d\t%s\n", GetJobLevel(playerid, JOB_TRUCKER), job1);
	strcat(str, formatstring);
	format(formatstring, sizeof(formatstring), "Fisherman\t{FFFF00}Level: %d\t%s\n", GetJobLevel(playerid, JOB_FISHERMAN), job2);
	strcat(str, formatstring);
	format(formatstring, sizeof(formatstring), "Arms Dealer\t{FFFF00}Level: %d\t%s\n", GetJobLevel(playerid, JOB_ARMSDEALER), job3);
	strcat(str, formatstring);
	format(formatstring, sizeof(formatstring), "Drug Dealer\t{FFFF00}Level: %d\t%s\n", GetJobLevel(playerid, JOB_DRUGDEALER), job4);
	strcat(str, formatstring);
	format(formatstring, sizeof(formatstring), "Lawyer\t{FFFF00}Level: %d\t%s", GetJobLevel(playerid, JOB_LAWYER), job5);
	strcat(str, formatstring);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""CXRP"Job Skills", str, "Close", "");
	return 1;
}

CMD:fish(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if(!IsPlayerAtFishingPlace(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not close to anywhere where you can fish.");
	}
	if(!PlayerInfo[playerid][pFishingRod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(PlayerInfo[playerid][pFishTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(PlayerInfo[playerid][pFishWeight] >= 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have too much fish and can't fish any longer.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

	Freeze(playerid);
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reels the line of their fishing rod into the water.", GetRPName(playerid));
	GameTextForPlayer(playerid, "~w~Fishing...", 6000, 3);

	PlayerInfo[playerid][pFishTime] = 6;

	if(PlayerInfo[playerid][pFishingBait] > 0)
	{
	    PlayerInfo[playerid][pFishingBait]--;
	    PlayerInfo[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    PlayerInfo[playerid][pUsedBait] = 0;
	}

	return 1;
}

CMD:sellfish(playerid, params[])
{
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any Supermarket business.");
	}
	if(!PlayerInfo[playerid][pFishWeight])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no fish which you can sell.");
	}

	new amount = (PlayerInfo[playerid][pFishWeight] * 1) + random(400) + 400;

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
 		amount = amount*2;
		SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	SM(playerid, COLOR_AQUA, "** You earned $%s for selling %i kg of fish.", AddCommas(amount), PlayerInfo[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}

	SCM(playerid, COLOR_GREEN, "My Fish:");
	SM(playerid, COLOR_GREY2, "You have %i/%i kg of fish in your inventory.", PlayerInfo[playerid][pFishWeight], GetJobLevel(playerid, JOB_FISHERMAN) * 50);
	return 1;
}

CMD:vest(playerid, params[]) return callcmd::sellvest(playerid, params);

CMD:sellvest(playerid, params[])
{
	new targetid, amount;

	if(!PlayerHasJob(playerid, JOB_BODYGUARD) && GetFactionType(playerid) != FACTION_MEDIC)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Bodyguard or a Medic.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellvest [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 100 || amount > 500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $100 and $500.");
	}
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(GetArmor(targetid) > 49)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player already has over 50 armour. You can't vest them now.");
	}
	PlayerInfo[playerid][pLastSell] = gettime();
	PlayerInfo[targetid][pVestOffer] = playerid;
	PlayerInfo[targetid][pVestPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you a vest with 50 points of armor for $%i (/accept vest).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s a vest with 50 points of armor for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:getmats(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_ARMSDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not an Arms Dealer!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2138.1108, -2287.8926, 14.7801))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any materials pickup.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $500 in cash to smuggle materials.");
	}
    if(PlayerInfo[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerInfo[playerid][pCP] = CHECKPOINT_MATS;
	PlayerInfo[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -500);
	SCM(playerid, COLOR_AQUA, "** You paid $500 for a load of materials. Smuggle them to the depot to collect them.");

	AddPointMoney(POINT_MATPICKUP1, 500);
	SetPlayerCheckpoint(playerid, 2173.1177, -2257.4858, 14.5691, 3.0);
	SetPlayerAttachedObject(playerid, 9, 1271, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	PlayerInfo[playerid][pSmuggleMats] = 1;
	
	return 1;
}

CMD:sellgun(playerid, params[])
{
	new targetid, weapon[10], price;
	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }
    if(!PlayerHasJob(playerid, JOB_ARMSDEALER) && PlayerInfo[playerid][pDonator] < 2)
    {
		return SCM(playerid, COLOR_SYNTAX, "You're not an Arms Dealer or Gold/Platinum Donator.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons from within a vehicle.");
	}
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SM(playerid, SERVER_COLOR, "Available Craftable Weapons:");

		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 1)
		{
		    SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Bat [100], Shovel [100], Golfclub [100], Poolcue [100]");
			SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Katana [100] Cane [100] Knuckles [50]");
			SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" 9mm [1000], SDPistol [1250]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 2)
		{
			SCM(playerid, COLOR_YELLOW, "Level 2:"WHITE" Shotgun [2500]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 3)
		{
			SCM(playerid, COLOR_YELLOW, "Level 3:"WHITE" Rifle [5000],  Uzi[7500]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 4)
		{
			SCM(playerid, COLOR_YELLOW, "Level 4:"WHITE" Tec 9[8500], MP5[10000]");
		}
		SCM(playerid, COLOR_SYNTAX, "Usage: /sellgun [playerid] [name] [price]");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}

		if(PlayerHasWeapon(targetid, 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 5;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a baseball bat for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 6;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shovel for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shovel for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "knuckles", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 1);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 1;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you knuckles for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s knuckles for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 2;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a golf club for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a golf club for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 7;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a pool cue for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a pool cue for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 8;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a katana for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a katana for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 15;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a cane for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a cane for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 100)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $100.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 22;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a 9mm for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a 9mm for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 1250)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 23;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a silenced pistol for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 2500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 25;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shotgun for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shotgun for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "uzi", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 7500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 28))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 28);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 28;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Micro Uzi for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Micro Uzi for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 10000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 29;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an MP5 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an MP5 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 8500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 32;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Tec-9 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "rifle", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 5000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 33))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 33);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 33;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Rifle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Rifle for $%i.", GetRPName(targetid), price);
		}
	}

	return 1;
}

CMD:fix(playerid, params[])
{
	new vehicleid = GetClosestCar(playerid), Float:health;

	if(gettime() - PlayerInfo[playerid][pLastRepair] < 20)
	{
		return SM(playerid, COLOR_SYNTAX, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRepair]));
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not close to any vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return SCM(playerid, COLOR_SYNTAX, "You have to be on foot in order to fix.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be repaired.");
	}
	if(PlayerInfo[playerid][pRepairkit] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no repair-kits left on you, buy from 24/7.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	if(health >= 750.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
		PlayerInfo[playerid][pLastRepair] = gettime();
		PlayerInfo[playerid][pRepairkit]--;
		Freeze(playerid);
		
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
		GameTextForPlayer(playerid,"~w~Fixing the vehicle..",5000,4);
		SetTimerEx("TimerSelfRepairEx", 5000, false, "ii", playerid, vehicleid);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts repairing the vehicle.", GetRPName(playerid));
	}
	return 1;
}



CMD:repair(playerid, params[])
{
	new id = GetInsideGarage(playerid);

	if(!(id >= 0 && IsGarageOwner(playerid, id)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of your own garage!.");
	}

	if(gettime() - PlayerInfo[playerid][pLastRepair] < 40)
	{
		return SM(playerid, COLOR_SYNTAX, "You can only repair a vehicle every 40 seconds. Please wait %i more seconds.", 40 - (gettime() - PlayerInfo[playerid][pLastRepair]));
	}

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}

	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be repaired.");
	}
	new Float:health;
	GetVehicleHealth(vehicleid, health);

	if(health >= 750.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
		PlayerInfo[playerid][pLastRepair] = gettime();
		Freeze(playerid);
		
		GameTextForPlayer(playerid,"~w~Fixing the vehicle..", 10000,4);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts repairing the vehicle.", GetRPName(playerid));
		SetTimerEx("TimerSelfRepair", 10000, false, "ii", playerid, vehicleid);
	}
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle can't be modified with nitrous.");
    }

	AddVehicleComponent(vehicleid, 1009);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a 2x NOS Canister on the engine feed.", GetRPName(playerid));
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}

	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a set of hydraulics to the vehicle.", GetRPName(playerid));
	return 1;
}

CMD:givenos(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE: /givenos [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	new vehicleid = GetPlayerVehicleID(targetid);
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Player isn't driving any vehicle.");
	}
	AddVehicleComponent(vehicleid, 1009);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1133, 0.0, 0.0, 0.0);
	SM(playerid, COLOR_SYNTAX, "You've successfully added Nitroxide to %s's %s", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}


CMD:givehyd(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE: /givehyd [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	new vehicleid = GetPlayerVehicleID(targetid);
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Player isn't driving any vehicle.");
	}
	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1133, 0.0, 0.0, 0.0);
	SM(playerid, COLOR_SYNTAX, "You've successfully added hydraulics to %s's %s", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:impound(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
 	if(!IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "You are not towing a vehicle.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 571.0540, -1302.5659, 16.7883))
	{
		return SCM(playerid, COLOR_GREY2, "You are not at impounding area.");
	}
	new veh = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	if(VehicleInfo[veh][vOwnerID] > 0)
	{
		VehicleInfo[veh][vImpounded] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = %i WHERE id = %i", VehicleInfo[veh][vImpounded], VehicleInfo[veh][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	new string[256];
	if(VehicleInfo[veh][vOwnerID] > 0)
	{
		format(string, sizeof(string), "HQ: %s %s has impounded %s's %s%s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), VehicleInfo[veh][vOwner], CXRP, GetVehicleName(veh));
		Log_Write("log_faction", "%s (uid: %i) has impounded %s (uid: %i)'s %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], VehicleInfo[veh][vOwner], VehicleInfo[veh][vOwnerID], GetVehicleModel(veh));
	}
	else if(TruckMafia[veh])
	{
		format(string, sizeof(string), "HQ: %s %s has impounded a Mafia Shipment Truck.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
		Log_Write("log_faction", "%s (uid: %i) has impounded a Mafia Shipment Truck", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else
	{
		format(string, sizeof(string), "HQ: %s %s has impounded %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetVehicleName(veh));
		Log_Write("log_faction", "%s (uid: %i) has impounded %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(veh));
	}

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, string);

	if(TruckMafia[veh])	
	{
		new string2[256];
		format(string2, sizeof(string2), "Radio: One of your truck (ID: %i) got impounded by a LEO. Shipment cancelled!", veh);
		SendMafiaMessage(COLOR_AQUA, string2);
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	if(TruckMafia[veh])
	{
		ResetTruckLoad(veh);
		TruckMafia[veh] = false;
		if(TruckSpawned > 0)
			TruckSpawned--;
		else
			TruckSpawned = 0;
	}
	if(VehicleInfo[veh][vOwnerID] > 0)
	{
		DespawnVehicle(veh);
	}
	else if(TruckMafia[veh])
	{
		DestroyVehicle(veh);
	}
	else
	{
		SetVehicleToRespawn(veh);
	}
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
 	if(!IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SCM(playerid, COLOR_SYNTAX, "There is no vehicle in range that you can tow.");
    }
    return 1;
}

CMD:untow(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, detaching it from the vehicle.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

IsPlayerAtFuelStation(playerid)
{
    for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, FuelStationInfo[i][FuelX], FuelStationInfo[i][FuelY], FuelStationInfo[i][FuelZ]))
		{
		    return true;
		}
	}
	return false;
}

GetFuelStationId(playerid)
{
	for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, FuelStationInfo[i][FuelX], FuelStationInfo[i][FuelY], FuelStationInfo[i][FuelZ])) return i;
	}
	return -1;
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = GetInsideGarage(playerid);
	new i = GetFuelStationId(playerid);

	if(!IsPlayerAtFuelStation(playerid) && !(id >= 0 && IsGarageOwner(playerid, id)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a gas station or inside of your own garage.");
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1545.0540,-1605.2263,13.8247) && !IsLawEnforcement(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "This fuel station is only available for SFPDs.");
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fuel tank in this vehicle is already full.");
	}
	if(PlayerInfo[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * FuelStationInfo[i][fprice] && !IsPlayerInRangeOfPoint(playerid, 5.0, 1545.0540,-1605.2263,13.8247))
	{
	    return SM(playerid, COLOR_SYNTAX, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * FuelStationInfo[i][fprice]);
	}

	if(PlayerInfo[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1545.0540,-1605.2263,13.8247))
		{
	        SCM(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for FREE!.");
		}
		else
		{
			GivePlayerCash(playerid, -PlayerInfo[playerid][pRefuelAmount]);
			SM(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for $%i.", PlayerInfo[playerid][pRefuelAmount]);
			
		}

        PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
        PlayerInfo[playerid][pRefuelAmount] = 0;
	}
	else
	{
	    if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	    {
         	return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before proceeding.");
	    }

		PlayerInfo[playerid][pRefuel] = vehicleid;
		PlayerInfo[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s begins to refuel their vehicle's gas tank.", GetRPName(playerid));
		SM(playerid, COLOR_WHITE, "** This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}

ShowBankTD(playerid)
{
	new string[256];
	format(string, sizeof(string), "Current_Bank_Balance:_%s$", AddCommas(PlayerInfo[playerid][pBank]));
	PlayerTextDrawSetString(playerid, BankTD[playerid][10], string);
	format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
	PlayerTextDrawSetString(playerid, BankTD[playerid][15], string);
	PlayerTextDrawShow(playerid, BankTD[playerid][0]);
	PlayerTextDrawShow(playerid, BankTD[playerid][1]);
	PlayerTextDrawShow(playerid, BankTD[playerid][2]);
	PlayerTextDrawShow(playerid, BankTD[playerid][3]);
	PlayerTextDrawShow(playerid, BankTD[playerid][4]);
	PlayerTextDrawShow(playerid, BankTD[playerid][5]);
	PlayerTextDrawShow(playerid, BankTD[playerid][6]);
	PlayerTextDrawShow(playerid, BankTD[playerid][7]);
	PlayerTextDrawShow(playerid, BankTD[playerid][8]);
	PlayerTextDrawShow(playerid, BankTD[playerid][9]);
	PlayerTextDrawShow(playerid, BankTD[playerid][10]);
	PlayerTextDrawShow(playerid, BankTD[playerid][11]);
	PlayerTextDrawShow(playerid, BankTD[playerid][12]);
	PlayerTextDrawShow(playerid, BankTD[playerid][13]);
	PlayerTextDrawShow(playerid, BankTD[playerid][14]);
	PlayerTextDrawShow(playerid, BankTD[playerid][15]);
	SelectTextDraw(playerid, 0xEF5350FF);
}

HideBankTD(playerid)
{
	PlayerTextDrawHide(playerid, BankTD[playerid][0]);
	PlayerTextDrawHide(playerid, BankTD[playerid][1]);
	PlayerTextDrawHide(playerid, BankTD[playerid][2]);
	PlayerTextDrawHide(playerid, BankTD[playerid][3]);
	PlayerTextDrawHide(playerid, BankTD[playerid][4]);
	PlayerTextDrawHide(playerid, BankTD[playerid][5]);
	PlayerTextDrawHide(playerid, BankTD[playerid][6]);
	PlayerTextDrawHide(playerid, BankTD[playerid][7]);
	PlayerTextDrawHide(playerid, BankTD[playerid][8]);
	PlayerTextDrawHide(playerid, BankTD[playerid][9]);
	PlayerTextDrawHide(playerid, BankTD[playerid][10]);
	PlayerTextDrawHide(playerid, BankTD[playerid][11]);
	PlayerTextDrawHide(playerid, BankTD[playerid][12]);
	PlayerTextDrawHide(playerid, BankTD[playerid][13]);
	PlayerTextDrawHide(playerid, BankTD[playerid][14]);
	PlayerTextDrawHide(playerid, BankTD[playerid][15]);
    CancelSelectTextDraw(playerid);
}

CMD:bank(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command while in Admin Duty");
	}

	ShowBankTD(playerid);
	return 1;
}


CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}

	SM(playerid, COLOR_YELLOW, "Your bank account balance is $%i.", PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}

CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rsms [text]");
	}
	if(PlayerInfo[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't received a text by anyone since you joined the server.");
	}
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pJailType] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
    }
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTogglePhone])
    {
        return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
	if(PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SM(PlayerInfo[playerid][pTextFrom], COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), PlayerInfo[playerid][pNumber], params);
    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(PlayerInfo[playerid][pTextFrom]), PlayerInfo[PlayerInfo[playerid][pTextFrom]][pNumber], params);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}

CMD:hsms(playerid, params[])
{
	new number, msg[128];

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
		return NotAuth(playerid);
	}

	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hsms [number] [message]");
	}
	if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pNumber])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pNumber] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "** SMS from Unknown Hitman: %.*s... **", MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "** SMS from Unknown Hitman: ...%s **", msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %.*s... **", GetRPName(i), PlayerInfo[i][pNumber], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): ...%s **", GetRPName(i), PlayerInfo[i][pNumber], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "** SMS from Unknown Hitman: %s **", msg);
		        SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(i), PlayerInfo[i][pNumber], msg);
			}

			PlayerInfo[i][pTextFrom] = INVALID_PLAYER_ID;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}
	SCM(playerid, COLOR_SYNTAX, "Player not online!");
	return 1;
}

CMD:sms(playerid, params[])
{
	new number, msg[128];

	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms [number] [message]");
	}
	if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a number. Buy the phone again to set a number!.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pNumber])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pNumber] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): %.*s... **", GetRPName(playerid), PlayerInfo[playerid][pNumber], MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): ...%s **", GetRPName(playerid), PlayerInfo[playerid][pNumber], msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %.*s... **", GetRPName(i), PlayerInfo[i][pNumber], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): ...%s **", GetRPName(i), PlayerInfo[i][pNumber], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), PlayerInfo[playerid][pNumber], msg);
		        SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(i), PlayerInfo[i][pNumber], msg);
			}

			if(PlayerInfo[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
			}

			PlayerInfo[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}

CMD:texts(playerid, params[])
{
    if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a number. Buy the phone again to set a number!.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", PlayerInfo[playerid][pNumber]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}

ShowPhone(playerid)
{
	if(ShowingPhone[playerid])
	{
		return true;
	}
	TextDrawShowForPlayer(playerid, PhoneTD[0]);
	TextDrawShowForPlayer(playerid, PhoneTD[1]);
	TextDrawShowForPlayer(playerid, PhoneTD[2]);
	TextDrawShowForPlayer(playerid, PhoneTD[3]);
	TextDrawShowForPlayer(playerid, PhoneTD[4]);
	TextDrawShowForPlayer(playerid, PhoneTD[5]);
	TextDrawShowForPlayer(playerid, PhoneTD[6]);
	TextDrawShowForPlayer(playerid, PhoneTD[7]);
	TextDrawShowForPlayer(playerid, PhoneTD[8]);
	TextDrawShowForPlayer(playerid, PhoneTD[9]);
	TextDrawShowForPlayer(playerid, PhoneTD[10]);
	TextDrawShowForPlayer(playerid, PhoneTD[11]);
	TextDrawShowForPlayer(playerid, notch);
	TextDrawShowForPlayer(playerid, body);
	TextDrawShowForPlayer(playerid, walp);
	TextDrawShowForPlayer(playerid, wtrmrk);
	TextDrawShowForPlayer(playerid, cam);
	TextDrawShowForPlayer(playerid, home);
	TextDrawShowForPlayer(playerid, call);
	TextDrawShowForPlayer(playerid, sms);
	TextDrawShowForPlayer(playerid, chat);
	TextDrawShowForPlayer(playerid, locate);
	TextDrawShowForPlayer(playerid, vst);
	TextDrawShowForPlayer(playerid, noo);
	TextDrawShowForPlayer(playerid, statss);
	TextDrawShowForPlayer(playerid, ping);
	TextDrawShowForPlayer(playerid, inv);
	TextDrawShowForPlayer(playerid, camera);
	TextDrawShowForPlayer(playerid, report);
	TextDrawShowForPlayer(playerid, rdm);
	SelectTextDraw(playerid, 0xFFD900FF);
	ShowingPhone[playerid] = true;
	Freeze(playerid);
	
	SCM(playerid, COLOR_WHITE, "You've taken out your "ORANGE"Smart yPhone!");
	SCM(playerid, COLOR_SYNTAX, "Note: If you can move or your cursor is not showing, use /fixphone!");
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out their Smart yPhone.", GetRPName(playerid));
	return 1;
}

forward PingLoc(playerid, targetid);
public PingLoc(playerid, targetid)
{
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return true;
	if(!IsPlayerSpawned(playerid) || !IsPlayerSpawned(targetid)) return true;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	Dyuze(targetid, "Location Ping!", "~g~Check your ~r~map ~g~for the location!");
	SM(targetid, COLOR_WHITE, "New location ping from %s[%i] at %s. Check your map for his pinged location!", GetRPName(playerid), playerid, GetPlayerZoneName(playerid));	

	PlayerInfo[targetid][pCP] = CHECKPOINT_MISC;
	SetPlayerCheckpoint(targetid, x, y, z, 3.0);

	SM(playerid, COLOR_WHITE, "Your current location has been pinged to %s!", GetRPName(targetid));
	return 1;
}

HidePhone(playerid)
{
	if(!ShowingPhone[playerid])
	{
		return true;
	}
	TextDrawHideForPlayer(playerid, PhoneTD[0]);
	TextDrawHideForPlayer(playerid, PhoneTD[1]);
	TextDrawHideForPlayer(playerid, PhoneTD[2]);
	TextDrawHideForPlayer(playerid, PhoneTD[3]);
	TextDrawHideForPlayer(playerid, PhoneTD[4]);
	TextDrawHideForPlayer(playerid, PhoneTD[5]);
	TextDrawHideForPlayer(playerid, PhoneTD[6]);
	TextDrawHideForPlayer(playerid, PhoneTD[7]);
	TextDrawHideForPlayer(playerid, PhoneTD[8]);
	TextDrawHideForPlayer(playerid, PhoneTD[9]);
	TextDrawHideForPlayer(playerid, PhoneTD[10]);
	TextDrawHideForPlayer(playerid, PhoneTD[11]);
	TextDrawHideForPlayer(playerid, notch);
	TextDrawHideForPlayer(playerid, body);
	TextDrawHideForPlayer(playerid, walp);
	TextDrawHideForPlayer(playerid, wtrmrk);
	TextDrawHideForPlayer(playerid, cam);
	TextDrawHideForPlayer(playerid, home);
	TextDrawHideForPlayer(playerid, call);
	TextDrawHideForPlayer(playerid, sms);
	TextDrawHideForPlayer(playerid, chat);
	TextDrawHideForPlayer(playerid, locate);
	TextDrawHideForPlayer(playerid, vst);
	TextDrawHideForPlayer(playerid, noo);
	TextDrawHideForPlayer(playerid, statss);
	TextDrawHideForPlayer(playerid, ping);
	TextDrawHideForPlayer(playerid, inv);
	TextDrawHideForPlayer(playerid, camera);
	TextDrawHideForPlayer(playerid, report);
	TextDrawHideForPlayer(playerid, rdm);
	CancelSelectTextDraw(playerid);
	ShowingPhone[playerid] = false;
	Unfreeze(playerid);
	SCM(playerid, COLOR_WHITE, "You've hid your "ORANGE"Smart yPhone!");
	SCM(playerid, COLOR_SYNTAX, "Note: If you can't move or your cursor is still showing, use /fixphone!");
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts away their Smart yPhone.", GetRPName(playerid));
	return 1;
}

CMD:phone(playerid, params[])
{
	if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a number. Buy the phone again to set a number!.");
	}
	if(!PlayerUseAnimsEx(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You're unable to take out your phone now!");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerInfo[playerid][pCallStage] == 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't open your phone as you have an incoming call! Hang it up first.");
	}
	if(ShowingPhone[playerid])
	{
		HidePhone(playerid);
		ShowingPhone[playerid] = false;
	}
	else
	{
		ShowPhone(playerid);
		ShowingPhone[playerid] = true;
	}
	return 1;
}

CMD:fixphone(playerid, params[])
{
	if(!ShowingPhone[playerid])
	{
		CancelSelectTextDraw(playerid);
		Unfreeze(playerid);
	}
	else
	{
		SelectTextDraw(playerid, 0xFFD900FF);
		Freeze(playerid);
		
	}
	SCM(playerid, COLOR_WHITE, "Done! Your phone should be fixed by now.");
	return 1;
}

CMD:call(playerid, params[])
{
	new number;
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(PlayerInfo[playerid][pPhone] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a number. Buy the phone again to set a number!.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a call in session. /(h)angup to end that call.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pNumber])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(PlayerUseAnimsEx(playerid) == 0 && number != 911)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	if(number == 911)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(number == 6397)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is LSNews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(number == 6324)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(number == 8294)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the cab company. Please state your location and destination.");
		return 1;
	}
	else if(number == 666)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
	    return 1;
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pNumber] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This player is currently in a call. Wait until they hang up.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}
			if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    return SCM(playerid, COLOR_SYNTAX, "That player is currently in a live interview and can't talk on the phone.");
	        }

	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 330, 6);

			PlayerInfo[playerid][pCallLine] = i;
			PlayerInfo[playerid][pCallStage] = 0;

			PlayerInfo[i][pCallLine] = playerid;
			PlayerInfo[i][pCallStage] = 1;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
			SendProximityMessage(i, 20.0, SERVER_COLOR, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));

			if(ShowingPhone[i])
			{
				HidePhone(i);
				ShowingPhone[i] = false;
			}

			TextDrawShowForPlayer(i, notch);
			TextDrawShowForPlayer(i, body);
			TextDrawShowForPlayer(i, walp);
			TextDrawShowForPlayer(i, wtrmrk);
			TextDrawShowForPlayer(i, cam);
			TextDrawShowForPlayer(i, home);
			TextDrawShowForPlayer(i, call_text[0]);
			TextDrawShowForPlayer(i, call_text[1]);
			TextDrawShowForPlayer(i, call_stat);
			TextDrawShowForPlayer(i, call_pickup);
			TextDrawShowForPlayer(i, call_hangup);
			new ssnumber[64];
			format(ssnumber, sizeof(ssnumber), "Num: ~y~%i", PlayerInfo[playerid][pNumber]);
			PlayerTextDrawSetString(i, call_number[i], ssnumber);
			PlayerTextDrawShow(i, call_number[i]);
			SelectTextDraw(i, 0xFF0000FF);
			ShowingPhone[i] = true;

	        SM(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
	        SM(i, COLOR_YELLOW, "** Incoming call from #%i. Use /pickup to take this call.", PlayerInfo[playerid][pNumber]);
			PlayerPlaySound(i, 20600, 0.0, 0.0, 0.0);
			PlayerInfo[i][pRingTimer] = SetTimerEx("RingTimer", 5000, true, "i", i);
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pRingTimer] = SetTimerEx("DialTimer", 5000, true, "i", playerid);
			SetTimerEx("HangCall", 30000, false, "i", playerid);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "That number is either not in service or the owner is offline.");
	return 1;
}

forward HangCall(playerid);
public HangCall(playerid)
{
	if(PlayerInfo[playerid][pCallStage] == 1)
	{
		HangupCall(playerid, HANGUP_DROPPED);
	}
	return 1;
}

forward RingTimer(playerid);
public RingTimer(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pCallStage] != 1) return 1;
	PlayerPlaySound(playerid, 20600, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s's mobile phone rings.", GetRPName(playerid));
	return 1;
}

forward DialTimer(playerid);
public DialTimer(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pCallLine] == INVALID_PLAYER_ID) return 1;
	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	return 1;
}


CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallStage] != 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no incoming calls which you can answer right now.");
	}
	if(PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	new callerid = PlayerInfo[playerid][pCallLine];

	PlayerInfo[callerid][pCallStage] = 2;
	PlayerInfo[playerid][pCallStage] = 2;

	SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat/voice to talk to the caller.");
	SCM(callerid, COLOR_WHITE, "** They answered the call. You can now speak in chat/voice to talk to them.");
	KillTimer(PlayerInfo[playerid][pRingTimer]);
	KillTimer(PlayerInfo[callerid][pRingTimer]);

	if(ShowingPhone[playerid])
	{
		TextDrawHideForPlayer(playerid, notch);
		TextDrawHideForPlayer(playerid, body);
		TextDrawHideForPlayer(playerid, walp);
		TextDrawHideForPlayer(playerid, wtrmrk);
		TextDrawHideForPlayer(playerid, cam);
		TextDrawHideForPlayer(playerid, home);
		TextDrawHideForPlayer(playerid, call_text[0]);
		TextDrawHideForPlayer(playerid, call_text[1]);
		TextDrawHideForPlayer(playerid, call_stat);
		TextDrawHideForPlayer(playerid, call_pickup);
		TextDrawHideForPlayer(playerid, call_hangup);
		PlayerTextDrawHide(playerid, call_number[playerid]);
		CancelSelectTextDraw(playerid);
		ShowingPhone[playerid] = false;
	}

	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no calls in session which you can hangup.");
	}

	HangupCall(playerid, HANGUP_USER);
	return 1;
}
CMD:stats(playerid, params[]) return DisplayStats(playerid);
CMD:toggc(playerid) return callcmd::tog(playerid, "global");
CMD:inv(playerid, params[])
{
	return callcmd::inventory(playerid, params);
}

CMD:inventory(playerid, params[])
{
	DisplayInventory(playerid);
	return 1;
}
CMD:ddedit(playerid, params[]) return callcmd::editentrance(playerid, params);
CMD:gotoid(playerid, params[]) return callcmd::goto(playerid, params);

CMD:togturfs(playerid) return callcmd::toggle(playerid, "turfs");
CMD:togfam(playerid) return callcmd::toggle(playerid, "gang");
CMD:togwhisper(playerid) return callcmd::toggle(playerid, "whisper");
CMD:tognews(playerid) return callcmd::toggle(playerid, "news");
CMD:tognewbie(playerid) return callcmd::toggle(playerid, "newbie");
CMD:togchatanim(playerid) return callcmd::toggle(playerid, "chatanim");
CMD:togphone(playerid) return callcmd::toggle(playerid, "phone");
CMD:tog(playerid, params[]) return callcmd::toggle(playerid, params);
CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /(tog)gle [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Textdraws, OOC, Global, Phone, Newbie, PortableRadio, Radio, Streams, News");
		SCM(playerid, COLOR_WHITE, "Available options: Speedo, HUD, Admin, Helper, VIP, Faction, Gang, Whisper, Turfs, Points, ChatAnim");
	}
	else if(!strcmp(params, "textdraws", true))
	{
	    if(!PlayerInfo[playerid][pToggleTextdraws])
	    {
	        HideGPSTextdraw(playerid);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	        TextDrawHideForPlayer(playerid, TimeTD);

	        PlayerInfo[playerid][pToggleTextdraws] = 1;
	        SCM(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	        if(PlayerInfo[playerid][pGPSOn])
	        {
	            ShowGPSTextdraw(playerid);
	        }
	        if(PlayerInfo[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerInfo[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
	        }

	        PlayerInfo[playerid][pToggleTextdraws] = 0;
	        SCM(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!PlayerInfo[playerid][pToggleOOC])
	    {
	        PlayerInfo[playerid][pToggleOOC] = 1;
	        SCM(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleOOC] = 0;
	        SCM(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "chatanim", true))
	{
	    if(!PlayerInfo[playerid][pChatAnim])
	    {
	        PlayerInfo[playerid][pChatAnim] = 1;
	        SCM(playerid, COLOR_AQUA, "Chat animation enabled.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pChatAnim] = 0;
	        SCM(playerid, COLOR_AQUA, "Chat animation disabled.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pToggleGlobal])
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 1;
	        SCM(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 0;
	        SCM(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "chat", true))
	{
	    if(!PlayerInfo[playerid][pToggleChat])
	    {
	        PlayerInfo[playerid][pToggleChat] = 1;
	        SCM(playerid, COLOR_AQUA, "yChat toggled. You no longer have access to yChat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleChat] = 0;
	        SCM(playerid, COLOR_AQUA, "yChat enabled. You can now speak and see messages from yChat!.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PlayerInfo[playerid][pTogglePhone])
	    {
	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You can't do this while in a call.");
	        }

	        PlayerInfo[playerid][pTogglePhone] = 1;
	        SCM(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTogglePhone] = 0;
	        SCM(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!PlayerInfo[playerid][pAdmin])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not an admin and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleAdmin])
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 1;
	        SCM(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 0;
	        SCM(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
		if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pFormerAdmin])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleHelper])
	    {
	        PlayerInfo[playerid][pToggleHelper] = 1;
	        SCM(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHelper] = 0;
	        SCM(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pToggleNewbie])
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 1;
	        SCM(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 0;
	        SCM(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "portableradio", true))
	{
	    if(!PlayerInfo[playerid][pWalkieTalkie])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
		}

	    if(!PlayerInfo[playerid][pToggleWT])
	    {
	        PlayerInfo[playerid][pToggleWT] = 1;
	        SCM(playerid, COLOR_AQUA, "Portable Radio toggled. You will no longer receive any messages on your Portable Radio.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWT] = 0;
	        SCM(playerid, COLOR_AQUA, "Portable Radio enabled. You will now receive messages on your Portable Radio again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!PlayerInfo[playerid][pToggleRadio])
	    {
	        PlayerInfo[playerid][pToggleRadio] = 1;
	        SCM(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleRadio] = 0;
	        SCM(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!PlayerInfo[playerid][pToggleMusic])
	    {
	        PlayerInfo[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SCM(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleMusic] = 0;
	        SCM(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!PlayerInfo[playerid][pDonator])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a VIP member and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleVIP])
	    {
	        PlayerInfo[playerid][pToggleVIP] = 1;
	        SCM(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleVIP] = 0;
	        SCM(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleFaction])
	    {
	        PlayerInfo[playerid][pToggleFaction] = 1;
	        SCM(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleFaction] = 0;
	        SCM(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(PlayerInfo[playerid][pGang] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleGang])
	    {
	        PlayerInfo[playerid][pToggleGang] = 1;
	        SCM(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGang] = 0;
	        SCM(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!PlayerInfo[playerid][pToggleNews])
	    {
	        PlayerInfo[playerid][pToggleNews] = 1;
	        SCM(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNews] = 0;
	        SCM(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(PlayerInfo[playerid][pToggleWhisper] == 0)
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 1;
	        SCM(playerid, COLOR_AQUA, "Whisper chat disabled. You have blocked all incoming whispers.");
		}
		else
		{
		    PlayerInfo[playerid][pToggleWhisper] = 0;
		    SCM(playerid, COLOR_AQUA, "Whisper chat enabled. You will now receive whisper messages again.");
		}
	}
	else if(!strcmp(params, "speedo", true))
	{
	    if(PlayerInfo[playerid][pSpeedometer] == 1)
	    {
	        PlayerInfo[playerid][pSpeedometer] = 0;
	        SCM(playerid, COLOR_AQUA, "SpeedoMeter toggled. You will no longer see your vehicle speedometer.");

	        if(GetPlayerState(playerid) == 2)
			{
    			for(new i = 0; i < 9; i ++)
				{
				 	PlayerTextDrawHide(playerid, cWspeedo[playerid][i]);
				}
			}
	    }
	    else
	    {
	        PlayerInfo[playerid][pSpeedometer] = 1;
	        SCM(playerid, COLOR_AQUA, "SpeedoMeter enabled. You will now see your vehicle speedometer.");

	        if(GetPlayerState(playerid) == 2)
			{
				for(new i = 0; i < 9; i ++)
				{
				 	PlayerTextDrawShow(playerid, cWspeedo[playerid][i]);
				}
			}
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!PlayerInfo[playerid][pToggleHUD])
	    {
	        PlayerInfo[playerid][pToggleHUD] = 1;
	        SCM(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHUD] = 0;
	        SCM(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
	    }
	}
	else if(!strcmp(params, "turfs", true))
	{
		if(!PlayerInfo[playerid][pShowTurfs])
		{
		    GangZoneHideForPlayer(playerid, pointboundaries[0]);
		    GangZoneHideForPlayer(playerid, pointboundaries[1]);
		    GangZoneHideForPlayer(playerid, pointboundaries[2]);
		    GangZoneHideForPlayer(playerid, pointboundaries[3]);
		    GangZoneHideForPlayer(playerid, pointboundaries[4]);
		    GangZoneHideForPlayer(playerid, pointboundaries[5]);
		    GangZoneHideForPlayer(playerid, pointboundaries[6]);
		    GangZoneHideForPlayer(playerid, pointboundaries[7]);
		    GangZoneHideForPlayer(playerid, pointboundaries[8]);
	    	ShowTurfsOnMap(playerid, true);
	    	SCM(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
		}
		else
		{
	    	ShowTurfsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
		}
	}
	else if(!strcmp(params, "points", true))
	{
		if(!ShowingBounds[playerid])
		{
	    	ShowTurfsOnMap(playerid, false);
			ShowPointsOnMap(playerid, true);
	    	SCM(playerid, COLOR_AQUA, "You will now see points on your mini-map.");
		}
		else
		{
			ShowPointsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any points on your mini-map.");
		}
	}
	return 1;
}

CMD:jobinfo(playerid, params[])
{
	new title[128], str[2084];
	format(title, sizeof(title), "JOBS INFORMATION");
	strcat(str, ""WHITE"Trucker Job\t "GREEN"Legal\t "YELLOW"A job that deliver goods to selected warehouse.\n");
	strcat(str, ""WHITE"Miner Job\t "GREEN"Legal\t "YELLOW"A job that mine rocks and you can mine diamonds here too.\n");
	strcat(str, ""WHITE"Lumberjack Job\t "GREEN"Legal\t "YELLOW"A job that cuts a tree and earn from it.\n");
	strcat(str, ""WHITE"Harvester Job\t "RED"Illegal\t "YELLOW"A job that harvest marijuana and more.\n");
	strcat(str, ""WHITE"MeatChopper Job\t "GREEN"Legal\t "YELLOW"A job that chops meat and deliver it to lab.\n");
	strcat(str, ""WHITE"Pizza Man Job\t "GREEN"Legal\t "YELLOW"A job that delivers pizza to neighborhood.\n");
	strcat(str, ""WHITE"Lawyer Job\t "GREEN"Legal\t "YELLOW"A job that defends a wanted person.\n");
	strcat(str, ""WHITE"Arms Dealer Job\t "RED"Illegal\t "YELLOW"A job that sells weapons.\n");
	strcat(str, ""WHITE"Drug Dealer Job\t "RED"Illegal\t "YELLOW"A job that sells drugs.\n");
	strcat(str, ""WHITE"Bodyguard Job\t "GREEN"Legal"WHITE"/"RED"Illegal\t "YELLOW"A job that protects someone.\n");
    strcat(str, ""WHITE"Taxi Driver Job\t "GREEN"Legal\t "YELLOW"A public transporation driven by a player.\n");
    strcat(str, ""WHITE"Detective Job\t "GREEN"Legal"WHITE"/"RED"Illegal\t "YELLOW"A job that detects someone in the city.\n");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, title, str, "Okay!", "");
}

CMD:help(playerid, params[])
{
	//new str[2084];
	SCM(playerid, COLOR_WHITE, "Help Commands: /report /reportdm /newbie /tognewbie");
	SCM(playerid, COLOR_WHITE, "Account Commands: /stats /rules /inventory /buylevel /upgrade /myupgrades /changepass /killcheckpoint");
	SCM(playerid, COLOR_WHITE, "Chat Commands: /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /toggc /togfam /togcrew /togwhisper /tognews");
	SCM(playerid, COLOR_WHITE, "Bank Commands: /balance /withdraw /deposit /wiretransfer /awithdraw /adeposit /awiretransfer /houseinvite");
	SCM(playerid, COLOR_WHITE, "General Commands: /pay /charity /time /buy /id /music /showlicenses /clothes /buyclothes /finddealership /locate");
	SCM(playerid, COLOR_WHITE, "General Commands: /pbkills /skill /stopani /do /me /kill /drop /calculate /families /requesthelp /members /togchatanim");
	SCM(playerid, COLOR_WHITE, "General Commands: /usedrug /findselfrepair /cancel /accept /eject /usepot /usecrack /blindfold /tie /contract /call /info");
	if(PlayerInfo[playerid][pMapper] == 1) SCM(playerid, COLOR_WHITE, "Mapper Commands: /maphelp");
	if(PlayerInfo[playerid][pMafia] == 1) SCM(playerid, COLOR_WHITE, "Mafia Commands: /mafiahelp");

	if(PlayerInfo[playerid][pAdmin] >= 1) SCM(playerid, COLOR_WHITE, "Admin Commands: /ahelp /(a)dmin");
	if(PlayerInfo[playerid][pHelper] >= 1) SCM(playerid, COLOR_WHITE, "Helper Commands: /hhelp");

	if(PlayerInfo[playerid][pJob] != JOB_NONE)
	{
		switch(PlayerInfo[playerid][pJob])
		{
			case JOB_YFOOD: SCM(playerid, COLOR_WHITE, "Job Commands: /getfood, /cancelcp.");
			case JOB_TRUCKER: SCM(playerid, COLOR_WHITE, "Job Commands: /loadtruck, /deliver, /cancelcp.");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "Job Commands: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "Job Commands: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "Job Commands: /getmats, /sellgun.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "Job Commands: /mine, /cancelcp.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "Job Commands: /setfare, /takecall.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "Job Commands: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "Job Commands: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "Job Commands: /find.");
	        case JOB_MEATPACKAGER: SCM(playerid, COLOR_WHITE, "Job Commands: /packagemeat, /cancelcp.");
	 	}
	}
	
 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			case JOB_YFOOD: SCM(playerid, COLOR_WHITE, "Secondary Job: /getorder.");
			case JOB_TRUCKER: SCM(playerid, COLOR_WHITE, "Secondary Job: /load, /deliver.");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "Secondary Job: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "Secondary Job: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "Secondary Job: /getmats, /sellgun.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "Secondary Job: /mine, /cancelcp");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "Secondary Job: /setfare.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "Secondary Job: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "Secondary Job: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "Secondary Job: /find.");
	        case JOB_MEATPACKAGER: SCM(playerid, COLOR_WHITE, "Secondary Job: /packagemeat, /cancelcp.");
	 	}
	}
	SCM(playerid, COLOR_WHITE, "Other Commands: /ganghelp /factionhelp /carhelp /househelp /jobhelp /jobinfo /animhelp /taxhelp /bizhelp /bankhelp");
}

CMD:nb(playerid, params[]) return callcmd::locate(playerid, params);

CMD:locate(playerid, params[])
{
	if(isnull(params)) ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	else LocateMethod(playerid, params);
	return 1;
}

CMD:findjob(playerid, params[]) 
{
	ShowPlayerDialog(playerid, DIALOG_LOCATE_JOB, DIALOG_STYLE_LIST, "Select Job", "Pizza Man\nTrucker\nFisherman\nBodyguard\nMechanic\nArms Dealer\nMiner\nMeat Packager\nTaxi Driver\nDrug Dealer\nLawyer\nDetective", "Locate", "Close");
	return 1;
}

CMD:findsidejob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATE_SIDEJOB, DIALOG_STYLE_LIST, "Select Side-Job", "Meatchopper Sidejob\nLumberjack Sidejob\nHarvester Sidejob", "Locate", "Close");
}

CMD:finddealership(playerid, params[])
{
	LocateMethod(playerid, "dealership");
	return 1;
}

CMD:ccp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:kcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcheckpoint(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:cancelcp(playerid, params[])
{	
	CancelActiveCheckpoint(playerid);
	PlayerInfo[playerid][pRobCash] = 0;
	if( IsPlayerAttachedObjectSlotUsed( playerid, 5 ) ) RemovePlayerAttachedObject( playerid, 5 );
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /afk [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(PlayerInfo[targetid][pAFK])
	{
	    SM(playerid, COLOR_WHITE, "** %s has been marked as Away from keyboard for %i minutes.", GetRPName(targetid), PlayerInfo[targetid][pAFKTime] / 60);
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** %s is currently not marked as Away from keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Away from Keyboard:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAFK])
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s - Time: %i seconds", i, GetRPName(i), PlayerInfo[i][pAFKTime]);
		}
	}

	return 1;
}

CMD:atmhelp(playerid, params[])
{
    SCM(playerid, COLOR_WHITE, "** ATM Usage: /awithdraw, /adeposit, /awiretransfer");
    return 1;
}


CMD:awiretransfer(playerid, params[])
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command while in Admin Duty");
	}

	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /awiretransfer [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or hasn't logged in yet.");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself.");
	}
	new id = Atm_Nearest(playerid);
	if(id >= 0 && ObjectData[id][mobjRob] == 1)
	{
		return SCM(playerid, COLOR_GREY, "This ATM is already being robbed, you can't rob it again!");
	}
	if(id >= 0 && ObjectData[id][mobjRob] == 2)
	{
		return SCM(playerid, COLOR_GREY, "This ATM was just robbed few minutes ago, it's now on cooldown");
	}

	if(id >= 0)
	{
		PlayerInfo[targetid][pBank] += amount;
		PlayerInfo[playerid][pBank] -= amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), PlayerInfo[playerid][pBank]);
		SM(targetid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
		Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

		if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
		{
			SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not near any ATM Machines!");
	}
	return 1;
}

CMD:adeposit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command while in Admin Duty");
	}
	new id = Atm_Nearest(playerid);
	if(id >= 0 && ObjectData[id][mobjRob] == 1)
	{
		return SCM(playerid, COLOR_GREY, "This ATM is already being robbed, you can't rob it again!");
	}
	if(id >= 0 && ObjectData[id][mobjRob] == 2)
	{
		return SCM(playerid, COLOR_GREY, "This ATM was just robbed few minutes ago, it's now on cooldown");
	}

	if(id >= 0)
	{
		ShowDialogToPlayer(playerid, DIALOG_ADEPOSIT);
    }
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not in range of any ATM machines.");
	}
	return 1;
}

CMD:awithdraw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command while in Admin Duty");
	}

	new id = Atm_Nearest(playerid);
	if(id >= 0 && ObjectData[id][mobjRob] == 1)
	{
		return SCM(playerid, COLOR_GREY, "This ATM is already being robbed, you can't rob it again!");
	}
	if(id >= 0 && ObjectData[id][mobjRob] == 2)
	{
		return SCM(playerid, COLOR_GREY, "This ATM was just robbed few minutes ago, it's now on cooldown");
	}

	if(id >= 0)
	{
		ShowDialogToPlayer(playerid, DIALOG_AWITHDRAW);
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not in range of any ATM machines.");
	}
	return 1;
}

/*CMD:fixmaps(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
		return NotAuth(playerid);
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /fixmaps [confirm]");
		return SCM(playerid, COLOR_GREY, "Warning! This might cause a bit of lag on the server for like 1-2 seconds!");
	}
    if(gettime() - gLastSave < 359)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 6 minutes. Please wait %i more seconds.", 359 - (gettime() - gLastSave));
	}
	SendRconCommand("reloadfs map");

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reloaded all custom maps.", GetRPName(playerid));
	gLastSave = gettime();
	return 1;
}*/

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /fixplayerid [playerid]");
	    SCM(playerid, COLOR_WHITE, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SCM(playerid, COLOR_WHITE, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else if(IsPlayerNPC(targetid) && IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_GREY, "Specified player is an NPC!");
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), false);
	}

	SM(playerid, COLOR_WHITE, "** Player ID %i has been fixed.", targetid);
	return 1;
}

CMD:anticheat(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /anticheat [0/1]");
	}

	if(status) {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the server anticheat.", GetRPName(playerid));
	} else {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the server anticheat.", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

CMD:stopani(playerid, params[])
{
	return callcmd::stopanim(playerid, params);
}

CMD:stopanim(playerid, params[])
{
    if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessage (playerid, COLOR_GREY, "You're already attempting to clear your animations!");
		return 1;
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use this command at this moment.");
	}
	GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
	SetTimerEx("StopaniTimer", 3000, 0, "d", playerid);
	SendClientMessage (playerid, COLOR_YELLOW, "Do not move for 3 seconds to have your animations cleared!");

    return 1;
}

forward StopaniTimer(playerid);
public StopaniTimer(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(StopaniFloats[playerid][0] != posX || StopaniFloats[playerid][1] != posY || StopaniFloats[playerid][2] != posZ)
	{
	    SendClientMessage (playerid, COLOR_YELLOW, "Failed to clear animations because you moved!");
    	for(new i = 0; i < 3; i++)
		{
			StopaniFloats[playerid][i] = 0;
		}
	    return 1;
	}
    PlayerInfo[playerid][pLoopAnim] = 0;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
   	ClearAnimations(playerid, 1);
   	SetScriptSkin(playerid, GetPlayerSkin(playerid));
	TextDrawHideForPlayer(playerid, AnimationTD);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SCM(playerid, COLOR_SYNTAX, "Animations cleared.");

	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	return 1;
}

CMD:gmx(playerid, params[])
{
	new reason[256], time;
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already called for a server restart. You can't cancel it.");
	}
    if(sscanf(params, "is[256]", time, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gmx [Time (in minute)] [Announcement Text]");
	}
	SMA(COLOR_WHITE, ""CXRP"%s"WHITE" has initiated a server restart! Server will restart after "CXRP"%i"WHITE" minute(s).", GetRPName(playerid), time);
	new string[256];
	format(string, sizeof(string), "~r~Reason: ~w~%s", reason);
	foreach(new i : Player)
	{
		Dyuze(i, "Server Restart", string);	
	}
	time = time*60;
	time = time*1000;
    SetTimer("GmxEx", time, false);
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Change password", "Enter your new password:", "Submit", "Cancel");
	return 1;
}

CMD:toys(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothes(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64];

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) "CXRP"%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) "CXRP"%s"WHITE"", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot"WHITE"", string, i + 1);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, "My clothing items", string, "Select", "Cancel");
	return 1;
}

CMD:wat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
	SCM(playerid, COLOR_WHITE, "You've attached all detached toys.");
}

CMD:dat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}
	SCM(playerid, COLOR_WHITE, "You've detached all attached toys.");
}

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 209.2540,-195.8876,1000.5235))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the DMV.");
	}
	if(PlayerInfo[playerid][pCarLicense])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have your drivers license already.");
	}
	if(PlayerInfo[playerid][pDrivingTest])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already taking your drivers test.");
	}
	if(PlayerInfo[playerid][pCash] < 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need $100 to pay the licensing fee if you pass the test.");
	}

	SCM(playerid, COLOR_WHITE, "** You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SCM(playerid, COLOR_WHITE, "** Once you have passed the test, you will receive your license and pay a $100 licensing fee.");

	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pDrivingTest] = 1;
	PlayerInfo[playerid][pTestCP] = 0;
	return 1;
}

CMD:redeem(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1657.8021,1210.5331,7.2500))
	{
		return SCM(playerid, COLOR_GREY, "You're not in range of EDM Shop!");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return SCM(playerid, COLOR_GREY, "You need to be on-foot in order to use this command!");
	}
	ShowPlayerDialog(playerid, DIALOG_REDEEM, DIALOG_STYLE_INPUT, "EDM Voucher Redeeming", "Type your voucher code below:", "Redeem", "Cancel");
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
	static string[4096];
	PlayerInfo[playerid][pGangCar] = 0;
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 544.8441,-1293.9301,17.2422))
	{
		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
			CurrentVeh[playerid][i] = vehicleArray[i][carModel];
			CurrentVehPrice[playerid][i] = AddCommas(vehicleArray[i][cARPrice]);
			CurrentVehType[playerid][i] = vehicleArray[i][carCategory];
			CurrentVehSpeed[playerid][i] = GetVehicleModelTopSpeed(CurrentVeh[playerid][i]);
		}
		PlayerInfo[playerid][pGangCar] = 0;

		PlayerTextDrawSetPreviewModel(playerid, GROTTI_TD_PLAYER[playerid][0], CurrentVeh[playerid][0]);
		format(string, sizeof(string), "%s", vehicleNames[CurrentVeh[playerid][0] - 400]);
		PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][1], string);
		format(string, sizeof(string), "%i KM/H", GetVehicleModelTopSpeed(CurrentVeh[playerid][0]));
		PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][2], string);
		format(string, sizeof(string), "%i", CurrentVeh[playerid][0]);
		PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][3], string);
		format(string, sizeof(string), "%s", CurrentVehType[playerid][0]);
		PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][4], vehicleArray[0][carCategory]);
		PlayerTextDrawSetString(playerid, GROTTI_TD_PLAYER[playerid][5], CurrentVehPrice[playerid][0]);
		SelectedDealerVeh[playerid] = 0;
		ShowGROTTI_TD(playerid);
		SCM(playerid, COLOR_YELLOW2, "type /close to exit.");
		printf("%i", GetVehicleModelTopSpeed(401));
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of Vehicle Dealership. Use /finddealership for it");
	}
	return 1;
}

CMD:close(playerid, params[])
{
	HideGROTTI_TD(playerid);
	return 1;
}

CMD:removepveh(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepveh [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

forward OnUseVehicleStrogeCMD(playerid);
public OnUseVehicleStrogeCMD(playerid)
{
	new vehicleid;
	new rows;
	new veh_id;
	cache_get_row_count(rows);
	new string[64];
	new Float:health;
	new Float:pos[3];
	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		return 1;
	}
	for(new i; i < rows; i ++)
	{
		cache_get_value_name_int(i, "id", veh_id);	
		if((vehicleid = GetVehicleLinkedID(veh_id)) != INVALID_VEHICLE_ID)
		{
			GetVehicleHealth(vehicleid, health);
			PlayerVeh[playerid][i] = GetVehicleModel(vehicleid);
			VehFuel[playerid][i] = vehicleFuel[vehicleid];
			VehHealth[playerid][i] = health;
			VehLocation[playerid][i] = GetVehicleZoneName(vehicleid);
			VehSpawned[playerid][i] = 1;
		}
		else
		{
			new l;
			cache_get_value_name_int(i, "modelid", PlayerVeh[playerid][i]);
			cache_get_value_name_float(i, "health", VehHealth[playerid][i]);
			cache_get_value_name_int(i, "fuel", VehFuel[playerid][i]);
			cache_get_value_name_float(i, "pos_x", pos[0]);
			cache_get_value_name_float(i, "pos_y", pos[1]);
			cache_get_value_name_float(i, "pos_z", pos[2]);
			cache_get_value_name_int(i, "world", l);
			VehLocation[playerid][i] =  (l) ? ("Garage") : (GetZoneName(pos[0], pos[1], pos[2]));
			PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "SPAWN");
			VehSpawned[playerid][i] = 0;
		}

	}
	format(string, sizeof(string), "%s", vehicleNames[PlayerVeh[playerid][0] - 400]);
	PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][6], string);
	PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][7], VehLocation[playerid][0]);
	PlayerTextDrawSetPreviewModel(playerid, VST_TD_Player[playerid][0], PlayerVeh[playerid][0]);
	PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][1], (1.2301 * (VehHealth[playerid][0]/10)), 5.447);
	PlayerTextDrawTextSize(playerid, VST_TD_Player[playerid][2], (1.2301 * VehFuel[playerid][0]), 5.447);
	format(string, sizeof(string), "%0.2f%", (VehHealth[playerid][0]/10));
	PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][3], string);
	format(string, sizeof(string), "%i%", VehFuel[playerid][0]);
	PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][4], string);
	if(VehSpawned[playerid][0] == 1)
	{
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "DESPAWN");
	}
	else 
	{
		PlayerTextDrawSetString(playerid, VST_TD_Player[playerid][5], "SPAWN");
	}
	SelectedVeh[playerid] = 0;
	ShowVST_TD(playerid);
	return 1;

}

CMD:vstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, jacked, health, fuel FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnUseVehicleStrogeCMD", "i", playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::vstorage(playerid, params);
}
CMD:sb(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:hm(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:helmet(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}

CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID], damage[4];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to you.");
	}
	

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
 	SM(playerid, COLOR_AQUA, "You have parked your "CXRP"%s{CCFFFF} which will spawn in this spot from now on.", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	GetVehicleDamageStatus(vehicleid, damage[0], damage[1], damage[2], damage[3]);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, v_panels = %i, v_doors = %i, v_lights = %i, v_tires = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], damage[0], damage[1], damage[2], damage[3], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	
	DespawnVehicle(vehicleid);
	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:apark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID], damage[4];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle of yours.");
	}

	SM(playerid, COLOR_WHITE, "You have parked %s's %s%s{FFFFFF} which will spawn in this spot from now on.", VehicleInfo[vehicleid][vOwner], CXRP, GetVehicleName(vehicleid));
 	
	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	GetVehicleDamageStatus(vehicleid, damage[0], damage[1], damage[2], damage[3]);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, v_panels = %i, v_doors = %i, v_lights = %i, v_tires = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], damage[0], damage[1], damage[2], damage[3], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givekeys [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't give keys to yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] == vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives %s the keys to their %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has given you the keys to their "CXRP"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have given %s the keys to your "CXRP"%s{CCFFFF}.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takekeys [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't take keys from yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have the keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes back the keys to their %s from %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has taken back the keys to their "CXRP"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have taken back the keys to your "CXRP"%s{CCFFFF} from %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:trackcar(playerid, params[])
{
	return callcmd::findcar(playerid, params);
}

CMD:findcar(playerid, params[])
{
    new string[128], count;

 	string = "#\tModel\tLocation";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SCM(playerid, COLOR_SYNTAX, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:tune(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(IsAHelicopter(vehicleid) || IsAPlane(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't tune a helicopter or a plane!");
	}

	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE || VehicleInfo[vehicleid][vGang] != -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't tune faction/gang vehicles");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}

	new id = GetInsideGarage(playerid);
	for(new i = 0; i < sizeof(MechStation); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, MechStation[i][MechX], MechStation[i][MechY], MechStation[i][MechZ]) || (id >= 0 && IsGarageOwner(playerid, id)))
	    {
			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
			return 1;
		}
	}
	SCM(playerid, COLOR_SYNTAX, "You are not at the mechanic station or inside of your own garage!");
	return 1;
}

CMD:upgradevehicle(playerid, params[])
{
	new option[8], param[32];

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}

	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE || VehicleInfo[vehicleid][vGang] != -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't upgrade faction/gang vehicles");
	}

	if(IsAHelicopter(vehicleid) || IsAPlane(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't upgrade a helicopter or a plane!");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}

	new id = GetInsideGarage(playerid);

	for(new i = 0; i < sizeof(MechStation); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, MechStation[i][MechX], MechStation[i][MechY], MechStation[i][MechZ]) || (id >= 0 && IsGarageOwner(playerid, id)))
	    {
	        if(sscanf(params, "s[8]S()[32]", option, param))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash | neon | plate]");
			}

			if(!strcmp(option, "stash", true))
			{
			    if(isnull(param) || strcmp(param, "confirm", true) != 0)
			    {
			        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash] [confirm]");
			        SM(playerid, COLOR_WHITE, "Your vehicle's stash level is at %i/3. Upgrading your stash will cost you $5,000.", VehicleInfo[vehicleid][vTrunk]);
			        return 1;
				}
				if(VehicleInfo[vehicleid][vTrunk] >= 3)
				{
				    return SCM(playerid, COLOR_SYNTAX, "This vehicle's stash is already at its maximum level.");
				}
			    if(PlayerInfo[playerid][pCash] < 5000)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You need at least $5,000 to upgrade your trunk.");
				}

				VehicleInfo[vehicleid][vTrunk]++;

				GivePlayerCash(playerid, -5000);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_YELLOW, "You have paid $5,000 for stash level %i/3. '/vstash balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
				Log_Write("log_property", "%s (uid: %i) upgraded the stash of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
			}
			else if(!strcmp(option, "neon1256", true))
			{
				SCM(playerid, COLOR_WHITE, "This command has been disabled for few days");
			}
			else if(!strcmp(option, "neon1256", true))
			{
			    if(isnull(param))
			    {
			        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [neon] [color] (costs $10,000)");
					SCM(playerid, COLOR_GREY2, "List of colors: Red, Blue, Green, Yellow, Pink, White");
					return 1;
			    }
			    if(PlayerInfo[playerid][pCash] < 10000)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You need at least $10,000 to upgrade your neon.");
				}
				if(!VehicleHasWindows(vehicleid))
				{
				    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't support neon.");
				}

				if(!strcmp(param, "red", true))
				{
				    // SetVehicleNeon(vehicleid, 18647);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for red neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
				else if(!strcmp(param, "blue", true))
				{
				    // SetVehicleNeon(vehicleid, 18648);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for blue neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
				else if(!strcmp(param, "green", true))
				{
				    // SetVehicleNeon(vehicleid, 18649);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for green neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
				else if(!strcmp(param, "yellow", true))
				{
				    // SetVehicleNeon(vehicleid, 18650);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for yellow neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
				else if(!strcmp(param, "pink", true))
				{
				    // SetVehicleNeon(vehicleid, 18651);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for pink neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
				else if(!strcmp(param, "white", true))
				{
				    // SetVehicleNeon(vehicleid, 18652);
				    GivePlayerCash(playerid, -10000);

					SCM(playerid, COLOR_YELLOW, "You have paid $10,000 for white neon. You can use /neon to toggle your neon.");
					Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
				}
			}
			else if(!strcmp(option, "plate", true))
			{
			    if(isnull(param))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [plate] [text] (costs $10,000)");
			    }
			    if(!VehicleHasEngine(vehicleid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no license plate. Therefore you can't buy this upgrade.");
			    }

			    if(PlayerInfo[playerid][pCash] < 10000)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You need at least $10,000 to change your plate.");
				}

			    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

				SetVehicleNumberPlate(vehicleid, param);
			    ResyncVehicle(vehicleid);

			    GivePlayerCash(playerid, -10000);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = \"%e\" WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_YELLOW, "You have paid $10,000 for license plate \"%s\". Changes will take effect once vehicle is parked.", param);
				Log_Write("log_property", "%s (uid: %i) paid $10000 to set the license plate of their %s (id: %i) to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
			}
	        return 1;
		}
	    else if(!IsPlayerInRangeOfPoint(playerid, 4.0, MechStation[i][MechX], MechStation[i][MechY], MechStation[i][MechZ]) && !(id >= 0 && IsGarageOwner(playerid, id)))
		{
		    SCM(playerid, COLOR_SYNTAX, "You're not inside your garage or at the Mechanic Station, Use /locate > Job Locations > Mechanic.");
		}
 	}
	return 1;
}

CMD:neon(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "This command is now disabled for few days.");
	return 1;
}

CMD:neon123456(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon installed. Use /upgradevehicle to install one.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	// ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:bp(playerid, params[]) { return callcmd::backpack(playerid, params); }
CMD:backpack(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command now.");
	}
    if(PlayerInfo[playerid][pBackpack] != 0)
    {
		new option[14], param[32];
	 	if(sscanf(params, "s[14]S()[32]", option, param))
		{
	 		return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [wear | balance | deposit | withdraw]");
	 	}
		if(!strcmp(option, "wear", true))
		{
		    if(PlayerInfo[playerid][pJoinedEvent])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
			}
		    if(!PlayerInfo[playerid][bpWearing])
		    {
		        if(PlayerInfo[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his small backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(PlayerInfo[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his medium backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(PlayerInfo[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his large backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
    			PlayerInfo[playerid][bpWearing] = 1;
			}
			else
			{
		        if(PlayerInfo[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his small backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				else if(PlayerInfo[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his medium backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				else if(PlayerInfo[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his large backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				RemovePlayerAttachedObject(playerid, 1);
				return 1;
			}
		}
		if(PlayerInfo[playerid][bpWearing])
		{
			if(!strcmp(option, "balance", true))
		 	{
    			new count;

				for(new i = 0; i < 15; i ++)
    			{
		        	if(PlayerInfo[playerid][bpWeapons][i])
          			{
            			count++;
          			}
       			}
				SCM(playerid, SERVER_COLOR, "Backpack Balance:");
    			SM(playerid, COLOR_GREY2, "(Cash: $%i/$%i)", PlayerInfo[playerid][bpCash], GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				SM(playerid, COLOR_GREY2, "(Materials: %i/%i) | (Weapons: %i/%i)", PlayerInfo[playerid][bpMaterials], GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS), count, GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS));
		        SM(playerid, COLOR_GREY2, "(Pot: %i/%i grams) | (Crack: %i/%i grams)", PlayerInfo[playerid][bpPot], GetBackpackCapacity(playerid, STASH_CAPACITY_WEED), PlayerInfo[playerid][bpCrack], GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
		        SM(playerid, COLOR_GREY2, "(Meth: %i/%i grams) | (Painkillers: %i/%i pills)", PlayerInfo[playerid][bpMeth], GetBackpackCapacity(playerid, STASH_CAPACITY_METH), PlayerInfo[playerid][bpPainkillers], GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				return 1;
			}
			else if(!strcmp(option, "deposit", true))
		 	{
				new value;

				if(sscanf(param, "s[14]S()[32]", option, param))
		  		{
		    		SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [option]");
		      		SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
			        return 1;
		    	}
			    if(!strcmp(option, "cash", true))
				{
		  			if(sscanf(param, "i", value))
					{
						return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [cash] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpCash] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_CASH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to $%i at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				    }

				    GivePlayerCash(playerid, -value);
				    PlayerInfo[playerid][bpCash] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored $%i in your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [materials] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMaterials] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i materials at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS));
				    }

				    PlayerInfo[playerid][pMaterials] -= value;
				    PlayerInfo[playerid][bpMaterials] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [pot] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpPot] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of pot at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_WEED));
				    }

				    PlayerInfo[playerid][pPot] -= value;
				    PlayerInfo[playerid][bpPot] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [Crack] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpCrack] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of Crack at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
				    }

				    PlayerInfo[playerid][pCrack] -= value;
				    PlayerInfo[playerid][bpCrack] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [meth] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMeth] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of meth at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_METH));
				    }

				    PlayerInfo[playerid][pMeth] -= value;
				    PlayerInfo[playerid][bpMeth] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
					if(GetFactionType(playerid) != FACTION_NONE)
					{
						return SCM(playerid, COLOR_SYNTAX, "You can't store painkillers as a Faction Member!");
					}
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [painkillers] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpPainkillers] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i painkillers at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				    }

				    PlayerInfo[playerid][pPainkillers] -= value;
				    PlayerInfo[playerid][bpPainkillers] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
					if(GetFactionType(playerid) != FACTION_NONE)
					{
						return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as a Faction Member!");
					}
					if(PlayerInfo[playerid][pDonator] != 0)
					{
						return SCM(playerid, COLOR_SYNTAX, "You can't store weapon as a Donator!");
					}

	   			    new weaponid;

	   			    if(sscanf(param, "i", weaponid))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
					}
					if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
					}
					if(GetHealth(playerid) < 60)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
					}
					for(new i = 0; i < GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS); i ++)
					{
						if(!PlayerInfo[playerid][bpWeapons][i])
	   				    {
							PlayerInfo[playerid][bpWeapons][i] = weaponid;

							RemovePlayerWeapon(playerid, weaponid);
							SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your backpack.", GetWeaponNameEx(PlayerInfo[playerid][bpWeapons][i]), i + 1);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "This backpack has no more slots available for weapons.");
				}
			}
	        else if(!strcmp(option, "withdraw", true))
		    {
		        new value;

		        if(sscanf(param, "s[14]S()[32]", option, param))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [option]");
		            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
		            return 1;
		        }
		        if(!strcmp(option, "cash", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [cash] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }

				    GivePlayerCash(playerid, value);
				    PlayerInfo[playerid][bpCash] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken $%i from your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [materials] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
					}

				    PlayerInfo[playerid][pMaterials] += value;
				    PlayerInfo[playerid][bpMaterials] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [pot] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
					}

				    PlayerInfo[playerid][pPot] += value;
				    PlayerInfo[playerid][bpPot] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [Crack] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
					}

				    PlayerInfo[playerid][pCrack] += value;
				    PlayerInfo[playerid][bpCrack] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [meth] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
					}

				    PlayerInfo[playerid][pMeth] += value;
				    PlayerInfo[playerid][bpMeth] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [painkillers] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
					}

				    PlayerInfo[playerid][pPainkillers] += value;
				    PlayerInfo[playerid][bpPainkillers] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new slots = GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS);

	   			    if(sscanf(param, "i", value))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [weapon] [slot (1-%i)]", slots);
					}
					if(!(1 <= value <= slots))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
	   			    }
	   			    if(!PlayerInfo[playerid][bpWeapons][value-1])
	   			    {
	   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
					}

					GiveWeapon(playerid, PlayerInfo[playerid][bpWeapons][value-1]);
					SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your backpack.", GetWeaponNameEx(PlayerInfo[playerid][bpWeapons][value-1]), value);

					PlayerInfo[playerid][bpWeapons][value-1] = 0;
				}
			}
		}
		else
		{
	 		return SCM(playerid, COLOR_SYNTAX, "You must be wearing your backpack to use these commands.");
	 	}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in possession of a backpack.");
	}
	return 1;
}

CMD:vstashput(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[256], param[256], value;

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			return SCM(playerid, COLOR_SYNTAX, "You have to open the vehicle trunk first. Use /trunk for it.");
		}
	    if(sscanf(params, "s[256]S()[256]", option, param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput [item] [value]");
	        SCM(playerid, COLOR_WHITE, "Available items: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	        return 1;
	    }
	    if(!strcmp(option, "cash", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput cash [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pCash])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to $%i at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
		    }

		    GivePlayerCash(playerid, -value);
		    VehicleInfo[vehicleid][vCash] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored $%i in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some cash in their vehicle stash.", GetRPName(playerid));
		}
		else if(!strcmp(option, "materials", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput materials [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pMaterials])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
		    }

		    PlayerInfo[playerid][pMaterials] -= value;
		    VehicleInfo[vehicleid][vMaterials] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some materials in their vehicle stash.", GetRPName(playerid));
   		}
		else if(!strcmp(option, "pot", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput pot [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pPot])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vPot] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of pot at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
		    }

		    PlayerInfo[playerid][pPot] -= value;
		    VehicleInfo[vehicleid][vPot] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some pots in their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "crack", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput crack [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pCrack])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vCrack] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of Crack at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
		    }

		    PlayerInfo[playerid][pCrack] -= value;
		    VehicleInfo[vehicleid][vCrack] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some cracks in their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "meth", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput meth [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pMeth])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
		    }

		    PlayerInfo[playerid][pMeth] -= value;
		    VehicleInfo[vehicleid][vMeth] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some meths in their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "painkillers", true))
		{
			if(GetFactionType(playerid) != FACTION_NONE)
			{
				return SCM(playerid, COLOR_SYNTAX, "You can't store painkillers as a Faction Member!");
			}
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput painkillers [amount]");
			}
			if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
		    }

		    PlayerInfo[playerid][pPainkillers] -= value;
		    VehicleInfo[vehicleid][vPainkillers] += value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored some painkillers in their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "weapon", true))
   		{
			if(GetFactionType(playerid) != FACTION_NONE)
			{
				return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as a Faction Member!");
			}

   		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashput weapon [weaponid] (/guninv for weapon IDs)");
			}
			if(!(1 <= value <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[value]] != value)
			{
			    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
			}
			if(GetHealth(playerid) < 60)
			{
			    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
			}

			for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
			{
				if(!VehicleInfo[vehicleid][vWeapons][i])
   			    {
					VehicleInfo[vehicleid][vWeapons][i] = value;

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
					mysql_tquery(connectionID, queryBuffer);

					RemovePlayerWeapon(playerid, value);
					SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stored %s in their vehicle stash.", GetRPName(playerid), GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					return 1;
				}
			}
			SCM(playerid, COLOR_SYNTAX, "This vehicle has no more slots available for weapons.");
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}
	return 1;
}
CMD:vstashtake(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[256], param[256], value;

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			return SCM(playerid, COLOR_SYNTAX, "You have to open the vehicle trunk first. Use /trunk for it.");
		}
	    if(sscanf(params, "s[256]S()[256]", option, param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake [item] [value]");
	        SCM(playerid, COLOR_WHITE, "Available items: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	        return 1;
	    }
	    if(!strcmp(option, "cash", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake cash [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vCash])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }

		    GivePlayerCash(playerid, value);
		    VehicleInfo[vehicleid][vCash] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken $%i from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some cash from their vehicle stash.", GetRPName(playerid));
		}
		else if(!strcmp(option, "materials", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake materials [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
		    {
		        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
			}

		    PlayerInfo[playerid][pMaterials] += value;
		    VehicleInfo[vehicleid][vMaterials] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some materials from their vehicle stash.", GetRPName(playerid));
   		}
		else if(!strcmp(option, "pot", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake pot [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vPot])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
		    {
		        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			}

		    PlayerInfo[playerid][pPot] += value;
		    VehicleInfo[vehicleid][vPot] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some pots from their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "crack", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake crack [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vCrack])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		    {
		        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			}

		    PlayerInfo[playerid][pCrack] += value;
		    VehicleInfo[vehicleid][vCrack] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some cracks from their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "meth", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake meth [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
		    {
		        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			}

		    PlayerInfo[playerid][pMeth] += value;
		    VehicleInfo[vehicleid][vMeth] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some meths from their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "painkillers", true))
		{
		    if(sscanf(param, "i", value))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstashtake painkillers [amount]");
			}
			if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		    }
		    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
		    {
		        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
			}

		    PlayerInfo[playerid][pPainkillers] += value;
		    VehicleInfo[vehicleid][vPainkillers] -= value;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your vehicle stash.", value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed some painkillers from their vehicle stash.", GetRPName(playerid));
   		}
   		else if(!strcmp(option, "weapon", true))
   		{
   		    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   		    if(sscanf(param, "i", value))
		    {
		        return SM(playerid, COLOR_SYNTAX, "Usage: /vstashtake weapon [slot (1-%i)]", slots);
			}
			if(value <= 0 || value > slots)
			{
				return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
			}
   		    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   		    {
   		        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
			}

			GiveWeapon(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
			SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrawed %s from their vehicle stash.", GetRPName(playerid), GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]));

			VehicleInfo[vehicleid][vWeapons][value-1] = 0;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}
	return 1;
}

CMD:vstash(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			return SCM(playerid, COLOR_SYNTAX, "You have to open the vehicle trunk first. Use /trunk for it.");
		}
		
		new count = 0;

	    for(new j = 0; j < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); j ++)
	    {
	        if(VehicleInfo[vehicleid][vWeapons][j])
	        {
	            count++;
	        }
	    }

	    SCM(playerid, SERVER_COLOR, "Stash Balance:");
	    SM(playerid, COLOR_GREY2, "Cash: %i/%i$", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
		SM(playerid, COLOR_WHITE, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	    SM(playerid, COLOR_GREY2, "Pot: %i/%ig | Crack: %i/%ig", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	    SM(playerid, COLOR_WHITE, "Meth: %i/%ig | Painkillers: %i/%ip", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

		if(count != 0)
		{
			SCM(playerid, SERVER_COLOR, "Stash Weapons:");

        	for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
	        {
    	        if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	    	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
				}
			}
	    }

		SCM(playerid, COLOR_WHITE, "Use /vstashput to put items or /vstashtake to take items from the stash.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}
	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SCM(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, -1);
	    SCM(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:colors(playerid, params[])
{
	return callcmd::carcolors(playerid, params);
}

CMD:carcolors(playerid, params[])
{
	new carcolors[3500];
	strcat(carcolors, "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015\n");
	strcat(carcolors, "{335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019 {3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 {421F21}030 {5F272B}031\n");
	strcat(carcolors, "{8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039 {221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047\n");
	strcat(carcolors, "{989586}048 {ADB0B0}049 {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059 {9C9C98}060 {917347}061 {661C26}062 {949D9F}063\n");
	strcat(carcolors, "{A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n");
	strcat(carcolors, "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095\n");
	strcat(carcolors, "{9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099 {406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 {7F6956}110 {8C929A}111\n");
	strcat(carcolors, "{596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119 {9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127\n");
	strcat(carcolors, "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143\n");
	strcat(carcolors, "{583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 {1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159\n");
	strcat(carcolors, "{142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 {481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175\n");
	strcat(carcolors, "{8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 {163012}188 {16301B}189 {642B4F}190 {368452}191\n");
	strcat(carcolors, "{999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207\n");
	strcat(carcolors, "{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223\n");
	strcat(carcolors, "{521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 {96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239\n");
	strcat(carcolors, "{319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 {561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255");

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "List of Color IDs:", carcolors, "Close", "");
	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
	if(sscanf(params, "ii", color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}

	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have any spraycans on you.");
	}
	
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The color specified must range between 0 and 255.");
	}

	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE || VehicleInfo[vehicleid][vGang] != -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't color a gang or faction vehicle.");
	}

    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

    PlayerInfo[playerid][pSpraycans]--;
	ChangeVehicleColor(vehicleid, color1, color2);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;
	if(sscanf(params, "i", paintjobid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}

	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have any spraycans on you.");
	}

	if(!(-1 <= paintjobid <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE || VehicleInfo[vehicleid][vGang] != -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't paint a gang or faction vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0)
	{
		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	PlayerInfo[playerid][pSpraycans]--;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcar [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pCarOffer] = playerid;
	PlayerInfo[targetid][pCarOffered] = vehicleid;
	PlayerInfo[targetid][pCarPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their %s for $%i (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for $%i.", GetRPName(targetid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 571.0540, -1302.5659, 16.7883))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Vehicle Dealership Crane.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmycar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}

CMD:exchange(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 80.80737, 2503.08008, 2000.08765))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in the pawnshop.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

	strcat(string, "\nHouse\tGives you a flagged Low Class House\t{F7A763}150 Diamonds{FFFFFF}");
	strcat(string, "\nDoor\tGives you a flagged entrance/door with your choice name.\t{F7A763}100 Diamonds{FFFFFF}");
	strcat(string, "\nGate\tGives you a flagged Gate\t{F7A763}100 Diamonds{FFFFFF}");
 	strcat(string, "\nFree Namechange\tGives you a flagged free namechange\t{F7A763}60 Diamonds{FFFFFF}");
	strcat(string, "\nCar\tGives you a flagged any Rare/EDM Car.(Non-Restricted Cars)\t{F7A763}180 Diamonds{FFFFFF}");

	format(title, sizeof(title), "Pawn Shop (You have %i diamond(s).)", PlayerInfo[playerid][pDiamonds]);
	ShowPlayerDialog(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Exchange", "Cancel");

	return 1;
}

new const Float:minerpos[][] =
{
	{-1996.7692, -1546.3885, 84.7203},
	{-1989.9033, -1552.4419, 86.4439}, 
	{-1989.9634, -1565.1610, 86.4520}, 
	{-1995.7056, -1530.6096, 84.5569},
	{-1978.7451, -1535.1729, 88.1943}, 
	{-2002.3837, -1535.5742, 84.8505}
};

forward miningpay(playerid);
public miningpay(playerid)
{
	new cost;
	if(PlayerInfo[playerid][pMiningRock] == 1)
	{
		cost = 50 + random(200);
	}
	else if(PlayerInfo[playerid][pMiningRock] == 2)
	{
		cost = 200 + random(200);
	}
	else if(PlayerInfo[playerid][pMiningRock] == 3) // Musgravite
	{
		cost = 350 + random(200);
	}
	else if(PlayerInfo[playerid][pMiningRock] == 4) // Gold
	{
		cost = 550 + random(200);
	}
	else if(PlayerInfo[playerid][pMiningRock] == 5) // Diamond
	{
		new rock = random(100);
		switch(rock)
		{
			case 0..40:
			{
				cost = 700 + random(200);
				SendClientMessage(playerid, COLOR_WHITE, "Bam, a great stone indeed, the fact you can find stuff in this dump makes me wonder whether theres a diamond hidden in there somewhere.");
				PlayerInfo[playerid][pDiamonds] ++;
				SCM(playerid, COLOR_WHITE, "Damn! Bingo you just found a diamond along with that great stone!");
			}
			case 41..70:
			{
				cost = 950 + random(200);
				SendClientMessage(playerid, COLOR_WHITE, "Looks like a ruby, awesome. I'll be sending this Mining Enterprises immediately.");
				PlayerInfo[playerid][pDiamonds] ++;
				SCM(playerid, COLOR_WHITE, "Damn! Bingo you just found a diamonds along with that ruby!");
			}
			case 71..100:
			{
				cost = 1100 + random(200);
				PlayerInfo[playerid][pDiamonds] ++;
				SCM(playerid, COLOR_WHITE, "BINGO!, you just found a diamond, we're going to be damn rich!");
			}
		}
		PlayerInfo[playerid][pRareTime] = 1800;
		SendClientMessage(playerid, COLOR_GREY, "A cooldown for 30 minutes (of playtime) has been applied. Until then you can't find anymore rare stones.");
	}

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		cost += percent(cost, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
		cost = cost*2;
		SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	GivePlayerCash(playerid, floatround(cost*Payment));
	AddToTaxVault(floatround(cost*Tax_Pay));

	SM(playerid, COLOR_AQUA, "You have earned $%i on your paycheck for your mined rock.", floatround(cost*Payment));
	ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SavePlayerVariables(playerid);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	new rand = random(sizeof(minerpos));
	SetPlayerCheckpoint(playerid, minerpos[rand][0], minerpos[rand][1], minerpos[rand][2], 3);

	PlayerInfo[playerid][pCP] = CHECKPOINT_MINING;	
}

CMD:mine(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Miner.");
	}
	if(PlayerInfo[playerid][pMiningTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	}
	if(PlayerInfo[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	new rand = random(sizeof(minerpos));
	SetPlayerCheckpoint(playerid, minerpos[rand][0], minerpos[rand][1], minerpos[rand][2], 3);
	PlayerInfo[playerid][pCP] = CHECKPOINT_MINING;	
	return 1;
}

CMD:packagemeat(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MEATPACKAGER))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't use this command as you're not a Butcher.");
	}
	if(PlayerInfo[playerid][pPackageTime] > 0)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are packaging a meat already. Wait until you are done.");
	}
	if(PlayerInfo[playerid][pPackagingMeat] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You need to drop off your package first.");
	}
	if(!IsPlayerInButcherArea(playerid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the butcher area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~r~Packaging...", 1000, 3);
    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);

	PlayerInfo[playerid][pPackageTime] = 10;
	return 1;
}


CMD:v(playerid, params[])
{
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid, params[])
{
	if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!enabledVip)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The VIP Chat is disabled by an administrator.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(v)ip [vip chat]");
	}
    if(PlayerInfo[playerid][pToggleVIP])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the VIP chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pDonator] > 0 && !PlayerInfo[i][pToggleVIP])
	    {
			SM(i, COLOR_VIP, "** %s Donator %s: %s **", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:donate(playerid, params[])
{
	return SCM(playerid, COLOR_WHITE, "You can find the full list of donatable items on our Discord. Check our Discord for it! https://cyberx-rp.com/discord");
}

CMD:viplocker(playerid, params[]) return callcmd::donatorlocker(playerid, params);
CMD:donatorlocker(playerid, params[])
{
	if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't use this as you're currently restricted from possessing weapons!");
    if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2556.376953, 1404.385864, 7699.584472))
    {
		if(PlayerInfo[playerid][pDonator] == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_DGUN1, DIALOG_STYLE_TABLIST_HEADERS, "Silver Donator Locker", "Item\tCost\nKevlar Vest\tFree\nFirst Aid Kit\tFree\nSilenced Pistol\t$2,500 Cash\nShotgun\t480 Mats\nUZI\t800 Mats", "Buy", "Cancel");
		}
		else if(PlayerInfo[playerid][pDonator] == 2)
		{
			ShowPlayerDialog(playerid, DIALOG_DGUN2, DIALOG_STYLE_TABLIST_HEADERS, "Gold Donator Locker", "Item\tCost\nKevlar Vest\tFree\nFirst Aid Kit\tFree\nSilenced Pistol\t$2,350 Cash\nShotgun\t450 Mats\nUZI\t750 Mats\nMp5\t900 Mats", "Buy", "Cancel");
		}
		else if(PlayerInfo[playerid][pDonator] == 3)
		{
			ShowPlayerDialog(playerid, DIALOG_DGUN3, DIALOG_STYLE_TABLIST_HEADERS, "Platinum Donator Locker", "Item\tCost\nKevlar Vest\tFree\nFirst Aid Kit\tFree\nSilenced Pistol\t$2,100 Cash\nShotgun\t420 Mats\nUZI\t700 Mats\nMp5\t840 Mats\nTec-9\t700 Mats\nDeagle\t1,400 Mats\nRifle\t560 Mats", "Buy", "Cancel");
		}
	}
    else return SCM(playerid, COLOR_WHITE, "You're not at the Donator Lounge.");
    return 1;
}

CMD:vcolor(playerid, params[]) return callcmd::vipcolor(playerid, params);

CMD:vipcolor(playerid, params[])
{
    if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	if(!PlayerInfo[playerid][pVIPColor])
	{
        PlayerInfo[playerid][pVIPColor] = 1;
	    SCM(playerid, COLOR_AQUA, "** You have enabled the VIP nametag.");
	}
	else
	{

	    PlayerInfo[playerid][pVIPColor] = 0;
	    SCM(playerid, COLOR_AQUA, "** You have disabled the VIP nametag.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if((PlayerInfo[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your VIP subscription expires in less than 3 days. You can't do this now.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipinvite [playerid]");
	    SCM(playerid, COLOR_WHITE, "This command grants a temporary VIP subscription which lasts one hour to a player of your choice.");

	    if(PlayerInfo[playerid][pVIPCooldown] > gettime()) {
			SM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You have %i hours left until you can use it again.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SCM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You currently have no cooldown for this command.");
		}

		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    return SM(playerid, COLOR_SYNTAX, "You have already used this command today. Please wait another %i hours.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has a VIP subscription.");
	}

	PlayerInfo[targetid][pDonator] = 1;
	PlayerInfo[targetid][pVIPTime] = gettime() + 3600;
	PlayerInfo[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 1, viptime = 3600 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", PlayerInfo[playerid][pVIPCooldown], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "** %s has given you a temporary one hour donator package.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have given %s a temporary one hour donator package.", GetRPName(targetid));

	Log_Write("log_vip", "%s Donator %s (uid: %i) has given %s (uid: %i) a temporary one hour package.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:donators(playerid, params[])
{
	new count=0, time, string[32], cooldown[24] = "{33CC33}No cooldown";
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][pDonator] != 0)
		{
			count++;
		}
	}
	if(count==0)
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no Donator online.");
	}
	SCM(playerid, COLOR_VIP, "Currentl Online Donators");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][pDonator] != 0)
		{
			time = PlayerInfo[i][pVIPTime] - gettime();
			if(1 <= time <= 3599)
			{
				format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
			}
			else if(3600 <= time <= 86399)
			{
				format(string, sizeof(string), ""CXRP"%i hours", time / 3600);
			}
			else
			{
				if(time / 86400 <= 7)
				{
					format(string, sizeof(string), "{FFD700}%i days", time / 86400);
				}
				else
				{
					format(string, sizeof(string), "{33CC33}%i days", time / 86400);
				}
			}
			if(PlayerInfo[playerid][pVIPCooldown] > gettime())
			{
				time = PlayerInfo[playerid][pVIPCooldown] - gettime();

				if(time > 3600) {
					format(cooldown, sizeof(cooldown), "{F7A763}%i hours", time / 3600);
				} else {
					format(cooldown, sizeof(cooldown), "{F7A763}%i minutes", time / 60);
				}
			}
			SM(playerid, COLOR_WHITE, "[%i]{FFFFFF} - %s{FFFFFF} - %s left {FFFFFF}- Invite CD: %s", i, GetRPName(i), string, cooldown);
		}
	}
	return 1;
}


CMD:vipinfo(playerid, params[])
{
	new time = PlayerInfo[playerid][pVIPTime] - gettime(), cooldown[24] = "{33CC33}No cooldown", string[32];

	if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	SCM(playerid, COLOR_LIGHTORANGE, "My Package:");

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""CXRP"%i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i days", time / 86400);
		}
	}

	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    time = PlayerInfo[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        format(cooldown, sizeof(cooldown), "{F7A763}%i hours", time / 3600);
		} else {
			format(cooldown, sizeof(cooldown), "{F7A763}%i minutes", time / 60);
	    }
	}

	SM(playerid, COLOR_WHITE, "Package: {C2A2DA}%s Donator", GetDonatorRank(PlayerInfo[playerid][pDonator]));
	SM(playerid, COLOR_WHITE, "Expires In: %s", string);
	SM(playerid, COLOR_WHITE, "Next Invite: %s", cooldown);
	return 1;
}
CMD:vipnumber(playerid, params[])
{
	new number;

	if(PlayerInfo[playerid][pDonator] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipnumber [phone number]");
	    SCM(playerid, COLOR_WHITE, "This command costs $20,000 and changes your phone number to your chosen one.");
	    return 1;
	}
	if(PlayerInfo[playerid][pCash] < 20000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $20,000 for pay for this.");
	}
	if(number == 0 || number == 911 || number == 6397 || number == 6324 || number == 8294)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Taxi Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfare [amount]");
	}
	if(!(100 <= amount <= 500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fare must range between $100 and $500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in a taxi type vehicle.");
	}

	if(amount == 0)
	{
	    if(PlayerInfo[playerid][pTaxiFare] == 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to zero.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = 0;
	    SCM(playerid, COLOR_YELLOW, "** You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(PlayerInfo[playerid][pTaxiFare] == amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to this amount.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = amount;
	    SMA(COLOR_YELLOW, "** Taxi driver %s is now on duty, fare: $%i. /call 8294 for a ride.", GetRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createfaction [type] [name]");
		SCM(playerid, COLOR_GREY2, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
		return 1;
	}

	if(!strcmp(type, "police", true))
	{
	    type_id = FACTION_POLICE;
	}
	else if(!strcmp(type, "medic", true))
	{
	    type_id = FACTION_MEDIC;
	}
	else if(!strcmp(type, "news", true))
	{
	    type_id = FACTION_NEWS;
	}
	else if(!strcmp(type, "government", true))
	{
	    type_id = FACTION_GOVERNMENT;
	}
	else if(!strcmp(type, "hitman", true))
	{
	    type_id = FACTION_HITMAN;
	}
	else if(!strcmp(type, "federal", true))
	{
	    type_id = FACTION_FEDERAL;
	}
	else if(!strcmp(type, "army", true))
	{
	    type_id = FACTION_ARMY;
	}
	else
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 1; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created a {F7A763}%s{FF6347} faction named \"%s\".", GetRPName(playerid), factionTypes[type_id], name);
	        SM(playerid, COLOR_WHITE, "** This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, Locker, TurfTokens");
		return 1;
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = \"%e\" WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadFaction(factionid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of faction ID %i to \"%s\".", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = \"%e\" WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadFaction(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the short name of faction ID %i to \"%s\".", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [type] [option]");
			SCM(playerid, COLOR_GREY2, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
			return 1;
		}

		if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "army", true)) {
		    type_id = FACTION_ARMY;
		} else {
			return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		if(type_id == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of faction ID %i to %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of faction ID %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SM(playerid, COLOR_SYNTAX, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the rank count of faction ID %i to %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, \"%e\") ON DUPLICATE KEY UPDATE name = \"%e\"", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of faction ID %i to \"%s\".", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Paychecks:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}
		if(!(0 <= amount <= 100000))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $0 to $100,000.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's paycheck of faction ID %i to $%i.", GetRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /setfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = \"%e\" WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of faction ID %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    GetPlayerPos(playerid, FactionInfo[factionid][fLockerX], FactionInfo[factionid][fLockerY], FactionInfo[factionid][fLockerZ]);
	    FactionInfo[factionid][fLockerInterior] = GetPlayerInterior(playerid);
	    FactionInfo[factionid][fLockerWorld] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET lockerx = '%f', lockery = '%f', lockerz = '%f', lockerinterior = %i, lockerworld = %i WHERE id = %i", FactionInfo[factionid][fLockerX], FactionInfo[factionid][fLockerY], FactionInfo[factionid][fLockerZ], FactionInfo[factionid][fLockerInterior], FactionInfo[factionid][fLockerWorld], factionid);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadFaction(factionid);
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the locker point of faction ID %i.", GetRPName(playerid), factionid);
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [turftokens] [amount] (this faction has %i tokens)", FactionInfo[factionid][fTurfTokens]);
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE && FactionInfo[factionid][fType] != FACTION_FEDERAL && FactionInfo[factionid][fType] != FACTION_ARMY)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of faction ID %i to %i.", GetRPName(playerid), factionid, amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /purgefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
	        ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
            SetScriptSkin(i, 230);

	        PlayerInfo[i][pFaction] = -1;
	        PlayerInfo[i][pFactionRank] = 0;
	        PlayerInfo[i][pDivision] = -1;
	        PlayerInfo[i][pDuty] = 0;
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'Pending' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has purged faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	return 1;
}

CMD:makemafia(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makemafia [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pMafia] == 0)
	{
		PlayerInfo[targetid][pMafia] = 1;
		SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Mafia{CCFFFF}. Use /mafiahelp to see the commands!", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Mafia.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		PlayerInfo[targetid][pMafia] = 0;
		SM(targetid, COLOR_AQUA, "%s has removed a from "CXRP"Mafia.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from Mafia.", GetRPName(playerid), GetRPName(targetid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mafia = %i WHERE uid = %i", PlayerInfo[targetid][pMafia], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:mafialead(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mafialead [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pMafia] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not a Mafia.");
	}
	if(PlayerInfo[targetid][pMafia] == 1)
	{
		PlayerInfo[targetid][pMafia] = 2;
		SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Mafia Leader{CCFFFF}. Use /mafiahelp to see the commands!", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Mafia Leader.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		PlayerInfo[targetid][pMafia] = 1;
		SM(targetid, COLOR_AQUA, "%s has removed a from "CXRP"Mafia Leader.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from Mafia Leader.", GetRPName(playerid), GetRPName(targetid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mafia = %i WHERE uid = %i", PlayerInfo[targetid][pMafia], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:mafias(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia to use this command!");
	}
	new count=0;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][pMafia] > 0)
		{
			count++;
		}
	}
	if(count == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no mafia online right now");
	}
	SCM(playerid, COLOR_ORANGE, "Currently online Mafia members!");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][pMafia] > 0)
		{
			SM(playerid, COLOR_WHITE, "%s%s%s - [%i] - {%06x}%s", ORANGE, (PlayerInfo[i][pMafia] == 2) ? ("Mafia Head") : ("Mafia"), WHITE, i, GetPlayerColor(i) >>> 8, GetPlayerNameEx(i));
		}
	}
	return 1;
}

CMD:ma(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia to use this command!");
	}
    if(isnull(params))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /ma [text]");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMafia] > 0)
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_WHITE, "** [{ad1457}%s"WHITE"] %s"WHITE"{ad1457}: %.*s... **", (PlayerInfo[i][pMafia] == 2) ? ("Mafia Head") : ("Mafia"), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_WHITE, "** [{ad1457}%s"WHITE"] %s"WHITE"{ad1457}: ...%s **", (PlayerInfo[i][pMafia] == 2) ? ("Mafia Head") : ("Mafia"), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, COLOR_WHITE, "** [{ad1457}%s"WHITE"] %s"WHITE"{ad1457}: %s **", (PlayerInfo[i][pMafia] == 2) ? ("Mafia Head") : ("Mafia"), GetRPName(playerid), params);
			}
		}
	}
	return 1;
}

forward ResetTruckLoad(vehicleid);
public ResetTruckLoad(vehicleid)
{
	TruckLoads[vehicleid][0] = 0; //sniper
	TruckLoads[vehicleid][1] = 0; //spas-12
	TruckLoads[vehicleid][2] = 0; //ak-47
	TruckLoads[vehicleid][3] = 0; //deagle
	TruckLoads[vehicleid][4] = 0; //mp5
	TruckLoads[vehicleid][5] = 0; //rpg
	return 1;
}

CMD:spawntruck(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2755.7466,-70.7004,1312.6029))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the mafia garage.");
	}
	if(TruckSpawned >= 10)
	{
		return SCM(playerid, COLOR_SYNTAX, "Maximum shipment spawn limit reached!");
	}
	MafiaTruck[TruckSpawned] = AddStaticVehicleEx(456, shipmentSpawns[TruckSpawned][0], shipmentSpawns[TruckSpawned][1], shipmentSpawns[TruckSpawned][2], shipmentSpawns[TruckSpawned][3], 0, 1, -1);
	new string[256];
	format(string, sizeof(string), "Mafia %s has just spawned a shipment truck", GetRPName(playerid));
	SendMafiaMessage(COLOR_AQUA, string);
	SCM(playerid, COLOR_WHITE, "Truck has been delivered at Mafia Garage, you can find it there.");
	ResetTruckLoad(MafiaTruck[TruckSpawned]);
	TruckMafia[MafiaTruck[TruckSpawned]] = true;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s calls their mafia warehouse and orders a shipment truck.", GetRPName(playerid));
	TruckSpawned++;
	return 1;
}

CMD:destroytruck(playerid, params[])
{
	new vehicleid;
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /destroytruck [Truck ID] (Use /dl or /locatetruck to see ID)");
	}
	if(!IsValidVehicle(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle ID");
	}
	if(!TruckMafia[vehicleid])
	{
		return SCM(playerid, COLOR_SYNTAX, "Specific vehicle is not a Mafia Truck");
	}
	ResetTruckLoad(vehicleid);
	TruckMafia[vehicleid] = false;
	if(TruckSpawned > 0)
		TruckSpawned--;
	else
		TruckSpawned = 0;

	DestroyVehicle(vehicleid);
	new string[256];
	format(string, sizeof(string), "Mafia %s has just deleted a shipment truck", GetRPName(playerid));
	SendMafiaMessage(COLOR_AQUA, string);
	SM(playerid, COLOR_WHITE, "You've deleted shipment truck (%i).", vehicleid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s calls their mafia warehouse to blowup a shipment truck.", GetRPName(playerid));
	return 1;
}

CMD:respawntruck(playerid, params[])
{
	new vehicleid;
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /respawntruck [Truck ID] (Use /dl or /locatetruck to see ID)");
	}
	if(!IsValidVehicle(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle ID");
	}
	if(!TruckMafia[vehicleid])
	{
		return SCM(playerid, COLOR_SYNTAX, "Specific vehicle is not a Mafia Truck");
	}
	SetVehicleToRespawn(vehicleid);
	new string[256];
	format(string, sizeof(string), "Mafia %s has just re-spawned a shipment truck", GetRPName(playerid));
	SendMafiaMessage(COLOR_AQUA, string);
	SM(playerid, COLOR_WHITE, "You've re-spawned shipment truck (%i).", vehicleid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s calls their mafia warehouse for a new shipment truck.", GetRPName(playerid));
	return 1;
}

CMD:mbalance(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580) && Atm_Nearest(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank or an ATM.");
	}
	SM(playerid, COLOR_SYNTAX, "Current Mafia Account balance: %s$%s", ORANGE, AddCommas(Settings[gMafiaCash]));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s uses their special mafia card.", GetRPName(playerid));
	return 1;
}

CMD:mdeposit(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580) && Atm_Nearest(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank or an ATM.");
	}
	new amount;

	if(sscanf(params, "i", amount))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /mdeposit [amount]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	}
	if(amount > 5000000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't deposit more than $5,000,000 at a time.");
	}

	Settings[gMafiaCash] += amount;
	GivePlayerCash(playerid, -amount);
	SaveServerInfo();
	SM(playerid, COLOR_AQUA, "You have deposited $%s to Mafia Bank Account. New balance is $%s.", AddCommas(amount), AddCommas(Settings[gMafiaCash]));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s uses their special mafia card.", GetRPName(playerid));
	return 1;
}

CMD:mwithdraw(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580) && Atm_Nearest(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank or an ATM.");
	}
	new amount;

	if(sscanf(params, "i", amount))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /mwithdraw [amount]");
	}
	if(amount < 1 || amount > Settings[gMafiaCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	}
	if(amount > 5000000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't withdraw more than $5,000,000 at a time.");
	}

	Settings[gMafiaCash] -= amount;
	GivePlayerCash(playerid, amount);
	SaveServerInfo();
	SM(playerid, COLOR_AQUA, "You have withdrew $%s from Mafia Bank Account. New balance is $%s.", AddCommas(amount), AddCommas(Settings[gMafiaCash]));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Mafia %s uses their special mafia card.", GetRPName(playerid));
	return 1;
}

/*CMD:mpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerInfo[playerid][pMafia] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not a part of Mafia at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your Mafia vehicles.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "** Mafia vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}*/

CMD:shipment(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pMafia] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia Head to use this command!");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!TruckMafia[vehicleid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any Mafia Shipment Truck.");
	}
	PlayerInfo[playerid][pSelected] = vehicleid;
	new string[256];
	format(string, sizeof(string), "#\tWeapon\tQty\n1\tSniper\t%i\n2\tSpas-12\t%i\n3\tAk-47\t%i\n4\tDeagle\t%i\n5\tMP5\t%i\n6\tRPG\t%i", TruckLoads[vehicleid][0], TruckLoads[vehicleid][1], TruckLoads[vehicleid][2], TruckLoads[vehicleid][3], TruckLoads[vehicleid][4], TruckLoads[vehicleid][5]);
	ShowPlayerDialog(playerid, MAFIA_SHIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Choose a shipment item to load.", string, "Load", "Cancel");
	return 1;
}

CMD:mafiahelp(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia to use this command!");
	}
	SCM(playerid, COLOR_WHITE, "Available Mafia Commands: /ma(fia chat), /mafias, /locatehq");
	if(PlayerInfo[playerid][pMafia] == 2)
	{
		SCM(playerid, COLOR_WHITE, "Mafia Head Commands: /spawntruck, /shipment, /destroytruck, /respawntruck, /locatetruck");
		SCM(playerid, COLOR_WHITE, "Mafia Head Commands: /mdeposit, /mwithdraw, /mbalance");
	}
	return 1;
}
CMD:giveturf(playerid, params[])
{
	new turfid, amount, targetid;
	if(sscanf(params, "uii", targetid, turfid, amount))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /giveturf [playerid] [turf id] [cost]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}
	if( targetid == playerid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't offer your self.");
	}
	PlayerInfo[targetid][pTurfOffered] = 1;
	PlayerInfo[targetid][pTurfOfferedId] = turfid;
	PlayerInfo[targetid][pTurfAmount] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you a turf area %s for $%i (/accept turf).", GetRPName(playerid), TurfInfo[turfid][tName], amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for $%i.", GetRPName(targetid), TurfInfo[turfid][tName], amount);

	return 1;
}

CMD:locatetruck(playerid, params[])
{
    new string[128], count;

 	string = "#\tModel\tID\tLocation";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && TruckMafia[i])
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%i\t%s", string, count + 1, GetVehicleName(i), i, GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SCM(playerid, COLOR_SYNTAX, "There is no Mafia Truck spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, MAFIA_FINDTRUCK, DIALOG_STYLE_TABLIST_HEADERS, "Choose a shipment truck to track.", string, "Track", "Cancel");
	}

	return 1;
}

CMD:locatehq(playerid, params[])
{
	if(PlayerInfo[playerid][pMafia] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be a Mafia to use this command!");
	}
	SetPlayerCheckpoint(playerid, 1456.2562,2773.4126,10.8203, 3.0);
	SCM(playerid, COLOR_AQUA, "** A radar checkpoint has been marked to Mafia HQ on your map");
	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	return 1;
}


CMD:setfaction(playerid, params[])
{
	new targetid, factionid, rankid;
	if(!PlayerInfo[playerid][pFactionMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "uiI(-1)", targetid, factionid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfaction [playerid] [factionid (0 = kick)] [rank (optional)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(factionid < 0 || factionid > MAX_FACTIONS)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if(factionid > 0 && FactionInfo[factionid][fType] == FACTION_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(PlayerInfo[playerid][pCurrVoice] == 1 && GetFactionType(playerid) != FACTION_NONE)
	{
		SvDetachListenerFromStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
		lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
		PlayerInfo[playerid][pCurrVoice] = 0;
		SvAttachListenerToStream(lstream[playerid], playerid);
	}
	if(factionid == 0)
	{
     	ResetPlayerWeaponsEx(targetid);
        SetScriptSkin(targetid, 230);


        PlayerInfo[targetid][pFaction] = -1;
        PlayerInfo[targetid][pFactionRank] = 0;
        PlayerInfo[targetid][pDivision] = -1;
        PlayerInfo[targetid][pDuty] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

		PlayerInfo[targetid][pFaction] = factionid;
		PlayerInfo[targetid][pFactionRank] = rankid;
		PlayerInfo[targetid][pDivision] = -1;

		SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"%s{CCFFFF} in %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i WHERE uid = %i", PlayerInfo[playerid][pFaction], rankid, PlayerInfo[playerid][pDivision], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:factions(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 0 && GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return NotAuth(playerid);
	}
    SCM(playerid, SERVER_COLOR, "Factions:");

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE faction = %i", i);
	        mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);
	    }
	}

	return 1;
}

CMD:channel(playerid, params[])
{
	new channel;

	if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /channel [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The channel must range from 0 to 9999999.");
	}

	PlayerInfo[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SCM(playerid, COLOR_WHITE, "** You have set the channel to 0 and disabled your Portable Radio.");
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** Channel set to %i, use /pr to broadcast over this channel.", channel);
	}

	return 1;
}

CMD:pr(playerid, params[])
{
    if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pr [Portable Radio]");
	}
	if(!PlayerInfo[playerid][pChannel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your Portable Radio is not tuned into any channel. /channel to set one.");
	}
    if(PlayerInfo[playerid][pToggleWT])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your Portable Radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		if(PlayerInfo[i][pWalkieTalkie] && PlayerInfo[i][pChannel] == PlayerInfo[playerid][pChannel] && !PlayerInfo[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %.*s...", PlayerInfo[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: ...%s", PlayerInfo[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %s", PlayerInfo[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 5.0, 0x6DFB6DFF, "(Radio) %s",params);
	return 1;
}

/*CMD:g(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /g [global chat]");
	}
	if(!enabledGlobal && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The global channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pGlobalMuted])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are muted from speaking in this channel.");
	}
    if(PlayerInfo[playerid][pToggleGlobal])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't speak in the global chat as you have it toggled.");
	}
	if(gettime() - PlayerInfo[playerid][pLastGlobal] < 10)
	{
	    return SM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can only speak in this channel every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastGlobal]));
	}

	else if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		format(string, sizeof(string), "%s", GetAdminRank(playerid));
 	}
 	else if(PlayerInfo[playerid][pHelper] > 0)
 	{
  		format(string, sizeof(string), "%s", GetHelperRank(playerid));
	}
	else if(PlayerInfo[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	else if(PlayerInfo[playerid][pDonator] > 0)
	{
	    format(string, sizeof(string), "%s Donator", GetDonatorRank(PlayerInfo[playerid][pDonator]));
	}
	else if(PlayerInfo[playerid][pLevel] >= 2)
	{
	    format(string, sizeof(string), "Level %i Player", PlayerInfo[playerid][pLevel]);
	}
	else {
        string = "Newbie";
	}

	foreach(new i : Player)
	{
		if(!PlayerInfo[i][pToggleGlobal])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
		        SM(i, COLOR_GLOBAL, "(( %s %s: %.*s...))", string, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_GLOBAL, "(( %s %s: ...%s ))", string, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_GLOBAL, "(( %s %s: %s ))", string, GetRPName(playerid), params);
			}
		}
	}
	#if defined DISCORD
		DCC_SendText(-1, playerid, params, "1143417020319268874", INVALID_PLAYER_ID, -1);
	#endif
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		PlayerInfo[playerid][pLastGlobal] = gettime();
	}

	return 1;
}*/

CMD:fc(playerid, params[])
{
	return SCM(playerid, COLOR_WHITE, "This command has been repalced with /r. (Faction Radio). Use that!");
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /div [division chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pDivision] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == PlayerInfo[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(r)adio [faction radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(pBlind[playerid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while blindfolded.");
	}
	new color = (FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleRadio])
	    {
			if(PlayerInfo[playerid][pDivision] == -1)
			{
                if(strlen(params) > MAX_SPLIT_LENGTH)
				{
				    SM(i, color, "** %s %s: %.*s... **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SM(i, color, "** %s %s: ...%s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    SM(i, color, "** %s %s: %s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
				}
			}
			else
			{
				if(strlen(params) > MAX_SPLIT_LENGTH)
				{
				    SM(i, color, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SM(i, color, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    SM(i, color, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
				}
			}
		}
	}
	if(GetFactionType(playerid) != FACTION_HITMAN)
		SetPlayerBubbleText(playerid, 5.0, color, "(Radio) %s",params);
	return 1;
}

CMD:d(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(pBlind[playerid] == 1)
	{
	    return SCM(playerid, COLOR_GREY, "You cannot use this command while bindfolded.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_ARMY:
	    {
			foreach(new i : Player)
			{
			    if((!PlayerInfo[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL))
			    {
			        if(PlayerInfo[playerid][pDivision] == -1)
			        {
				        if(strlen(params) > MAX_SPLIT_LENGTH)
				        {
				        	SM(i, COLOR_YELLOW, "** [%s] %s %s: %.*s... **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				        	SM(i, COLOR_YELLOW, "** [%s] %s %s: ...%s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
						}
						else
						{
						    SM(i, COLOR_YELLOW, "** [%s] %s %s: %s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
						}
					}
					else
					{
				        if(strlen(params) > MAX_SPLIT_LENGTH)
				        {
				        	SM(i, COLOR_YELLOW, "** [%s] %s %s %s: %.*s... **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]],GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				        	SM(i, COLOR_YELLOW, "** [%s] %s %s %s: ...%s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]],GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
						}
						else
						{
						    SM(i, COLOR_YELLOW, "** [%s] %s %s %s: %s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], GetRPName(playerid), params);
						}
					}
				}
			}
		}
		default:
		{
			return NotAuth(playerid);
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid, params[])
{
	new targetid, option[14], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /faction [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, RankName, Roster, Online, Quit, Offlinekick, Respawncars, Skin");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a faction.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is apart of a gang and therefore can't join a faction.");
		}

		PlayerInfo[targetid][pFactionOffer] = playerid;
		PlayerInfo[targetid][pFactionOffered] = PlayerInfo[playerid][pFaction];

		SM(targetid, COLOR_AQUA, "** %s has invited you to join "CXRP"%s{CCFFFF} (/accept faction).", GetRPName(playerid), FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		SM(playerid, COLOR_AQUA, "** You have invited %s to join your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		if(GetFactionType(playerid) != FACTION_HITMAN)
			Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);

		ResetPlayerWeaponsEx(targetid);
        SetScriptSkin(targetid, 230);

		if(PlayerInfo[targetid][pCurrVoice] == 1)
		{
			SvDetachListenerFromStream(FactionVC[PlayerInfo[targetid][pFaction]], targetid);
			lstream[targetid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, targetid, COLOR_WHITE, " ");
			PlayerInfo[targetid][pCurrVoice] = 0;
			SvAttachListenerToStream(lstream[targetid], targetid);
		}

        PlayerInfo[targetid][pFaction] = -1;
        PlayerInfo[targetid][pFactionRank] = 0;
        PlayerInfo[targetid][pDivision] = -1;
        PlayerInfo[targetid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /faction [rank] [playerid] [rankid (0-%i)]", PlayerInfo[playerid][pFactionRank]);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		PlayerInfo[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "CXRP"%s{CCFFFF} (%i).", GetRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "CXRP"%s{CCFFFF} (%i).", GetRPName(targetid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		if(GetFactionType(playerid) != FACTION_HITMAN)
			Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [quit] [confirm]");
	    }

	    SM(playerid, COLOR_AQUA, "You have quit %s as a "CXRP"%s{CCFFFF} (%i).", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		if(GetFactionType(playerid) != FACTION_HITMAN)
			Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);

	    ResetPlayerWeaponsEx(playerid);
        SetScriptSkin(playerid, 230);

		if(PlayerInfo[playerid][pCurrVoice] == 1)
		{
			SvDetachListenerFromStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
			lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
			PlayerInfo[playerid][pCurrVoice] = 0;
			SvAttachListenerToStream(lstream[playerid], playerid);
		}

        PlayerInfo[playerid][pFaction] = -1;
        PlayerInfo[playerid][pFactionRank] = 0;
        PlayerInfo[playerid][pDivision] = -1;
        PlayerInfo[playerid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}

 		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[PlayerInfo[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their faction vehicles.", GetRPName(playerid), playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = \"%e\"", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }

	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", PlayerInfo[playerid][pFaction], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "rankname", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[PlayerInfo[playerid][pFaction]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[PlayerInfo[playerid][pFaction]][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [rankname] [slot (0-%i)] [name]", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount]))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid rank.");
		}
	    strcpy(FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, \"%e\") ON DUPLICATE KEY UPDATE name = \"%e\"", PlayerInfo[playerid][pFaction], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_YELLOW, "AdmWarning: %s has set rank %i's name of faction ID %i to \"%s\".", GetPlayerNameEx(playerid), rankid, PlayerInfo[playerid][pFaction], rank);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /division [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[PlayerInfo[playerid][pFaction]][i], param, 32);
		        SM(playerid, COLOR_AQUA, "You have created division {FFA763}%s{CCFFFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, \"%e\")", PlayerInfo[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SM(playerid, COLOR_SYNTAX, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == divisionid)
	        {
	            PlayerInfo[i][pDivision] = -1;
	            SCM(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SM(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{CCFFFF} (%i).", FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", PlayerInfo[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SCM(playerid, SERVER_COLOR, "Divisions List:");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[PlayerInfo[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }
	    if(PlayerInfo[targetid][pDivision] == divisionid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of that division.");
	    }
	    if(PlayerInfo[targetid][pDivision] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of another division.");
	    }

	    PlayerInfo[targetid][pDivision] = divisionid;

	    SM(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);
	    SM(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
	    if(PlayerInfo[targetid][pDivision] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is not apart of any division.");
	    }

	    SM(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);
	    SM(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:cells(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /cells [on/off]");
	}
	else if(!strcmp(params, "on", true))
	{
        for(new i = 0; i < sizeof(gPrisonCells); i ++)
		{
			if(Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED) == 0)
			{
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
		}
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has opened some cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	}
	else if(!strcmp(params, "off", true))
	{
        for(new i = 0; i < sizeof(gPrisonCells); i ++)
		{
		    if(Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED) == 1)
			{
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}
		}
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has closed some cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	}
	else
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /cells [on/off]");
	}
	return 1;
}


CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPrisonCells[i], 2.0))
	    {
	        if(!IsLawEnforcement(playerid))
	        {
				return NotAuth(playerid);
			}
			if(PlayerInfo[playerid][pDuty] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to open the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to close the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any prison cells.");
	return 1;
}

CMD:locker(playerid, params[]) return callcmd::lo(playerid, params);

CMD:lo(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your faction locker.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nTactical", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}

	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid] [factionid] [rankid]");
	        SCM(playerid, COLOR_WHITE, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(IsPlayerNPC(targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this faction for your fake badge.");
	    }

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid]");
		}
		if(IsPlayerNPC(targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank], FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Megaphone] %s: %s", GetRPName(playerid), params);
	SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
	return 1;
}

CMD:sto(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Megaphone] %s: Driver! Step out of the vehicle with your hands above your head!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

CMD:po(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Megaphone] %s: Pull your vehicle over to the side of the road and turn off the ignition!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
		case FACTION_MEDIC:
		{
		    SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Megaphone] %s: Move to the right! FMD passing on your left!", GetRPName(playerid), params);
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}


CMD:mir(playerid, params[])
{
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}

CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!PlayerInfo[playerid][pTazer])
	{
	    PlayerInfo[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches for their tazer gun.", GetRPName(playerid));

		GiveWeapon(playerid, 23, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    PlayerInfo[playerid][pTazer] = 0;
		SetPlayerWeapons(playerid);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts their tazer gun back in their duty belt.", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
		}
	}

	return 1;
}

CMD:unr(playerid, params[])
{
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unr [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't restrain yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed or tied.");
	}
	if(PlayerUseAnims(playerid) == 0)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command now.");
	}
	if(PlayerInfo[targetid][pRes] == 1)
	{
		Unfreeze(targetid);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has unrestrained %s's wrists.", GetRPName(playerid), GetRPName(targetid));
		GameTextForPlayer(targetid, "~g~Un-Restrained", 3000, 3);
		PlayerInfo[targetid][pRes] = 0;
	}
	else
	{
		Freeze(targetid);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has restrained %s's wrists.", GetRPName(playerid), GetRPName(targetid));
		GameTextForPlayer(targetid, "~r~Restrained", 3000, 3);
		PlayerInfo[targetid][pRes] = 1;
	}
	return 1;
}

CMD:unmask(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unmask [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't unmask yourself, use /pmask for it.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(Maskara[targetid] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "That specified player isn't masked.");
	}
    Maskara[targetid] = 0;
	SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off %s's mask.", GetRPName(playerid), GetRPName(targetid));
	RemovePlayerAttachedObject(targetid, 9);
	return 1;
}

CMD:breakcuff(playerid, params[])
{
	new targetid;

    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command now!.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBreak] < 30)
	{
		return SM(playerid, COLOR_SYNTAX, "You can only repair a vehicle every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastBreak]));
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_WHITE, "Usage: /breakcuff [playerid]");
		SCM(playerid, COLOR_SYNTAX, "Note: It will cost you 2,500 materials and 1 toolkit");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[playerid][pMaterials] < 2500)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials, it costs 2,500 materials to break the cuff.");
	}
	if(PlayerInfo[playerid][pToolkit] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 1 toolkit to craft the lockpick");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}

	PlayerInfo[playerid][pLastBreak] = gettime();
	PlayerInfo[playerid][pMaterials] -= 2500;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	Freeze(playerid);
	Freeze(targetid);
	
	
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
	GameTextForPlayer(playerid,"~w~Breaking the handcuffs..", 8000,4);
	SetTimerEx("TimerBreakCuff", 8000, false, "ii", playerid, targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crafts a lockpick using materials to break the handcuffs.", GetRPName(playerid));
	return 1;
}

CMD:cuff(playerid, params[])
{
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cuff [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't cuff yourself.");
	}
	if(PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already handcuffed.");
	}
	if(PlayerInfo[targetid][pTazedTime] == 0 && GetPlayerSpecialAction(targetid) != SPECIAL_ACTION_DUCK && GetPlayerAnimationIndex(targetid) != 1437)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player must either be tazed, crouched, or hands up.");
	}
	if(PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't handcuff an injured player.");
	}

	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[targetid][pCallLine], HANGUP_DROPPED);
	}
    ClearAnimations(targetid);
	PlayerInfo[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	ApplyAnimation(targetid,"ped","cower",1,1,0,0,0,0,1);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s tightens a pair of handcuffs around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cuffed", 3000, 3);
	if(Maskara[targetid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "That player is wearing a mask. Use /unmask to remove their mask.");
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && PlayerInfo[playerid][pAdminDuty] == 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /uncuff [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't uncuff yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}

	PlayerInfo[targetid][pCuffed] = 0;
	PlayerInfo[targetid][pRes] = 0;
 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	Unfreeze(targetid);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	ClearAnimations(targetid, 1);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loosens the pair of handcuffs from around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 3);
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /drag [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drag yourself.");
	}
	if(!PlayerInfo[targetid][pInjured] && !PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
	}
	
	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
		Freeze(targetid);
		ClearAnimations(targetid);
		SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops dragging %s.", GetRPName(playerid), GetRPName(targetid));
		if(!PlayerInfo[targetid][pRes])
		{
			Unfreeze(targetid);
			ClearAnimations(targetid);
			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
		}
	}

	return 1;
}

CMD:carry(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /carry [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_GREY2, "You cannot use this command now.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_GREY2, "Specificed player isn't injured.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't carry yourself.");
	}
	new count=0;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && GetFactionType(i) == FACTION_MEDIC && PlayerInfo[i][pDuty] && !PlayerInfo[i][pAFK])
			count++;
	}
	if(count > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "There is some medics online! Use /call 911 to call a medic.");
	}
	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to carry them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
	}
    if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(playerid, 5.0, 1257.3260,1718.4550,1061.1492) && GetPlayerInterior(playerid) == 1)
    {
		if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
		{
	        SCM(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
	    }
		else
		{
			SCM(targetid, COLOR_DOCTOR, "You have been billed $200 for your stay. You also keep all of your weapons!");
		}

		ClearAnimations(targetid);
		PlayerInfo[targetid][pInjured] = 0;
		new rand = random(sizeof(hospitalspawns));
		new vw = GetPlayerVirtualWorld(playerid);
		TeleportToCoords(targetid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2], hospitalspawns[rand][3], 1, vw, true, false);

		SetCameraBehindPlayer(targetid);

		if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
		{
			GivePlayerCash(targetid, -200);
			GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$200", 5000, 1);
		}
		
		SetPlayerHealth(targetid, PlayerInfo[targetid][pSpawnHealth]);
		SetScriptArmour(targetid, PlayerInfo[targetid][pSpawnArmor]);
		UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
		if(PlayerInfo[targetid][pHunger] < 80)
		{
			PlayerInfo[targetid][pHunger] += 5;
		}
		if(PlayerInfo[targetid][pThirst] < 80)
		{
			PlayerInfo[targetid][pThirst] += 5;
		}
	}
	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /detain [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't detain yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed] && PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			PlayerInfo[targetid][pVehicleCount] = 0;

	        Freeze(targetid);
	        
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws %s into their vehicle.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /charge [playerid] [crime]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't charge yourself.");
	}
	if(IsLawEnforcement(targetid))
	{
		return SCM(playerid, COLOR_GREY2, "You can't arrest another Law Enforcement Officer.");
	}
	if(PlayerInfo[targetid][pWantedLevel] >= 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already at the maximum wanted level (6).");
	}

	PlayerInfo[targetid][pWantedLevel]++;
	PlayerInfo[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pCrimes], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, \"%s\", NOW(), \"%e\")", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has charged %s with "CXRP"%s{9999FF}. **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	SM(targetid, COLOR_LIGHTRED, "** Officer %s has charged you with %s.", GetRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}

CMD:arrest(playerid, params[])
{
	new string[128], targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "ui", targetid, minutes))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /arrest [playerid] [minutes]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsLawEnforcement(targetid))
	{
		return SCM(playerid, COLOR_GREY2, "You can't arrest another Law Enforcement Officer.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest a player with no active charges. /charge to add them.");
	}
	if(minutes < 1) return SCM(playerid, COLOR_GREY2, "Minutes can't be lower than 1 minute.");
	if(minutes > 60) return SCM(playerid, COLOR_GREY2, "Minutes can't be higher than 60 minutes.");
 	fine = PlayerInfo[targetid][pWantedLevel] * 200;
	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]) && GetPlayerVirtualWorld(playerid) == floatround(arrestPoints[i][3]) && GetPlayerInterior(playerid) == floatround(arrestPoints[i][4]))
	    {
	        if(PlayerInfo[targetid][pDonator] == 2)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 25 percent to %i minutes.", minutes, percent(minutes, 25));
	            minutes = percent(minutes, 75);
	        }
	        else if(PlayerInfo[targetid][pDonator] == 3)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 50 percent to %i minutes.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }

			strcpy(PlayerInfo[targetid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

   			format(PlayerInfo[targetid][pPrisonReason], MAX_PLAYER_NAME, "%i stars", PlayerInfo[targetid][pWantedLevel]);

		    PlayerInfo[targetid][pJailType] = 3;
    		PlayerInfo[targetid][pJailTime] = minutes * 60;
			PlayerInfo[targetid][pWantedLevel] = 0;
			PlayerInfo[targetid][pArrested]++;

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			new factionid = PlayerInfo[playerid][pFaction];
			FactionInfo[factionid][fsCash] += fine;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET cash = %i WHERE id = %i", FactionInfo[factionid][fsCash], factionid);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", PlayerInfo[targetid][pArrested], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

    		SM(targetid, COLOR_AQUA, "** You've been arrested for %i minutes, fine: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, fine);
            format(string, sizeof(string), "Dispatch"WHITE": %s %s has completed their arrest. %s has been sent to jail for %i weeks.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
			foreach(new j : Player)
			{
				if(IsLawEnforcement(j))
			    {
			    	SM(j, COLOR_LIGHTGREEN, string);
				}
			}
			return 1;
		}

	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any arrest points.");
    return 1;
}

CMD:wanted(playerid, params[])
{
    if(IsLawEnforcement(playerid) || PlayerHasJob(playerid, JOB_LAWYER))
 	{
 	    SCM(playerid, SERVER_COLOR, "Wanted Players:");
		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pWantedLevel] > 0)
		    {
		        SM(playerid, COLOR_GREY2, "(ID: %i) %s - Wanted Level: %i", i, GetRPName(i), PlayerInfo[i][pWantedLevel]);
			}
		}
 	}
    else
    {
		SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Lawyer or a Law Enforcement Officer.");
    }

	return 1;
}

CMD:hfind(playerid, params[])
{
	new targetid;
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hfind [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", PlayerInfo[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}
 	PlayerInfo[playerid][pFindTime] = 20;
  	PlayerInfo[playerid][pDetectiveCooldown] = 28;
   	SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerInfo[playerid][pFindTime]);
	PlayerInfo[playerid][pFindPlayer] = targetid;
	SavePlayerVariables(playerid);
	return 1;
}

CMD:find(playerid, params[])
{
	new targetid;

    if(!PlayerHasJob(playerid, JOB_DETECTIVE))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Detective.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /find [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", PlayerInfo[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}


	PlayerInfo[playerid][pFindTime] = 8;
	PlayerInfo[playerid][pDetectiveCooldown] = 300;

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerInfo[playerid][pFindTime]);

	PlayerInfo[playerid][pFindPlayer] = targetid;
	SavePlayerVariables(playerid);
	return 1;
}

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /frisk [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerUseAnims(playerid) == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command now.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pDuty] == 1)
	{
	    FriskPlayer(playerid, targetid);
	}
	else if(PlayerInfo[targetid][pTied])
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    PlayerInfo[targetid][pFriskOffer] = playerid;

	    SM(targetid, COLOR_AQUA, "** %s is attempting to frisk you for illegal items. (/accept frisk)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "** You have sent a frisk offer to %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /take [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Pot, Crack, Meth, Painkillers, CarLicense");
	    SCM(playerid, COLOR_WHITE, "Available options: DirtyCash, GunLicense, Materials, Mask");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(!PlayerInfo[targetid][pTied] && !PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pInjured])
	{
		return SCM(playerid, COLOR_SYNTAX, "That player isn't cuffed or tied or injured.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's weapons.", GetRPName(playerid), GetRPName(targetid));

	    SM(targetid, COLOR_AQUA, "%s has taken your weapons.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!PlayerInfo[targetid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no pot on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's pot.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of pot.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPot]);

		new factionid = PlayerInfo[playerid][pFaction];
		FactionInfo[factionid][fsPot] += PlayerInfo[targetid][pPot];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET pot = %i WHERE id = %i", FactionInfo[factionid][fsPot], factionid);
		mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!PlayerInfo[targetid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no Crack on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's Crack.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of Crack.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pCrack]);

		new factionid = PlayerInfo[playerid][pFaction];
		FactionInfo[factionid][fsCrack] += PlayerInfo[targetid][pCrack];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET crack = %i WHERE id = %i", FactionInfo[factionid][fsCrack], factionid);
		mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCrack] = 0;
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[targetid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no materials on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's materials.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i materials.", GetRPName(playerid), PlayerInfo[targetid][pMaterials]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMaterials]);

		new factionid = PlayerInfo[playerid][pFaction];
		FactionInfo[factionid][fsMats] += PlayerInfo[targetid][pMaterials];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET materials = %i WHERE id = %i", FactionInfo[factionid][fsMats], factionid);
		mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMaterials] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[targetid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no meth on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's meth.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMeth]);

		new factionid = PlayerInfo[playerid][pFaction];
		FactionInfo[factionid][fsMeth] += PlayerInfo[targetid][pMeth];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET meth = %i WHERE id = %i", FactionInfo[factionid][fsMeth], factionid);
		mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[targetid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's painkillers.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPainkillers]);

		new factionid = PlayerInfo[playerid][pFaction];
		FactionInfo[factionid][fsPainkiller] += PlayerInfo[targetid][pPainkillers];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET painkiller = %i WHERE id = %i", FactionInfo[factionid][fsPainkiller], factionid);
		mysql_tquery(connectionID, queryBuffer);
	
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[targetid][pCarLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no driving license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's drivers license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCarLicense] = 0;
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(!PlayerInfo[targetid][pWeaponLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no gun license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's gun license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your gun license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pWeaponLicense] = 0;
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(!PlayerInfo[targetid][pDirtyCash])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no dirty cash on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's dirty cash.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your dirty cash.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pDirtyCash] = 0;
	}
	else if(!strcmp(option, "mask", true))
	{
		if(!PlayerInfo[targetid][pMask])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't not have any mask with them");
		}

		PlayerInfo[targetid][pMask] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's Mask.", GetRPName(playerid), GetRPName(targetid));
	    
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(targetid, COLOR_AQUA, "%s has taken your Mask.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) Mask.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ticket [playerid] [amount] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't ticket yourself.");
	}
	if(!(100 <= amount <= 50000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The ticket amount must range between $100 and $50,000.");
	}

	SM(targetid, COLOR_AQUA, "** %s writes you a $%i ticket for %s.", GetRPName(playerid), amount, reason);
	SM(playerid, COLOR_AQUA, "** You have ticketed $%i to %s for %s.", amount, GetRPName(targetid), reason);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s writes up a ticket and gives it to %s.", GetRPName(playerid), GetRPName(targetid));

	GivePlayerCash(targetid, -amount);

	new factionid = PlayerInfo[playerid][pFaction];

	AddToTaxVault(percent(amount, 50));
	FactionInfo[factionid][fsCash] += percent(amount, 50);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET cash = %i WHERE id = %i", FactionInfo[factionid][fsCash], factionid);
	mysql_tquery(connectionID, queryBuffer);

	Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gov [text]");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_POLICE:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
        case FACTION_GOVERNMENT:
		{
	        SCMA(COLOR_WHITE, "---------- * Government News Announcement * ----------");
	        SMA(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_FEDERAL:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_ARMY:
		{
	        SCMA(COLOR_WHITE, "---------- * Army Announcement * ----------");
	        SMA(COLOR_DARKGREEN, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		default:
		{
			return NotAuth(playerid);
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    if(gettime() - PlayerInfo[playerid][pLastRam] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use ram every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastRam]));
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				PlayerInfo[playerid][pLastRam] = gettime();
		    	return 1;
			}
		}
	}

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's house door.", GetRPName(playerid), HouseInfo[id][hOwner]);
		PlayerInfo[playerid][pLastRam] = gettime();
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's business door.", GetRPName(playerid), BusinessInfo[id][bOwner]);
		PlayerInfo[playerid][pLastRam] = gettime();
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's garage door.", GetRPName(playerid), GarageInfo[id][gOwner]);
		PlayerInfo[playerid][pLastRam] = gettime();
	}
	else if((id = Gate_Nearest(playerid)) >= 0)
	{
		if(strlen(GateData[id][gatePass]) < 1)
		{
	        return SCM(playerid, COLOR_SYNTAX, "This gate is unlocked. You don't need to ram the it.");
		}
		if(GateData[id][gateOpened])
		{
	        return SCM(playerid, COLOR_SYNTAX, "This gate is already opened.");
		}
		Gate_Operate(id);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams the gate and it breaks down.", GetRPName(playerid));
		PlayerInfo[playerid][pLastRam] = gettime();
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /deploy [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spikestrip, Cone, Roadblock, Barrel, Flare, Speedbreak");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	} else if(!strcmp(type, "speedbreak", true)) {
	    type_id = DEPLOY_SPEEDBREAK;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}

CMD:undeployall(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed all deployed objects.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}

CMD:destroysirens(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	
	for(new i=0; i<MAX_VEHICLES; i++)
    {
		if(sirenInfo[i][useAttach])
		{
			DestroyObject(sirenInfo[i][attachObject]);
			sirenInfo[i][attachObject] = INVALID_OBJECT_ID;
			sirenInfo[i][useAttach] = false;
		}
    }
    
	SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has destroyed all sirens.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}


CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE || DeployInfo[i][dType] == DEPLOY_SPEEDBREAK) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any deployed objects.");
	return 1;
}

CMD:aundeploy(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE || DeployInfo[i][dType] == DEPLOY_SPEEDBREAK) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any deployed objects.");
	return 1;
}

CMD:gb(playerid, params[]) return callcmd::gbackup(playerid, params);

CMD:gbackup(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot call for backup when you are dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
 		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(GetPlayerInterior(playerid) != 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't request for backup inside interiors.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their walkie-talkie to send a beacon signal", GetRPName(playerid));
		new string[256];
		format(string, sizeof(string), "** %s %s is requesting backup in %s (marked on map). **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	SendGangMessage(PlayerInfo[playerid][pGang], COLOR_AQUA, string);
		UpdateBackup(playerid);
		SetTimerEx("ClearBackup", 180000, false, "ii", playerid, 1);
	}
	else
	{
		new string[256];
		format(string, sizeof(string), "** %s %s has cancelled their backup request. **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid));
    	SendGangMessage(PlayerInfo[playerid][pGang], COLOR_AQUA, string);
	    ClearBackup(playerid, 0);
	}
	return 1;
}

CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(GetPlayerInterior(playerid) != 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't request for backup inside interiors.");
	}

	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
		SetTimerEx("ClearBackup", 180000, false, "ii", playerid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their walkie-talkie to send a backup signal", GetRPName(playerid));

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));

		UpdateBackup(playerid);
	}

	else
	{
		ClearBackup(playerid, 0);

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	}
	return 1;
}

forward ClearBackup(playerid, timer);
public ClearBackup(playerid, timer)
{
	if(PlayerInfo[playerid][pBackup] == 1)
	{
		PlayerInfo[playerid][pBackup] = 0;
		if(PlayerInfo[playerid][pGang] != -1)
		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
				{
					SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
				}
			}
		}
		else if(IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_GOVERNMENT)
		{
			foreach(new i : Player)
			{
				if(IsLawEnforcement(i) || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT)
				{
					SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
				}
			}
		}
		if(timer == 1)
			SCM(playerid, COLOR_SYNTAX, "Your backup request has been cancelled automatically.");
		else
			SCM(playerid, COLOR_SYNTAX, "You've cancelled your backup request.");
	}
	return 1;
}

CheckMDCVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vFactionType] == 1)
    {
        return 1;
    }
    else if(VehicleInfo[vehicleid][vFactionType] == 4)
    {
        return 1;
    }
    else if(VehicleInfo[vehicleid][vFactionType] == 6)
    {
        return 1;
    }
    else if(VehicleInfo[vehicleid][vFactionType] == 9)
    {
        return 1;
    }
    else if(IsACruiser(vehicleid))
    {
        return 1;
    }
	else
	{
	    return 0;
	}
}

CMD:lastcharges(playerid, params[])
{
    new targetid;
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastcharges [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPVarInt(playerid, "lastcharges", 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);

	return 1;
}

CMD:mdc(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1621.16, 158801, 10.84)) && (!CheckMDCVehicle(GetPlayerVehicleID(playerid))) && (GetPlayerInterior(playerid) != 1) && (GetPlayerVirtualWorld(playerid) != 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a law enforcement car or the police station.");
	}

	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
	return 1;
}

CMD:releasejail(playerid, params[])
{
	new targetid, reason[256];
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pFactionRank] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not high rank enough to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1621.16, 158801, 10.84)) && (!CheckMDCVehicle(GetPlayerVehicleID(playerid))) && (GetPlayerInterior(playerid) != 1) && (GetPlayerVirtualWorld(playerid) != 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a law enforcement car or the police station.");
	}
	if(sscanf(params, "us[256]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /releasejail [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pJailType] != 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not IC jailed.");
	}
	PlayerInfo[targetid][pJailTime] = 1;
	SM(targetid, COLOR_WHITE, "You were released from prison by %s %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_RED, "Dispatch: %s were released from prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
		}
	}
	return 1;
}

CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /clearwanted [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1607.5424,1579.0226,10.8359)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or at the SFPD Locker.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't clear yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	if(!(10 <= amount <= 5000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $10 to $5000.");
	}
	if(VehicleInfo[vehicleid][vTickets] >= 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has over $5000 in tickets. You can't add anymore.");
	}

	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s writes up a $%i ticket and attaches it to the %s.", GetRPName(playerid), amount, GetVehicleName(vehicleid));
	return 1;
}

CMD:siren(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), siren;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(sscanf(params, "i", siren))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /siren [0 = Off, 1 = Big, 2 = Small]");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle cannot have a siren attached to it.");
	}
	if(siren == 1)
	{
		if(attInfo[GetVehicleModel(vehicleid) - 400][_attPos] != -1.0)
		{
			if(sirenInfo[vehicleid][useAttach])
			{
				DestroyObject(sirenInfo[vehicleid][attachObject]);
				sirenInfo[vehicleid][attachObject] = INVALID_OBJECT_ID;
				sirenInfo[vehicleid][useAttach] = false;
			}
		
			sirenInfo[vehicleid][attachObject] =  CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0);
			sirenInfo[vehicleid][useAttach] = true;
			AttachObjectToVehicle(sirenInfo[vehicleid][attachObject], GetPlayerVehicleID(playerid), -0.0, -0.39, attInfo[GetVehicleModel(vehicleid) - 400][_attPos], 0.0, 0.0, 0.0);
			SCM(playerid, COLOR_WHITE, "Succesfully attached a Big Siren on this vehicle.");
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "This vehicle does not support a Big Siren.");
		}
	}
	else if(siren == 2)
	{
		if(attInfo[GetVehicleModel(vehicleid) - 400][_attPos] != -1.0)
		{
			if(sirenInfo[vehicleid][useAttach])
			{
				DestroyObject(sirenInfo[vehicleid][attachObject]);
				sirenInfo[vehicleid][attachObject] = INVALID_OBJECT_ID;
				sirenInfo[vehicleid][useAttach] = false;
			}

			sirenInfo[vehicleid][attachObject] =  CreateObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
			sirenInfo[vehicleid][useAttach] = true;
			AttachObjectToVehicle(sirenInfo[vehicleid][attachObject], GetPlayerVehicleID(playerid), -0.0, -0.39, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.1, 0.0, 0.0, 0.0);
			SCM(playerid, COLOR_WHITE, "Succesfully attached a Small Siren on this vehicle.");
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "This vehicle does not support a Small Siren.");
		}
	}
	else if(siren == 0)
	{
		if(sirenInfo[vehicleid][useAttach])
		{
			DestroyObject(sirenInfo[vehicleid][attachObject]);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			sirenInfo[vehicleid][attachObject] = INVALID_OBJECT_ID;
			sirenInfo[vehicleid][useAttach] = false;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "This vehicle does not have any siren attached to it");
		}
	}
	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid = GetNearbyVehicle(playerid);

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_GREY2, "You must be onfoot in order to use this command.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}

	new count = 0;

	for(new j = 0; j < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); j ++)
	{
	    if(VehicleInfo[vehicleid][vWeapons][j])
	    {
	    	count++;
		}
	}

    SCM(playerid, SERVER_COLOR, "Trunk Balance:");
    SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
	SM(playerid, SERVER_COLOR, "Vehicle Info:");
	new owner[MAX_PLAYER_NAME], gang[256];
	if(VehicleInfo[vehicleid][vOwnerID] != 0)
	{
   		format(owner, sizeof(owner), "%s", VehicleInfo[vehicleid][vOwner]);
	}
	else
	{
	    strcpy(owner, "Nobody", MAX_PLAYER_NAME);
	}
	if(VehicleInfo[vehicleid][vGang] == -1)
	{
		strcpy(gang, "No Gang", 256);
	}
	else
	{
		format(gang, sizeof(gang), "{%06x}%s", GangInfo[VehicleInfo[vehicleid][vGang]][gColor] >>> 8, GangInfo[VehicleInfo[vehicleid][vGang]][gName]);
	}

	SM(playerid, COLOR_GREY2, "Vehicle Owner: %s | Vehicle Gang: %s", owner, gang);
	if(count != 0)
	{
		SCM(playerid, SERVER_COLOR, "Trunk Weapons:");
    	for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
	    {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
		        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s prys open the trunk of the %s and takes a look inside.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid = GetNearbyVehicle(playerid), option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vtake [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Pot, Crack, Meth, Painkillers");
	    return 1;
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;
		VehicleInfo[vehicleid][vWeapons][3] = 0;
		VehicleInfo[vehicleid][vWeapons][4] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the weapons from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the pot from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of pot from the trunk.", VehicleInfo[vehicleid][vPot]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of pot from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the Crack from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of Crack from the trunk.", VehicleInfo[vehicleid][vCrack]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of Crack from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCrack] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the meth from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the painkillers from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:firstaid(playerid, params[])
{
	return callcmd::heal(playerid, params);
}

CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetClosestCar(playerid);
	new Float:vX, Float:vY, Float:vZ;
	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /stretcher [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 8.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}
	GetVehiclePos(vehicleid, vX, vY, vZ);
	if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) > 8.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be close you an ambulance.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT && GetVehicleModel(vehicleid) != 416 && GetVehicleModel(vehicleid) != 490)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be close to an ambulance and on foot.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        PlayerInfo[targetid][pVehicleCount] = 0;
	        PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        Freeze(targetid);
	        
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places %s on a stretcher in the Ambulance.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}

CMD:deliverpt(playerid, params[])
{
	new targetid, amount = 2000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deliverpt [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1257.2606, 1715.9121, 1061.1492))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

    PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pDelivered] = 0;
	PlayerInfo[playerid][pTotalPatients]++;
	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
	    SCM(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
	}
	else
	{
		SCM(targetid, COLOR_DOCTOR, "You have been billed $200 for your stay. You also keep all of your weapons!");
	}

	ClearAnimations(targetid);
	new rand = random(sizeof(hospitalspawns));
	TeleportToCoords(targetid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2], hospitalspawns[rand][3], 1, HOSPITAL_ALLSAINTS, true, false);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -200);
		GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$200", 5000, 1);
	}
	
	SetPlayerHealth(targetid, PlayerInfo[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, PlayerInfo[targetid][pSpawnArmor]);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	if(PlayerInfo[targetid][pHunger] < 80)
	{
		PlayerInfo[targetid][pHunger] += 5;
	}
	if(PlayerInfo[targetid][pThirst] < 80)
	{
		PlayerInfo[targetid][pThirst] += 5;
	}
	SM(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned "CXRP"$%i{CCFFFF} on your paycheck.", GetRPName(targetid), amount);
	return 1;
}

// CMD:deliverpt(playerid, params[])
// {
// 	new targetid;

// 	if(GetFactionType(playerid) != FACTION_MEDIC)
//     {
//         return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
// 	}
// 	if(PlayerInfo[playerid][pDuty] == 0)
// 	{
// 		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
// 	}
// 	if(sscanf(params, "u", targetid))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deliverpt [playerid]");
// 	}
// 	if(IsPlayerNPC(targetid))
// 	{
// 		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
// 	}
//     if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2698.4138, 604.8406, 14.4531))
//     {
//         return SCM(playerid, COLOR_SYNTAX, "You are not in range of any delivery points at the hospital.");
// 	}
// 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
// 	}
// 	if(targetid == playerid)
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
// 	}
// 	if(!PlayerInfo[targetid][pInjured])
// 	{
// 	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
// 	}

//     PlayerInfo[targetid][pInjured] = 0;
// 	PlayerInfo[targetid][pDelivered] = 0;
// 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
// 	PlayerInfo[targetid][pSurgery] = true;

// 	TeleportToCoords(targetid, 1258.0415, 1684.5359, 1061.8871, 270.2967, 1, 1, true, false);
// 	Freeze(targetid);
// 	ApplyAnimation(targetid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
// 	Freeze(targetid);
// 	SetCameraBehindPlayer(targetid);
	
// 	SetPlayerHealth(targetid, 5.0);
// 	SetScriptArmour(targetid, 0.0);

// 	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "Surgery Needed!\n(( Type /surgery to begin ))");
// 	PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
// 	Dyuze(targetid, "Surgery Required!", "You need a surgery from a doctor.");
// 	SCM(targetid, COLOR_WHITE, "You've been delivered to hospital by an EMS, you need a surgery now to get recovered.");
// 	SCM(targetid, COLOR_WHITE, "Note: If you don't see any doctor here to help you, use /callsurg to call a doctor");
// 	SCM(playerid, COLOR_DOCTOR, "You've successfully delivered a patient to hospital, go and do their surgery inside hospital.");
// 	return 1;
// }

// CMD:callsurg(playerid, params[])
// {
// 	if(!PlayerInfo[playerid][pSurgery])
// 	{
// 		return SCM(playerid, COLOR_GREY, "You don't need a surgery now.");
// 	}
// 	if(gettime() - PlayerInfo[playerid][pLastCallSurg] < 30)
// 	{
// 		return SM(playerid, COLOR_SYNTAX, "You can only call a doctor every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastCallSurg]));
// 	}
// 	new count=0;
// 	foreach(new i : Player)
// 	{
// 		if(IsPlayerConnected(i) && GetFactionType(i) == FACTION_MEDIC)
// 		{
// 			count++;
// 			SM(i, COLOR_DOCTOR, "CH: %s is requesting for an urgent surgery, please respond to them ASAP!", GetRPName(playerid));
// 		}
// 	}
// 	if(count == 0)
// 	{
// 		SCM(playerid, COLOR_WHITE, "Unfortunately, there's currently no doctors in town. Sending request to other hospitals!");
// 		HTTP(playerid, HTTP_POST, "discord.com/api/webhooks/991370314992861184/umHEPig1QFsgHrhW-rX2QeKmEfqm4HJP-GQk_j5QNs1AcUZ5YBLzN2lmK9xi6JQ4Ivus", "", "");
// 	}
// 	return 1;
// }

CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	SCM(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(PlayerInfo[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(PlayerInfo[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SM(playerid, COLOR_SYNTAX, "(%i) %s - Location: %s - Medic: %s", i, GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SCM(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid, price;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(gettime() - PlayerInfo[playerid][pLastHeal] < 20)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only heal players every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastHeal]));
	}
	if(sscanf(params, "ui", targetid, price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heal [playerid] [price]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(GetHealth(targetid) > 100)
	{
		return SCM(playerid, COLOR_SYNTAX, "Specified target is already on 100 HP.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(price < 500) return SCM(playerid, COLOR_GREY2, "Price can't be lower than 500$.");
	if(price > 1000) return SCM(playerid, COLOR_GREY2, "Price can't be higher than 1000$.");

	PlayerInfo[targetid][pMedOfferedby] = playerid;
	PlayerInfo[targetid][pMedOfferd] = targetid;
	PlayerInfo[targetid][pMedPrice] = price;

	SM(targetid, COLOR_AQUA, "** %s offered you a firstaid kit for $%i (/accept kit).", GetRPName(playerid), price);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy a firstaid kit for $%i.", GetRPName(targetid), price);
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /getpt [playerid]");
		}
		if(IsPlayerNPC(targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SCM(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!PlayerInfo[targetid][pInjured])
		    {
		        SCM(playerid, COLOR_SYNTAX, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(PlayerInfo[targetid][pAcceptedEMS]))
			{
				if(PlayerInfo[targetid][pJailTime] > 0) return SCM(playerid, COLOR_SYNTAX, "You can't use this command on jailed players.");
				SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetRPName(playerid), GetRPName(targetid));
				SM(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetRPName(targetid));
				SM(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				PlayerInfo[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[]) { return callcmd::stretcher(playerid, params); }
CMD:movept(playerid, params[]) { return callcmd::drag(playerid, params); }

CMD:news(playerid, params[])
{
    if(!IsNews(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] != 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 1+ to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /news [text]");
	}
	foreach(new i : Player)
	{
		if(!PlayerInfo[playerid][pToggleNews])
		{
 			SM(i, 0x489348FF, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(!IsNews(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 4)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 4);
	}

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /live [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is banned from live interviews.");
	}
	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is on a phone call at the moment.");
	}

	PlayerInfo[targetid][pLiveOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s offered you a live interview. (/accept live)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have offered %s a live interview.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(!IsNews(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
	}

    if(PlayerInfo[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not doing a live interview.");
	}

	SCM(playerid, COLOR_AQUA, "You have ended the live interview.");
	SM(PlayerInfo[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetRPName(playerid));

	PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(!IsNews(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /liveban [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}

	if(!PlayerInfo[targetid][pLiveMuted])
	{
		if(PlayerInfo[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	PlayerInfo[PlayerInfo[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	PlayerInfo[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		PlayerInfo[targetid][pLiveMuted] = 1;
		SM(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pLiveMuted] = 0;
		SM(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET livemuted = %i WHERE uid = %d", PlayerInfo[targetid][pLiveMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT && PlayerInfo[playerid][pAdmin] < 6)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0 && PlayerInfo[playerid][pAdmin] < 6)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1 && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settax [rate]");
	}
	if(!(1 <= amount <= 90))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The tax percentage must range from 1 to 90.");
	}

	Settings[gTax] = amount;

	format(string, sizeof(string), "Breaking News"WHITE": Mayor changed the income tax rate to %i percent.", amount);
	SMA(COLOR_LIGHTGREEN, string);

	SAM(COLOR_YELLOW, "AdmWarning: %s has adjusted the income tax rate to %i percent.", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	SaveServerInfo();
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /factionpay [factionid] (Use /factions for list.)");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || !FactionInfo[factionid][fType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if(FactionInfo[factionid][fType] == FACTION_GOVERNMENT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for government factions.");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
	}

	PlayerInfo[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxwithdraw [amount] [reason] ($%i available)", Settings[gVault]);
	}
	if(amount < 1 || amount > Settings[gVault])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the tax vault. The new balance is $%i.", amount, Settings[gVault]);
	SAM(COLOR_YELLOW, "AdmWarning: %s has withdrawn $%i from the tax vault, reason: %s", GetRPName(playerid), amount, reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1446.3340,-1136.3132,23.9580))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxdeposit [amount] ($%i available)", Settings[gVault]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the tax vault. The new balance is $%i.", amount, Settings[gVault]);
	SAM(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the tax vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

forward HitmanCall(playerid);
public HitmanCall(playerid)
{
	switch(GetPVarInt(playerid, "HMA"))
	{
		case 1:
		{
			SetPVarInt(playerid, "HMA", 2);
			SCM(playerid, COLOR_ORANGE, "[Unknown Operator]: "WHITE"Remember, we know your location, number and your name.");
			SetTimerEx("HitmanCall", 2000, false, "i", playerid);
		}
		case 2:
		{
			SetPVarInt(playerid, "HMA", 3);
			SCM(playerid, COLOR_ORANGE, "[Unknown Operator]: "WHITE"So, if you try troll here. You will have to face some dangarous consequences!");
			SetTimerEx("HitmanCall", 2000, false, "i", playerid);
		}
		case 3:
		{
			SetPVarInt(playerid, "HMA", 4);
			SCM(playerid, COLOR_ORANGE, "[Unknown Operator]: "WHITE"Your call will now be forwarded to our online Agents, they will speak to you in a bit.");
			SetTimerEx("HitmanCall", 1000, false, "i", playerid);
		}
		case 4:
		{
			DeletePVar(playerid, "HMA");
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && GetFactionType(i) == FACTION_HITMAN)
				{
					SCM(i, COLOR_ORANGE, "____ Hitman Contract Hotline Call ____");
					SM(i, COLOR_AQUA, "Name: "WHITE"%s", GetPlayerNameEx(playerid));
					SM(i, COLOR_AQUA, "Number: "WHITE"%i", PlayerInfo[playerid][pNumber]);
					SCM(i, COLOR_GREY, " ");
					SM(i, COLOR_WHITE, "Use "CXRP"/call %i"WHITE" to speak with the contractor. Make sure to passport!", PlayerInfo[playerid][pNumber]);
				}
			}
			SCM(playerid, COLOR_ORANGE, "[Unknown Operator]: "WHITE"Your call has been sent to all active Agents, soon you will get a call from them.");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
			{
				RemovePlayerAttachedObject(playerid, 9);
			}
		}

	}
	return 1;
}

CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /contract [playerid] [amount] [reason]");
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at least level 3+ to contract players.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't contract yourself.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only contract level 3+ players.");
	}
	if(!(30000 <= amount <= 10000000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $30,000 to $10,000,000.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money.");
	}
    if(!PlayerUseAnimsEx(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SM(i, COLOR_YELLOW, "** %s has contracted %s for $%i, reason: %s [/contracts]", GetRPName(playerid), GetRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	PlayerInfo[targetid][pContracted] += amount;
	GetPlayerName(playerid, PlayerInfo[targetid][pContractBy], MAX_PLAYER_NAME);
	format(PlayerInfo[targetid][pContractReason], 256, "%s", reason);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = \"%e\", contractreason = \"%e\" WHERE uid = %i", PlayerInfo[targetid][pContracted], PlayerInfo[targetid][pContractBy], PlayerInfo[targetid][pContractReason], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetRPName(targetid), amount, reason);
	Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
 	return 1;
}

CMD:dart(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return NotAuth(playerid);
	}

	new wep = GetScriptWeapon(playerid);

	if(wep != 34)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not holding a Sniper Rifle.");
	}

	if(PoisonDart[playerid])
	{
		PoisonDart[playerid] = false;
		SCM(playerid, COLOR_WHITE, "You've un-loaded your Sniper with a Poison Dart");
	}
	else
	{
		PoisonDart[playerid] = true;
		SCM(playerid, COLOR_WHITE, "You've loaded your Sniper with a Poison Dart");
	}
	return 1;
}

CMD:headshot(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return NotAuth(playerid);
	}

	new wep = GetScriptWeapon(playerid);

	if(wep != 34)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not holding a Sniper Rifle.");
	}
	if(HeadShotSystem[playerid])
	{
		HeadShotSystem[playerid] = false;
		SCM(playerid, COLOR_WHITE, "You've un-loaded your Sniper with a Hollow Point Bullet");
	}
	else
	{
		HeadShotSystem[playerid] = true;
		SCM(playerid, COLOR_WHITE, "You've loaded your Sniper with a Hollow Point Bullet");
	}
	return 1;
}

CMD:poison(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return NotAuth(playerid);
	}
	if(pGloves[playerid])
	{
		pGloves[playerid] = false;	
		SCM(playerid, COLOR_WHITE, "You've put away your Poisoned Gloves");
	}
	else
	{
		pGloves[playerid] = true;	
		SCM(playerid, COLOR_WHITE, "You've wore your Poisoned Gloves");
	}
	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Pending Contracts:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pContracted] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty Price: $%i | By: %s | Reason: %s", i, GetRPName(i), PlayerInfo[i][pContracted], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractReason]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhit [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has cancelled the contract on %s for $%i. **", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pContracted]);
	}

	new contractedby = GetPlayerID(PlayerInfo[targetid][pContractBy]);
	if(contractedby != INVALID_PLAYER_ID)
	{
		SM(contractedby, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contract has been denied, you got your money back");
		GivePlayerCash(contractedby, PlayerInfo[targetid][pContracted]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = -1 WHERE uid = %i", PlayerInfo[contractedby][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = 3, bank = bank + %i WHERE username = \"%e\"", PlayerInfo[targetid][pContracted], PlayerInfo[targetid][pContractBy]);
		mysql_tquery(connectionID, queryBuffer);
	}

	PlayerInfo[targetid][pContracted] = 0;
    strcpy(PlayerInfo[targetid][pContractBy], "Pending", MAX_PLAYER_NAME);
	strcpy(PlayerInfo[targetid][pContractReason], "None", 256);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Pending' WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid, alert;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "ui", targetid, alert))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takehit [playerid] [Alert Contractor 1/0]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}
	if(alert < 0 && alert > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Alert must be set to 1 or 0. 1 for true and 0 for false");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pContractTaken] == targetid)
	    {
	        return SCM(playerid, COLOR_GREY, "A Hitman has already taken that hit.");
	    }
	}
	PlayerInfo[playerid][pContractTaken] = targetid;
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has accepted the contract to kill %s for $%i. **", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pContracted]);
	SM(playerid, COLOR_AQUA, "You have taken the hit. You will receive $%i once you have assassinated "CXRP"%s{CCFFFF}.", PlayerInfo[targetid][pContracted], GetRPName(targetid));

	if(alert == 1)
		SCM(targetid, COLOR_YELLOW, "SMS from Unknown Hitman: BE AWARE!! Theres a bounty on your head, you'll be followed by a Hitman");

	new contractedby = GetPlayerID(PlayerInfo[targetid][pContractBy]);
	if(contractedby != INVALID_PLAYER_ID)
	{
		SM(contractedby, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contract has been accepted and being processed by a Hitman");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = -1 WHERE uid = %i", PlayerInfo[contractedby][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = 2 WHERE username = \"%e\"", PlayerInfo[targetid][pContractBy]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:pmask(playerid, params[])
{
	if(!PlayerInfo[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Mask.");
	}
	if(PlayerInfo[playerid][pAdminDuty] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 ||  PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "You can't use this while on admin duty.");

	if(Maskara[playerid] == 0)
	{
		Maskara[playerid] = 1;
		MaskaraID[playerid] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts on his/her mask.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
	}
	else
	{
    	Maskara[playerid] = 0;
		MaskaraID[playerid] = INVALID_PLAYER_ID;
		SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger takes off his/her mask.");
     	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		new string[128], count=0;
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Maskara[i] == 1)
				{
					count++;
				}
			}
		}
		if(count != 0)
		{
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					if(Maskara[i] == 1)
					{
						format(string, sizeof(string),"(ID: %d) %s",i, PlayerInfo[i][pUsername]);
						SCM(playerid, COLOR_WHITE, string);
					}
				}
			}
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "There is no masked player right now!");
		}
	}
	return 1;
}


CMD:propose(playerid, params[])
{
	new id, targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /propose [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
	}
	if(PlayerInfo[playerid][pCash] < 5000 || PlayerInfo[targetid][pCash] < 5000)
	{
		return SCM(playerid, COLOR_SYNTAX, "You both need to have atleast $5,000 to have a wedding.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're already married.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't marry yourself faggot.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $5,000. (/accept marriage)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a proposal for marriage.", GetRPName(targetid));
	return 1;
}


CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /divorce [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[playerid][pMarriedTo] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't even married.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[targetid][pID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't married to that person.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/accept divorce)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a request for divorce.", GetRPName(targetid));
	return 1;
}

CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /profile [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	new gender[10];
	switch(PlayerInfo[targetid][pGender])
	{
		case 1: strcpy(gender, "Male", 10);
		case 2: strcpy(gender, "Female", 10);
		case 3: strcpy(gender, "Shemale", 10);
		case 4: strcpy(gender, "Gay", 10);
		case 5: strcpy(gender, "Lesbian", 10);
		default: strcpy(gender, "Unknown", 10);
	}

	SM(playerid, SERVER_COLOR, "%s:", GetRPName(targetid));
	SM(playerid, COLOR_GREY2, "Gender: %s", gender);
	SM(playerid, COLOR_GREY2, "Age: %i years old", PlayerInfo[targetid][pAge]);

	if(PlayerInfo[targetid][pFaction] != -1)
	{
	    SM(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[PlayerInfo[targetid][pFaction]][fName]);
	    SM(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);
	}
	else
	{
	    SM(playerid, COLOR_GREY2, "Faction: None");
	}

	if(PlayerInfo[targetid][pContracted] > 0)
	{
		SM(playerid, COLOR_GREY2, "Contract: $%i", PlayerInfo[targetid][pContracted]);
		SM(playerid, COLOR_GREY2, "Last Contracter: %s", PlayerInfo[targetid][pContractBy]);
	}

	SM(playerid, COLOR_GREY2, "Completed Hits: %i", PlayerInfo[targetid][pCompletedHits]);
	SM(playerid, COLOR_GREY2, "Failed Hits: %i", PlayerInfo[targetid][pFailedHits]);
	return 1;
}

GetPlayerID(givenname[])
{
    new name[MAX_PLAYER_NAME];
    for(new x = 0, t = GetPlayerPoolSize(); x <= t; x++)
    {
        if(IsPlayerConnected(x))
        {
            GetPlayerName(x, name, MAX_PLAYER_NAME);
            if(!strcmp(givenname, name, false)) return x;
        }
    }
    return INVALID_PLAYER_ID;
}

CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(PlayerInfo[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPassportName]);
  		SetScriptSkin(playerid, PlayerInfo[playerid][pPassportSkin]);
		SCM(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pPassportLevel];
		PlayerInfo[playerid][pNumber] = PlayerInfo[playerid][pPassportPhone];
		PlayerInfo[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, number = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		if(PlayerInfo[playerid][pGang] >= 0)
			SendGangMessage(PlayerInfo[playerid][pGang], COLOR_AQUA, "(( %s %s has logged in. ))", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid));
		if(PlayerInfo[playerid][pAdmin] >= 1)
			SAM(COLOR_LIGHTRED, "AdmCmd: %s %s has logged in.", GetAdminRank(playerid), GetRPName(playerid));
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL && GetFactionType(playerid) != FACTION_POLICE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman or federal agent or police.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && PlayerInfo[playerid][pDivision] != 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not in P.B.I Division");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your level must range from 1 to 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pBombs])
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any bombs.");
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	PlayerInfo[playerid][pPlantedBomb] = 1;
	PlayerInfo[playerid][pBombObject] = CreateDynamicObject(19602, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;
	PlayerInfo[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too far away from your planted bomb.");
	}

	CreateExplosion(PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ], 11, 15.0);
    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

	if(PlayerInfo[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(PlayerInfo[playerid][pContractTaken], 10.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    SetPlayerHealth(PlayerInfo[playerid][pContractTaken], 0.0);
	    HandleContract(PlayerInfo[playerid][pContractTaken], playerid);
	}

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;

	SCM(playerid, COLOR_WHITE, "** You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return NotAuth(playerid);
	}
    if(gettime() - gLastSave < 359)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 6 minutes. Please wait %i more seconds.", 359 - (gettime() - gLastSave));
	}
	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetRPName(playerid));
	gLastSave = gettime();
	return 1;
}
CMD:forcesave(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:saveall(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no boombox in range.");
	}

	SM(playerid, COLOR_AQUA, "You have destroyed "CXRP"%s{CCFFFF}'s boombox.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:resetactiverobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	ResetRobbery();
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the active bank robbery.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbery(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	RobberyInfo[rTime] = 0;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer.", GetRPName(playerid));
	return 1;
}

CMD:resetrobbiz(playerid, params[])
{
	new businessid;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobbiz [businessid]");
	    return 1;
	}
	BusinessInfo[businessid][bRobbed] = 0;
	BusinessInfo[businessid][bRobbing] = 0;
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset business (ID: %d) the business robbery timer.", GetRPName(playerid), businessid);
	return 1;
}
CMD:resetrobhouse(playerid, params[])
{
	new businessid;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobhouse [businessid]");
	    return 1;
	}
	HouseInfo[businessid][hRobbed] = 0;
	HouseInfo[businessid][hRobbing] = 0;
	ReloadHouse(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[businessid][hRobbed], HouseInfo[businessid][hRobbing], HouseInfo[businessid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset house (ID: %d) the house robbery timer.", GetRPName(playerid), businessid);
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepayday [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced a payday for %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, impounded) VALUES(%i, \"%s\", %i, '%f', '%f', '%f', '%f', %i, %i, 0)", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s has given you your own "CXRP"%s{CCFFFF}. /vstorage to spawn it.", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "You have given %s their own "CXRP"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:ogivepveh(playerid, params[])
{
	new model[20], username[MAX_PLAYER_NAME], color1, color2;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]s[20]ii", username, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ogivepveh [username] [modelid/name] [color1] [color2]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is online, use /givepveh for it.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnGivePlayerVehicle", "issii", playerid, username, model, color1, color2);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedoublexp [playerid] [hours]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(hours < 1 && PlayerInfo[targetid][pDoubleXP] - hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't have under 0 hours of double XP.");
	}

	PlayerInfo[targetid][pDoubleXP] += hours;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %i hours of double XP to %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", PlayerInfo[targetid][pDoubleXP], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a random fire in %s.", GetRPName(playerid), GetZoneName(x, y, z));
	SCM(playerid, COLOR_SYNTAX, "You've been teleported to the fire location.");
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SCM(playerid, COLOR_SYNTAX, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		PlayerInfo[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SM(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 200.0;
			gFires++;

			return SCM(playerid, COLOR_SYNTAX, "Fire created!");
		}
	}

	SM(playerid, COLOR_SYNTAX, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /number [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[playerid][pPhonebook])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a phonebook.");
	}
	if(PlayerInfo[targetid][pPhone] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "Couldn't find that specified player on phonebook");
	}
	if(PlayerInfo[targetid][pNumber] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Specified player doesn't have a number. Buy the phone again to set a number!.");
	}

	SM(playerid, COLOR_GREY2, "(Name): "WHITE"%s"GREY", (Ph): "WHITE"%i", GetRPName(targetid), PlayerInfo[targetid][pNumber]);
	return 1;
}

CMD:takeboombox(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takeboombox [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!PlayerInfo[targetid][pBoombox])
	{
		return SCM(playerid, COLOR_SYNTAX, "Specified player doesn't have a boombox");
	}
	PlayerInfo[targetid][pBoombox] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", PlayerInfo[targetid][pBoombox], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SCM(targetid, COLOR_WHITE, "An admin just took your boombox.");
	SM(playerid, COLOR_WHITE, "You took %s's boombox", GetRPName(targetid));
	return 1;
}

CMD:giveboombox(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /giveboombox [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[targetid][pBoombox])
	{
		return SCM(playerid, COLOR_SYNTAX, "Specified player already has a boombox");
	}
	PlayerInfo[targetid][pBoombox] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", PlayerInfo[targetid][pBoombox], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SCM(targetid, COLOR_WHITE, "You just received a boombox from an Admin!");
	SM(playerid, COLOR_WHITE, "You gave %s a boombox", GetRPName(targetid));
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
    	if(GiftAllowed)
     	{
      		SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just sent a Gift to all players.", GetPlayerNameEx(playerid));
			GiftAllowed = 0;
			foreach(Player, i)
			{
			    GiftBox(playerid, i);
			}
		}
		else
		{
		    return SM(playerid, COLOR_GREY, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shakehand [playerid] [type (1-6)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type. Valid types range from 1 to 6.");
	}

	PlayerInfo[targetid][pShakeOffer] = playerid;
	PlayerInfo[targetid][pShakeType] = type;

	SM(targetid, COLOR_AQUA, "** %s has offered to shake your hand. (/accept handshake)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a handshake offer.", GetRPName(targetid));
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to drop weapons.");
	}
	if(PlayerInfo[playerid][pInjured] == 1 || PlayerInfo[playerid][pHospital] == 1 || PlayerInfo[playerid][pCuffed] == 1 || PlayerInfo[playerid][pTied] == 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command now!");
	}
	if(!weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to drop.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(GetHealth(playerid) < 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);

	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerInfo[playerid][pFaction]);
	if(PlayerInfo[playerid][pGang] != -1)
	{
		Streamer_SetExtraInt(objectid, E_OBJECT_GANG, PlayerInfo[playerid][pGang]);
	}
	else
	{
		Streamer_SetExtraInt(objectid, E_OBJECT_GANG, -1);

	}
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerInfo[playerid][pFaction]);
	if(PlayerInfo[playerid][pDonator] != 0)
	{
		Streamer_SetExtraInt(objectid, E_OBJECT_DONATOR, PlayerInfo[playerid][pDonator]);
	}
	else
	{
		Streamer_SetExtraInt(objectid, E_OBJECT_DONATOR, -1);
	}
	RemovePlayerWeapon(playerid, weaponid);
	SetTimerEx("DestroyDroppedGun", 300000, false, "i", objectid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s drops their %s on the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	SM(playerid, COLOR_AQUA, "You have dropped your "CXRP"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:pickupgun(playerid, params[]) return callcmd::grabgun(playerid, params);
CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to pickup weapons.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && PlayerInfo[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapon belongs to a specific faction. You may not pick it up.");
	    }
	    if(Streamer_GetExtraInt(i, E_OBJECT_DONATOR) != -1 && PlayerInfo[playerid][pDonator] < Streamer_GetExtraInt(i, E_OBJECT_DONATOR))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapons belongs to a higher level of donators. You may not pick it up.");
	    }

	    if(Streamer_GetExtraInt(i, E_OBJECT_GANG) != -1 && PlayerInfo[playerid][pGang] != Streamer_GetExtraInt(i, E_OBJECT_GANG))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapons belongs to a specific gang. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);

	    GiveWeapon(playerid, weaponid);
	    DestroyDynamicObject(i);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up a %s from the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have picked up a %s.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any dropped weapons.");
	return 1;
}

CMD:createsafezone(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(GetNearbySafeZone(playerid) >= 0 || GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a safe zone/turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create safezones indoors.");
	}

	PlayerInfo[playerid][pZoneType] = ZONETYPE_SAFE;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "SafeZone System", "You have entered safe zone creation mode. In order to create a safe zone you need\nto mark four points around the area you want your safe zone to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "CXRP"Confirm{A9C4E4} to set the safe zone spawn.", "Confirm", "Cancel");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pGangMod])
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pZoneCreation])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating any turf or safe zone at the moment.");
	}

    if(PlayerInfo[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMinX], y, z);
        PlayerInfo[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMinX], y, z, .playerid = playerid);
		SCM(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(PlayerInfo[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMinY], z);
        PlayerInfo[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMinY], z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(PlayerInfo[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMaxX], y, z);
        PlayerInfo[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMaxX], y, z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(PlayerInfo[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMaxY], z);
        SCM(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        PlayerInfo[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMaxY], z, .playerid = playerid);
        PlayerInfo[playerid][pZoneID] = GangZoneCreate(PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, PlayerInfo[playerid][pZoneID], 0x33CC33FF);

		if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_SAFE) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Safe Zone System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your safe zone. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}
	return 1;
}

CMD:zonecancel(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_SAFE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a safe zone at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Safe Zone creation cancelled.");
	return 1;
}

CMD:gotosafezone(playerid, params[])
{
	new zoneid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", zoneid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotosafezone [zoneid]");
	}
	if(!(0 <= zoneid < MAX_ZONES) || !SafeZone[zoneid][sExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Safe Zone.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, SafeZone[zoneid][sX], SafeZone[zoneid][sY], SafeZone[zoneid][sZ], 90.0, 0, 0, true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removesafezone(playerid, params[])
{
	new zoneid;

    if (PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", zoneid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removesafezone [zooneid]");
	}
	if(!(0 <= zoneid < MAX_ZONES) || !SafeZone[zoneid][sExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Safe Zone.");
	}

	GangZoneDestroy(SafeZone[zoneid][sGangZone]);
	DestroyDynamicArea(SafeZone[zoneid][sArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM safezones WHERE id = %i", SafeZone[zoneid][sID]);
	mysql_tquery(connectionID, queryBuffer);

	SafeZone[zoneid][sID] = 0;
	SafeZone[zoneid][sExists] = 0;
    SM(playerid, COLOR_AQUA, "** You have removed safe zone %i.", zoneid);
	return 1;
}

CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!PlayerInfo[playerid][pBoombox])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /boombox [place | pickup | play]");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "Boombox placed by:\n"CXRP"%s{F7A763}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    PlayerInfo[playerid][pBoomboxPlaced] = 1;
    	PlayerInfo[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	PlayerInfo[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        PlayerInfo[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a boombox on the ground.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}
    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up their boombox and switches it off.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

    	PlayerInfo[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!PlayerInfo[playerid][pMP3Player])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have an MP3 player.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any vehicle.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:gunlic(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1396.2080,-4.1093,1000.8535))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need atleast level 3 or higher to get a gun license");
	}
	if(PlayerInfo[playerid][pWeaponLicense])
	{
		return SCM(playerid, COLOR_SYNTAX, "You already have a Gun License!");
	}
	new string[2000];
	strcat(string, ""ORANGE"Welcome to Gun License buying station! Here you will be asked some question and if you can answer to those question accordingly and correctly\n");
	strcat(string, ""ORANGE"Then you will be given a Legel Gun License. With a Gun License you can hold several unique and cool guns legally.\n\n");
	strcat(string, ""WHITE"- Without a Gun License, you can legally hold 9mm and County Rifle (available inside Ammu-Nations).\n");
	strcat(string, ""WHITE"- While you have a Gun License, you can legally hold Ammu-Nation guns and any guns that are available in Arms Dealer Level 1, 2 & 3.\n");
	strcat(string, ""WHITE"- If you caught by police while holding those weapons while having a Gun License, then you will not be charged or fined.\n");
	strcat(string, ""WHITE"- If you shoot or use any weapons in public and caught by a police, they can take away all of your weapons and arrest you.\n");
	strcat(string, ""WHITE"- It also applies if you show or hold your guns in public and caught by a police like that.\n\n");
	strcat(string, ""WHITE"- (( OOC Rule: If you randomly shoot around public, it will be counted as Non-RP Behavior and you can be Admin prisoned for it ))\n");
	strcat(string, ""WHITE"- (( OOC Rule: If you kill someone or try to kill someone without any valid IC reason then you will be punished for DM ))\n");
	strcat(string, ""WHITE"- (( OOC Rule: Once you get a DM prison, you will be automatically warned once, if you reach 5 warnings then you will be auto banned. ))");
	ShowPlayerDialog(playerid, DIALOG_LGUN1, DIALOG_STYLE_MSGBOX, "Bangladesh Legal Gun License Station", string, "Next", "Cancel");
	return 1;
}

CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1396.2080,-4.1093,1000.8535))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pLevel] * 15000)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need at least $%i to change your name at your level.", PlayerInfo[playerid][pLevel] * 15000);
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}

    PlayerInfo[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /acceptname [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}
	if(PlayerInfo[targetid][pFreeNamechange] == 0 && PlayerInfo[targetid][pCash] < PlayerInfo[targetid][pLevel] * 15000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't afford the namechange.");
	}

	new cost = PlayerInfo[targetid][pLevel] * 15000;

	if(PlayerInfo[targetid][pFreeNamechange])
	{
		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's free namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange]);
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", PlayerInfo[targetid][pNameChange]);
		if(PlayerInfo[playerid][pLevel] == 1 && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			new playerIP[MAX_IP_SIZE], string[256];
			SavePlayerVariables(targetid);
			ResetPlayer(targetid);
			PlayerInfo[targetid][pLogged] = 0;
			GetPlayerIp(targetid, playerIP, sizeof(playerIP));
			Reconnecting[targetid] = true;
			format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
			format(string, sizeof(string), "banip %s", playerIP);
			SendRconCommand(string);
		}
		if(PlayerInfo[targetid][pFreeNamechange] == 2)
		{
		    SCM(targetid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's namechange to %s for %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange], AddCommas(cost));
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", PlayerInfo[targetid][pNameChange], AddCommas(cost));

        GivePlayerCash(targetid, -cost);
	}
	Namechange(targetid, GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyname [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}

	if(PlayerInfo[targetid][pFreeNamechange])
	{
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied %s's namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange]);
	SM(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", PlayerInfo[targetid][pNameChange]);

	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Pending Namechanges:");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pNameChange]))
	    {
	        SM(playerid, COLOR_GREY1, "(ID: %i) %s - Requested name: %s", i, GetRPName(i), PlayerInfo[i][pNameChange]);
		}
	}

	return 1;
}

CMD:releasecar(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 209.2578,-195.8627,1000.5235))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the DMV.");
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, tickets FROM vehicles WHERE ownerid = %i AND impounded = 1", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SHOW_IMPOUND, playerid);
	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	new factionid = 1;
	FactionInfo[factionid][fsCash] += percent(amount, 75);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET cash = %i WHERE id = %i", FactionInfo[factionid][fsCash], factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have paid $%i in unpaid tickets. This vehicle now has $%i left in unpaid tickets.", amount, VehicleInfo[vehicleid][vTickets]);
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}

	new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	SM(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
	SM(playerid, COLOR_GREY2, "(Owner: %s) - (Value: $%i) - (Tickets: $%i)", VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vTickets]);
	SM(playerid, COLOR_GREY2, "(Neon: %s) - (Trunk: %i/3) - (Health: %.1f) - (Fuel: %i.0)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2205.5740,1581.2896,999.9812))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the smuggle point.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 200)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcrate [seeds | ephedrine | crack]");
	}

	if(!strcmp(params, "seeds", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 1;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -600);
	    AddPointMoney(POINT_DRUGFACTORY, 300);

	    SetPlayerCheckpoint(playerid, -2456.8813, -124.2676, 26.0178, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $600 for a package of marijuana seeds. Deliver it to the marker.");
	}
	else if(!strcmp(params, "crack", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 2;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -600);
	    AddPointMoney(POINT_DRUGFACTORY, 300);

	    SetPlayerCheckpoint(playerid, -2730.3025, 76.1849, 4.3359, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $600 for a package of Crack. Deliver it to the marker.");
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 3;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -600);
	    AddPointMoney(POINT_DRUGFACTORY, 300);

	    SetPlayerCheckpoint(playerid, -2456.8813, -124.2676, 26.0178, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $600 for a package of raw ephedrine. Deliver it to the marker.");
	}

	return 1;
}

CMD:getwater(playerid, params[])
{
	new amount;
	new cost;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1184.4346, -1141.9376, 129.2188))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
	}
	if(sscanf(params, "i", amount))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /getwater [amount]");
	}
	if(PlayerInfo[playerid][pCash] < (cost = amount * 20))
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many seeds.");
	}
	PlayerInfo[playerid][pDrinks] += amount; 
	GivePlayerCash(playerid, -cost);
	AddPointMoney(POINT_DRUGDEN, cost/2);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watercan = %i WHERE uid = %i", PlayerInfo[playerid][pDrinks], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid, COLOR_AQUA, "You have purchased %i WaterCan for $%i.", amount, cost);
	return 1;
}

CMD:getdrug(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
	new option[10], amount, cost;
	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getdrug [seeds(pot) | Crack | ephedrine(raw meth)] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.3, -1184.4346, -1141.9376,129.2188))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There aren't that many seeds left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 20))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many seeds.");
		}
		if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		PlayerInfo[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost/2);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for $%i. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.6007, 1117.3717, 1083.8828))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much ephedrine left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 500))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		PlayerInfo[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost/2);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for $%i.", amount, cost);
	}
	else if(!strcmp(option, "crack", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2345.8250,-1185.5159,1031.9766))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCrackStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much Crack left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 500))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
		}

		gCrackStock -= amount;
		PlayerInfo[playerid][pCrack] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost/2);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of Crack for $%i.", amount, cost);
	}

	return 1;
}

/*CMD:plantpot(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
	if(PlayerInfo[playerid][pPotPlanted])
	{
		return SCM(playerid, COLOR_SYNTAX, "You have an active pot plant already.");
	}
	if(PlayerInfo[playerid][pSeeds] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPotA]);

	PlayerInfo[playerid][pSeeds] -= 10;
	PlayerInfo[playerid][pPotPlanted] = 1;
	PlayerInfo[playerid][pPotTime] = 60;
	PlayerInfo[playerid][pPotGrams] = 0;
	PlayerInfo[playerid][pPotObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ] - 1.8, 0.0, 0.0, PlayerInfo[playerid][pPotA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, potplanted = 1, pottime = %i, potgrams = %i, pot_x = '%f', pot_y = '%f', pot_z = '%f', pot_a = '%f' WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pPotTime], PlayerInfo[playerid][pPotGrams], PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ], PlayerInfo[playerid][pPotA], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s plants some seeds into the ground.", GetRPName(playerid));
	SCM(playerid, COLOR_YELLOW, "You have planted a pot plant. Every two minutes your plant will grow one gram of pot.");
	SCM(playerid, COLOR_YELLOW, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s inspects the plant.", GetRPName(playerid));
	        SM(playerid, COLOR_WHITE, "** This plant has so far grown %i grams of pot. It will be ready in %i/60 minutes.", PlayerInfo[i][pPotGrams], PlayerInfo[i][pPotTime]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You need to be crouched in order to pick a plant.");
			}
			if(PlayerInfo[i][pPotGrams] < 2)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(PlayerInfo[playerid][pPot] + PlayerInfo[i][pPotGrams] > GetPlayerCapacity(playerid, CAPACITY_WEED))
			{
			    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			}

			PlayerInfo[playerid][pPickPlant] = i;
			PlayerInfo[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crouches down and starts picking at the pot plant.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "** Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s seizes a pot plant weighing %i grams.", GetRPName(playerid), PlayerInfo[i][pPotGrams]);
	        DestroyPotPlant(i);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}*/

CMD:cookmeth(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Drug Dealer!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 333.5727, 1121.8536, 1083.8903))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in drug den. You can't use this command.");
	}
	if(!PlayerInfo[playerid][pCookMeth])
	{
		if(!PlayerInfo[playerid][pEphedrine])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!PlayerInfo[playerid][pMuriaticAcid])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}
 	    if(!PlayerInfo[playerid][pBakingSoda])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need baking soda in order to cook meth. Go buy some at 24/7.");
		}
		PlayerInfo[playerid][pCookMeth] = 1;
		PlayerInfo[playerid][pCookTime] = 15;
		PlayerInfo[playerid][pCookGrams] = 0;

		SCM(playerid, COLOR_YELLOW, "You have started cooking meth. 2 grams of ephedrine will turn into 2 grams of meth every 15 seconds.");
	    SCM(playerid, COLOR_YELLOW, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", PlayerInfo[playerid][pCookGrams] / 2, PlayerInfo[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

CMD:usecigar(playerid, params[])
{
	if(!PlayerInfo[playerid][pCigars])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any cigars left.");
	}

	PlayerInfo[playerid][pCigars]--;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lights up a cigar and starts to smoke it.", GetRPName(playerid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:drughelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "____ Drug Help ____");
	SM(playerid, COLOR_WHITE, "%sMeth: %sIt increases your armor & health by %i points as your Addict Level is %i.", CXRP, WHITE, 15 + (PlayerInfo[playerid][pAddictUpgrade] * 5), PlayerInfo[playerid][pAddictUpgrade]);
	SM(playerid, COLOR_WHITE, "%sPainkiller: %sIt increases your health by %i points as your Addict Level is %i.", CXRP, WHITE, 25 + (PlayerInfo[playerid][pAddictUpgrade] * 5), PlayerInfo[playerid][pAddictUpgrade]);
	SM(playerid, COLOR_WHITE, "%sCrack: %sIt increases your armor by %i points as your Addict Level is %i.", CXRP, WHITE, 10 + (PlayerInfo[playerid][pAddictUpgrade] * 5), PlayerInfo[playerid][pAddictUpgrade]);
	SM(playerid, COLOR_WHITE, "%sPot: %sIt increases your health by %i points as your Addict Level is %i.", CXRP, WHITE, 10 + (PlayerInfo[playerid][pAddictUpgrade] * 5), PlayerInfo[playerid][pAddictUpgrade]);
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - PlayerInfo[playerid][pLastDrug] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastDrug]));
	}
	if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /usedrug [meth | painkillers | pot | crack]");
		SCM(playerid, COLOR_WHITE, "TIP: Use /drughelp to see what they do.");
		return 1;
	}

	if(!strcmp(params, "meth", true))
	{
	    if(PlayerInfo[playerid][pMeth] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least two grams of meth.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0), (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 15.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 15.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pMeth] -= 2;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
			if(Poisonedby[playerid] != INVALID_PLAYER_ID)
			{
				SCM(playerid, COLOR_WHITE, "you're now cured from all kinds of poison");
				KillTimer(PoisonTimer[playerid]);
				PoisonMsg[playerid] = 0;
				Poisonedby[playerid] = INVALID_PLAYER_ID;
			}
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes two grams of meth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(PlayerInfo[playerid][pPainkillers] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have any painkillers left.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 25.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPainkillers] -= 1;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
	        PlayerInfo[playerid][pDrugsTime] = 30;
			if(Poisonedby[playerid] != INVALID_PLAYER_ID)
			{
				SCM(playerid, COLOR_WHITE, "you're now cured from all kinds of poison");
				KillTimer(PoisonTimer[playerid]);
				PoisonMsg[playerid] = 0;
				Poisonedby[playerid] = INVALID_PLAYER_ID;
			}
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pops a painkiller in their mouth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "pot", true))
	{
	    if(PlayerInfo[playerid][pPot] < 2) return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of pot.");
		GivePlayerHealth(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPot] -= 1;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
			if(Poisonedby[playerid] != INVALID_PLAYER_ID)
			{
				SCM(playerid, COLOR_WHITE, "you're now cured from all kinds of poison");
				KillTimer(PoisonTimer[playerid]);
				PoisonMsg[playerid] = 0;
				Poisonedby[playerid] = INVALID_PLAYER_ID;
			}
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes one gram of pot.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "crack", true))
	{
		if(PlayerInfo[playerid][pCrack] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of crack.");
		}

		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pCrack] -= 1;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
			if(Poisonedby[playerid] != INVALID_PLAYER_ID)
			{
				SCM(playerid, COLOR_WHITE, "you're now cured from all kinds of poison");
				KillTimer(PoisonTimer[playerid]);
				PoisonMsg[playerid] = 0;
				Poisonedby[playerid] = INVALID_PLAYER_ID;
			}
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s snorts one gram of crack.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:usepot(playerid) return callcmd::usedrug(playerid, "pot");
CMD:usecrack(playerid) return callcmd::usedrug(playerid, "crack");

CMD:rules(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "List of Rules", "Server\nTraffic Laws\nSpeed Laws", "Select", "Close");
}

CMD:showslaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showslaws [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"- This server has limitations. -\n");
	strcat(str, "1. 50 MPH if you are in the City.\n");
	strcat(str, "2. 70 MPH on the County roads.\n");
	strcat(str, "3. 90 MPH on the Highways and Interstates.\n");
	strcat(str, "4. Box trucks cannot exceed 50 MPH.\n");
	strcat(str, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Speed Enforcement Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows %s a sheet of paper with the Speed Laws.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showtlaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showtlaws [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"1. Drive on the right side of the road at all times or else you will be punished.\n");
	strcat(str, "2. Yield to emergency vehicles.\n");
	strcat(str, "3. Move over and slow down for stopped emergency vehicles.\n");
	strcat(str, "4. Turn your headlights on at night. Type (/lights) to turn them on.\n");
	strcat(str, "5. Wear your seatbelt or helmet at all times while driving. Use (/seatbelt) to wear it.\n");
	strcat(str, "6. Traffic lights are synced. Red is for Stop, Yellow is for Slow down and Green is for Go.\n");
	strcat(str, "7. Only follow traffic lights above a junction. (Marked with a solid white line).\n");
	strcat(str, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths.\n");
	strcat(str, "9. Pedistrians always have the right of way, regardless of the situation.\n");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Traffic Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows %s a sheet of paper with the Traffic Laws.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showlicenses(playerid, params[]) return callcmd::showid(playerid, params);
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	new gender[10];
	switch(PlayerInfo[playerid][pGender])
	{
		case 1: strcpy(gender, "Male", 10);
		case 2: strcpy(gender, "Female", 10);
		case 3: strcpy(gender, "Shemale", 10);
		case 4: strcpy(gender, "Gay", 10);
		case 5: strcpy(gender, "Lesbian", 10);
		default: strcpy(gender, "Unknown", 10);
	}
	new age[10];
	format(age, sizeof(age), "%i", PlayerInfo[playerid][pAge]);

	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	PlayerTextDrawSetPreviewModel(targetid, Card[targetid][5], PlayerInfo[playerid][pSkin]);
	PlayerTextDrawSetString(targetid, Card[targetid][12], gender);
	PlayerTextDrawSetString(targetid, Card[targetid][13], age);
	PlayerTextDrawSetString(targetid, Card[targetid][14], (PlayerInfo[playerid][pCarLicense]) ? ("~g~Yes") : ("~r~No"));
	PlayerTextDrawSetString(targetid, Card[targetid][15], (PlayerInfo[playerid][pWeaponLicense]) ? ("~g~Yes") : ("~r~No"));
	PlayerTextDrawSetString(targetid, Card[targetid][11], GetPlayerNameEx(playerid));
	
	new
	    dstring[12],
		date[6];

	getdate(date[0], date[1], date[2]);
	//       yr        mo       dt

	format(dstring, sizeof(dstring), "%02d/%02d/%i", date[2], date[1], date[0]);
	PlayerTextDrawSetString(targetid, Card[targetid][16], dstring);

	PlayerTextDrawShow(targetid, Card[targetid][0]);
	PlayerTextDrawShow(targetid, Card[targetid][1]);
	PlayerTextDrawShow(targetid, Card[targetid][2]);
	PlayerTextDrawShow(targetid, Card[targetid][3]);
	PlayerTextDrawShow(targetid, Card[targetid][4]);
	PlayerTextDrawShow(targetid, Card[targetid][5]);
	PlayerTextDrawShow(targetid, Card[targetid][6]);
	PlayerTextDrawShow(targetid, Card[targetid][7]);
	PlayerTextDrawShow(targetid, Card[targetid][8]);
	PlayerTextDrawShow(targetid, Card[targetid][9]);
	PlayerTextDrawShow(targetid, Card[targetid][10]);
	PlayerTextDrawShow(targetid, Card[targetid][11]);
	PlayerTextDrawShow(targetid, Card[targetid][12]);
	PlayerTextDrawShow(targetid, Card[targetid][13]);
	PlayerTextDrawShow(targetid, Card[targetid][14]);
	PlayerTextDrawShow(targetid, Card[targetid][15]);
	PlayerTextDrawShow(targetid, Card[targetid][16]);
	SetTimerEx("HideID", 5000, false, "i", targetid);
	return 1;
}

forward HideID(targetid);
public HideID(targetid)
{
	PlayerTextDrawHide(targetid, Card[targetid][0]);
	PlayerTextDrawHide(targetid, Card[targetid][1]);
	PlayerTextDrawHide(targetid, Card[targetid][2]);
	PlayerTextDrawHide(targetid, Card[targetid][3]);
	PlayerTextDrawHide(targetid, Card[targetid][4]);
	PlayerTextDrawHide(targetid, Card[targetid][5]);
	PlayerTextDrawHide(targetid, Card[targetid][6]);
	PlayerTextDrawHide(targetid, Card[targetid][7]);
	PlayerTextDrawHide(targetid, Card[targetid][8]);
	PlayerTextDrawHide(targetid, Card[targetid][9]);
	PlayerTextDrawHide(targetid, Card[targetid][10]);
	PlayerTextDrawHide(targetid, Card[targetid][11]);
	PlayerTextDrawHide(targetid, Card[targetid][12]);
	PlayerTextDrawHide(targetid, Card[targetid][13]);
	PlayerTextDrawHide(targetid, Card[targetid][14]);
	PlayerTextDrawHide(targetid, Card[targetid][15]);
	PlayerTextDrawHide(targetid, Card[targetid][16]);
	return 1;
}

CMD:licenses(playerid, params[])
{
	SCM(playerid, COLOR_GREY, "Your current licenses:");
	SM(playerid, COLOR_WHITE, "Driving License: %s", (PlayerInfo[playerid][pCarLicense]) ? (""CXRP"Yes") : (""CXRP"No"));
	SM(playerid, COLOR_WHITE, "Weapon License: %s", (PlayerInfo[playerid][pWeaponLicense]) ? (""CXRP"Yes") : (""CXRP"No"));
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /drop [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: Seeds, Ephedrine, Mask");
	    return 1;
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their weapons.", GetRPName(playerid));
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[playerid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [materials] [confirm] (You have %i materials.)", PlayerInfo[playerid][pMaterials]);
	    }

	    PlayerInfo[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their materials.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!PlayerInfo[playerid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no pot which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [pot] [confirm] (You have %i grams of pot.)", PlayerInfo[playerid][pPot]);
	    }

	    PlayerInfo[playerid][pPot] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their pot.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!PlayerInfo[playerid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no Crack which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [Crack] [confirm] (You have %i grams of Crack.)", PlayerInfo[playerid][pCrack]);
	    }

	    PlayerInfo[playerid][pCrack] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their Crack.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[playerid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [meth] [confirm] (You have %i grams of meth.)", PlayerInfo[playerid][pMeth]);
	    }

	    PlayerInfo[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their meth.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[playerid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [painkillers] [confirm] (You have %i painkillers.)", PlayerInfo[playerid][pPainkillers]);
	    }

	    PlayerInfo[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their painkillers.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!PlayerInfo[playerid][pCigars])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [cigars] [confirm] (You have %i cigars.)", PlayerInfo[playerid][pCigars]);
	    }

	    PlayerInfo[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their cigars.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!PlayerInfo[playerid][pSpraycans])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [spraycans] [confirm] (You have %i spraycans.)", PlayerInfo[playerid][pSpraycans]);
	    }

	    PlayerInfo[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their spraycanss.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!PlayerInfo[playerid][pSeeds])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [seeds] [confirm] (You have %i seeds.)", PlayerInfo[playerid][pSeeds]);
	    }

	    PlayerInfo[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their seeds.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!PlayerInfo[playerid][pEphedrine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", PlayerInfo[playerid][pEphedrine]);
	    }

	    PlayerInfo[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(!PlayerInfo[playerid][pMask])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You dont have any mask which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /drop [mask] [confirm]");
	    }

	    PlayerInfo[playerid][pMask] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their mask.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pGangMod])
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SCM(playerid, COLOR_SYNTAX, "You can only create graffiti points outside interiors.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerInfo[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:editgangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /editgangtag [graffiti id]");
	}
	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid graffiti ID.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);
	PlayerInfo[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully editing graffiti ID: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SM(playerid, COLOR_SYNTAX, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "You are not near any graffiti point.");

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pGangRank] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 3+ to tag a wall");
	}
	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", ""WHITE"White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n"CXRP"Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategang [name]");
	}

	for(new i = 1; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has setup gang {F7A763}%s{FF6347} in slot ID %i.", GetRPName(playerid), name, i);
	        SM(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes, Alliance");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = \"%e\" WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of gang ID %i to \"%s\".", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = \"%e\" WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the MOTD of gang ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /setgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = \"%e\" WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of gang ID %i to %s.", GetRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the level of gang ID %i to %i/3.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of gang ID %i.", GetRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the gang points of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [turftokens] [value] (this gang has %i tokens)", GangInfo[gangid][gTurfTokens]);
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 6; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, \"%e\") ON DUPLICATE KEY UPDATE name = \"%e\"", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of gang ID %i to \"%s\".", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the strikes of gang ID %i to %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(1 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the alliance of gang ID %i to gang %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}

CMD:removegang(playerid, params[])
{
	new gangid;

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", gangid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegang [gangid]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted gang %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SM(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s{FF6347} gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128];

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gangstrike [gangid] [reason]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);

	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SMA(COLOR_GREEN, "Gang News: %s has received their 1st strike, reason: %s", GangInfo[gangid][gName], reason);
		case 2: SMA(COLOR_GREEN, "Gang News: %s has received their 2nd strike, reason: %s", GangInfo[gangid][gName], reason);
		case 3: SMA(COLOR_GREEN, "Gang News: %s has received their 3rd strike, reason: %s", GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:setgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setgang [playerid] [gangid (0 = none)] [rank (optional)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(gangid < 0 || gangid > MAX_GANGS)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(gangid > 0 && !GangInfo[gangid][gSetup])
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 5)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(PlayerInfo[playerid][pCurrVoice] == 2 && PlayerInfo[playerid][pGang] != -1 && GangInfo[PlayerInfo[playerid][pGang]][gSetup])
	{
		SvDetachListenerFromStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
		lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
		PlayerInfo[playerid][pCurrVoice] = 0;
		SvAttachListenerToStream(lstream[playerid], playerid);
	}

	if(gangid == 0)
	{
	    PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their gang.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 5;
		}

		PlayerInfo[targetid][pGang] = gangid;
		PlayerInfo[targetid][pGangRank] = rankid;

		SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"%s{CCFFFF} in %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i WHERE uid = %i", gangid, rankid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[]) { return callcmd::gangs(playerid, params); }
CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		SCM(playerid, COLOR_WHITE, "Use /gangs [gang number] to see the list of members.");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Members Online:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid && PlayerInfo[i][pPassport] == 0)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[gangid][PlayerInfo[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}

CMD:turf(playerid, params[])
{
	new id = GetNearbyTurf(playerid), timeleft[256], name[64], color;
	if(id == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not inside any turf");
	}

	if(TurfInfo[id][tTime] > 0)
		format(timeleft, sizeof(timeleft), "%d Hours left", TurfInfo[id][tTime]);
	else
		format(timeleft, sizeof(timeleft), "0 Hours - Available to Capture");

	if(TurfInfo[id][tCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[TurfInfo[id][tCapturedGang]][gName]);
		color = GangInfo[TurfInfo[id][tCapturedGang]][gColor];
	}
	else if(TurfInfo[id][tCapturedGang] == -5)
	{
		name = "Shutdown by The Police";
		color = 0x8D8DFF00;
	}
	else
	{
		color = COLOR_FACTIONCHAT;
		name = "None";
	}

	SCM(playerid, COLOR_ORANGE, "_____ Current Turf Info _____");
	SM(playerid, COLOR_AQUA, "Name: "WHITE"%s", TurfInfo[id][tName]);
	SM(playerid, COLOR_AQUA, "Reward: "WHITE"%s", getTurftype(id));
	
	SM(playerid, COLOR_AQUA, "Claimed Org: {%06x}%s", color >>> 8, name);
	if(TurfInfo[id][tCapturedGang] >= 0)
		SM(playerid, COLOR_AQUA, "Captured by: "WHITE"%s", TurfInfo[id][tCapturedBy]);
	else
		SCM(playerid, COLOR_AQUA, "Captured by: "WHITE"Law Enforcement Officer");

	SM(playerid, COLOR_AQUA, "Time Left: "WHITE"%s", timeleft);
	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new iCount, szMessage[512], org[256];

	SCM(playerid, SERVER_COLOR, "Turf Info:");
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tExists])
		{
		    if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
			{
				if(IsLawEnforcement(TurfInfo[i][tCapturer]))
				{
					strcpy(org, "Law Enforcement", sizeof(org));
				}
				else
				{
					strcpy(org, GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gName], sizeof(org));
				}
				if(TurfInfo[i][tCaptureTime] == 1)
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), org);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
				else
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: %d minutes", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), org, TurfInfo[i][tCaptureTime]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a turf at this time.");
	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new iCount=0, szMessage[300];

	SCM(playerid, COLOR_ORANGE, "Point Info:");
	for(new i; i < MAX_POINTS; i++)
	{
		if(PointInfo[i][pExists])
		{
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID || strcmp(PointInfo[i][pCapturingUser], "none", true))
			{
				if(PointInfo[i][pCaptureTime] == 1)
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: Less than 1 minute", PointInfo[i][pName], PointInfo[i][pCapturingUser], GangInfo[PointInfo[i][pCapturingGang]][gName]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
				else
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: %i minutes", PointInfo[i][pName], PointInfo[i][pCapturingUser], GangInfo[PointInfo[i][pCapturingGang]][gName], PointInfo[i][pCaptureTime]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_GREY, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:points(playerid, params[])
{
	new name[280], color, string[2048];
	psstring = "";
	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists])
		{
			if(PointInfo[i][pCapturedGang] == -1)
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else if(!GangInfo[PointInfo[i][pCapturedGang]][gSetup])
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else
			{
				strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName], sizeof(name));
				color = GangInfo[PointInfo[i][pCapturedGang]][gColor];
			}
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%s | Time: %ih\n", string, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], AddCommas(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}
			else
			{
			    format(psstring, sizeof(psstring), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%s | Time: %ih\n", psstring, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], AddCommas(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}

		}
	}
	ShowPlayerDialog(playerid, DIALOG_POINTLIST, DIALOG_STYLE_LIST, ""CXRP"Points List", string, "Next", "Cancel");
	return 1;
}

CMD:safezones(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowSafeZones])
	{
        ShowSafeZonesForPlayer(playerid, true);
        SCM(playerid, COLOR_AQUA, "You will now see safe zones on your mini-map.");
	}
	else
	{
        ShowSafeZonesForPlayer(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will no longer see any safe zone on your mini-map.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /f [gang chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(pBlind[playerid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while blindfolded.");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x33CCFFAA, "(%i) %s %s: %.*s... **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x33CCFFAA, "(%i) %s %s: ...%s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x33CCFFAA, "(%i) %s %s: %s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ally [Alliance chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your gang isn't a part of an alliance.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] || PlayerInfo[i][pGang] == GangInfo[gangid][gAlliance])  && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: %.*s... **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: ...%s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** (A-Radio) %s %s: %s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(PlayerInfo[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}

CMD:fmdc(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 3);
	}
	new header[128], string[256];
	header = "Name\tPatients\tFire";

    foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_MEDIC)
	    {
			format(string, sizeof(string), "%s\n%s\t%i\t%i", header, GetRPName(i), PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
	    }
	}
	ShowPlayerDialog(playerid, 2151, DIALOG_STYLE_TABLIST_HEADERS, "Medic & Fire Dept. Statistics", string, "Ok", "Close");
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

    SCM(playerid, SERVER_COLOR, "Faction Members Online:");
    new string[256];

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
		{
		    new color = GetPlayerColor(i);
			if(PlayerInfo[i][pDivision] >= 0)
			{
				if(PlayerInfo[i][pAFK])
				{
			    	format(string, sizeof(string), "(%i) %s %s {%06x}%s "ORANGE"(AFK %d secs)", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetRPName(i), PlayerInfo[i][pAFKTime]);
				}
				else
				{
			    	format(string, sizeof(string), "(%i) %s %s {%06x}%s", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetRPName(i));
				}
			}
			else
		  	{
		  	    if(PlayerInfo[i][pAFK])
		  	    {
					format(string, sizeof(string), "(%i) %s {%06x}%s "ORANGE"(AFK %d secs)", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetRPName(i), PlayerInfo[i][pAFKTime]);
		  	    }
		  	    else
		  	    {
					format(string, sizeof(string), "(%i) %s {%06x}%s", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetRPName(i));
				}
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}

CMD:gmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

    SCM(playerid, SERVER_COLOR, "Gang Members Online:");
	new string[128];
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && PlayerInfo[i][pPassport] == 0)
        {
            new color = GetPlayerColor(i);
 	 		if(PlayerInfo[i][pAFK])
		  	{
				format(string, sizeof(string), "(%i) %s {%06x}%s "ORANGE"(AFK %d secs)", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], color >>> 8, GetRPName(i), PlayerInfo[i][pAFKTime]);
    		}
		  	else
		  	{
				format(string, sizeof(string), "(%i) %s {%06x}%s", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], color >>> 8, GetRPName(i));
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }
    return 1;
}

CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SCM(playerid, COLOR_WHITE, "Available options: MOTD, Stash, Stats, Rankname, Skin, Upgrade, NPC, Alliance");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a gang.");
		}
		if(PlayerInfo[targetid][pFaction] >= 0 && FactionInfo[PlayerInfo[targetid][pFaction]][fType] != FACTION_HITMAN)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is a part of a faction and therefore can't join your gang.");
		}
 		if(GangClaimingTurfs(PlayerInfo[playerid][pGang]) || GangCapturingPoints(PlayerInfo[playerid][pGang]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can not use invite if your gang is attending a turf or point.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_GREY2, "You need to be at least rank 5 to use this command.");
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /gang [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		GangInfo[PlayerInfo[playerid][pGang]][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", PlayerInfo[playerid][pGang], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[targetid][pGang]][PlayerInfo[targetid][pGangRank]], PlayerInfo[targetid][pGangRank]);

		PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		if(PlayerInfo[targetid][pCurrVoice] == 2)
		{
			SvDetachListenerFromStream(GangVC[PlayerInfo[targetid][pGang]], targetid);
			lstream[targetid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, targetid, COLOR_WHITE, " ");
			PlayerInfo[targetid][pCurrVoice] = 0;
			SvAttachListenerToStream(lstream[targetid], targetid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /gang [rank] [playerid] [rankid (0-5)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
	    if(!(0 <= rankid <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		PlayerInfo[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "CXRP"%s{CCFFFF} (%i).", GetRPName(playerid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "CXRP"%s{CCFFFF} (%i).", GetRPName(targetid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pGangMod])
		{
			return NotAuth(playerid);
		}
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5 to use this command.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [stash] [confirm] (Moves the gang stash.)");
		}

		GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]);
		GangInfo[PlayerInfo[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[PlayerInfo[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ], GangInfo[PlayerInfo[playerid][pGang]][gStashInterior], GangInfo[PlayerInfo[playerid][pGang]][gStashWorld], PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SM(playerid, COLOR_AQUA, "You have moved the gang stash to your location. /gstash to access your stash.");
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i AND passport = 0 ORDER BY gangrank DESC", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [quit] [confirm]");
	    }

	    SM(playerid, COLOR_AQUA, "You have quit %s as a "CXRP"%s{CCFFFF} (%i).", GangInfo[PlayerInfo[playerid][pGang]][gName], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);

		if(PlayerInfo[playerid][pCurrVoice] == 2)
		{
			SvDetachListenerFromStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
			lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
			PlayerInfo[playerid][pCurrVoice] = 0;
			SvAttachListenerToStream(lstream[playerid], playerid);
		}

	    PlayerInfo[playerid][pGang] = -1;
		PlayerInfo[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = \"%e\"", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [motd] [text]");
		}

		strcpy(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = \"%e\" WHERE id = %i", param, PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SCM(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5 to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 6; i ++)
	        {
	            if(isnull(GangRanks[PlayerInfo[playerid][pGang]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[PlayerInfo[playerid][pGang]][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[PlayerInfo[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, \"%e\") ON DUPLICATE KEY UPDATE name = \"%e\"", PlayerInfo[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "You have set the name of rank %i to "CXRP"%s{CCFFFF}.", rankid, rank);
	}
    else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(PlayerInfo[playerid][pGangRank] < 4)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 4+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [npc] [slot] [confirm]");
		    SCM(playerid, COLOR_GREY2, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ]);
				GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsA]);
				TeleportToCoords(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gArmsA], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), true, false);
		        GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ], GangInfo[PlayerInfo[playerid][pGang]][gArmsA], GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ]);
				GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugA]);
				TeleportToCoords(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gDrugA], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), true, false);
		        GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ], GangInfo[PlayerInfo[playerid][pGang]][gDrugA], GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}
	else if(!strcmp(option, "upgrade", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5 to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP "WHITE"+"CXRP" $50,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP "WHITE"+"CXRP" $50,000");
		strcat(string, "\nHelipad\tA custom helipad on selected location.\t{F7A763}1000 GP "WHITE"+"CXRP" $50,000");

		if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tUpgrade your gang's level to 2/3.\t{F7A763}4000 GP "WHITE"+"CXRP" $75,000");
		}
		else if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tUpgrade your gang's level to 3/3.\t{F7A763}8000 GP "WHITE"+"CXRP" $100,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[PlayerInfo[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5 to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 5)
	  	{
			return SCM(playerid, COLOR_SYNTAX, "The player you're offering to ally with must be Rank 5 in their gang!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SM(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetRPName(targetid));
			SM(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetRPName(playerid));
			PlayerInfo[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}

CMD:pstash(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Law Enforcement Officer");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 1.5, 233.4311,201.4753,1042.1980))
    {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of your Faction Stash.");
	}
	new id = PlayerInfo[playerid][pFaction];
	new string[256];
	format(string, sizeof(string), "Item\tAmount\nCash\t$%s\nMats\t%s\nPots\t%s\nCracks\t%s\nMeths\t%s\nPainkillers\t%s", AddCommas(FactionInfo[id][fsCash]), AddCommas(FactionInfo[id][fsMats]), AddCommas(FactionInfo[id][fsPot]), AddCommas(FactionInfo[id][fsCrack]), AddCommas(FactionInfo[id][fsMeth]), AddCommas(FactionInfo[id][fsPainkiller]));
	ShowPlayerDialog(playerid, DIALOG_PSTASH, DIALOG_STYLE_TABLIST_HEADERS, "SFPD Faction Stash", string, "Select", "Back");
	return 1;
}

CMD:gstash(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	if(PlayerInfo[playerid][pFaction] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]))
    {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of your gang stash.");
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	if(PlayerInfo[playerid][pBandana])
	{
 		PlayerInfo[playerid][pBandana] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off their bandana and puts it back to their pocket.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
 		PlayerInfo[playerid][pBandana] = 1;
       	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out their bandana and wraps it around their forehead.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:gbuyvehicle(playerid, params[])
{
	static string[4096];
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
    {
        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
    }

	PlayerInfo[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 544.8441,-1293.9301,17.2422))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
			format(string, sizeof(string), "%s\n%s\t%s\t"CXRP"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], AddCommas(vehicleArray[i][cARPrice]));
		}
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Dealership", string, "Buy", "Cancel");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of Vehicle Dealership. Use /finddealership for it");
	}

	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "** Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your gang has no vehicles which you can track.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}


CMD:grespawncars(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SCM(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Vehicle car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gsellcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your gang vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pGangMod])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createpoint [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2 (10) Mat Factory 3");
	    return 1;
	}
	if(!(0 <= type <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Pending", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 24;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;
			PointInfo[i][pCapturingGang] = -1;
			strcpy(PointInfo[i][pCapturingUser], "none", MAX_PLAYER_NAME);

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, \"%e\", %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created point {F7A763}%s{FF6347}.", GetRPName(playerid), name);
	        SM(playerid, COLOR_AQUA, "You have created point {F7A763}%s{CCFFFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 90.0, 0, 0, true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] <= 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = \"%e\" WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has moved the location of point %i.", GetRPName(playerid), pointid);
		SM(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = \"%e\" WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [gang] [gangid (0 = none)]");
		}
		if(gangid > 0 && gangid < MAX_GANGS && GangInfo[gangid][gSetup])
		{
			PointInfo[pointid][pCapturedGang] = gangid;
		}
		else if(gangid == 0)
		{
			PointInfo[pointid][pCapturedGang] = -1;
		}
		else
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == 0)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of point %i.", GetRPName(playerid), pointid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of point %i to %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to "CXRP"%s{CCFFFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [type] [value]");
           	SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of point %i to %i.", GetRPName(playerid), pointid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the profits of point %i to $%i.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SMA(COLOR_GREEN, "%s is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
			PointInfo[pointid][pCapturingGang] = -1;
			strcpy(PointInfo[pointid][pCapturingUser], "none", MAX_PLAYER_NAME);
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of point %i to %i hours.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] <= 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted point %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SM(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{CCFFFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

GangCapturingPoints(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_POINTS; x++)
	{
		if(PointInfo[x][pExists] && (PointInfo[x][pCapturer] != INVALID_PLAYER_ID || strcmp(PointInfo[x][pCapturingUser], "none", true)) && PointInfo[x][pTime] == 0)
		{
  			if(PointInfo[x][pCapturingGang] == gang)
  			{
          		capCount++;
  			}
		}
	}
	return capCount;
}

GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(PlayerInfo[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:capture(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 3+ in any gang at the moment.");
	}
	if(PlayerInfo[playerid][pCapturingPoint] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already attempting to capture the point.");
	}
	if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't capture a point now.");
	}
    if(GangCapturingPoints(PlayerInfo[playerid][pGang]) >= Settings[PointCapCount])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already capturing %i points.", Settings[PointCapCount]);
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 2.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by you.");
		    }
			new count=0, id2;
			foreach(new id : Player)
			{
				id2 = GetNearbyPoint(id, 30.0);
				if(id2 >= i && PlayerInfo[id][pGang] == PlayerInfo[playerid][pGang])
				{
					count++;
				}
			}
			if(count == 3 || count == 2 || count == 1 || count == 0)
			{
				return SCM(playerid, COLOR_SYNTAX, "You need atleast 4 members in bound in-order to start capturing.");
			}
		    if((PointInfo[i][pCapturer] != INVALID_PLAYER_ID || strcmp(PointInfo[i][pCapturingUser], "none", true)) && PointInfo[i][pCapturingGang] == PlayerInfo[playerid][pGang])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(PlayerInfo[x][pCapturingPoint] == i && PlayerInfo[x][pCaptureTime] > 0)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    PlayerInfo[playerid][pCapturingPoint] = i;
		    PlayerInfo[playerid][pCaptureTime] = 10;
			new string[4];
			format(string, sizeof(string), "~w~Capturing ~r~%i", PlayerInfo[playerid][pCaptureTime]);
			GameTextForPlayer(playerid,string,1000,4);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPointX], PlayerInfo[playerid][pPointY], PlayerInfo[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "(( %s is attempting to capture %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any points.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid;

    if((PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 3) && (!IsLawEnforcement(playerid) || PlayerInfo[playerid][pFactionRank] < 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 3+ in a gang or apart of law enforcement with rank 3+.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs which you can claim.");
	}
	if(!IsNearFlag(playerid, turfid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not near the Turf Claiming Flag.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being captured by you.");
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] == PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being claimed by your gang.");
	}
	if(IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && IsLawEnforcement(TurfInfo[turfid][tCapturer]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being claimed by your faction.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(PlayerInfo[playerid][pGang]) >= Settings[TurfCapCount])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already claiming %i turfs.", Settings[TurfCapCount]);
	}
	new count=0;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(IsLawEnforcement(playerid))
			{
				if(IsLawEnforcement(i) && IsNearFlag(i, turfid) && i != playerid)
				{
					count++;
				}
			}
			else if(PlayerInfo[playerid][pGang] >= 0)
			{
				if(PlayerInfo[playerid][pGang] == PlayerInfo[i][pGang] && IsNearFlag(i, turfid) && i != playerid)
				{
					count++;
				}
			}
		}
	}
	
	if(count < 3)
	{
		return SCM(playerid, COLOR_GREY, "You don't have 3+ more players near Turf Flag from your faction/gang");
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    if(GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have any turf tokens left.");
		}

		if(PlayerInfo[playerid][pGangRank] < 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 3+ in order to start claiming the turf.");
		}
		else
		{
			GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]--;
			SMA(COLOR_GREEN, "%s has attempted to claim %s for %s. It will be their turf in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] == -1)
	{
	    if(FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your faction doesn't have any turf tokens left.");
		}

		if(PlayerInfo[playerid][pFactionRank] < 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 3+ in order to start claiming the turf.");
		}

	    FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]--;
	    SMA(COLOR_GREEN, "Officer %s has attempted to claim back %s. It will be civilian owned in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;

	new string[256];
	format(string, sizeof(string), "%s%s\n{FFFFFF}Claiming By: %s%s", WHITE, TurfInfo[turfid][tName], ORANGE, GetRPName(TurfInfo[turfid][tCapturer]));
	UpdateDynamic3DTextLabelText(tFlagText[turfid], COLOR_WHITE, string);
	ReloadTurf(turfid);
	return 1;
}

CMD:endalliance(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SCM(playerid, COLOR_SYNTAX, "Usage: /endalliance [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be in a gang to use this command");
	}
	if(PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be rank 5 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Your gang isn't currently in an alliance.");
	}

	SM(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has ended their alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:guninv(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "My Weapons:");

	for(new i = 0; i < 13; i ++)
	{
     	if(PlayerInfo[playerid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s", PlayerInfo[playerid][pWeapons][i], GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
		}
	}

	return 1;
}

CMD:armsdealer(playerid, params[])
{
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned arms dealers.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned drug dealers.");
	return 1;
}

CMD:createturf(playerid, params[])
{
	new type, name[32];

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createturf [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (0)None (1) Materials (2) Pots");
	    SCM(playerid, COLOR_GREY2, "List of types: (3) Cracks (4) Sales Taxing (5) Cash");
	    return 1;
	}
	if(type < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(type > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbySafeZone(playerid) >= 0 || GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a safe zone/turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create turfs indoors.");
	}

	PlayerInfo[playerid][pTurfType] = type;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(PlayerInfo[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "CXRP"Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Turf creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	TeleportToCoords(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight], 90.0, 0,0, true, false);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(!PlayerInfo[playerid][pGangMod] && PlayerInfo[playerid][pAdmin] <= 5)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, ClaimBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = \"%e\" WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
	else if(!strcmp(option, "claimby", true))
    {
        if(isnull(param) || strlen(params) > 32)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = \"%e\" WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [gang] [gangid (0 = none)]");
		}
		if(gangid > 0 && gangid < MAX_GANGS && GangInfo[gangid][gSetup])
		{
			TurfInfo[turfid][tCapturedGang] = gangid;
		}
		else if(gangid == 0)
		{
			TurfInfo[turfid][tCapturedGang] = -1;
		}
		else
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == 0)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of turf %i.", GetRPName(playerid), turfid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of turf %i to %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to "CXRP"%s{CCFFFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [type] [value]");
	    	SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Materials (2) Pots");
	    	SCM(playerid, COLOR_GREY2, "List of types: (3) Cracks (4) Sales Taxing (5) Cash");
            return 1;
		}
		if(type < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}
		if(type > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of turf %i to %i.", GetRPName(playerid), turfid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0)
		{
		    SMA(COLOR_GREEN, "%s is now available to capture.", TurfInfo[turfid][tName]);
			CreateFlag(turfid, INVALID_PLAYER_ID);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
			DestroyFlag(turfid);
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of turf %i to %i hours.", GetRPName(playerid), turfid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:turfhelp(playerid, params[])
{
    SCM(playerid, COLOR_WHITE, "** Turf Commands: /turf, /turfinfo, /claim, /turfs");
	return 1;
}

CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}

CMD:defend(playerid, params[])
{
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - PlayerInfo[playerid][pLastDefend] < time)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - PlayerInfo[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /defend [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't defend yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not wanted.");
	}
	if(amount < 50 || amount > 250)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $50 and $250.");
	}

	PlayerInfo[targetid][pDefendOffer] = playerid;
	PlayerInfo[targetid][pDefendPrice] = amount;
	PlayerInfo[playerid][pLastDefend] = gettime();

	SM(targetid, COLOR_AQUA, "** Lawyer %s has offered to defend your wanted level for $%s. (/accept lawyer)", GetRPName(playerid), AddCommas(amount));
	SM(playerid, COLOR_AQUA, "** You have offered to defend %s's wanted level for $%s.", GetRPName(targetid), AddCommas(amount));
	return 1;
}

CMD:free(playerid, params[])
{
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /free [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pJailType] != 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in IC jail.");
	}
	if(PlayerInfo[targetid][pJailTime] < time * 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't free this player, their jail time expires soon.");
	}

	PlayerInfo[targetid][pJailTime] -= time * 60;

	SM(targetid, COLOR_AQUA, "** Lawyer %s has reduced your jail sentence by %i minutes.", GetRPName(playerid), time);
	SM(playerid, COLOR_AQUA, "** You have reduced %s's jail sentence by %i minutes.", GetRPName(targetid), time);
	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /eject [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ejects %s from the vehicle.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

   	if(PlayerInfo[playerid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at least level 3+ to contract players.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1068.0618,-75.6287,1003.8516))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dicebet [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount can't be below $1.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 7 seconds. Please wait %i more seconds.", 7 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[playerid][pLastBet] = gettime();

	SM(targetid, COLOR_AQUA, "** %s has initiated a bet with you for $%s (/accept dicebet).", GetRPName(playerid), AddCommas(amount));
	SM(playerid, COLOR_AQUA, "** You have initiated a bet against %s for $%s.", GetRPName(targetid), AddCommas(amount));
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /calculate [value 1] [option] [value 2]");
	    SCM(playerid, COLOR_WHITE, "Available options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't divide by zero.");
	}

	if(option == '+') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!PlayerInfo[playerid][pWatch])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!PlayerInfo[playerid][pWatchOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pWatchOn] = 1;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their watch.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pWatchOn] = 0;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their watch.", GetRPName(playerid));
	}
	SavePlayerVariables(playerid);
	return 1;
}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}
	if(PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't turn on your GPS now.");
	}
	if(!PlayerInfo[playerid][pGPSOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][0], "Loading...");
	    ShowGPSTextdraw(playerid);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their GPS.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pGPSOn] = 0;
	    HideGPSTextdraw(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their GPS.", GetRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently in a in the event. Use /quitevent instead.");
	}
	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world has been fixed.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world is not bugged at the moment. /report or relog if the problem persists.");
	}

	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && !IsNews(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!PlayerInfo[playerid][pDuty])
	{
	    if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your badge on while in an event or paintball match.");
		}
	    PlayerInfo[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "You have enabled your badge. You now appear on-duty for all players.");
	}
	else
	{
	    PlayerInfo[playerid][pDuty] = 0;
	    SCM(playerid, COLOR_WHITE, "You have disabled your badge. You no longer appear on-duty for any players.");
	}
	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(IsPlayerNPC(target1) || IsPlayerNPC(target2))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	new rand = random(99999);

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	TeleportToCoords(target1, 1280.0394,-44.7477,1001.0240, 359.0691, 18, rand, true, false);
	TeleportToCoords(target2, 1280.7355,0.0727,1001.0136, 179.1515, 18, rand, true, false);

	SetPlayerHealth(target1, health);
	SetScriptArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetScriptArmour(target2, armor);

	GiveWeapon(target1, weapon1, true);
	GiveWeapon(target1, weapon2, true);
	GiveWeapon(target2, weapon1, true);
	GiveWeapon(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	PlayerInfo[target1][pDueling] = target2;
	PlayerInfo[target2][pDueling] = target1;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s and %s into a duel.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:mole(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] < 3)
 	{
  		return NotAuth(playerid);
 	}
 	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /mole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(#0): %s **", params);
 	return 1;
}

CMD:hmole(playerid, params[])
{
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /hmole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command automatically places ((/contract)) text.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(#0): %s /contract **", params);
 	return 1;
}
/*
CMD:info(playerid) callcmd::information(playerid);
CMD:information(playerid)
{
	SCM(playerid, SERVER_COLOR, ""GREY"____"CXRP" CyberX RolePlay "GREY"____");
	SCM(playerid, COLOR_WHITE, ""CXRP"Main Website"WHITE": https://cyberx-rp.com");
	SCM(playerid, COLOR_WHITE, ""CXRP"Central Discord"WHITE": https://cyberx-rp.com/hq");
	SCM(playerid, SERVER_COLOR, ""GREY"____"CXRP" CXRP Communities "GREY"____");
	SCM(playerid, COLOR_WHITE, ""CXRP"San Andreas Multiplayer - SA:MP"WHITE": https://cyberx-rp.com/samp");
	SCM(playerid, COLOR_WHITE, ""CXRP"SA:MP - Faction & Gang Discord"WHITE": https://cyberx-rp.com/samp/fg");
	SCM(playerid, COLOR_WHITE, ""CXRP"GTA 5 - FiveM"WHITE": https://cyberx-rp.com/gta5");
	SCM(playerid, COLOR_WHITE, ""CXRP"Minecraft"WHITE": https://cyberx-rp.com/minecraft");
	return 1;
}
*/
CMD:robplayer(playerid, params[])
{
	new targetid, option[18], param[32], amount;

	if(sscanf(params, "us[18]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [option]");
	    SCM(playerid, COLOR_SYNTAX, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers.");
		return 1;
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command on yourself.");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(!PlayerInfo[targetid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "That player isn't tied.");
	}
	if(PlayerInfo[targetid][pLastRob] != 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "That player was robbed a while ago. They are now on a robbery cooldown.");
	}
	if(PlayerInfo[targetid][pLevel] < 2)
	{
		SCM(playerid, COLOR_SYNTAX, "You can't rob a level 1 player");
        SAM(COLOR_YELLOW, "AdmWarning: %s (%i) tried to rob a level 1 player %s (%i).", GetRPName(playerid), playerid, GetRPName(targetid), targetid);
		return 1;
	}
	if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [cash] [amount]");
		}
		if(amount > PlayerInfo[targetid][pCash])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 20000)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over $20,000 cash isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		GivePlayerCash(playerid, amount);
		GivePlayerCash(targetid, -amount);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some cash from %s.", GetRPName(playerid), GetRPName(targetid));

		SM(playerid, COLOR_WHITE, "You've robbed %s$%s%s Cash from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s$%s%s Cash by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Cash", "1118616816630116553", targetid, amount);
		#endif
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [materials] [amount]");
		}
		if(amount > PlayerInfo[targetid][pMaterials])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 10000)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over 10,000 materials isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[playerid][pMaterials] += amount;
		PlayerInfo[targetid][pMaterials] -= amount;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some materials from %s.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[targetid][pMaterials], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);


		SM(playerid, COLOR_WHITE, "You've robbed %s%s%s Materials from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s%s%s Materials by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Materials", "1118616816630116553", targetid, amount);
		#endif
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [pot] [amount]");
		}
		if(amount > PlayerInfo[targetid][pPot])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 100)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over 100grams of pots isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[playerid][pPot] += amount;
		PlayerInfo[targetid][pPot] -= amount;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some pots from %s.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[targetid][pPot], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);


		SM(playerid, COLOR_WHITE, "You've robbed %s%sg%s Pots from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s%sg%s Pots by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Pots", "1118616816630116553", targetid, amount);
		#endif

	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [crack] [amount]");
		}
		if(amount > PlayerInfo[targetid][pCrack])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 100)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over 100grams of crack isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[playerid][pCrack] += amount;
		PlayerInfo[targetid][pCrack] -= amount;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some cracks from %s.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[targetid][pCrack], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);


		SM(playerid, COLOR_WHITE, "You've robbed %s%sg%s Cracks from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s%sg%s Cracks by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Cracks", "1118616816630116553", targetid, amount);
		#endif

	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [meth] [amount]");
		}
		if(amount > PlayerInfo[targetid][pMeth])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 50)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over 50grams of meths isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[playerid][pMeth] += amount;
		PlayerInfo[targetid][pMeth] -= amount;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some meths from %s.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);


		SM(playerid, COLOR_WHITE, "You've robbed %s%sg%s Meths from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s%sg%s Meths by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Meths", "1118616816630116553", targetid, amount);
		#endif

	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Usage: /robplayer [playerid] [painkillers] [amount]");
		}
		if(amount > PlayerInfo[targetid][pPainkillers])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have that much.");
		}
		if(amount > 50)
		{
			return SCM(playerid, COLOR_SYNTAX, "Robbing over 50pills of painkillers isn't allowed.");
		}
		if(amount < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid amount");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[playerid][pPainkillers] += amount;
		PlayerInfo[targetid][pPainkillers] -= amount;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs some painkillers from %s.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "You've robbed %s%sp%s Pinkillers from %s", CXRP, AddCommas(amount), WHITE, GetRPName(targetid));
		SM(targetid, COLOR_WHITE, "You've been robbed %s%sp%s Pinkillers by %s", CXRP, AddCommas(amount), WHITE, GetRPName(playerid));
		#if defined DISCORD
			DCC_SendText(6, playerid, "Painkillers", "1118616816630116553", targetid, amount);
		#endif

	}
	else if(!strcmp(option, "phone", true))
	{
		if(PlayerInfo[targetid][pPhone] == 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have any phone with them.");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[targetid][pPhone] = 0;
		PlayerInfo[playerid][pRobPhone]++;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs %s's Smart yPhone.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rob_phone = %i WHERE uid = %i", PlayerInfo[playerid][pRobPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "You've robbed %s's %sSmart yPhone", GetRPName(targetid), CXRP);
		SM(targetid, COLOR_WHITE, "Your %sSmart yPhone %shas been robbed by %s", CXRP, WHITE, GetRPName(playerid));
		SCM(playerid, COLOR_ORANGE, "Note: Use /sellphone inside a 24/7 to sell these phones to get money");
		#if defined DISCORD
			DCC_SendText(6, playerid, "Phone", "1118616816630116553", targetid, -1);
		#endif

	}
	else if(!strcmp(option, "watch", true))
	{
		if(!PlayerInfo[targetid][pWatch])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player doesn't have any wristwatch with them.");
		}
		PlayerInfo[targetid][pRobStep]++;
		if(PlayerInfo[targetid][pRobStep] == 3)
		{
			PlayerInfo[targetid][pLastRob] = 3600;
			PlayerInfo[targetid][pRobStep] = 0;
		}
		PlayerInfo[targetid][pWatch] = 0;
		PlayerInfo[playerid][pRobWatch]++;

	    PlayerInfo[targetid][pWatchOn] = 0;
	    TextDrawHideForPlayer(targetid, TimeTD);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s robs %s's Wristwatch.", GetRPName(playerid), GetRPName(targetid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rob_watch = %i WHERE uid = %i", PlayerInfo[playerid][pRobWatch], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "You've robbed %s's %sWristwatch", GetRPName(targetid), CXRP);
		SM(targetid, COLOR_WHITE, "Your %sWristwatch %shas been robbed by %s", CXRP, WHITE, GetRPName(playerid));
		SCM(playerid, COLOR_ORANGE, "Note: Use /sellwatch inside a 24/7 to sell these watches to get money");
		#if defined DISCORD
			DCC_SendText(6, playerid, "Watch", "1118616816630116553", targetid, -1);
		#endif

	}
	SavePlayerVariables(targetid);
	return 1;
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
 		return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're Taxi Driver.");
 	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takecall [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && PlayerInfo[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerInfo[targetid][pTaxiCall] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPosEx(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);
		SM(playerid, COLOR_AQUA, "** You have accepted %s's taxi call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your taxi call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_GREY, "That player has no calls which can be taken.");
	}
	return 1;
}

CMD:listcalls(playerid, params[]) return callcmd::listcallers(playerid, params);

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	SCM(playerid, SERVER_COLOR, "Emergency Calls:");

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pEmergencyCall] > 0) && ((PlayerInfo[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (PlayerInfo[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] - Expiry: %i seconds - Emergency: %s", GetRPName(i), i, PlayerInfo[i][pEmergencyCall], PlayerInfo[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /trackcall [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pEmergencyCall])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't called 911 recently or their call expired.");
	}

	GetPlayerPosEx(targetid, x, y, z);
	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SM(playerid, COLOR_AQUA, "** You have accepted %s's emergency call. Their location was marked on your map.", GetRPName(targetid));

	if(PlayerInfo[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SM(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	return 1;
}

CMD:startchat(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /startchat [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(ac)hat to speak with this admin.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(ac)hat to speak to the player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invitechat [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(ac)hat to speak with them.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kickchat [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SM(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SM(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:ac(playerid, params[])
{
	return callcmd::achat(playerid, params);
}

CMD:achat(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /(ac)hat [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
				SM(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
			else
			    SM(i, COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gascan [amount]");
		SCM(playerid, COLOR_SYNTAX, "(( Note: 1 gascan = 5 litre of fuel ))");
		return 1;
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't add that much gasoline to the vehicle.");
	}

	PlayerInfo[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount*5;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s refills the %s's gas tank with %i liters of gasoline.", GetRPName(playerid), GetVehicleName(vehicleid), amount*5);
	return 1;
}

CMD:selfrepair(playerid, params[])
{
	new Float:health;
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = GetInsideGarage(playerid);
	if(IsInSelfRepair(playerid) || (id >= 0 && IsGarageOwner(playerid, id)))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1544.5037,-1614.4739,13.8247) && !IsLawEnforcement(playerid))
		{
			return SCM(playerid, COLOR_SYNTAX, "This self-repair point is only available for SFPDs.");
		}
		if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			return SCM(playerid, COLOR_GREY2, "The engine must be off during the repair session.");
		}
		if(!vehicleid)
		{
			return SCM(playerid, COLOR_GREY2, "You are not inside of any vehicle.");
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			return SCM(playerid, COLOR_GREY2, "You're not driving any vehicle.");
		}
		if(IsAHelicopter(vehicleid) || IsAPlane(vehicleid))
		{
			return SCM(playerid, COLOR_SYNTAX, "You can't self-repair a helicopter or a plane!");
		}

		if(PlayerInfo[playerid][pCash] < 800 && !IsPlayerInRangeOfPoint(playerid, 5.0, 1544.5037,-1614.4739,13.8247))
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot afford the self repair.");
		}
		GetVehicleHealth(vehicleid, health);
		if(health >= 1000.0)
		{
			SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
		}
		else
		{
			Freeze(playerid);
			
			
			GameTextForPlayer(playerid,"~w~Fixing the vehicle..",5000,4);
			SetTimerEx("TimerSelfRepair", 5000, false, "ii", playerid, vehicleid);
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1544.5037,-1614.4739,13.8247))
				GivePlayerCash(playerid, -800);
		
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is repairing his/her vehicle.", GetRPName(playerid));
			return 1;
		}
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not near any self-repair points or inside your garage!");
	}
	return 1;
}

CMD:robcd(playerid, params[])
{
	SCM(playerid, COLOR_ORANGE, "___ Current Robbery Cooldowns __");
	if(RobberyInfo[rTime] > 0)
		SM(playerid, COLOR_WHITE, ""WHITE"Bank: "YELLOW"%i hours left", RobberyInfo[rTime]);
	else
		SCM(playerid, COLOR_WHITE, ""WHITE"Bank: "YELLOW"No Cooldown!");
	if(gCanRob > 0)
	{
		if(gCanRob < 60)
			SM(playerid, COLOR_WHITE, ""WHITE"Shop & House: "YELLOW"%i seconds left", gCanRob);
		else
			SM(playerid, COLOR_WHITE, ""WHITE"Shop & House: "YELLOW"%i minutes left", floatround(gCanRob/60));
	}
	else
		SCM(playerid, COLOR_WHITE, ""WHITE"Shop & House: "YELLOW"No Cooldown!");
	return 1;
}

CMD:norob(playerid, params[])
{
	if(!IsLawEnforcement(playerid)) return SCM(playerid, COLOR_GREY2, "You need to be a Law Enforcement Officer to use this command.");
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 8) return SM(playerid, COLOR_GREY2, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 8);
	if(!PlayerInfo[playerid][pDuty]) return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	new amount, string[256];
 	if(sscanf(params, "i", amount)) return SCM(playerid, COLOR_SYNTAX, "Usage: /norob [time in minutes]");
	if(amount < 1) return SCM(playerid, COLOR_GREY2, "Time can't be lower than 1 minute.");
	if(amount > 60) return SCM(playerid, COLOR_GREY2, "Time can't be higher than 60 minute.");
 	if(amount == 1)
		format(string, sizeof(string), "> News: %s%s %s %s has initiated a %i minute of cooldown on every robbery.", WHITE, FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), amount);
  	else
		format(string, sizeof(string), "> News: %s%s %s %s has initiated a %i minutes of cooldown on every robbery.", WHITE, FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), amount);
	gCanRob = amount*60;
	SMA(COLOR_LIGHTGREEN, string);
	return 1;
}

CMD:robbank(playerid, params[])
{
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1446.3340,-1136.3132,23.9580))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(gCanRob > 0)
	{
	    new string[256];
		if(gCanRob < 60)
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i seconds to rob again.", gCanRob);
		else
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i minutes to rob again.", floatround(gCanRob/60));
		return SCM(playerid, COLOR_GREY2, string);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the bank as a robbery has already started.");
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the bank while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 6+ LEO on-duty in order to rob the bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SCM(playerid, COLOR_AQUA, "You have setup a "CXRP"bank robbery{CCFFFF}. You need to /invite at least 1 more person in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found an additional heister, you may use /setupvault at the checkpoint to blow the vault.");
	gCanRob = 30*60;
	return 1;
}

CMD:invite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invite [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
	if(PlayerInfo[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the bank while on-duty.");
	}

	PlayerInfo[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a bank robbery. (/accept robbery)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your bank robbery.", GetRPName(targetid));
	return 1;
}

CMD:vault(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not a Law Enforcement Officer");
	}
	if(!PlayerInfo[playerid][pDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be on-duty in order to use this command!");
	}
	if(PlayerInfo[playerid][pFactionRank] < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be an Inspector or above ranked to access the vault");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1679.3070, -987.4791, 671.1152))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of Vault Keypad");
	}
	if(gTogVault)
	{
		gTogVault = false;
		if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
		{
			DestroyDynamicObject(RobberyInfo[rObjects][0]);
		}
		RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
		foreach(new i : Player)
		{
			if(IsLawEnforcement(i))
			{
				SM(i, COLOR_DISPATCH, "** Bangladesh Central Bank: %s %s has just closed the bank main vault.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
			}
		}
	}
	else
	{
		gTogVault = true;
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		foreach(new i : Player)
		{
			if(IsLawEnforcement(i))
			{
				SM(i, COLOR_DISPATCH, "** Bangladesh Central Bank: %s %s has just opened the bank main vault.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
			}
		}
	}
	return 1;
}

CMD:setupvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 1 other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active bank robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(PlayerInfo[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(PlayerInfo[playerid][pRobCash] >= percent(Settings[gVault], 50))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This bank's safe is empty");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this bank robbery.");
	}
	PlayerInfo[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:setscore(playerid, params[])
{
	new targetid, score;
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	  	return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, score))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setscore [playerid] [score]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	SetPlayerScore(targetid, score);
	SM(playerid, COLOR_SAMP, "You have set %s's score to %i.", GetPlayerNameEx(targetid), score);
	return 1;
}

CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	tsstring = "";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 6) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d Hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", string, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", tsstring, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_LIST, ""CXRP"Turf List"GREY" - "REVISION"", string, "Next", "Cancel");
	return 1;
}

CMD:setformeradmin(playerid, params[])
{
	new targetid, status;
	if(PlayerInfo[playerid][pAdmin] <= 5 && !PlayerInfo[playerid][pAP])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setformeradmin [playerid] [status (0/1)]");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(status)
    {
	   	if(PlayerInfo[targetid][pAdmin])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The specified player is an admin and therefore cannot be set as a former admin.");
		}
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have made %s a "CXRP"Former Admin{CCFFFF}.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has made you a "CXRP"Former Admin{CCFFFF}.", GetRPName(playerid));
	}
	else
    {
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have removed %s's "CXRP"Former Admin{CCFFFF} status.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has removed your "CXRP"Former Admin{CCFFFF} status.", GetRPName(playerid));
	}
    PlayerInfo[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", PlayerInfo[targetid][pFormerAdmin], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /callsign [text ('none' to reset), max 12 characters]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}
/*CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(PlayerInfo[playerid][pCuffed] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot kill yourself while cuffed!");
	}
	if(PlayerInfo[playerid][pJailTime] > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot do this while in jail.");
	}
	if(PlayerInfo[playerid][pInjured] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too injured to attempt suicide!");
	}

	if(health < 15.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your health is currently too low to kill yourself.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches into their pocket, pulling out a large quantity of pills, swallowing them.", GetRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises their handgun to their head, pulling the trigger.", GetRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their shotgun into their mouth, pulling the trigger.", GetRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their weapon into their mouth, pulling the trigger.", GetRPName(playerid));
		}
	}
	SetPlayerHealth(playerid, 0.0);
	return 1;
}*/
CMD:clearreports(playerid, params[])
{	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared all active reports.", GetRPName(playerid));
	return 1;
}

CMD:window(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
		return SCM(playerid, COLOR_GREY, "You can't use this command now!");
	}
	if(PlayerInfo[playerid][pCurrentBus] == INVALID_VEHICLE_ID && PlayerInfo[playerid][pCurrentShamal] == INVALID_VEHICLE_ID)
	{
		return SCM(playerid, COLOR_GREY, "You're not inside any Bus/Coach or Shamal interior.");
	}
	new vehicleid;

	if(PlayerInfo[playerid][pCurrentBus] == INVALID_VEHICLE_ID && PlayerInfo[playerid][pCurrentShamal] != INVALID_VEHICLE_ID && IsValidVehicle(PlayerInfo[playerid][pCurrentShamal]))
		vehicleid = PlayerInfo[playerid][pCurrentShamal];
	else if(PlayerInfo[playerid][pCurrentShamal] == INVALID_VEHICLE_ID && PlayerInfo[playerid][pCurrentBus] != INVALID_VEHICLE_ID && IsValidVehicle(PlayerInfo[playerid][pCurrentBus]))
		vehicleid = PlayerInfo[playerid][pCurrentBus];
	
	if(PlayerInfo[playerid][pWatchingWindow] == false)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s glances out to the window", GetRPName(playerid));
		PlayerInfo[playerid][pWatchingWindow] = true;
		TogglePlayerSpectating(playerid, true);
		PlayerSpectateVehicle(playerid, vehicleid);
		SCM(playerid, COLOR_WHITE, "You're now on watching window mode, use /window again to stop watching");
	}
	else
	{
		PlayerInfo[playerid][pWatchingWindow] = false;
		TogglePlayerSpectating(playerid, false);
		if(GetVehicleModel(vehicleid) == 519)
		{
			TeleportToCoords(playerid, 3.839, 22.977, 1199.601, 90.0, 1, PlayerInfo[playerid][pCurrentShamal], false, false);
			SetCameraBehindPlayer(playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops watching the window", GetRPName(playerid));
		}
		else if(GetVehicleModel(vehicleid) == 431 || GetVehicleModel(vehicleid) == 437)
		{
			TeleportToCoords(playerid, 2022.0273, 2235.2402, 2103.9536, 0.0, 1, PlayerInfo[playerid][pCurrentBus], true, false);
			SetCameraBehindPlayer(playerid);
            SetPlayerTime(playerid, 00,00);
			new Float:bX, Float:bY, Float:bZ;
			GetPlayerPos(playerid, bX, bY, bZ);
			PlayerPlaySound(playerid, 1147, bX, bY, bZ);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops watching the window", GetRPName(playerid));
		}
	}
	return 1;
}

CMD:windows(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be inside a vehicle to use this command.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(!VehicleHasWindows(vehicleid) && IsAMotorBike(vehicleid) && IsAbicycle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle does not have any windows.");
	}
	if(CarWindows[vehicleid])
	{
	    CarWindows[vehicleid] = 0;
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    CarWindows[vehicleid] = 1;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

// - COMMANDS BY DEV86
CMD:taclight(playerid, params[])
{
	if (!PlayerInfo[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(PlayerInfo[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s attaches their flashlight to the top of their weapon.", GetRPName(playerid));

		PlayerInfo[playerid][pUsedFlashlight] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		PlayerInfo[playerid][pUsedFlashlight] =0;
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s detaches their flashlight from their weapon.", GetRPName(playerid));
	}
	return 1;
}
CMD:flashlight(playerid, params[])
{
	if (!PlayerInfo[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(PlayerInfo[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s takes out a flashlight and turns it on.", GetRPName(playerid));

		PlayerInfo[playerid][pUsedFlashlight] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
  		PlayerInfo[playerid][pUsedFlashlight] =0;
  		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s puts their flashlight back in their pocket.", GetRPName(playerid));
	}
	return 1;
}

CMD:pass(playerid, params[])
{
	new cashhy=500;
	if(PlayerInfo[playerid][pCash] < cashhy)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay for the toll");
	}
	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
	{
		if(Border11 == 1) { SCM(playerid, COLOR_GREY, "** Contact a developer"); return 1; }
   		DestroyDynamicObject( Border1 );
 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border11 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
	{
		if(Border00 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border0 );
 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border00 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
	{
		if(Border99 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border9 );
 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border99 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
	{
		if(Border88 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border8 );
 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border88 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
	{
		if(Border77 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border7 );
 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border77 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
	{
		if(Border66 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border6 );
 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border66 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
	{
		if(Border55 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border5 );
 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border55 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
	{
		if(Border33 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border3 );
 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border33 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
	{
		if(Border22 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border2 );
 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border22 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
	{
		if(Border44 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border4 );
 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border44 = 1;
		if(!IsLawEnforcement(playerid))
		{
			GivePlayerCash(playerid, -cashhy);
		}
	}
 	return 1;
}

CMD:findfuel(playerid, params[])
{
    if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	new i = GetClosestFuel(playerid);
 	if(i == -1)
	{
		return SCM(playerid, COLOR_GREY, "Something went wrong! Please contact the developer.");
  	}
    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, FuelStationInfo[i][FuelX], FuelStationInfo[i][FuelY], FuelStationInfo[i][FuelZ], 3.0);
	SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest Fuel Pump Point to you.");
	return 1;
}

CMD:findselfrepair(playerid, params[])
{
    if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	new selfrepair = GetClosestSelfRepair(playerid);
 	if(selfrepair == -1)
	{
		return SCM(playerid, COLOR_GREY, "Something went wrong! Please contact the developer.");
  	}
    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, selfRepairPoints[selfrepair][0],selfRepairPoints[selfrepair][1],selfRepairPoints[selfrepair][2], 3.0);
	SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest Self Repair Point to you.");

	return 1;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyMapicon(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_MAPICONS; i ++)
	{
	    if(MapIconInfo[i][mpExists] && IsPlayerInRangeOfPoint(playerid, radius, MapIconInfo[i][mpPosX], MapIconInfo[i][mpPosY], MapIconInfo[i][mpPosZ]) && GetPlayerInterior(playerid) == MapIconInfo[i][mpInt] && GetPlayerVirtualWorld(playerid) == MapIconInfo[i][mpVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Bangladesh_Govt.", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 284;
		BusinessInfo[businessid][bTime] = -1;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = PlayerInfo[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = \"%s\", biztime = %i WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bTime], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128*2];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);

        if(BusinessInfo[businessid][bOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s\n"BIZ"Cost: $%i\n"WHITE"%s %d", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid);
		}
		else
		{
		    format(string, sizeof(string), "%s\n"BIZ"Owned by %s\n"WHITE"%s %d", BusinessInfo[businessid][bName], BusinessInfo[businessid][bOwner], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]),businessid);
		}

		BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 10.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1272, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        saveBiz(businessid);
	}
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == PlayerInfo[playerid][pID]) || (BusinessInfo[businessid][bOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == PlayerInfo[playerid][pID]) || (GarageInfo[garageid][gOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s Garage\nPrice: $%i\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gPrice], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}
		else
		{
		    format(string, sizeof(string), "%s Garage\nOwned by %s\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gOwner], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0xc1ff75ff, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = PlayerInfo[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = \"%s\" WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}

HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pFurniturePerms] == houseid;
}

IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID]) || (HouseInfo[houseid][hOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetVehicleStashCapacity(vehicleid, item)
{

	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   WEP
	    {25000,   2500,   25,   25,  10,  5,  3}, // level 1
	    {50000,   5000,  50,   50,  25,  10, 4}, // level 2
	    {100000,  10000,  100,  75,  50,  20, 5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}

GetBackpackSize(playerid)
{
	new string[8];
	switch(PlayerInfo[playerid][pBackpack])
	{
		case 1: string = "Small";
		case 2: string = "Medium";
		case 3: string = "Large";
		default: string = "None";
	}
	return string;
}


GetBackpackCapacity(playerid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    P     C    M    P    WEP
	    {80000,   10000,  50,   50,  30,  30,  4}, // Small
	    {130000,  30000,  120,  120, 80,  80,  8}, // Medium
	    {200000,  50000,  200,  200, 150, 150, 12} // Large
	};

	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		return stashCapacities[PlayerInfo[playerid][pBackpack] - 1][item];
	}

	return 0;
}
GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 50000, 200,  200,  200},
		{2000000, 50000, 200, 200, 200},
		{3000000, 50000, 200, 200, 200}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W    C    M    P   WEP
	    {50000,   5000,   50,  25,  20,  10, 2}, // level 1
	    {100000,  10000,  100, 50,  40,  20, 4}, // level 2
	    {250000,  25000,  150, 75,  60,  30, 6}, // level 3
	    {500000,  35000,  200, 100, 80,  40, 8}, // level 4
	    {1000000, 50000, 300, 200, 100, 50, 10} // level 5
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 50;
	    case 1: return 75;
	    case 2: return 100;
	    case 3: return 150;
	    case 4: return 300;
	    case 5: return 500;
	}

	return 0;
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 200.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = \"%s\" WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}

RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}

ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}

ReloadFuelStation(id)
{
    new string[128*2];
    DestroyDynamic3DTextLabel(FuelStationInfo[id][fText]);
    DestroyDynamicPickup(FuelStationInfo[id][fPickup]);
	format(string, sizeof(string), ""YELLOW"Rate %i$ Per Litre"WHITE" - "ORANGE"Fuel Left %i Liter\n"YELLOW"%s %i\n"AQUA"(( Type '/refuel' to refill ))", FuelStationInfo[id][fprice], FuelStationInfo[id][total_fuel], GetZoneName(FuelStationInfo[id][FuelX], FuelStationInfo[id][FuelY], FuelStationInfo[id][FuelZ]), id);
    FuelStationInfo[id][fText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, FuelStationInfo[id][FuelX], FuelStationInfo[id][FuelY], FuelStationInfo[id][FuelZ], 12.0);
    FuelStationInfo[id][fPickup] = CreateDynamicPickup(1650, 1, FuelStationInfo[id][FuelX], FuelStationInfo[id][FuelY], FuelStationInfo[id][FuelZ]);
	return 1;
}

ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        housestring[128*2],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nCost: $%i\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xffea5eff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19524, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\nRent Cost: $%i\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
		    }
		    else
		    {
			    format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			}
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xff3838ff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	        HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
		}

	}
}

IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

GetVehicleSpeed(vehicleid)
{
    if(vehicleid != INVALID_VEHICLE_ID)
    {
        new Float:Pos[3],Float:VS ;
        GetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[2]);
        VS = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*200;
        return floatround(VS,floatround_round);
    }
    return INVALID_VEHICLE_ID;
}

GetVehicleSpeedMPH(vehicleid)
{
	if(vehicleid != INVALID_VEHICLE_ID)
    {
        new Float:Pos[3],Float:VS ;
        GetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[2]);
        VS = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*100;
        return floatround(VS,floatround_round);
    }
    return INVALID_VEHICLE_ID;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}

GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

public OnCheatDetected(playerid)
{
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Flying Hacks", GetPlayerNameEx(playerid), SERVER_BOT);
	Log_Write("log_cheat", "%s (uid: %i) was auto-kicked for using Fly Hacks", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	KickPlayer(playerid);
	return 1;
}

public OnPlayerSuspectedForAimbot(playerid, hitid, weaponid, warnings)
{
	if((gAnticheat) && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
	{
		new wname[32], string[255], Float:Wstats[BUSTAIM_WSTATS_SHOTS];
		GetWeaponName(weaponid, wname, sizeof(wname));
		if(warnings & WARNING_PROAIM_TELEPORT)
		{
			format(string, sizeof(string), "AdmWarning: %s [%i] using Pro Aimbot on %s [%i] with %s.", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(hitid), hitid, wname);
			SAM(COLOR_YELLOW, string);
			Log_Write("log_cheat", "%s (uid: %i) possibly used Pro Aimbot on %s (uid: %i) with %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(hitid), PlayerInfo[hitid][pID], wname);
		}
		if(warnings & WARNING_OUT_OF_RANGE_SHOT)
		{
			BustAim::GetRangeStats(playerid,Wstats);
			format(string, sizeof(string), "AdmWarning: %s [%i] shot %s [%i] from out of a normal range with %s (Dist.: %f).", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(hitid), hitid, wname, Wstats[0]);
			SAM(COLOR_YELLOW, string);
			Log_Write("log_cheat", "%s (uid: %i) possibly shot %s (uid: %i) from out of normal range with %s (Dist.: %f).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(hitid), PlayerInfo[hitid][pID], wname, Wstats[0]);
		}
		if((warnings & WARNING_RANDOM_AIM) && !IsPlayerHaveAutoaim(playerid))
		{
			format(string, sizeof(string), "AdmWarning: %s [%i] using Aimbot on %s [%i] with %s.", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(hitid), hitid, wname);
			SAM(COLOR_YELLOW, string);
			Log_Write("log_cheat", "%s (uid: %i) possibly used Aimbot on %s (uid: %i) with %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(hitid), PlayerInfo[hitid][pID], wname);
		}
		if(warnings & WARNING_CONTINOUS_SHOTS)
		{
			format(string, sizeof(string), "AdmWarning: %s [%i] Rapid Firing with %s [%i].", GetPlayerNameEx(playerid), playerid, wname, weaponid);
			SAM(COLOR_YELLOW, string);
			Log_Write("log_cheat", "%s (uid: %i) possibly Rapid Fired with %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], wname, weaponid);
		}
	}
	return 1;
}

AnticheatCheck(playerid)
{
	if(gettime() > PlayerInfo[playerid][pACTime] && !PlayerInfo[playerid][pKicked])
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 300 && PlayerInfo[playerid][pAdminDuty] == 0)
		{
		    PlayerInfo[playerid][pACWarns]++;
			PlayerInfo[playerid][pACTime] = gettime() + 2;

		    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
		        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly speedhacking, speed: %i km/h.", GetPlayerNameEx(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %i km/h", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
			}
			else
			{
			    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Speed Hacking", GetPlayerNameEx(playerid), SERVER_BOT);
			    KickPlayer(playerid);
			}
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && !PlayerInfo[playerid][pJetpack] &&  PlayerInfo[playerid][pAdminDuty] == 0)
		{
		    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Jetpack", GetPlayerNameEx(playerid), SERVER_BOT);
	    	KickPlayer(playerid);
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT &&  PlayerInfo[playerid][pAdminDuty] == 0)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && PlayerInfo[playerid][pAdmin] < 2)
                    {
                    	SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Flying Hacks", GetRPName(playerid), SERVER_BOT);
		    			KickPlayer(playerid);
					}
				}
			}
		}

		// Armor hacks
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && PlayerInfo[playerid][pAdminDuty] == 0)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(!(gettime() - PlayerInfo[playerid][pLastUpdate] > 5))
  			{
				if(floatround(armor) > floatround(PlayerInfo[playerid][pArmor]) && gettime() > PlayerInfo[playerid][pACTime] && gettime() > PlayerInfo[playerid][pArmorTime] && PlayerInfo[playerid][pAdmin] < 2)
				{
		            PlayerInfo[playerid][pACWarns]++;
	    	        PlayerInfo[playerid][pArmorTime] = gettime() + 10;
					PlayerInfo[playerid][pACTime] = gettime() + 2;

				    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				    {
				        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), playerid, PlayerInfo[playerid][pArmor], armor);
				        Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pArmor], armor);
					}
					else
					{
					    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Armor Hacking", GetPlayerNameEx(playerid), SERVER_BOT);
					    KickPlayer(playerid);
					}
				}
			}

			PlayerInfo[playerid][pArmor] = armor;
		}
	}
	return 1;
}

CMD:checkdsc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		return NotAuth(playerid);
	}
	new targetid;
    if(sscanf(params, "u", targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /checkdsc <playerid>");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerSpawned(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "That specified player isn't connected or spawned yet!");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use that command on a higher administrator than you!");
	}
	new Float:X, Float:Y, Float:Z, Float:Hp, Float:Arm;
	SetPVarInt(targetid, "DscVW", GetPlayerVirtualWorld(targetid));
	GetPlayerHealth(targetid, Hp);
	SetPVarFloat(targetid, "DscHP", Hp);
	GetPlayerArmour(targetid, Arm);
	SetPVarFloat(targetid, "DscArm", Arm);
	SetPlayerVirtualWorld(targetid, Random(500, 1000));
    GetPlayerPos(targetid,X,Y,Z);
    SetPlayerPos(targetid,X,Y,Z+15);
	SAM(COLOR_YELLOW, "%s has started a desync check on %s", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~w~Desync Checking...", 3000, 3);
    SetTimerEx("CheckTakenHealth", 1000, false, "i", targetid);
	return 1;
}

forward CheckTakenHealth(playerid);
public CheckTakenHealth(playerid)
{
    new Float:CurrHealth;
    GetPlayerHealth(playerid, CurrHealth);
    SetPVarFloat(playerid, "CurrHealth", CurrHealth);
    SetTimerEx("CheckNewHealth", 1000, false, "i", playerid);
}
 
forward CheckNewHealth(playerid); 
public CheckNewHealth(playerid)
{
    new Float:NewHealth;
    GetPlayerHealth(playerid,NewHealth);
    SetPVarFloat(playerid,"NewHealth",NewHealth);
    SetTimerEx("BanIfHacker", 1000, false, "i", playerid);
}

forward BanIfHacker(playerid);
public BanIfHacker(playerid)
{
    if(GetPVarFloat(playerid,"CurrHealth") == GetPVarFloat(playerid,"NewHealth"))
    {
		SAM(COLOR_YELLOW, "%s's desync check result: %sPositive!", GetRPName(playerid), RED);		
		GameTextForPlayer(playerid, "~r~You ARE Desynced!", 3000, 3);
    }
	else
	{
		SAM(COLOR_YELLOW, "%s's desync check result: %sNegative!", GetRPName(playerid), GREEN);		
		GameTextForPlayer(playerid, "~g~You're NOT Desynced!", 3000, 3);
	}
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "DscVW"));
	SetPlayerHealth(playerid, GetPVarFloat(playerid, "DscHP"));
	DeletePVar(playerid, "DscHP");
	SetScriptArmour(playerid, GetPVarFloat(playerid, "DscArm"));
	DeletePVar(playerid, "DscArm");
	DeletePVar(playerid, "DscVW");
	DeletePVar(playerid, "CurrHealth");
	DeletePVar(playerid, "NewHealth");
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pLogged])
	{
	    PlayerInfo[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		vehicleEng[vehicleid] = true;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

forward SetVehicleEngineHotwire(vehicleid, playerid);
public SetVehicleEngineHotwire(vehicleid, playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pLogged])
	{
	    Unfreeze(playerid);
	    PlayerInfo[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		vehicleEng[vehicleid] = true;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has successfully hotwired the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		PlayerInfo[playerid][pToolkit]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toolkit = %i WHERE uid = %i", PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);	
	}
	return 1;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name) && PlayerInfo[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAimingEx(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}



IsPlayerInButcherArea(playerid)
{
    for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.5, -2977.3816, 502.0611, 2.4297) || IsPlayerInRangeOfPoint(playerid, 2.5, -2945.7698, 501.8798, 2.4297))
	{
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, -2976.2085, 506.5486, 2.4297) || IsPlayerInRangeOfPoint(playerid, 2.5, -2949.2896, 502.6712, 2.4297))
	{
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, -2974.5354, 501.8316, 2.4297) || IsPlayerInRangeOfPoint(playerid, 2.5, -2947.7122, 506.6294, 2.4297))
	{
	    return 1;
	}
	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && PlayerInfo[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            PlayerInfo[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            PlayerInfo[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(PlayerInfo[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            PlayerInfo[i][pStreamType] = type;
			        }
				}
			}

			strcpy(PlayerInfo[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	PlayerInfo[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

/*DestroyPotPlant(playerid)
{
	if(PlayerInfo[playerid][pPotPlanted])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pPotObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET potplanted = 0, pottime = 0, potgrams = 0, pot_x = 0.0, pot_y = 0.0, pot_z = 0.0, pot_a = 0.0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[playerid][pPotPlanted] = 0;
	    PlayerInfo[playerid][pPotTime] = 0;
	    PlayerInfo[playerid][pPotGrams] = 0;
	    PlayerInfo[playerid][pPotX] = 0.0;
	    PlayerInfo[playerid][pPotY] = 0.0;
	    PlayerInfo[playerid][pPotZ] = 0.0;
	    PlayerInfo[playerid][pPotA] = 0.0;
	}
}*/

DestroyBoombox(playerid)
{
	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(PlayerInfo[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pBoomboxText]);

		PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		PlayerInfo[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        PlayerInfo[playerid][pBoomboxPlaced] = 0;
        PlayerInfo[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendMessage(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendMessageToAll(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(channel[], const text[], {Float,_}:...)
{
	#if !defined DISCORD
		print("Couldn't post logs due to no DISCORD defined!");
		#pragma unused text
		#pragma unused channel
	#endif
	#if defined DISCORD
		static
			args,
			str[1024];
		if((args = numargs()) <= 2)
		{
			DCC_SendText(7, INVALID_PLAYER_ID, text, channel, INVALID_PLAYER_ID, -1);
		}
		else
		{
			while(--args >= 2)
			{
				#emit LCTRL 	5
				#emit LOAD.alt 	args
				#emit SHL.C.alt 2
				#emit ADD.C 	12
				#emit ADD
				#emit LOAD.I
				#emit PUSH.pri
			}
			#emit PUSH.S 		text
			#emit PUSH.C 		192
			#emit PUSH.C 		str
			#emit LOAD.S.pri 	8
			#emit ADD.C 		4
			#emit PUSH.pri
			#emit SYSREQ.C 		format
			#emit LCTRL 		5
			#emit SCTRL 		4

			DCC_SendText(7, INVALID_PLAYER_ID, str, channel, INVALID_PLAYER_ID, -1);
			#emit RETN
		}
	#endif
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendMafiaMessage(color, const text[])
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pLogged] && PlayerInfo[i][pMafia] != 0)
	    {
	    	SCM(i, color, text);
		}
	}
	return 1;
}

forward SendAdminMessage(color, const text[], {Float,_}:...);
public SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SCM(i, color, str);
			}
		}
		#emit RETN
	}
	return 1;
}


SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "Materials"; }
		case 2: { ret = "Pots"; }
		case 3: { ret = "Cracks"; }
		case 4: { ret = "Sales Tax"; }
		case 5: { ret = "Cash"; }
	}
	return ret;
}
SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0 || PlayerInfo[i][pFormerAdmin]))
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0 || PlayerInfo[i][pFormerAdmin]))
	        {
	    		SCM(i, color, str);
			}
		}
		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 5000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 5000);

		#emit RETN
	}
	return 1;
}

SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SCM(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SCM(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SCM(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SCM(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SCM(i, color5, text);
        }
        else if(PlayerInfo[i][pListen])
        {
            SCM(i, color5, text);
        }
	}
}

new const Float:edmSpawns[][] =
{
	{-2091.6597, 1460.9968, 8.7889, 269.3639},
	{-2091.4260, 1457.6989, 8.7889, 268.7983},
	{-2091.2295, 1454.5432, 8.7889, 268.7983},
	{-2091.1553, 1451.4708, 8.7889, 268.7983}
};



new const Float:welcomeCarSpawns[][] =
{
	{1269.0771, -1831.3092, 13.0089, 269.0530},
	{1269.0017, -1825.3167, 13.0074, 270.9108},
	{1280.3608, -1811.5308, 13.0098, 91.6317},
	{1280.5022, -1805.5248, 13.0082, 93.1570},
	{1268.9684, -1801.1853, 13.0265, 269.4486},
	{1268.7777, -1810.1310, 13.0182, 271.1005}
};

// After registration
forward PlayerSpawn(playerid);
public PlayerSpawn(playerid)
{
	if(PlayerInfo[playerid][pLogged] && PlayerInfo[playerid][pTutorial])
	{
		if(PlayerInfo[playerid][pLogged] && PlayerInfo[playerid][pTutorial])
		{
			for(new i = 17; i < 23; i ++)
			{
				TextDrawHideForPlayer(playerid, LoginGlobal[i]);
			}
			PlayerTextDrawHide(playerid, PublicTD2[playerid]);
			PlayerInfo[playerid][pTutorial] = 0;
			PlayerInfo[playerid][pSetup] = 0;
			TogglePlayerSpectating(playerid, false);

			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

			TeleportToCoords(playerid, 1222.2344, -1813.7719, 16.5938, 261.8594, 0, 0, false, false);
			SetPlayerHealth(playerid, 100.0);
			SetCameraBehindPlayer(playerid);
			Unfreeze(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			// Scripted
			SCM(playerid, COLOR_WHITE, "You've just arrived to the nation, and the city welcomes you with open arms.");
			PlayerInfo[playerid][pWeaponRestricted] = 2;
			new string[256];
			format(string, sizeof(string), "Hello there %s!\nSeems like you're new to this server. Do you want a helper to give a tour around here?", GetRPName(playerid));
			ShowPlayerDialog(playerid, DIALOG_NEWBWELCOME, DIALOG_STYLE_MSGBOX, "Welcome to VS:RP", string, "Yes!", "No.");

			new rand = random(sizeof(welcomeCarSpawns));
			new color1 = 1, color2 = 1;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, impounded) VALUES(%i, \"%s\", %i, '%f', '%f', '%f', '%f', %i, %i, 0)", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), 466, welcomeCarSpawns[rand][0], welcomeCarSpawns[rand][1], welcomeCarSpawns[rand][2], welcomeCarSpawns[rand][3], color1, color2);
			mysql_tquery(connectionID, queryBuffer);
			#if defined DISCORD
				DCC_SendText(8, playerid, "", "1118613647585972236", INVALID_PLAYER_ID, -1);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, discord FROM whitelist WHERE name = \"%s\"", GetPlayerNameEx(playerid));
				mysql_tquery(connectionID, queryBuffer, "DCC_IDUpdate", "i", playerid);
			#endif
			TeleportToCoords(playerid, 1222.2344, -1813.7719, 16.5938, 261.8594, 0, 0, false, false);
		}
	}
}

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = \"%s\" OR ip = \"%s\" OR ip LIKE \"%s\"", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

Dyuze(playerid, title[], string[], time = 5000)
{
	if(PlayerInfo[playerid][pDyuze])
	{
	    PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
		PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	    KillTimer(PlayerInfo[playerid][pDyuzeTimer]);
	}
	new string2[128];
	format(string2, sizeof(string2), "%s~n~_", title);
	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][0], string2);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][0]);

	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][1], string);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][1]);

	PlayerInfo[playerid][pDyuze] = true;
	PlayerInfo[playerid][pDyuzeTimer] = SetTimerEx("HidetheDyuze", time, false, "d", playerid);
}

forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!PlayerInfo[playerid][pDyuze])
	    return 0;

	PlayerInfo[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	return 1;
}

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	if(IsPlayerNPC(playerid)) return 1;
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					Dyuze(i, "Countdown", "3");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					Dyuze(i, "Countdown", "2");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					Dyuze(i, "Countdown", "1");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
					Dyuze(i, "Countdown", "Go! Go! Go!");
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
	return 1;
}

#if defined DISCORD
GetPlayerPingEx(playerid)
{
	new str[6];
	format(str, sizeof str, "%i", GetPlayerPing(playerid));
	return str;
}

GetWeatherName(weatherid)
{
    new wName[40];
	switch(weatherid)
	{
		case 0..7: strcpy(wName, "Clear skies", 40);
		case 8: strcpy(wName, "Stormy", 40);
		case 9: strcpy(wName, "Cloudy", 40);
		case 10: strcpy(wName, "Clear skies", 40);
		case 11: strcpy(wName, "Heatwave", 40);
		case 12..15: strcpy(wName, "Cloudy/Clear", 40);
		case 16: strcpy(wName, "Cloudy/Rainy", 40);
		case 17, 18: strcpy(wName, "Heatwave", 40);
		case 19: strcpy(wName, "Sandstorm", 40);
		case 20: strcpy(wName, "Foggy/Greenish", 40);
		case 21,22: strcpy(wName, "Dark clouds", 40);
		case 23..26: strcpy(wName, "Heatwave", 40);
		case 27..29: strcpy(wName, "Clear skies", 40);
		case 30: strcpy(wName, "Cloudy", 40);
	}
    return wName;
}
#endif

forward CountdownAll(playerid, count);
public CountdownAll(playerid, count)
{
	if(IsPlayerNPC(playerid)) return 1;
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					Dyuze(i, "Countdown", "3");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					Dyuze(i, "Countdown", "2");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					Dyuze(i, "Countdown", "1");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
					Dyuze(i, "Countdown", "Go! Go! Go!");
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("CountdownAll", 1000, false, "ii", playerid, count);
	}
	return 1;
}

forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    Unfreeze(playerid);    
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	Unfreeze(playerid);
}

forward GmxEx();
public GmxEx()
{
	foreach(new i : Player)
	{
	    Maskara[i] = 0;
		MaskaraID[i] = INVALID_PLAYER_ID;
		SetPlayerName(i, PlayerInfo[i][pUsername]);
   		if(PlayerInfo[i][pAdminDuty])
		{
	        callcmd::aduty(i, "");
		}
		PlayerInfo[i][pHurt] = 0;
	    Freeze(i);
	    
		ClearAllChat(i);
		SavePlayerVariables(i);
		Freeze(i);
		
		GameTextForPlayer(i, "~w~Restarting server...", 4000, 3);
	}
	SMA(COLOR_AQUA, "__ Server Restarting __");
	SetTimer("GmxExEx", 4000, false);
}

forward GmxExEx();
public GmxExEx()
{
	gGMX = 1;
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}

IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}

IsSurfable(vehid)
{
	switch(GetVehicleModel(vehid)) {
		case 422, 470, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
			return 1;
	}
	if(IsHelicopter(vehid)) return 1;
	return 0;
}

AntiCarSurf(playerid)
{
	if(PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    new vehid = GetPlayerSurfingVehicleID(playerid);
	    if(vehid != INVALID_VEHICLE_ID && GetVehicleSpeed(vehid) >= 20 && !IsSurfable(vehid))
	    {
	        GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        new Float:a;
			GetPlayerFacingAngle(playerid, a);
			TeleportToCoords(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY]+1.0, PlayerInfo[playerid][pPosZ]+1.0, a, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false);
	        GameTextForPlayer(playerid,"~h~Slipped from the car..", 3000, 4);
	    }
	}
}

ComServ(playerid)
{
	if (PlayerInfo[playerid][pComserv] > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 100.0, 1477.3464, -1667.8080, 14.5532))
		{
			TeleportToCoords(playerid, 1482.4253,-1717.5935,14.0469, 9.8095, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false);
			PlayerInfo[playerid][pComserv] += 2;
			SM(playerid, COLOR_GREY2,"** You can not escape. Your community service has been extended to %i", PlayerInfo[playerid][pComserv]);
		}
	}
}

GetMonthName(month)
{
	new string[256];
	switch(month)
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}
	return string;
}


forward UpdateBackup(playerid);
public UpdateBackup(playerid)
{
	if(IsLawEnforcement(playerid))
	{
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && i != playerid)
			{
				if(IsLawEnforcement(i) || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT)
				{
					if(GetFactionType(playerid) == FACTION_MEDIC)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0xFF8282FF);
					}
					else
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x233EFAFF);
					}
				}
			}
		}
	}
	else if(PlayerInfo[playerid][pGang] >= 0)
	{
		new gangid = PlayerInfo[playerid][pGang];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pLogged] && i != playerid)
			{
				if(PlayerInfo[i][pGang] == gangid)
				{
					SetPlayerMarkerForPlayer(i, playerid, 0x00FF00FF);
				}
			}
		}
	}
	return 1;
}

forward ThreeSecond();
public ThreeSecond()
{
	foreach(new i : Player)
	{
  		if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
		{
			if(PlayerInfo[i][pBackup] == 1)
			{
				UpdateBackup(i);
			}
			new Float:armor;
			GetPlayerArmour(i, armor);
			if(armor != PlayerInfo[i][pArmor] && PlayerInfo[i][pPaintball] == 0 && PlayerInfo[i][pInjured] == 0)
			{
				SetScriptArmour(i, PlayerInfo[i][pArmor]);
			}

			new Float:Health;
			GetPlayerHealth(i, Health);
			if(Health != PlayerInfo[i][pHealth] && SpawnGlitch[i] == true)
			{
				SetPlayerHealth(i, PlayerInfo[i][pHealth] + 5.0);
				PlayerInfo[i][pInjured] = 0;
				ClearAnimations(i, 1);
				UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");
				SpawnGlitch[i] = false;
				return 1;
			}

		}
	}
	return 1;
}

#include "./modules/rent.pwn"

#define	TYPE_BIN		1
#define	TYPE_DUMPSTER	2


enum	e_trashdata
{
	TrashType,
	Float: TrashX,
	Float: TrashY,
	Float: TrashZ,
	Text3D: TrashLabel,
	TrashLevel,
	TrashTimer
}

enum    e_factorydata
{
    FactoryName[32],
	Float: FactoryX,
	Float: FactoryY,
	Float: FactoryZ,
	FactoryCurrent,
	FactoryCP,
	Text3D: FactoryLabel
}

new
	TrashData[][e_trashdata] = {
		{TYPE_DUMPSTER, -169.9766, 1027.1953, 19.4453},
		{TYPE_DUMPSTER, -160.2656, 1122.5391, 19.5391},
		{TYPE_DUMPSTER, -149.8516, 1133.7656, 19.5391},
		{TYPE_DUMPSTER, -170.1719, 1169.0547, 19.5391},
		{TYPE_DUMPSTER, -218.0312, 1164.9219, 19.5391},
		{TYPE_DUMPSTER, -149.8203, 1164.1094, 19.5391},
		{TYPE_DUMPSTER, -162.0938, 1175.1406, 19.5391},
		{TYPE_DUMPSTER, -155.6953, 1234.4219, 19.4766},
		{TYPE_DUMPSTER, -123.8125, 1079.3984, 19.5000},
		{TYPE_DUMPSTER, -90.6016, 1128.2188, 19.4609},
		{TYPE_DUMPSTER, -88.8594, 1165.3828, 19.4609},
		{TYPE_DUMPSTER, -44.3047, 1179.2734, 19.2422},
		{TYPE_DUMPSTER, -24.8203, 1165.4062, 19.2422},
		{TYPE_DUMPSTER, 776.8281, 1866.1562, 3.8906},
		{TYPE_DUMPSTER, 338.0547, 39.8438, 6.2656},
		{TYPE_DUMPSTER, 339.7188, 52.9844, 3.2656},
		{TYPE_DUMPSTER, 341.4219, 55.0078, 3.2656},
		{TYPE_DUMPSTER, 1353.1016, 201.7578, 19.2656},
		{TYPE_DUMPSTER, 1353.5781, 204.2266, 19.2656},
		{TYPE_DUMPSTER, 244.1250, -313.1250, 1.2734},
		{TYPE_DUMPSTER, 251.4453, -262.5469, 1.2734},
		{TYPE_DUMPSTER, 254.0000, -263.2578, 1.2734},
		{TYPE_DUMPSTER, 306.0625, -255.1016, 1.2578},
		{TYPE_DUMPSTER, 308.6719, -255.0938, 1.2578},
		{TYPE_BIN, 2317.1562, 29.2031, 26.2188},
		{TYPE_DUMPSTER, 2321.1172, 14.3359, 26.1953},
		{TYPE_BIN, 2317.5938, 30.4766, 26.2188},
		{TYPE_DUMPSTER, 196.7109, -121.4062, 1.2734},
		{TYPE_DUMPSTER, 255.1172, -161.2891, 1.3047},
		{TYPE_DUMPSTER, 255.3125, -132.6250, 1.2734},
		{TYPE_DUMPSTER, 259.5547, -132.7891, 1.2734},
		{TYPE_DUMPSTER, 165.9219, -107.6328, 1.2734},
		{TYPE_DUMPSTER, 182.9922, -93.6172, 1.2734},
		{TYPE_DUMPSTER, 171.4453, -93.4453, 1.2734},
		{TYPE_DUMPSTER, 657.8516, -650.0703, 16.0625},
		{TYPE_DUMPSTER, 665.2266, -624.3750, 16.0625},
		{TYPE_DUMPSTER, 668.2109, -624.4453, 16.0625},
		{TYPE_DUMPSTER, 652.7422, -496.5156, 16.0469},
		{TYPE_DUMPSTER, 652.8125, -499.3203, 16.0469},
		{TYPE_DUMPSTER, 725.8750, -465.7422, 15.9375},
		{TYPE_DUMPSTER, 656.0000, -439.2734, 16.2812},
		{TYPE_DUMPSTER, 693.2891, -456.0156, 16.0078},
		{TYPE_DUMPSTER, 830.4766, -754.6016, 84.9375},
		{TYPE_BIN, 842.5156, -756.1719, 84.3047},
		{TYPE_DUMPSTER, 1300.4531, 221.5078, 19.2656},
		{TYPE_DUMPSTER, 1320.6328, 211.4688, 19.2656},
		{TYPE_DUMPSTER, 1328.8672, 207.3438, 19.2656},
		{TYPE_DUMPSTER, 1362.0391, 232.6094, 19.2656},
		{TYPE_DUMPSTER, 1364.2891, 231.4844, 19.2656},
		{TYPE_DUMPSTER, 1307.6875, 349.7578, 19.2812},
		{TYPE_DUMPSTER, 1315.2500, 349.5625, 19.2578},
		{TYPE_DUMPSTER, 1413.4141, 451.1172, 19.7344},
		{TYPE_DUMPSTER, 1368.6250, 484.1406, 19.7344},
		{TYPE_DUMPSTER, -2146.7344, -2462.4844, 30.5547},
		{TYPE_DUMPSTER, -2105.9375, -2458.1562, 30.5547},
		{TYPE_DUMPSTER, -2108.4922, -2456.1719, 30.5547},
		{TYPE_DUMPSTER, -2103.7734, -2479.7344, 30.5547},
		{TYPE_DUMPSTER, -2218.8828, -2336.2109, 30.4844},
		{TYPE_DUMPSTER, -2213.9609, -2339.3047, 30.4844},
		{TYPE_DUMPSTER, -2136.5547, -2450.5938, 30.5547},
		{TYPE_DUMPSTER, -2176.3438, -2424.5781, 30.5547},
		{TYPE_DUMPSTER, -2174.8594, -2365.2734, 30.7969},
		{TYPE_DUMPSTER, -2136.5000, -2263.8984, 30.7266},
		{TYPE_DUMPSTER, -2138.6641, -2262.1953, 30.7266},
		{TYPE_DUMPSTER, -2087.9922, -2440.9453, 30.6953},
		{TYPE_DUMPSTER, -2107.2109, -2423.8906, 30.7969},
		{TYPE_DUMPSTER, -2085.3203, -2414.5078, 30.6406},
		{TYPE_DUMPSTER, -2087.2031, -2343.1016, 30.7969},
		{TYPE_DUMPSTER, -77.2188, -1188.3672, 0.8359},
		{TYPE_DUMPSTER, -68.3516, -1104.9922, 0.2188},
		{TYPE_DUMPSTER, -63.8125, -1106.4219, 0.2188},
		{TYPE_DUMPSTER, -541.4297, -561.2266, 24.5859},
		{TYPE_DUMPSTER, -513.7578, -561.0078, 24.5859},
		{TYPE_DUMPSTER, -502.6094, -528.6484, 24.5859},
		{TYPE_DUMPSTER, -620.4141, -490.5078, 24.5859},
		{TYPE_DUMPSTER, -619.6250, -473.4531, 24.5859},
		{TYPE_BIN, 788.3438, -863.3828, 59.7031},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9844, -841.5234, 59.7031},
		{TYPE_DUMPSTER, 792.6250, -838.8906, 60.6406},
		{TYPE_BIN, 911.7031, -836.2031, 91.3594},
		{TYPE_BIN, 910.8750, -836.6953, 91.1250},
		{TYPE_BIN, 960.2422, -822.8594, 95.5391},
		{TYPE_BIN, 974.9219, -815.5156, 96.7266},
		{TYPE_BIN, 948.4922, -699.7422, 121.2969},
		{TYPE_BIN, 948.0078, -698.7891, 121.3203},
		{TYPE_BIN, 914.3125, -670.3594, 116.2891},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1071.0547, -778.4766, 106.2891},
		{TYPE_BIN, 2380.0312, -1038.0703, 52.8281},
		{TYPE_BIN, 2380.8516, -1039.0547, 52.7891},
		{TYPE_BIN, 2426.7266, -1016.7500, 53.4453},
		{TYPE_BIN, 2436.7109, -1052.2500, 53.4297},
		{TYPE_BIN, 2459.4531, -1051.6094, 58.8438},
		{TYPE_BIN, 2457.3984, -1023.1719, 58.7891},
		{TYPE_BIN, 2484.0859, -1053.1406, 66.6406},
		{TYPE_BIN, 2489.6172, -1022.6094, 64.5156},
		{TYPE_BIN, 2505.0781, -1061.0781, 69.3125},
		{TYPE_BIN, 2527.9219, -1058.1406, 68.6875},
		{TYPE_BIN, 2510.2891, -1029.5859, 69.1797},
		{TYPE_BIN, 2528.6719, -1034.9219, 68.6719},
		{TYPE_BIN, 2538.6484, -1058.6016, 68.6719},
		{TYPE_BIN, 2545.1562, -1034.8984, 68.6641},
		{TYPE_BIN, 2567.8203, -1035.2812, 68.6719},
		{TYPE_DUMPSTER, 1420.1172, -1356.8438, 13.3828},
		{TYPE_DUMPSTER, 1425.5312, -1320.5781, 13.3672},
		{TYPE_DUMPSTER, 1415.6016, -1299.1875, 13.3672},
		{TYPE_DUMPSTER, 1425.5703, -1317.9688, 13.3672},
		{TYPE_DUMPSTER, 1439.8594, -1323.7031, 13.3828},
		{TYPE_DUMPSTER, 1593.0781, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1616.5547, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1660.4688, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1435.5859, -1095.7969, 17.4141},
		{TYPE_DUMPSTER, 1438.1953, -1095.8438, 17.4141},
		{TYPE_DUMPSTER, 1424.5234, -1084.3047, 17.4141},
		{TYPE_DUMPSTER, 1424.5781, -1080.3828, 17.4141},
		{TYPE_DUMPSTER, 1520.1562, -1018.5547, 23.8438},
		{TYPE_DUMPSTER, 1520.2109, -1014.6328, 23.8438},
		{TYPE_DUMPSTER, 1611.6875, -993.9062, 23.8438},
		{TYPE_DUMPSTER, 1659.9141, -1065.1172, 23.7969},
		{TYPE_DUMPSTER, 1631.9219, -987.8281, 23.8438},
		{TYPE_DUMPSTER, 1633.9375, -990.5547, 23.8438},
		{TYPE_DUMPSTER, 1660.2500, -1000.4141, 23.7891},
		{TYPE_DUMPSTER, 1666.3984, -997.7031, 23.7891},
		{TYPE_DUMPSTER, 1786.2109, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1800.4531, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1147.3828, 23.6797},
		{TYPE_DUMPSTER, 1830.6172, -1143.8203, 23.6797},
		{TYPE_DUMPSTER, 1789.7734, -1116.0625, 23.8906},
		{TYPE_DUMPSTER, 1789.9062, -1112.6406, 23.8906},
		{TYPE_DUMPSTER, 1830.5703, -1113.9297, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1097.3047, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1084.2891, 23.6797},
		{TYPE_DUMPSTER, 1336.3359, -1842.8516, 12.6641},
		{TYPE_DUMPSTER, 1336.7891, -1816.3047, 12.6641},
		{TYPE_DUMPSTER, 1466.9453, -1847.8438, 12.6641},
		{TYPE_DUMPSTER, 1419.7344, -1846.5469, 12.6641},
		{TYPE_DUMPSTER, 1419.6953, -1844.2031, 12.6641},
		{TYPE_DUMPSTER, 1486.2109, -1848.1250, 12.6641},
		{TYPE_DUMPSTER, 1468.0625, -1847.7891, 12.6641},
		{TYPE_DUMPSTER, 1516.6875, -1850.0547, 12.6641},
		{TYPE_DUMPSTER, 1337.6953, -1774.7344, 12.6641},
		{TYPE_DUMPSTER, 1461.4297, -1489.2188, 12.6797},
		{TYPE_DUMPSTER, 1538.9453, -1849.2734, 12.6641},
		{TYPE_DUMPSTER, 1534.9297, -1480.9922, 8.6094},
		{TYPE_DUMPSTER, 1537.9297, -1480.6094, 8.6094},
		{TYPE_DUMPSTER, 2382.0234, -1941.0391, 12.6641},
		{TYPE_DUMPSTER, 1920.0547, -2122.4141, 12.6875},
		{TYPE_DUMPSTER, 1920.4844, -2088.1719, 12.6875},
		{TYPE_DUMPSTER, 1092.0078, -1881.2812, 13.3047},
		{TYPE_DUMPSTER, 1175.3828, -1877.5625, 13.3047},
		{TYPE_DUMPSTER, 1091.9844, -1876.8281, 13.3047},
		{TYPE_DUMPSTER, 1101.9922, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 1117.4688, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 432.2422, -1747.8828, 8.3281},
		{TYPE_DUMPSTER, 477.7734, -1746.4531, 8.5000},
		{TYPE_DUMPSTER, 569.5078, -1765.0312, 13.5312},
		{TYPE_DUMPSTER, 732.8516, -1332.8984, 12.6875},
		{TYPE_DUMPSTER, 732.7266, -1341.7734, 12.6328},
		{TYPE_DUMPSTER, 387.1484, -1751.5078, 7.9453},
		{TYPE_DUMPSTER, 387.2266, -1747.7266, 8.3594},
		{TYPE_DUMPSTER, 1322.1875, -1235.8828, 13.4375},
		{TYPE_DUMPSTER, -826.2812, 495.1172, 1357.8594},
		{TYPE_DUMPSTER, -827.2656, 498.1953, 1357.7656},
		{TYPE_DUMPSTER, -829.0312, 498.1953, 1357.5938},
		{TYPE_BIN, -800.9453, 500.8984, 1360.0312},
		{TYPE_BIN, -800.9453, 501.7422, 1360.0312},
		{TYPE_DUMPSTER, -2531.9062, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2526.9453, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2527.2422, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2520.7188, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2524.0625, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2480.8828, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2503.0703, 2364.2188, 4.7578},
		{TYPE_DUMPSTER, -2503.0469, 2368.0469, 4.7578},
		{TYPE_DUMPSTER, -2253.5391, 2372.5469, 4.7578},
		{TYPE_DUMPSTER, -2455.3750, -143.8750, 26.0156},
		{TYPE_DUMPSTER, -2455.3516, -138.0156, 26.0156},
		{TYPE_DUMPSTER, -2753.9453, -178.3281, 6.8359},
		{TYPE_DUMPSTER, -2658.9766, -168.8984, 3.9844},
		{TYPE_DUMPSTER, -2657.9297, -189.0703, 3.9844},
		{TYPE_DUMPSTER, -2652.7891, -188.2891, 3.9844},
		{TYPE_DUMPSTER, -2653.3828, -167.3984, 3.9844},
		{TYPE_DUMPSTER, -2759.2578, -136.2031, 6.8359},
		{TYPE_DUMPSTER, -2753.3125, -149.8516, 6.8359},
		{TYPE_DUMPSTER, -2659.2734, -125.2031, 3.9844},
		{TYPE_DUMPSTER, -2753.2734, -121.6016, 6.8359},
		{TYPE_DUMPSTER, -2759.2031, -120.8203, 6.8359},
		{TYPE_DUMPSTER, -2653.6797, -124.7422, 3.9844},
		{TYPE_DUMPSTER, -2759.9453, -96.8203, 6.8359},
		{TYPE_DUMPSTER, -2763.7031, -13.7344, 6.8359},
		{TYPE_DUMPSTER, -2766.0312, 25.0156, 6.8359},
		{TYPE_DUMPSTER, -2760.7188, -54.3438, 6.8359},
		{TYPE_DUMPSTER, -2759.4766, 7.8906, 6.8359},
		{TYPE_DUMPSTER, -2754.4219, -85.3906, 6.8359},
		{TYPE_DUMPSTER, -2754.8516, -56.6016, 6.8359},
		{TYPE_DUMPSTER, -2755.9141, -36.3828, 6.8359},
		{TYPE_DUMPSTER, -2747.3594, -8.6641, 6.0938},
		{TYPE_DUMPSTER, -2766.4297, 52.0781, 6.9297},
		{TYPE_DUMPSTER, -2766.2109, 86.5781, 6.9297},
		{TYPE_DUMPSTER, -2760.3672, 63.8594, 6.9375},
		{TYPE_DUMPSTER, -2757.9688, 95.9844, 6.9297},
		{TYPE_DUMPSTER, -2756.2656, 90.3594, 6.9297},
		{TYPE_DUMPSTER, -2756.4844, 93.1875, 6.9297},
		{TYPE_DUMPSTER, -2763.1328, 115.3828, 6.8906},
		{TYPE_DUMPSTER, -2760.3672, 144.3516, 6.8828},
		{TYPE_DUMPSTER, -2658.3125, -89.6172, 3.9844},
		{TYPE_DUMPSTER, -2716.9844, 74.3594, 4.0781},
		{TYPE_DUMPSTER, -2717.9219, 77.9219, 4.0781},
		{TYPE_DUMPSTER, -2656.5938, 71.5625, 3.9844},
		{TYPE_DUMPSTER, -2651.2500, 92.4375, 3.9844},
		{TYPE_DUMPSTER, -2649.8125, 52.7500, 3.9844},
		{TYPE_DUMPSTER, -2651.9062, 133.3438, 3.9844},
		{TYPE_DUMPSTER, -2656.7109, 115.3828, 3.9844},
		{TYPE_DUMPSTER, -2657.7734, 135.6016, 3.9844},
		{TYPE_DUMPSTER, 2535.3906, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1665.6875, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1705.5703, 10.6094},
		{TYPE_DUMPSTER, 2657.1250, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1825.4062, 10.6094},
		{TYPE_DUMPSTER, 2178.2188, 1418.8438, 10.6250},
		{TYPE_DUMPSTER, 2181.5625, 1418.8438, 10.6250},
		{TYPE_BIN, 2065.7344, 637.5781, 11.2031},
		{TYPE_BIN, 2011.1328, 638.1172, 11.2031},
		{TYPE_DUMPSTER, 1878.6484, 683.7734, 10.6250},
		{TYPE_DUMPSTER, 1881.3828, 683.7734, 10.6250},
		{TYPE_BIN, 1885.4844, 683.7500, 10.5625},
		{TYPE_DUMPSTER, 1969.9453, 693.7422, 10.6250},
		{TYPE_BIN, 1976.6797, 693.7109, 10.5625},
		{TYPE_BIN, 1969.2109, 712.7344, 10.5625},
		{TYPE_DUMPSTER, 1975.6953, 712.7031, 10.6250},
		{TYPE_DUMPSTER, 2006.1953, 706.4531, 11.2500},
		{TYPE_BIN, 2043.4531, 708.3672, 11.1953},
		{TYPE_DUMPSTER, 1884.8359, 722.7031, 10.6250},
		{TYPE_DUMPSTER, 1882.1016, 722.7031, 10.6250},
		{TYPE_BIN, 1877.8828, 722.7344, 10.5625},
		{TYPE_BIN, 2010.3125, 718.0391, 11.1953},
		{TYPE_DUMPSTER, 2009.2812, 786.4297, 11.2500},
		{TYPE_BIN, 2046.0547, 788.3906, 11.1953},
		{TYPE_BIN, 2065.2812, 717.4688, 11.1953},
		{TYPE_BIN, 2071.4609, 788.9609, 11.1953},
		{TYPE_BIN, 2128.2500, 640.0781, 11.2031},
		{TYPE_BIN, 2090.1562, 638.1016, 11.2031},
		{TYPE_DUMPSTER, 2224.1328, 666.4062, 11.2500},
		{TYPE_DUMPSTER, 2086.3672, 706.4531, 11.2500},
		{TYPE_BIN, 2123.2734, 708.4297, 11.1953},
		{TYPE_BIN, 2174.5703, 678.0625, 11.1953},
		{TYPE_BIN, 2180.9531, 668.4141, 11.2031},
		{TYPE_BIN, 2206.4688, 669.0078, 11.2031},
		{TYPE_DUMPSTER, 2210.4766, 679.9453, 11.2500},
		{TYPE_BIN, 2219.0312, 677.5234, 11.1953},
		{TYPE_BIN, 2254.0859, 677.9844, 11.1953},
		{TYPE_BIN, 2261.4688, 668.3828, 11.1953},
		{TYPE_BIN, 2088.5156, 718.0469, 11.1953},
		{TYPE_DUMPSTER, 2087.4219, 786.4297, 11.2500},
		{TYPE_BIN, 2126.7969, 719.9062, 11.1953},
		{TYPE_BIN, 2126.6797, 788.4062, 11.1953},
		{TYPE_BIN, 2180.2188, 748.3828, 11.1953},
		{TYPE_DUMPSTER, 2180.6016, 778.2266, 11.2500},
		{TYPE_BIN, 2186.9219, 748.3828, 11.1953},
		{TYPE_BIN, 2205.6641, 748.9141, 11.1953},
		{TYPE_DUMPSTER, 2222.5234, 746.4219, 11.2500},
		{TYPE_BIN, 2260.3438, 748.4219, 11.1953},
		{TYPE_DUMPSTER, 2364.0781, 666.5703, 11.2500},
		{TYPE_BIN, 2359.7109, 677.4844, 11.1953},
		{TYPE_BIN, 2394.3906, 678.0312, 11.1953},
		{TYPE_DUMPSTER, 2460.6172, 696.5859, 11.2500},
		{TYPE_BIN, 2463.1250, 706.3438, 11.1953},
		{TYPE_BIN, 2463.1250, 707.8203, 11.1953},
		{TYPE_DUMPSTER, 2538.3125, 716.4219, 10.6172},
		{TYPE_DUMPSTER, 2364.0781, 746.4219, 11.2500},
		{TYPE_BIN, 2462.5859, 739.7500, 11.1953},
		{TYPE_DUMPSTER, 2578.8906, 723.9531, 10.6172},
		{TYPE_DUMPSTER, 2615.2578, 716.3984, 10.6172},
		{TYPE_DUMPSTER, 2658.3438, 716.3984, 10.6172},
		{TYPE_BIN, 2821.8750, 858.1875, 10.4844},
		{TYPE_BIN, 2836.9531, 858.1953, 10.4844},
		{TYPE_DUMPSTER, 2879.0859, 858.1562, 10.5391},
		{TYPE_BIN, 2863.4688, 946.0156, 10.4844},
		{TYPE_DUMPSTER, 2879.6484, 945.9688, 10.5391},
		{TYPE_DUMPSTER, 2764.9766, 1437.9766, 10.5547},
		{TYPE_DUMPSTER, 2763.0469, 1443.0781, 10.5547},
		{TYPE_DUMPSTER, 2108.6562, 2650.0625, 10.5938},
		{TYPE_DUMPSTER, 2120.5156, 2667.0859, 10.6172},
		{TYPE_DUMPSTER, 2120.3359, 2669.8984, 10.6172},
		{TYPE_DUMPSTER, 2180.9766, 2747.1484, 10.6172},
		{TYPE_DUMPSTER, 2190.2500, 2792.6016, 10.6172},
		{TYPE_DUMPSTER, 2203.6406, 2808.6719, 10.6172},
		{TYPE_DUMPSTER, 2229.1641, 2812.1562, 10.5938},
		{TYPE_DUMPSTER, 2256.7500, 2527.4922, 10.6172},
		{TYPE_DUMPSTER, 2260.3516, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2264.1719, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2273.8438, 2784.4531, 10.5703},
		{TYPE_DUMPSTER, 2287.7891, 2784.2891, 10.5703},
		{TYPE_DUMPSTER, 2361.7969, 2793.0156, 10.6172},
		{TYPE_DUMPSTER, 2361.1016, 2783.2188, 10.6172},
		{TYPE_DUMPSTER, 2361.2422, 2781.7656, 10.6250},
		{TYPE_DUMPSTER, 2374.3516, 2759.8750, 10.6328},
		{TYPE_DUMPSTER, 2377.2109, 2759.4453, 10.6172},
		{TYPE_DUMPSTER, 2379.2578, 2759.4062, 10.6328},
		{TYPE_DUMPSTER, 2596.2500, 2045.4141, 10.6172},
		{TYPE_DUMPSTER, 2579.4141, 2081.3516, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2053.7578, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2072.0000, 10.6172},
		{TYPE_DUMPSTER, 2596.2500, 2077.6953, 10.6172},
		{TYPE_DUMPSTER, 2514.1875, 2316.5938, 10.6250},
		{TYPE_DUMPSTER, 2550.1094, 2245.0234, 10.6172},
		{TYPE_DUMPSTER, 2542.9141, 2317.9609, 10.6328},
		{TYPE_DUMPSTER, 2545.7031, 2317.8594, 10.6250},
		{TYPE_DUMPSTER, 2257.9375, 2298.6797, 10.6250},
		{TYPE_DUMPSTER, 2781.6250, 2544.4375, 10.6172},
		{TYPE_DUMPSTER, 2809.6094, 2581.0000, 10.6172},
		{TYPE_DUMPSTER, 2818.9297, 2590.2969, 10.6250},
		{TYPE_DUMPSTER, 2820.3594, 2592.9375, 10.6172},
		{TYPE_DUMPSTER, 2253.9062, 2336.5156, 10.6172},
		{TYPE_DUMPSTER, 1004.8125, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1002.5625, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1346.2734, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1341.3516, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1339.0781, 1064.0781, 10.6250},
		{TYPE_DUMPSTER, 1303.2188, 1102.7188, 10.6250},
		{TYPE_DUMPSTER, 1338.8047, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1584.9297, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1632.0156, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1634.6797, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1635.9844, 892.2109, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 691.1641, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 688.6250, 10.9297},
		{TYPE_DUMPSTER, 1478.1250, 963.5625, 10.6250},
		{TYPE_DUMPSTER, 1478.1250, 967.0703, 10.6250},
		{TYPE_DUMPSTER, 1518.2500, 971.4609, 10.9297},
		{TYPE_DUMPSTER, 1518.2500, 979.7656, 10.9297},
		{TYPE_DUMPSTER, 1557.6562, 970.5625, 10.6250},
		{TYPE_DUMPSTER, 1557.7422, 968.3125, 10.9297},
		{TYPE_DUMPSTER, 1464.2188, 1081.7422, 10.6250},
		{TYPE_DUMPSTER, 1598.6250, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1603.0078, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1668.0547, 911.7969, 10.9297},
		{TYPE_DUMPSTER, 1732.7422, 967.8359, 10.9297},
		{TYPE_DUMPSTER, 1745.3594, 1049.3906, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1168.2734, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1694.4141, 1160.8594, 9.8125},
		{TYPE_DUMPSTER, 1680.2734, 1251.8594, 9.9062},
		{TYPE_DUMPSTER, 1734.2578, 1249.0547, 10.9297},
		{TYPE_DUMPSTER, 1947.6875, 2331.5469, 10.5625},
		{TYPE_DUMPSTER, 1980.8438, 2331.5156, 10.5625},
		{TYPE_DUMPSTER, 1427.1797, 1905.2578, 9.9453},
		{TYPE_BIN, 1427.2422, 1891.8828, 9.9219},
		{TYPE_BIN, 1427.2422, 1893.1094, 9.9219},
		{TYPE_BIN, 1427.2422, 1911.9297, 9.9219},
		{TYPE_BIN, 1427.2422, 1910.7031, 9.9219},
		{TYPE_BIN, 1427.2422, 1915.1328, 9.9219},
		{TYPE_BIN, 1430.2031, 1932.2812, 9.9219},
		{TYPE_BIN, 1431.4297, 1932.2812, 9.9219},
		{TYPE_BIN, 1434.6328, 1932.2812, 9.9219},
		{TYPE_BIN, 1446.2656, 1884.8438, 9.9219},
		{TYPE_BIN, 1446.2656, 1888.0547, 9.9219},
		{TYPE_BIN, 1446.2656, 1910.7031, 9.9219},
		{TYPE_BIN, 1446.2656, 1911.9297, 9.9219},
		{TYPE_BIN, 1446.2656, 1915.1328, 9.9219},
		{TYPE_DUMPSTER, 1446.1016, 1917.5938, 9.9453},
		{TYPE_BIN, 1666.5469, 2042.2109, 9.9219},
		{TYPE_BIN, 1666.5469, 2039.0078, 9.9219},
		{TYPE_BIN, 1666.5469, 2037.7812, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2034.5312, 9.9453},
		{TYPE_BIN, 1659.1406, 2050.9062, 9.9219},
		{TYPE_BIN, 1659.1406, 2049.1406, 9.9219},
		{TYPE_BIN, 1659.1406, 2046.4688, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2056.0000, 9.9453},
		{TYPE_BIN, 1659.1406, 2068.9688, 9.9219},
		{TYPE_BIN, 1659.1406, 2070.7344, 9.9219},
		{TYPE_BIN, 1659.2109, 2086.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2092.3047, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2084.4844, 9.9453},
		{TYPE_BIN, 1666.6562, 2062.5312, 9.9219},
		{TYPE_BIN, 1666.6562, 2064.2969, 9.9219},
		{TYPE_BIN, 1666.6562, 2098.8438, 9.9219},
		{TYPE_BIN, 1666.6562, 2100.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2116.0156, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2109.2188, 9.9453},
		{TYPE_BIN, 1659.2109, 2121.7031, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2124.2266, 9.9453},
		{TYPE_BIN, 1666.9609, 2128.7344, 9.9219},
		{TYPE_BIN, 1666.9609, 2134.4219, 9.9219},
		{TYPE_BIN, 1659.0078, 2144.4297, 9.9219},
		{TYPE_BIN, 1659.0078, 2142.6641, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2159.1094, 9.9453},
		{TYPE_DUMPSTER, 1659.1016, 2161.6016, 9.9453},
		{TYPE_BIN, 1047.7969, 1991.3906, 9.9531},
		{TYPE_BIN, 1047.7969, 1990.1641, 9.9531},
		{TYPE_BIN, 1047.7969, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1991.3906, 9.9531},
		{TYPE_BIN, 1066.8203, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1990.1641, 9.9531},
		{TYPE_DUMPSTER, 1066.6562, 1997.0547, 9.9453},
		{TYPE_BIN, 1066.4766, 2017.5078, 9.9531},
		{TYPE_BIN, 1048.5000, 2012.0391, 9.9531},
		{TYPE_BIN, 1066.4766, 2018.7344, 9.9531},
		{TYPE_BIN, 1066.4766, 2021.9375, 9.9531},
		{TYPE_DUMPSTER, 1048.3359, 2017.7031, 9.9453},
		{TYPE_BIN, 1567.8203, 2096.8047, 9.9219},
		{TYPE_BIN, 1567.8203, 2095.5781, 9.9219},
		{TYPE_BIN, 1567.8203, 2133.4844, 9.9219},
		{TYPE_BIN, 1567.8203, 2134.7109, 9.9219},
		{TYPE_BIN, 1567.8203, 2157.5469, 9.9219},
		{TYPE_BIN, 1567.8203, 2156.3203, 9.9219},
		{TYPE_BIN, 1567.8203, 2160.7500, 9.9219},
		{TYPE_DUMPSTER, 1577.5859, 2161.1484, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2119.1016, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2091.5391, 10.2109},
		{TYPE_BIN, 1577.7578, 2158.6875, 9.9219},
		{TYPE_BIN, 1577.7578, 2155.4844, 9.9219},
		{TYPE_BIN, 1577.7578, 2154.2578, 9.9219},
		{TYPE_BIN, 1577.7578, 2113.4375, 9.9219},
		{TYPE_BIN, 1577.7578, 2112.2109, 9.9219}
	};
	
new
	FactoryData[][e_factorydata] = {
	// location, x, y, z
	    {"Los Santos", 2432.553710, -2115.611328, 13.546875},
		{"Las Venturas", 981.711303, 2168.738769, 10.820312},
		{"San Fierro", -1044.592895, -606.348876, 32.007812}
	};

new
	bool: HasTrash[MAX_PLAYERS],
	TrashCP[MAX_PLAYERS] = {-1, ...},
    FactoryIcons[MAX_PLAYERS][sizeof(FactoryData)],
    PlayerText: CapacityText[MAX_PLAYERS],
    PlayerBar: CapacityBar[MAX_PLAYERS];

new
	LoadedTrash[MAX_VEHICLES];

Trash_InitPlayer(playerid)
{
    HasTrash[playerid] = false;
    TrashCP[playerid] = -1;
    
    for(new i; i < sizeof(FactoryData); i++)
	{
		TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		FactoryIcons[playerid][i] = -1;
	}
	
	CapacityText[playerid] = CreatePlayerTextDraw(playerid, 32.000000, 290.000000, "Vehicle Capacity (0/10)");
	PlayerTextDrawBackgroundColor(playerid, CapacityText[playerid], 255);
	PlayerTextDrawFont(playerid, CapacityText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, CapacityText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, CapacityText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, CapacityText[playerid], 0);
	
	CapacityBar[playerid] = CreatePlayerProgressBar(playerid, 30.000000, 304.000000, 118.500000, 6.199999, -1429936641, TRASH_LIMIT);
	return 1;
}

Trash_ResetPlayer(playerid, removeUI = 0)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACHMENT_INDEX)) RemovePlayerAttachedObject(playerid, ATTACHMENT_INDEX);
	if(IsValidDynamicCP(TrashCP[playerid])) DestroyDynamicCP(TrashCP[playerid]);
	HasTrash[playerid] = false;
	TrashCP[playerid] = -1;
	
	if(removeUI)
	{
	    PlayerTextDrawDestroy(playerid, CapacityText[playerid]);
	    DestroyPlayerProgressBar(playerid, CapacityBar[playerid]);
	}
	
	return 1;
}

Trash_ShowCapacity(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid), capacity_string[32];
    format(capacity_string, sizeof(capacity_string), "Vehicle Capacity (%d/%d)", LoadedTrash[vehicleid], TRASH_LIMIT);
    PlayerTextDrawSetString(playerid, CapacityText[playerid], capacity_string);
    PlayerTextDrawShow(playerid, CapacityText[playerid]);

	SetPlayerProgressBarValue(playerid, CapacityBar[playerid], LoadedTrash[vehicleid]);
	ShowPlayerProgressBar(playerid, CapacityBar[playerid]);
	return 1;
}

Trash_Closest(playerid)
{
	new closest_id = -1, Float: dist = 3.0, Float: tempdist;
    for(new i; i < sizeof(TrashData); i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]);
		if(tempdist > 3.0) continue;
		if(tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}
	
	return closest_id;
}

forward FillTrash(id);
public FillTrash(id)
{
	TrashData[id][TrashLevel]++;
	if(TrashData[id][TrashType] == TYPE_BIN && TrashData[id][TrashLevel] > 1) TrashData[id][TrashLevel] = 1;

	if(TrashData[id][TrashType] == TYPE_DUMPSTER) {
		if(TrashData[id][TrashLevel] == 1) TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
		if(TrashData[id][TrashLevel] >= 2)
		{
			TrashData[id][TrashLevel] = 2;
			KillTimer(TrashData[id][TrashTimer]);
			TrashData[id][TrashTimer] = -1;
		}

		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 1) ? 0xF39C12FF : 0x2ECC71FF);
		return 1;
	}

	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, 0x2ECC71FF);
	return 1;
}

forward SecondTimer();
public SecondTimer()
{
	if(gCanRob > 0)
	{
	    gCanRob--;
	}

	new hour, minute, boomboxid, string[128];
	gettime(hour, minute);

	for(new businessid; businessid<MAX_BUSINESSES; businessid++)
	{
		if(BusinessInfo[businessid][bExists] && BusinessInfo[businessid][bTime] != -1)
		{
			if(gettime() > BusinessInfo[businessid][bTime])
			{
				if(GetPlayerID(BusinessInfo[businessid][bOwner]) != INVALID_PLAYER_ID)
					SM(GetPlayerID(BusinessInfo[businessid][bOwner]), COLOR_WHITE, "Your %s (ID: %i) business has expired and sold to government.", bizInteriors[BusinessInfo[businessid][bType]][intType], businessid);
				SetBusinessOwner(businessid, INVALID_PLAYER_ID);
			}
		}
	}


	foreach(new i : Player)
	{
  		if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
		{
			ComServ(i);
		    AFKCheck(i);
			AntiCarSurf(i);
			
			PlayerInfo[i][pConnectTime]++;
			if(PlayerInfo[i][pLastRob] != 0)
			{
				PlayerInfo[i][pLastRob]--;
			}

			if(PlayerInfo[i][pBombTimer] != 0)
			{
				PlayerInfo[i][pBombTimer]--;
				new c4[256];
				format(c4, sizeof(c4), "~y~C4 Bomb Planted. MOVE FAR!~n~~r~Explodes in %i seconds", PlayerInfo[i][pBombTimer]);
				GameTextForPlayer(i, c4, 1000, 4);
			}

			if(IsPlayerInDynamicArea(i, mafiazone))
			{
				SetPlayerHealth(i, 0.0);
			}

			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				new veh = GetPlayerVehicleID(i);
				{
					if(GetVehicleSpeed(veh) > 50 && vehicleEng[veh] == false)
					{
						SCM(i, COLOR_SYNTAX, "Maybe you don't on the vehicle enging. Please turn on vehicle engine.");
						RemovePlayerFromVehicle(i);
					}
				}
			}

			if(GetPlayerMoney(i) != PlayerInfo[i][pCash]  && PlayerInfo[i][pPaintball] == 0)
			{
				ResetPlayerMoney(i);
				GivePlayerMoney(i, PlayerInfo[i][pCash]);
			}

			if(TotalProducts[i] != 0 || TotalPrice[i] != 0)
			{
				if(!MenuStore_IsOpen(i))
				{
					TotalProducts[i] = 0;
					TotalPrice[i] = 0;
					strcpy(Products[i], "", 2000);
				}
			}

			if(PoisonMsg[i] != 0)
			{
				PoisonMsg[i]--;
				if(PoisonMsg[i] == 0)
				{
					SCM(i, COLOR_WHITE, "You've been poisoned! You'll start losing health, get stoned to cure.");
					PoisonMsg[i] = 0;
				}
			}

		    new Float:vhp;
			for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
			{
				if(GetVehicleModel(vehicleid) == 0) continue; //only returns 0 when vehicle is invalid (not spawned)
				GetVehicleHealth(vehicleid,vhp);
				if(vhp < 300.0) {
					SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
					vehicleEng[vehicleid] = false;
					SetVehicleHealth(vehicleid, 251.0);
				}
			}

            if(PlayerInfo[i][pDraggedBy] != INVALID_PLAYER_ID)
            {
                Freeze(i);
            }

   			SetPlayerWantedLevel(i, PlayerInfo[i][pWantedLevel]);
	    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(i);
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
			    {
					for(new x = 0; x < MAX_DEPLOYABLES; x++)
					{
					    if(DeployInfo[x][dExists] && DeployInfo[x][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(i, 4.0, DeployInfo[x][dPosX], DeployInfo[x][dPosY], DeployInfo[x][dPosZ]))
				        {
				        	if(GetVehicleTireStatus(vehicleid, VEHICLE_LEFT_FRONT_WHEEL)==0)
							{
								SetVehicleTireStatus(vehicleid, VEHICLE_LEFT_FRONT_WHEEL);
							}
				        	if(GetVehicleTireStatus(vehicleid, VEHICLE_RIGHT_FRONT_WHEEL)==0)
							{
								SetVehicleTireStatus(vehicleid, VEHICLE_RIGHT_FRONT_WHEEL);
							}
				        	if(GetVehicleTireStatus(vehicleid, VEHICLE_LEFT_BACK_WHEEL)==0)
							{
								SetVehicleTireStatus(vehicleid, VEHICLE_LEFT_BACK_WHEEL);
							}
				        	if(GetVehicleTireStatus(vehicleid, VEHICLE_RIGHT_BACK_WHEEL)==0)
							{
								SetVehicleTireStatus(vehicleid, VEHICLE_RIGHT_BACK_WHEEL);
							}
				        }
					}
				}
			}
	        if(PlayerInfo[i][pCapturingPoint] >= 0)
			{
				PlayerInfo[i][pCaptureTime]--;
				new turfstring[4];
				format(turfstring, sizeof(turfstring), "~w~Capturing ~r~%i", PlayerInfo[i][pCaptureTime]);
				GameTextForPlayer(i, turfstring, 1000, 4);

				if(PlayerInfo[i][pCaptureTime] <= 0)
				{
					new Float:x, Float:y, Float:z;

					GetPlayerPos(i, x, y, z);

					if(PointInfo[PlayerInfo[i][pCapturingPoint]][pTime] == 0 && PlayerInfo[i][pPointX] == x && PlayerInfo[i][pPointY] == y && PlayerInfo[i][pPointZ] == z)
					{
						SMA(COLOR_GREEN, "%s attempted to capture %s for %s. It will be theirs in 10 minutes.", GetRPName(i), PointInfo[PlayerInfo[i][pCapturingPoint]][pName], GangInfo[PlayerInfo[i][pGang]][gName]);

						PointInfo[PlayerInfo[i][pCapturingPoint]][pCaptureTime] = 10;
						PointInfo[PlayerInfo[i][pCapturingPoint]][pCapturer] = i;
						PointInfo[PlayerInfo[i][pCapturingPoint]][pCapturingGang] = PlayerInfo[i][pGang];
						strcpy(PointInfo[PlayerInfo[i][pCapturingPoint]][pCapturingUser], GetRPName(i), MAX_PLAYER_NAME);
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "You moved from your position and therefore failed to capture.");
					}

					PlayerInfo[i][pCapturingPoint] = -1;
					PlayerInfo[i][pCaptureTime] = -1;
				}
			}
	    	if(Maskara[i] == 1)
        	{
				new masked[256];
				format(masked, sizeof(masked), "Stranger_%i", MaskaraID[i]);
				SetPlayerName(i, masked);
    		}
			if(PlayerInfo[i][pLoopAnim] && !PlayerInfo[i][pToggleTextdraws])
			{
				TextDrawShowForPlayer(i, AnimationTD);
		    }
			else
			{
		        TextDrawHideForPlayer(i, AnimationTD);
		    }
		   	if((++PlayerInfo[i][pHungerTimer] >= 300) && (PlayerInfo[i][pHunger] > 0) && (!PlayerInfo[i][pAFK]) && (PlayerInfo[i][pHospital] == 0)) // 10 minutes
			{
				PlayerInfo[i][pHungerTimer] = 0;
				PlayerInfo[i][pHunger] -= 1;
				if(PlayerInfo[i][pHunger] == 10)
				{
					SendMessage(i, COLOR_RED, "You hear your stomach rumble, you need to eat. You can die due to starvation");
				}
				if(PlayerInfo[i][pHunger] == 1)
				{
					SendMessage(i, COLOR_RED, "You fall unconcious due to starvation.");
                    SetPlayerHealth(i, 0.0);
				}
			}
			if((++PlayerInfo[i][pThirstTimer] >= 300) && (PlayerInfo[i][pThirst] > 0) && (!PlayerInfo[i][pAFK]) && (PlayerInfo[i][pHospital] == 0)) // 10 minutes
			{
				PlayerInfo[i][pThirstTimer] = 0;
				PlayerInfo[i][pThirst] -= 1;

				if(PlayerInfo[i][pThirst] == 10)
				{
					SendMessage(i, COLOR_RED, "You are thirsty, you need to drink. You can die due to thirst!");
				}
   				if(PlayerInfo[i][pThirst] == 1)
				{
					SendMessage(i, COLOR_RED, "You fall unconcious due to thirst.");
     				SetPlayerHealth(i, 0.0);
				}
			}
			format(string, sizeof(string), "~y~F~w~: ~g~%d.0 ~r~& ~y~W~w~: ~g~%d.0", PlayerInfo[i][pHunger], PlayerInfo[i][pThirst]);
			PlayerTextDrawSetString(i, HungerTD[i], string);


			if (PlayerInfo[i][pSpeedTime] > 0)
			{
			    PlayerInfo[i][pSpeedTime]--;
			}
		    if(PlayerInfo[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498 && GetVehicleModel(GetPlayerVehicleID(i)) != 499))
				{
			    	PlayerInfo[i][pShipment] = -1;
			    	SCM(i, COLOR_SYNTAX, "Shipment cancelled. You went into another vehicle.");
				}
		    }

			if(PlayerInfo[i][pID] == 1 && PlayerInfo[i][pSkin] != 119)
			{
				SetScriptSkin(i, 119);
				PlayerInfo[i][pSkin] = 119; 
			}
			

		    if(PlayerInfo[i][pYFoods] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 448)
				{
				    if(PlayerInfo[i][pYFoodTime] < 90)
					{
						PlayerInfo[i][pYFoodTime]++;
					}
				}
				else
				{
				    PlayerInfo[i][pYFoods] = 0;
				    PlayerInfo[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, COLOR_SYNTAX, "Pizza delivery cancelled. You went into another vehicle.");
				}
			}
			else if (PlayerInfo[i][pGraffiti] != -1 && PlayerInfo[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != PlayerInfo[i][pGraffiti])
				{
				    PlayerInfo[i][pGraffiti] = -1;
            	    PlayerInfo[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        PlayerInfo[i][pGraffitiTime]--;

		            if (PlayerInfo[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, PlayerInfo[i][pGraffitiText]);
	        	        format(GraffitiData[PlayerInfo[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[PlayerInfo[i][pGraffiti]][graffitiColor] = PlayerInfo[i][pGraffitiColor];

						Graffiti_Refresh(PlayerInfo[i][pGraffiti]);
					    Graffiti_Save(PlayerInfo[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, SERVER_COLOR, "**{C2A2DA} %s puts their can of spray paint away.", GetRPName(i));

		   	            PlayerInfo[i][pGraffiti] = -1;
		   	            PlayerInfo[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!PlayerInfo[i][pToggleTextdraws])
		    {
			    if(PlayerInfo[i][pGPSOn])
				{
				    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
				        HideGPSTextdraw(i);
					}
				    else {
						new Float:rz;
						if(IsPlayerInAnyVehicle(i)) {
							GetVehicleZAngle(GetPlayerVehicleID(i), rz);
						}
						else {
							GetPlayerFacingAngle(i, rz);
						}

						if(rz >= 348.75 || rz < 11.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "N");
						else if(rz >= 326.25 && rz < 348.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NE");
						else if(rz >= 303.75 && rz < 326.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NE");
						else if(rz >= 281.25 && rz < 303.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NE");
						else if(rz >= 258.75 && rz < 281.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "E");
						else if(rz >= 236.25 && rz < 258.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SE");
						else if(rz >= 213.75 && rz < 236.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SE");
						else if(rz >= 191.25 && rz < 213.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SE");
						else if(rz >= 168.75 && rz < 191.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "S");
						else if(rz >= 146.25 && rz < 168.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SW");
						else if(rz >= 123.25 && rz < 146.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SW");
						else if(rz >= 101.25 && rz < 123.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SW");
						else if(rz >= 78.75 && rz < 101.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "W");
						else if(rz >= 56.25 && rz < 78.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NW");
						else if(rz >= 33.75 && rz < 56.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NW");
						else if(rz >= 11.5 && rz < 33.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NW");
						PlayerTextDrawSetString(i, PlayerInfo[i][pText][0], GetPlayerZoneName(i));
					}
				}
				if(PlayerInfo[i][pWatchOn])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
						TextDrawHideForPlayer(i, TimeTD);
					else
					    TextDrawShowForPlayer(i, TimeTD);
				}
				if(!PlayerInfo[i][pToggleHUD])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
						PlayerTextDrawHide(i, PlayerInfo[i][pText][4]);
					    PlayerTextDrawHide(i, PlayerInfo[i][pText][5]);
					}
					else
					{
					    PlayerTextDrawShow(i, PlayerInfo[i][pText][4]);
					    PlayerTextDrawShow(i, PlayerInfo[i][pText][5]);
					}
				}
			}

		    if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - PlayerInfo[i][pLastDesync] > 120)
	        {
	            SCM(i, COLOR_REALRED, "** WARNING: You are desynced. You are advised to relog once you see this message.");
	            PlayerInfo[i][pLastDesync] = gettime();
	        }
		    if(PlayerInfo[i][pTutorial])
		    {
		        Freeze(i);
		    }
			if(PlayerInfo[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(PlayerInfo[i][pDraggedBy] != INVALID_PLAYER_ID && GetPlayerState(PlayerInfo[i][pDraggedBy]) == PLAYER_STATE_ONFOOT)
			{
	    		TeleportToPlayer(i, PlayerInfo[i][pDraggedBy]);
			}

			if(PlayerInfo[i][pDonator] > 0 && gettime() > PlayerInfo[i][pVIPTime])
			{
  				if(PlayerInfo[i][pLevel] != 1)
				{
				    PlayerInfo[i][pDonator] = 0;
				    PlayerInfo[i][pVIPTime] = 0;
				    PlayerInfo[i][pSecondJob] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SCM(i, COLOR_LIGHTRED, "Your donator subscription has expired. You are no longer a VIP.");
				}
			}
			if(PlayerInfo[i][pDonator] < 1 && PlayerInfo[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    PlayerInfo[i][pSecondJob] = JOB_NONE;
			    SCM(i, COLOR_LIGHTRED, "Your second job has been removed as you don't have a Donator subscription.");
			}
			if(PlayerInfo[i][pTazedTime] > 0)
			{
			    PlayerInfo[i][pTazedTime]--;

			    if(!PlayerInfo[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);
			        Unfreeze(i);
			    }
			}
			if(PlayerInfo[i][pHurt] > 0)
			{
				PlayerInfo[i][pHurt]--;
			}
			if(PlayerInfo[i][pFishTime] > 0)
			{
			    PlayerInfo[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    PlayerInfo[i][pFishTime] = 0;
				}
			    else if(PlayerInfo[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);
					ClearAnimations(i);
					Unfreeze(i);

					if(1 <= rand <= 20)
	    			{
	 	   				SCM(i, COLOR_SYNTAX, "You reeled in your line and caught nothing...");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 80 + random(50);

		    			SM(i, COLOR_AQUA, "You reeled in your line and caught a used wallet with $%i inside.", amount);
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(50) + 200;

					    SM(i, COLOR_AQUA, "You reeled in your line and caught a rare 18th century coin valued at $%i!", amount);
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight;

					    if(PlayerInfo[i][pUsedBait])
						{
							weight = random(10) + 5;
					    }
						else
						{
					        weight = random(10);
	    		        }

	    		        SM(i, COLOR_AQUA, "You reeled in your line and caught a fish weighing %i kg!", weight);
						PlayerInfo[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i WHERE uid = %i", PlayerInfo[i][pFishWeight], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						IncreaseJobSkill(i, JOB_FISHERMAN);
						ClearAnimations(i);

						if(GetJobLevel(i, JOB_FISHERMAN) == 1)
						{
							if(PlayerInfo[i][pFishWeight] >= 50)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 2)
						{
							if(PlayerInfo[i][pFishWeight] >= 100)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 3)
						{
							if(PlayerInfo[i][pFishWeight] >= 150)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 4)
						{
							if(PlayerInfo[i][pFishWeight] >= 200)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 5)
						{
							if(PlayerInfo[i][pFishWeight] >= 250)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}
			if(PlayerInfo[i][pJailType] > 0)
			{
			    PlayerInfo[i][pJailTime]--;

			    if(PlayerInfo[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "Your jail sentence has expired.");
			        TeleportToCoords(i, -1755.5676, 957.1321, 24.8828, 182.8251, 0, 0, true, false);
					SetCameraBehindPlayer(i);

					PlayerInfo[i][pJailType] = 0;
			        PlayerInfo[i][pJailTime] = 0;
				}
			}
			if(PlayerInfo[i][pHospital] && PlayerInfo[i][pHospitalTime])
			{
				PlayerInfo[i][pHospitalTime]--;

				if(PlayerInfo[i][pHospitalTime] == 0)
				{
					new rand = random(sizeof(hospitalspawns));
					TeleportToCoords(i, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2], hospitalspawns[rand][3], 1, 1, true, false);
					SetCameraBehindPlayer(i);

                	if(PlayerInfo[i][pWantedLevel] >= 1)
					{
						if(GetPlayerVirtualWorld(i) == 1)
						{
				            foreach(new k : Player)
							{
								if(IsLawEnforcement(k))
						    	{
						    		SM(k, COLOR_YELLOW, "County General Hospital has reported %s a wanted suspect with %i charges!", GetRPName(i), PlayerInfo[i][pWantedLevel]);
								}
							}
						}
						else if(GetPlayerVirtualWorld(i) == 2)
						{
						    foreach(new j : Player)
							{
								if(IsLawEnforcement(j))
						    	{
						    		SM(j, COLOR_YELLOW, "All Saints Hospital has reported %s a wanted suspect with %i charges!", GetRPName(i), PlayerInfo[i][pWantedLevel]);
								}
							}
						}
					}

					if(!enabledpurge) {
						if(PlayerInfo[i][pDonator] == 0)
						{
							GivePlayerCash(i, -500);
							Dyuze(i, "Notice", "Discharged we deduct you $500.");
						}
						else
						{
							Dyuze(i, "Notice", "Discharged. No fees were deducted!");
						}
						if(PlayerInfo[i][pDelivered])
						{
							if(PlayerInfo[i][pDonator] == 0)
								SCM(i, COLOR_DOCTOR, "You have been billed $500 for your stay. Your items is safed!");
							else
								SCM(i, COLOR_DOCTOR, "As you're a Donator, you skipped the hospital bill. Your items is safed!");
							PlayerInfo[i][pDelivered] = 0;
						}
						else
						{
							if(PlayerInfo[i][pDonator] == 0)
								SCM(i, COLOR_DOCTOR, "You have been billed $500 for your stay. Your illegal items have been confiscated by staff.");
							else
								SCM(i, COLOR_DOCTOR, "As you're a Donator, you skipped the hospital bill. Your illegal items have been confiscated by staff.");
							SCM(i, COLOR_LIGHTRED, "(( You have lost 30 minutes of your memory. ))");
							if(PlayerInfo[i][pRobbingHouse] >= 0)
							{
							    PlayerInfo[i][pLootTime] = 0;
								PlayerInfo[i][pDirtyCash] -= PlayerInfo[i][pRobCash];
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
								mysql_tquery(connectionID, queryBuffer);
							    PlayerInfo[i][pRobCash] = 0;
		            			CancelActiveCheckpoint(i);
		            			SCM(i, COLOR_WHITE, "You have failed to rob the house. You lost all the dirty money and the robbery has been cancelled.");
							}

		                    if(PlayerInfo[i][pRobbingBiz] >= 0)
							{
							    PlayerInfo[i][pLootTime] = 0;
								PlayerInfo[i][pDirtyCash] -= PlayerInfo[i][pRobCash];
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
								mysql_tquery(connectionID, queryBuffer);
							    PlayerInfo[i][pRobCash] = 0;
		            			CancelActiveCheckpoint(i);
		            			SCM(i, COLOR_WHITE, "You have failed to rob the business. You lost all the dirty money and the robbery has been cancelled.");
							}
							if(PlayerInfo[i][pRobbingAtm] != INVALID_OBJECT_ID && IsValidDynamicObject(PlayerInfo[i][pRobbingAtm]) && ObjectData[PlayerInfo[i][pRobbingAtm]][mobjRob] == 1)
							{
								KillTimer(PlayerInfo[i][pRobbingTimer]);
								PlayerInfo[i][pDirtyCash] -= PlayerInfo[i][pRobCash];
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
								mysql_tquery(connectionID, queryBuffer);
							    PlayerInfo[i][pRobCash] = 0;
		            			SCM(i, COLOR_WHITE, "You have failed to rob the ATM Machine. You lost all the dirty money and the robbery has been cancelled.");
								FinishRobAtm(i, 0);
							}

							if(PlayerInfo[i][pHunger] < 80)
							{
								PlayerInfo[i][pHunger] += 5;
							}
							if(PlayerInfo[i][pThirst] < 80)
							{
								PlayerInfo[i][pThirst] += 5;
							}
						}
					}
					else SCM(i, COLOR_DOCTOR, "You have been discharged for free for the purge event. (( Type /purgeme to refill your weapons. ))");
					UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

					SetPlayerHealth(i, PlayerInfo[i][pSpawnHealth]);
					SetPlayerArmour(i, PlayerInfo[i][pSpawnArmor]);
					PlayerInfo[i][pHospital] = 0;
		            PlayerInfo[i][pHospitalTime] = 0;
		        }
			}
			if(PlayerInfo[i][pRefuel] != INVALID_VEHICLE_ID)
			{
				new id = GetFuelStationId(i);
				if(!IsPlayerInRangeOfPoint(i, 5.0, 1545.0540,-1605.2263,13.8247))
				    PlayerInfo[i][pRefuelAmount] += FuelStationInfo[id][fprice];
	
			    if(vehicleFuel[PlayerInfo[i][pRefuel]] + 1 > 100)
				{
					vehicleFuel[PlayerInfo[i][pRefuel]] = 100;
				}
				else
				{
					vehicleFuel[PlayerInfo[i][pRefuel]] += 1;
					FuelStationInfo[id][total_fuel]--;
				}
				if(!IsPlayerInRangeOfPoint(i, 5.0, 1545.0540,-1605.2263,13.8247))
				{
					if(vehicleFuel[PlayerInfo[i][pRefuel]] >= 100 || PlayerInfo[i][pCash] < PlayerInfo[i][pRefuelAmount] || GetVehicleParams(PlayerInfo[i][pRefuel], VEHICLE_ENGINE))
					{
						AddToTaxVault(percent(PlayerInfo[i][pRefuelAmount], 45));
						AddPointMoney(POINT_FUEL, percent(PlayerInfo[i][pRefuelAmount], 55));
						GivePlayerCash(i, -PlayerInfo[i][pRefuelAmount]);
						SM(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for "CXRP"$%i{CCFFFF}.", PlayerInfo[i][pRefuelAmount]);
						PlayerInfo[i][pRefuel] = INVALID_VEHICLE_ID;
						PlayerInfo[i][pRefuelAmount] = 0;
						ReloadFuelStation(id);
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET net_fuel = %i WHERE id = %i", FuelStationInfo[id][total_fuel], FuelStationInfo[id][fid]);
						mysql_tquery(connectionID, queryBuffer);
					}
				}
				else
				{
					if(vehicleFuel[PlayerInfo[i][pRefuel]] >= 100 || GetVehicleParams(PlayerInfo[i][pRefuel], VEHICLE_ENGINE))
					{
						SCM(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for "CXRP"FREE{CCFFFF}.");
						PlayerInfo[i][pRefuel] = INVALID_VEHICLE_ID;
						PlayerInfo[i][pRefuelAmount] = 0;
					}
				}
			}
			if(renttimer[i] > 0 && rentveh[i])
			{
				renttimer[i]--;
				format(string, sizeof(string), "%d_sec", renttimer[i]);
				PlayerTextDrawSetString(i, RENT_TIMER[i][3], string);
			}
			if(renttimer[i] == 30 && rentveh[i])
			{
				format(string, sizeof(string), "Only 30 sec left buddy. After 30 sec your rented vehicle will be vanished.");
				SCM(i, COLOR_REALRED, string);
				format(string, sizeof(string), "If you want to extend the time type "AQUA"/extendrent [minutes].");
				SCM(i, COLOR_YELLOW, string);
			}
			if(renttimer[i] == 0 && rentveh[i])
			{
				SCM(i, COLOR_RED, "Times Up. You lost access of this vehicle because rent time end.");
				VehicleInfo[rentveh[i]][vOwner] = -1;
				DestroyVehicle(rentveh[i]);
				HideRentTimerTD(i);
				rentveh[i] = 0;
			}
			if(pizzatimer[i] > 0)
			{
				pizzatimer[i]--;
				format(string, sizeof(string), "%d", pizzatimer[i]);
				PlayerTextDrawSetString(i, timer_td[i][2], string);
			}
			if(pizzatimer[i] == 0 && !IsPlayerInCheckpoint(i) && pizzatime == 1)
			{
				SendClientMessage(i, COLOR_REALRED, "You failed to deliver pizza on time.");
				DisablePlayerCheckpoint(i);
				pizzatime = 0;
				PlayerInfo[i][pFoodLoadVeh] = 0;
				PizzaPay[i] = 0;
				HideTimerTD(i);
				PlayerInfo[i][pCP] = CHECKPOINT_NONE;
			}
			if(PlayerInfo[i][pMiningTime] > 0)
			{
			    PlayerInfo[i][pMiningTime]--;

			    if(PlayerInfo[i][pMiningTime] <= 0)
				{
					if(GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerInfo[i][pTazedTime] && !PlayerInfo[i][pCuffed])
				    {
				        new number = random(20) + 1;

						if(1 <= number <= 3)
						{
						    PlayerInfo[i][pMiningRock] = 2;
						    SCM(i, COLOR_AQUA, "You have dug up an old quality stone. Send it to our boss.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a 1980's stone. Send it to our boss.");
						    PlayerInfo[i][pMiningRock] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a quality metal. Send it to our boss.");
						    PlayerInfo[i][pMiningRock] = 4;
						}
						else if(number == 9 && !PlayerInfo[i][pRareTime])
						{
						    SCM(i, COLOR_AQUA, "Woah, this looks oddly weird to find in the middle of a city, lets show it to the boss.");
						    PlayerInfo[i][pMiningRock] = 5;
						}
						else
						{
						    PlayerInfo[i][pMiningRock] = 1;
	                    	SCM(i, COLOR_AQUA, "You have dug up an ordinary stone. Send it to our boss.");
						}

						SetTimerEx("miningpay", 1000, false, "i", i);
						
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerInfo[i][pPackageTime] > 0)
			{
			    PlayerInfo[i][pPackageTime]--;

			    if(PlayerInfo[i][pPackageTime] <= 0)
				{
					if(IsPlayerInButcherArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerInfo[i][pTazedTime] && !PlayerInfo[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        PlayerInfo[i][pCP] = CHECKPOINT_MEATPACKAGER;

		                SetPlayerAttachedObject(i, 9, 1271, 6, 0.140999, 0.184999, -0.250000, -23.300001, -6.400006, 12.699996, 0.716000, 0.803000, 0.859999);

						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 964.410827, 2127.331298, 1011.023437, 2.0);

						if(1 <= number <= 3)
						{
						    PlayerInfo[i][pPackagingMeat] = 2;
						    SCM(i, COLOR_WHITE, "Your packaging was clean.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_WHITE, "Your packaging was good.");
						    PlayerInfo[i][pPackagingMeat] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_WHITE, "Your packaging was great.");
						    PlayerInfo[i][pPackagingMeat] = 4;
						}
						else if(number == 9)
						{
						    SCM(i, COLOR_WHITE, "Your packaging was perfect.");
						    PlayerInfo[i][pPackagingMeat] = 5;
						}
						else
						{
						    PlayerInfo[i][pPackagingMeat] = 1;
	                    	SCM(i, COLOR_WHITE, "Your packaging was done. Drop it off at the marker.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerInfo[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(PlayerInfo[i][pTaxiPassenger], GetPlayerVehicleID(i)) || PlayerInfo[i][pTaxiFare] == 0 || PlayerInfo[PlayerInfo[i][pTaxiPassenger]][pCash] < PlayerInfo[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        PlayerInfo[i][pTaxiTime]++;

			        if(PlayerInfo[i][pTaxiTime] >= 15)
			        {
			            PlayerInfo[i][pTaxiTime] = 0;
			            PlayerInfo[i][pTaxiBill] += PlayerInfo[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Taxi Meter:~w~ $%i", PlayerInfo[i][pTaxiBill]);
					GameTextForPlayer(i, string, 3000, 3);
			    }
			}
			if(PlayerInfo[i][pMuted] > 0)
			{
			    PlayerInfo[i][pMuted]--;

			    if(PlayerInfo[i][pMuted] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer muted.");
				}
			}
			if(PlayerInfo[i][pSpamTime] > 0)
			{
			    PlayerInfo[i][pSpamTime]--;
			}
			if(PlayerInfo[i][pVehicleCount] > 0)
			{
			    PlayerInfo[i][pVehicleCount]--;
			}
			if(PlayerInfo[i][pMechanicCall] > 0)
			{
			    PlayerInfo[i][pMechanicCall]--;
			}
			if(PlayerInfo[i][pTaxiCall] > 0)
			{
			    PlayerInfo[i][pTaxiCall]--;
			}
			if(PlayerInfo[i][pEmergencyCall] > 0)
			{
			    PlayerInfo[i][pEmergencyCall]--;
			}
   			if(PlayerInfo[i][pYFoodCooldown] > 0)
			{
       			PlayerInfo[i][pYFoodCooldown]--;
			}
			if(PlayerInfo[i][pRareTime] > 0)
			{
		    	PlayerInfo[i][pRareTime]--;
			}
			if(PlayerInfo[i][pVipTimes] > 0)
			{
		    	PlayerInfo[i][pVipTimes]--;
			}

   			if(PlayerInfo[i][pDeathCooldown] > 0)
			{
       			PlayerInfo[i][pDeathCooldown]--;
			}
			if(PlayerInfo[i][pDetectiveCooldown] > 0)
			{
       			PlayerInfo[i][pDetectiveCooldown]--;
			}
			if(PlayerInfo[i][pCarJackCooldown] > 0)
			{
       			PlayerInfo[i][pCarJackCooldown]--;
			}
			if(PlayerInfo[i][pLootTime] > 0)
			{
			    PlayerInfo[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && PlayerInfo[i][pLootTime] <= 0)
			    {
			        new amount = random(1000) + 2000;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
					PlayerInfo[i][pCP] = CHECKPOINT_ROBBERY;
					PlayerInfo[i][pDirtyCash] += amount;
		    		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
			    	mysql_tquery(connectionID, queryBuffer);
			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or wash the looted dirty money.", amount, PlayerInfo[i][pRobCash]);
			    	SetPlayerCheckpoint(i, 1465.1348, -1010.5063, 26.8438, 3.0);
					SavePlayerVariables(i);
				}
				else if((PlayerInfo[i][pRobbingBiz] >= 0 && PlayerInfo[i][pRobbingBiz] == GetInsideBusiness(i)) && PlayerInfo[i][pLootTime] <= 0)
			    {
					if(PlayerInfo[i][pRobCash] >= percent(BusinessInfo[PlayerInfo[i][pRobbingBiz]][bCash], 60))
					{
						SCM(i, COLOR_GREY2, "This business's vault is empty");
						PlayerInfo[i][pLootTime] = 0;
					} else {
						PlayerInfo[i][pLootTime] = 5;
						Dyuze(i, "Notice", "Looting business vault...");
					}

			        new amount = random(1000) + 1500;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
					PlayerInfo[i][pCP] = CHECKPOINT_ROBBERYBIZ;
					PlayerInfo[i][pDirtyCash] += amount;
	    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
				    mysql_tquery(connectionID, queryBuffer);
			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or wash the looted dirty money.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosX], BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosY], BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosZ], 3.0);
					SavePlayerVariables(i);
				}
				else if((PlayerInfo[i][pRobbingHouse] >= 0 && PlayerInfo[i][pRobbingHouse] == GetInsideHouse(i)) && PlayerInfo[i][pLootTime] <= 0)
			    {
					if(PlayerInfo[i][pRobCash] >= percent(HouseInfo[PlayerInfo[i][pRobbingHouse]][hCash], 60))
					{
						SCM(i, COLOR_GREY2, "This house's vault is empty");
						PlayerInfo[i][pLootTime] = 0;
					} else {
						PlayerInfo[i][pLootTime] = 5;
						Dyuze(i, "Notice", "Looting house vault...");
					}

			        new amount = random(1000) + 1500;

			        ClearAnimations(i, 1);
			        PlayerInfo[i][pRobCash] += amount;
					PlayerInfo[i][pCP] = CHECKPOINT_ROBBERYHOUSE;
					PlayerInfo[i][pDirtyCash] += amount;
	    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[i][pDirtyCash], PlayerInfo[i][pID]);
				    mysql_tquery(connectionID, queryBuffer);

			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or wash the looted dirty money.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosX], HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosY], HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosZ], 3.0);
					SavePlayerVariables(i);
				}
			}
			if(PlayerInfo[i][pFindTime] > 0)
			{
			    PlayerInfo[i][pFindTime]--;

			    if(PlayerInfo[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, PlayerInfo[i][pFindPlayer], GetPlayerColor(PlayerInfo[i][pFindPlayer]));
					PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((PlayerInfo[i][pToggleMusic]) || (PlayerInfo[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != PlayerInfo[i][pBoomboxListen]))
			{
				PlayerInfo[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    PlayerInfo[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!PlayerInfo[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && PlayerInfo[i][pBoomboxListen] != boomboxid))
			{
			    PlayerInfo[i][pBoomboxListen] = boomboxid;

			    if(PlayerInfo[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, PlayerInfo[boomboxid][pBoomboxURL]);
			        PlayerInfo[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            /*if(PlayerInfo[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                PlayerInfo[i][pPickTime]--;

                if(PlayerInfo[i][pPickTime] <= 0)
                {
                    new planterid = PlayerInfo[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !PlayerInfo[planterid][pLogged] || !PlayerInfo[planterid][pPotPlanted])
                    {
                        SCM(i, COLOR_SYNTAX, "This plant is no longer available to pick.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, PlayerInfo[planterid][pPotX], PlayerInfo[planterid][pPotY], PlayerInfo[planterid][pPotZ]))
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You left the area of the plant.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You must stay crouched when picking a plant.");
					}
					else
					{
					    PlayerInfo[i][pPot] += PlayerInfo[planterid][pPotGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[i][pPot], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(i, COLOR_AQUA, "You have harvested %i grams of pot from this plant.", PlayerInfo[planterid][pPotGrams]);
					    DestroyPotPlant(planterid);
					}

					PlayerInfo[i][pPickPlant] = INVALID_PLAYER_ID;
					PlayerInfo[i][pPickTime] = 0;
				}
			}*/
			if(PlayerInfo[i][pCookMeth] > 0)
			{
                PlayerInfo[i][pCookTime]--;

                if(PlayerInfo[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 10.0, 333.5727, 1121.8536, 1083.8903))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have left the cooking spot.");
                        ResetCooking(i);
                    }
                    else if(PlayerInfo[i][pEphedrine] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of ephedrine.");
                        ResetCooking(i);
					}
                    else if(PlayerInfo[i][pBakingSoda] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of baking soda.");
                        ResetCooking(i);
					}
					else if(PlayerInfo[i][pMeth] + 2 > GetPlayerCapacity(i, CAPACITY_METH))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of inventory space for meth.");
                        ResetCooking(i);
					}
					else
					{
						Dyuze(i, "Notice", "+2 grams of meth!");

						PlayerInfo[i][pEphedrine] -= 2;
						PlayerInfo[i][pMeth] += 2;
						PlayerInfo[i][pCookGrams] += 2;

						if((PlayerInfo[i][pCookGrams] % 4) == 0)
						{
						    PlayerInfo[i][pMuriaticAcid]--;
						    PlayerInfo[i][pBakingSoda]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i, bakingsoda = %i WHERE uid = %i", PlayerInfo[i][pEphedrine], PlayerInfo[i][pMeth], PlayerInfo[i][pMuriaticAcid], PlayerInfo[i][pBakingSoda], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!PlayerInfo[i][pEphedrine])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of ephedrine therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!PlayerInfo[i][pMuriaticAcid])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of muriatic acid therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
       					else if(!PlayerInfo[i][pBakingSoda])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of baking soda therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(PlayerInfo[i][pMeth] >= GetPlayerCapacity(i, CAPACITY_METH))
	                    {
	                        SM(i, COLOR_LIGHTRED, "You ran out of inventory space for meth therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        PlayerInfo[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(PlayerInfo[i][pDrugsUsed] >= 4)
			{
			    PlayerInfo[i][pDrugsTime]--;

			    if(PlayerInfo[i][pDrugsTime] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer stoned.");
			        PlayerInfo[i][pDrugsUsed] = 0;
			        PlayerInfo[i][pDrugsTime] = 0;
			    }
			}
			AnticheatCheck(i);


			if(PlayerInfo[i][pGang] >= 0 && !PlayerInfo[i][pBandana])
			{
				new turf, point;
				if((turf = GetNearbyTurf(i)) >= 0 && TurfInfo[turf][tTime] == 0 && TurfInfo[turf][tCapturer] != INVALID_PLAYER_ID)
				{
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
				}
				if((point = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[point][pTime] == 0 && PointInfo[point][pCapturer] != INVALID_PLAYER_ID)
				{
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}
			if(PlayerInfo[i][pGang] >= 0 || IsLawEnforcement(i))
			{
				new id;
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					UpdateBeacon(i, id);
				}
			}
			if(!PlayerInfo[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Nametag colors gang colors bandana badge
				if(PlayerInfo[i][pJoinedEvent] && EventInfo[eType] == 2)
				{
				    SetPlayerColor(i, (PlayerInfo[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				}
				else if(PlayerInfo[i][pPaintball] == 2)
				{
				    SetPlayerColor(i, (PlayerInfo[i][pPaintballTeam] == 1) ? (0x33CCFF00) : (0xFFFF9900));
				}
				else if(PlayerInfo[i][pJailType] == 3)
				{
				    SetPlayerColor(i, 0xF4A41900);
				}
				else if(PlayerInfo[i][pJailType] == 2)
				{
				    SetPlayerColor(i, 0xcc4a0e00);
				}
				else if(PlayerInfo[i][pComserv] != 0)
			 	{
			 	    SetPlayerColor(i, 0x912f0100);
				}
				else if(PlayerHasJob(i, JOB_TAXIDRIVER) && PlayerInfo[i][pTaxiFare] > 0)
				{
				    SetPlayerColor(i, 0xFFD70000);
				}
				else if(PlayerInfo[i][pFaction] >= 0 && PlayerInfo[i][pDuty] && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_HITMAN)
				{
					SetPlayerColor(i, FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff);
				}
				else if(PlayerInfo[i][pGang] >= 0 && PlayerInfo[i][pBandana])
				{
				    SetPlayerColor(i, GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff);
				}
				else if(PlayerInfo[i][pDonator] > 0 && PlayerInfo[i][pVIPColor])
				{
				    SetPlayerColor(i, 0x0F6A8900);
				}
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				}
			}
		}
	}
	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
	}
	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}
	format(string, sizeof(string), "Marijuana Seeds\n"WHITE"Stock: %i\nPrice: $20/seed\n/getdrug seeds [amount]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Raw Ephedrine\n"WHITE"Stock: %i\nPrice: $500/gram\n/getdrug ephedrine [amount]", gEphedrineStock);
	UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Crack\n"WHITE"Stock: %i\nPrice: $500/gram\n/getdrug crack [amount]", gCrackStock);
    UpdateDynamic3DTextLabelText(gCrackText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > Settings[gPlayerRecord])
	{
		Settings[gPlayerRecord] = Iter_Count(Player);
		strcpy(Settings[gRecordDate], GetDate(), 24);
		SaveServerInfo();
	}
	return 1;
}

forward UpdateBeacon(playerid, turfid);
public UpdateBeacon(playerid, turfid)
{
	if(IsLawEnforcement(playerid))
	{
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
			{
				if(IsLawEnforcement(i) && IsPlayerInDynamicArea(i, TurfInfo[turfid][tArea], 1))
				{
					SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[PlayerInfo[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				}
			}
		}
	}
	else if(PlayerInfo[playerid][pGang] >= 0)
	{
		new gangid = PlayerInfo[playerid][pGang];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pLogged])
			{
				if(PlayerInfo[i][pGang] == gangid && IsPlayerInDynamicArea(i, TurfInfo[turfid][tArea], 1))
				{
					SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff) + 0xFF);
				}
			}
		}
	}
	return 1;
}

forward MinuteTimer();
public MinuteTimer()
{
	#if defined DISCORD
		DCC_SetBotActivity("https://cyberx-rp.com");
	#endif

	new engine, lights, alarm, doors, bonnet, boot, objective;
	for (new veh = 0; veh < 5; veh ++)
	{
		if(IsValidVehicle(dealershipVeh[veh]))
		{
			SetVehicleToRespawn(dealershipVeh[veh]);			
			GetVehicleParamsEx(dealershipVeh[veh], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(dealershipVeh[veh], engine, lights, alarm, 1, bonnet, boot, objective);
		}
	}

	RandWeather--;
	if(RandWeather == 5)
	{
		SMA(COLOR_DISPATCH, "[Transport System]: All free cars will be respawned after 5 minutes!");
	}
	if(RandWeather == 0)
	{
		RandWeather = 30;
		gWeather = Random(0, 19);
		SetWeather(gWeather);
		for(new veh = 1; veh < MAX_VEHICLES; veh ++)
		{
	    	if(!IsVehicleOccupied(veh) && !adminVehicle{veh} && VehicleInfo[veh][vFactionType] == FACTION_NONE && VehicleInfo[veh][vGang] == -1 && VehicleInfo[veh][vOwnerID] == 0 && !(MafiaVeh[0] <= veh <= MafiaVeh[9]))
		    {
				SetVehicleToRespawn(veh);
			}
		}
	}

	new hour;
	gettime(.hour = hour);
	RefreshTime();
	if(gHour != hour)
	{
		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
	        {
		        if(PlayerInfo[i][pAFK] && PlayerInfo[i][pAFKTime] > 900)
		        {
		            SCM(i, COLOR_LIGHTRED, "You didn't receive a paycheck this hour as you were AFK for more than 15 minutes.");
		        }
		        else if(PlayerInfo[i][pMinutes] < 30)
		        {
		            SCM(i, COLOR_LIGHTRED, "You are ineligible for a paycheck as you played less than 30 minutes this hour.");
		        }
		        else
		        {
		            new code = Random(100000, 999999);
	  				PayCheckCode[i] = code;

					SCM(i, COLOR_GREY,"______________________________________________________");
					SCM(i, COLOR_WHITE,"");
					SCM(i, COLOR_WHITE,"For more information about tax on paychecks, type /taxhelp.");
	  				SCM(i, COLOR_GREY,"______________________________________________________");
	    			SCM(i, COLOR_WHITE,"");
					SCM(i, COLOR_WHITE,"Type /signcheck, to receive your paycheck.");
	    			SCM(i, COLOR_WHITE,"You have 5 minutes to signcheck before it becomes invalid.");
		    		SCM(i, COLOR_GREY,"______________________________________________________");

					GameTextForPlayer(i, "~g~Type ~r~/signcheck", 5000, 1);
		  			SetTimerEx("LastAlertPayCheck", 243000, false, "i", i);
		  			if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - PlayerInfo[i][pLastDesync] > 120)
					{
					    new desc[256];
						strcpy(desc, "Player probably was desynced while there was a signcheck.", sizeof(desc));

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, \"%s\", NOW(), \"%e\")", PlayerInfo[i][pID], SERVER_BOT , desc);
						mysql_tquery(connectionID, queryBuffer);

						SAM(COLOR_LIGHTRED, "AdmCmd: Server flagged %s's account for \"%s\".", GetRPName(i), desc);
					}
				}
				if(PlayerInfo[i][pReportMuted])
				{
					PlayerInfo[i][pReportMuted]--;

					if(PlayerInfo[i][pReportMuted] <= 0)
					{
					    PlayerInfo[i][pReportMuted] = 0;
					    PlayerInfo[i][pReportWarns] = 0;

					    SCM(i, COLOR_YELLOW, "Your report mute has automatically been lifted.");
						SavePlayerVariables(i);
				    }
				}
			}
	    }

		switch(hour)
		{
		    case 0, 4, 8, 12, 16, 20:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_POLICE && FactionInfo[i][fTurfTokens] < 10)
		            {
		                FactionInfo[i][fTurfTokens] += 2;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 2 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_FEDERAL && FactionInfo[i][fTurfTokens] < 10)
		            {
		                FactionInfo[i][fTurfTokens] += 2;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 2 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_ARMY && FactionInfo[i][fTurfTokens] < 10)
		            {
		                FactionInfo[i][fTurfTokens] += 2;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 2 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
			}
		}

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}

		for(new i = 0; i < MAX_BUSINESSES; i ++)
		{
			if(BusinessInfo[i][bRobbed] > 0)
			{
				BusinessInfo[i][bRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i WHERE id = %i", BusinessInfo[i][bRobbed], BusinessInfo[i][bID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
			if(HouseInfo[i][hRobbed] > 0)
			{
				HouseInfo[i][hRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i WHERE id = %i", HouseInfo[i][hRobbed], HouseInfo[i][hID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}

		gWorldTime = hour;
//	    SetWorldTime(gWorldTime);
	    gHour = hour;
	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(PlayerInfo[i][pPotPlanted] && PlayerInfo[i][pPotTime] > 0)
		    {
		        PlayerInfo[i][pPotTime]--;

		        if((PlayerInfo[i][pPotTime] % 2) == 0)
		        {
		            PlayerInfo[i][pPotGrams]++;
		        }
		    }
		    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAFKTime] < 900)
		    {
		        PlayerInfo[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && (PointInfo[i][pCapturer] != INVALID_PLAYER_ID || strcmp(PointInfo[i][pCapturingUser], "none", true)) && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(PointInfo[i][pCapturingGang] == -1)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
					PointInfo[i][pCapturingGang] = -1;
					strcpy(PointInfo[i][pCapturingUser], "none", MAX_PLAYER_NAME);
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(PointInfo[i][pCapturingGang], 100);

						strcpy(PointInfo[i][pCapturedBy], PointInfo[i][pCapturingUser], MAX_PLAYER_NAME);

					    PointInfo[i][pCapturedGang] = PointInfo[i][pCapturingGang];
						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];

						SMA(COLOR_GREEN, "{%06x}%s has successfully captured %s for %s.", GangInfo[PointInfo[i][pCapturedGang]][gColor] >>> 8, PointInfo[i][pCapturingUser], PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Your gang has earned $%i and 50 GP for successfully capturing this point.", PointInfo[i][pProfits]);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

						PointInfo[i][pTime] = 24; 
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = \"%s\", capturedgang = %i, profits = 0, time = %i WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], PointInfo[i][pTime], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
						PointInfo[i][pCapturingGang] = -1;
						strcpy(PointInfo[i][pCapturingUser], "none", MAX_PLAYER_NAME);
		                ReloadPoint(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	            if(!IsLawEnforcement(TurfInfo[i][tCapturer]) && (PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

              		if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(IsLawEnforcement(TurfInfo[i][tCapturer]))
		                {
		                    TurfInfo[i][tCapturedGang] = -1;
							SMA(COLOR_GREEN, "%s has been successfully claimed back as a civilian turf by Officer %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
						}
						else
						{
						    new gangid = PlayerInfo[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 50);
						    SMA(COLOR_GREEN, "%s has been successfully claimed by %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        new amount = 20000;
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 20000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %s materials in the stash for capturing this turf!", AddCommas(amount));

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 2:
							    {
							        GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 100;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 100;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of pot & 100 grams crack in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i, meth = %i WHERE id = %i", GangInfo[gangid][gPot], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
							    {
							        GangInfo[gangid][gCrack] = GangInfo[gangid][gCrack] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCrack] + 100;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of Crack in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[gangid][gCrack], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 4:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Your gang will now receive 10 percents of all business sales in this turf.");
							    }
							    case 5:
							    {
							        new amount = Random(200000, 400000);
							        GangInfo[gangid][gCash] += amount;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %s cash in the stash for capturing this turf!", AddCommas(amount));

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[gangid][gCash], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = \"%s\", capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 24;
						DestroyFlag(i);
						ReloadTurf(i);
					}
				}
			}
		}


		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0)
		        {
		            SCM(ReportInfo[i][rReporter], COLOR_SYNTAX, "Your report has expired. You can make an admin request on "SERVER_URL" if you still need help.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}
}


forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pInjured])
		{
			if(GetPlayerState(i) == PLAYER_STATE_ONFOOT)
			{
		   		ApplyAnimation(i, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0, 1);
			}
			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 2)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SendClientMessage(x, COLOR_PURPLE, "** An explosion can be heard. Smoke is rising from a building nearby.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            PlayerInfo[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SM(x, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
	                    }

						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 200.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!PlayerInfo[playerid][pKicked])
	{
	    PlayerInfo[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    PlayerInfo[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}


forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SCM(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SCM(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SM(index, COLOR_RED, "The music database is currently not available. (error %i)", response_code);
    }
}

/*forward Radio_PlayStation(playerid);
public Radio_PlayStation(playerid)
{
	if(cache_get_row_count(radioConnectionID))
	{
	    new name[128], url[128];

	    cache_get_value_name(0, "name", name);
	    cache_get_value_name(0, "url", url);

	    switch(PlayerInfo[playerid][pMusicType])
	    {
	        case MUSIC_MP3PLAYER:
	        {
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station on their MP3 player.", GetRPName(playerid));
	    		SM(playerid, COLOR_AQUA, "You are now tuned in to "CXRP"%s{CCFFFF}.", name);
				SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
			}
			case MUSIC_BOOMBOX:
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station on their boombox.", GetRPName(playerid));
	    		SM(playerid, COLOR_AQUA, "Your boombox is now tuned in to "CXRP"%s{CCFFFF}.", name);
				SetMusicStream(MUSIC_BOOMBOX, playerid, url);
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station in their vehicle.", GetRPName(playerid));
		    		SM(playerid, COLOR_AQUA, "Your radio is now tuned in to "CXRP"%s{CCFFFF}.", name);
					SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
				}
			}
		}
	}
}

forward Radio_ListStations(playerid);
public Radio_ListStations(playerid)
{
	new rows = cache_get_row_count(radioConnectionID);

	if((!rows) && PlayerInfo[playerid][pSearch] && PlayerInfo[playerid][pPage] == 1)
	{
	    SCM(playerid, COLOR_SYNTAX, "No results found.");
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
	}
	else if(rows)
	{
	    static string[MAX_LISTED_STATIONS * 64], name[128];

	    string[0] = 0;

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name(i, "name", name);
	        format(string, sizeof(string), "%s\n%s", string, name);
		}

		if(PlayerInfo[playerid][pPage] > 1)
		{
		    strcat(string, "\n"CXRP"<< Go back"WHITE"");
		}
		if(rows == MAX_LISTED_STATIONS)
		{
		    strcat(string, "\n"CXRP">> Next page"WHITE"");
		}

		ShowPlayerDialog(playerid, DIALOG_MP3RADIORESULTS, DIALOG_STYLE_LIST, "Results", string, "Play", "Back");
	}
}*/

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no active charges on them.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Charged by\tDate\tReason";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name(i, "chargedby", chargedby);
	        cache_get_value_name(i, "date", date);
	        cache_get_value_name(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Active charges:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new username[MAX_PLAYER_NAME], id = PlayerInfo[playerid][pSelected];

	    cache_get_value_name(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SM(i, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
                PlayerInfo[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) 
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't exist and therefore has no information to view.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
	}
	else
	{
	    new string[512], gender[10], value;

		cache_get_value_name_int(0, "gender", value);
		switch(value)
		{
			case 1: strcpy(gender, "Male", 10);
			case 2: strcpy(gender, "Female", 10);
			case 3: strcpy(gender, "Shemale", 10);
			case 4: strcpy(gender, "Gay", 10);
			case 5: strcpy(gender, "Lesbian", 10);
			default: strcpy(gender, "Unknown", 10);
 		}
		new age, crimes, arrested, wantedlevel, lic, gun_lic;
	    cache_get_value_name_int(0, "uid", PlayerInfo[playerid][pSelected]);
		cache_get_value_name_int(0, "age", age);
		cache_get_value_name_int(0, "crimes", crimes);
		cache_get_value_name_int(0, "arrested", arrested);
		cache_get_value_name_int(0, "wantedlevel", wantedlevel);
		cache_get_value_name_int(0, "carlicense", lic);
		cache_get_value_name_int(0, "gunlicense", gun_lic);
	    format(string, sizeof(string), "Name: %s\nGender: %s\nAge: %i years old\nCrimes commited: %i\nTimes arrested: %i\nWanted level: %i/6\nDrivers License: %s\nGun License: %s", username, gender, age, crimes, arrested, wantedlevel, (lic) ? "Yes": "No", (gun_lic) ? "Yes":"No");
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Player lookup", string, "Options", "Cancel");
	}
}

forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new _id;
	cache_get_value_name_int(0, "id", _id);
	new vehicleid = GetVehicleLinkedID(_id);

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
        }
        else
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SM(playerid, COLOR_AQUA, "Your "CXRP"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && PlayerInfo[i][pCurrentShamal] == vehicleid)
					{
						if(PlayerInfo[i][pWatchingWindow] == true)
						{
							TogglePlayerSpectating(i, false);
							PlayerInfo[i][pWatchingWindow] = false;
						}
						SendProximityMessage(i, 30.0, 0x0080ffff, "**{C2A2DA} %s has exited the Shamal", GetRPName(i));
						TeleportToVehicle(i, vehicleid);
						SetCameraBehindPlayer(i);
						PlayerInfo[i][pCurrentShamal] = INVALID_VEHICLE_ID;
						SavePlayerVariables(i);
						SCM(i, COLOR_WHITE, "Shamal owner has despawned their shamal, you've been thrown out!");
					}
					if(IsPlayerConnected(i) && PlayerInfo[i][pCurrentBus] == vehicleid)
					{
						if(PlayerInfo[i][pWatchingWindow] == true)
						{
							TogglePlayerSpectating(i, false);
							PlayerInfo[i][pWatchingWindow] = false;
						}
						SendProximityMessage(i, 30.0, 0x0080ffff, "**{C2A2DA} %s has exited the Bus", GetRPName(i));
						TeleportToVehicle(i, vehicleid);
						SetCameraBehindPlayer(i);
						PlayerInfo[i][pCurrentBus] = INVALID_VEHICLE_ID;
						SavePlayerVariables(i);
						SCM(i, COLOR_WHITE, "Bus owner has despawned their bus, you've been thrown out!");
					}
				}
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
		new count=0;
		for(new veh = 1; veh < MAX_VEHICLES; veh ++)
		{
			if(VehicleInfo[veh][vOwnerID] == PlayerInfo[playerid][pID] && IsValidVehicle(veh))
			{
				count++;
			}
		}
		if(count == 2 && PlayerInfo[playerid][pDonator] == 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You already have 2 cars spawned, you can only spawn 2 car as a non-donator player. Be a donator to spawn more!");
		}
		else if(count == 4 && PlayerInfo[playerid][pDonator] == 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You can only spawn 4 cars at a time as a Silver Donator!");
		}
		else if(count == 7 && PlayerInfo[playerid][pDonator] == 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "You can only spawn 7 cars at a time as a Gold Donator!");
		}
		else if(count == 10 && PlayerInfo[playerid][pDonator] == 3)
		{
			return SCM(playerid, COLOR_SYNTAX, "You can only spawn 10 cars at a time as a Platinum Donator!");
		}
		new v_id;
		cache_get_value_name_int(0, "id", v_id);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", v_id, PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
	return 1;
}

forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new data;
		cache_get_value_index_int(0, 0, data);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = \"%e\" WHERE id = %i", reason, data);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, \"%s\", \"%s\", \"%s\", NOW(), \"%e\", %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
	new members;
	cache_get_value_index_int(0, 0, members);
    if( members >= GetGangMemberLimit(PlayerInfo[playerid][pGang]))
    {
        SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i members at its level.", GetGangMemberLimit(PlayerInfo[playerid][pGang]));
    }
    else
    {
    	PlayerInfo[targetid][pGangOffer] = playerid;
		PlayerInfo[targetid][pGangOffered] = PlayerInfo[playerid][pGang];

		SM(targetid, COLOR_AQUA, "%s has invited you to join "CXRP"%s{CCFFFF} (/accept gang).", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pGang]][gName]);
		SM(playerid, COLOR_AQUA, "You have invited %s to join your gang.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count;
	cache_get_value_index_int(0, 0, count);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
        if(PlayerInfo[playerid][pCash] < vehicleArray[index][cARPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
        }
		else
		{
	        switch(random(2))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, \"%s\", %i, %i, '549.8856', '-1287.8274', '17.0064', '358.1196')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, \"%s\", %i, %i, '540.0930', '-1287.8613', '16.9456', '1.8657')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][cARPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][cARPrice]);

	        SM(playerid, COLOR_YELLOW, "%s purchased for $%i. /vstorage to spawn this vehicle.", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
    	    Log_Write("log_property", "%s (uid: %i) purchased a %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
		}
	}
}
forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
	new rows;
	cache_get_row_count(rows);
    if(rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");
	}
	else
	{
		if(PlayerInfo[playerid][pGang] >= 0)
			SendGangMessage(PlayerInfo[playerid][pGang], COLOR_AQUA, "(( %s %s has left the server (timeout). ))", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid));
		PlayerInfo[playerid][pChosenLevel] = level;
	    PlayerInfo[playerid][pChosenSkin] = skinid;

	    GetPlayerName(playerid, PlayerInfo[playerid][pPassportName], MAX_PLAYER_NAME);

	    PlayerInfo[playerid][pPassport] = 1;
	    PlayerInfo[playerid][pPassportLevel] = PlayerInfo[playerid][pLevel];
	    PlayerInfo[playerid][pPassportSkin] = PlayerInfo[playerid][pSkin];
	    PlayerInfo[playerid][pPassportPhone] = PlayerInfo[playerid][pNumber];
		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pChosenLevel];
		PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pChosenSkin];
		PlayerInfo[playerid][pNumber] = random(100000) + 899999;

		Namechange(playerid, GetPlayerNameEx(playerid), name);

		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, number = %i, passport = 1, passportname = \"%s\", passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pPassportName], PlayerInfo[playerid][pPassportLevel], PlayerInfo[playerid][pPassportSkin], PlayerInfo[playerid][pPassportPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SCM(playerid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
	}
}


forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");

	    if(PlayerInfo[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
	}
	else
	{
	    strcpy(PlayerInfo[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(PlayerInfo[playerid][pFreeNamechange]) {
			SM(playerid, COLOR_AQUA, "You have requested a namechange to "CXRP"%s{CCFFFF} for free, please wait for admin approval.", name);
		} else {
		    SM(playerid, COLOR_AQUA, "You have requested a namechange to "CXRP"%s{CCFFFF} for $%i, please wait for admin approval.", name, PlayerInfo[playerid][pLevel] * 15000);
		}

		SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new door;
	cache_get_value_name_int(0, "door_locked", door);
	new status = !door;

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
	new data;
	cache_get_value_index_int(0, 1, data);
    if(data)
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new locked;
		cache_get_value_index_int(0, 0, locked);
		new
			status = !locked,
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
	new rows, faction, factionranks;
	cache_get_row_count(rows);
	cache_get_value_index_int(0, 1, faction);
	cache_get_value_index_int(0, 2, factionranks);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if( faction != PlayerInfo[playerid][pFaction])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
	}
	else if(factionranks > PlayerInfo[playerid][pFactionRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid, factionid, rankid;
		cache_get_value_index_int(0, 0, uid);
		cache_get_value_index_int(0, 1, factionid);
		cache_get_value_index_int(0, 2, rankid);

		if(GetFactionType(playerid) != FACTION_HITMAN)
			Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your faction.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
	new rows;
	new p_gang;
	new g_rank;
	cache_get_value_index_int(0, 1, p_gang);
	cache_get_value_index_int(0, 2, g_rank);
    if(!cache_get_row_count(rows))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if( p_gang != PlayerInfo[playerid][pGang])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
	}
	else if( g_rank > PlayerInfo[playerid][pGangRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid, gangid, rankid;
		cache_get_value_index_int(0, 0, uid);
		cache_get_value_index_int(0, 1, gangid);
		cache_get_value_index_int(0, 2, rankid);

		Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your gang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members, color2, allyname[32];
	cache_get_value_index_int(0, 0, members);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else
	{
		SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new color, members, szMessage[1080];
	cache_get_value_index_int(0, 0, members);
	new count;
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i) && PlayerInfo[i][pFaction] == factionid)
	    {
	        count++;
	    }
	}

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN || FactionInfo[factionid][fType] == FACTION_FEDERAL && PlayerInfo[playerid][pAdmin] < 6)
	{
    	format(szMessage, sizeof(szMessage), "{%06x}%i. %s | "RED"Confidential", color >>> 8, factionid, FactionInfo[factionid][fName]);
	}
   	else
   	{
		format(szMessage, sizeof(szMessage), "{%06x}%i. %s | Leader: %s | Members: %i/%i", color >>> 8, factionid, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader], count, members);
	}
	SCM(playerid, COLOR_GREY, szMessage);
}

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	new rows;
	if(cache_get_row_count(rows))
	{
	    SCM(playerid, COLOR_SYNTAX, "The specified phone number is already taken.");
	}
	else
	{
	    PlayerInfo[playerid][pNumber] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET number = %i WHERE uid = %i", number, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -20000);

	    SM(playerid, COLOR_WHITE, "** You paid $20,000 to change your phone number to %i.", number);
	    Log_Write("log_vip", "%s Donator %s (uid: %i) has purchased phone number: %i for $20000.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], number);
	}
}

forward OnPlayerBuyPhoneNumberEx(playerid, number, price, businessid);
public OnPlayerBuyPhoneNumberEx(playerid, number, price, businessid)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		return ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "{FF0000}The number you specified was already taken!\n{FFFFFF}Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");	}
	else
	{
		if(!IsBusinessOwner(playerid, businessid))
		{
		    GivePlayerCash(playerid, -price);
			BusinessInfo[businessid][bCash] += price;

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
		    SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your new phone number is %i.", number);
		}
		else
		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a new mobile phone from their business.", GetRPName(playerid));
		    SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your new phone number is %i.", number);
		}
		BusinessInfo[businessid][bProducts]--;
		PlayerInfo[playerid][pNumber] = number;
		ChoosingNum[playerid] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET number = %i, phone = 1 WHERE uid = %i", PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

forward OnPlayerRedeemCode(playerid, code[]);
public OnPlayerRedeemCode(playerid, code[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Invalid code entered! No voucher code found.");
	}
	else
	{
		new veh, donator, months, boombox, backpack;
		cache_get_value_name_int(0, "veh", veh);
		cache_get_value_name_int(0, "donator", donator);
		cache_get_value_name_int(0, "months", months);
		cache_get_value_name_int(0, "boombox", boombox);
		cache_get_value_name_int(0, "backpack", backpack);
		if(veh != -1)
		{
			new rand = random(sizeof(edmSpawns));
			new color1 = 1, color2 = 1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, impounded) VALUES(%i, \"%s\", %i, '%f', '%f', '%f', '%f', %i, %i, 0)", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), veh, edmSpawns[rand][0], edmSpawns[rand][1], edmSpawns[rand][2], edmSpawns[rand][3], color1, color2);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vouchers WHERE code=\"%s\"", code);
			mysql_tquery(connectionID, queryBuffer);
			new string[128];
			GetVehicleModelName(veh, string, sizeof(string));

			SM(playerid, COLOR_GREEN, "** Congratulations! You have just redeemed your EDM Voucher Code and got a/an %s%s", CXRP, string);
			SCM(playerid, COLOR_WHITE, "Your vehicle has been parked at Export-Import Company Dock. Use /vst > /trackcar to locate it!");

			Log_Write("log_redeem", "%s (uid: %i) has redeemed `%s` code for a/an %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], code, string);			
		}
		else if(donator != -1)
		{
			new days = floatround(months*30);
			PlayerInfo[playerid][pDonator] = donator;
			PlayerInfo[playerid][pVIPTime] = gettime() + (days * 86400);
			PlayerInfo[playerid][pVIPCooldown] = 0;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", PlayerInfo[playerid][pDonator], PlayerInfo[playerid][pVIPTime], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(days >= 30)
			{
				SM(playerid, COLOR_GREEN, "** Congratulations! You have just redeemed your EDM Voucher Code and got %s%s%s Donator package for %s%i months.", CXRP, GetDonatorRank(donator), WHITE, CXRP, months);
			}
			else
			{
				SM(playerid, COLOR_GREEN, "** Congratulations! You have just redeemed your EDM Voucher Code and got %s%s%s Donator package for %s%i days.", CXRP, GetDonatorRank(donator), WHITE, CXRP, days);
			}


			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vouchers WHERE code=\"%s\"", code);
			mysql_tquery(connectionID, queryBuffer);

			Log_Write("log_redeem", "%s (uid: %i) has redeemed `%s` code for %i month(s) of %s Donator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], code, months, GetDonatorRank(donator));			
		}
		else if(boombox != -1)
		{
			PlayerInfo[playerid][pBoombox] = 1;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", PlayerInfo[playerid][pBoombox], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vouchers WHERE code=\"%s\"", code);
			mysql_tquery(connectionID, queryBuffer);

			SCM(playerid, COLOR_GREEN, "** Congratulations! You have just redeemed your EDM Voucher Code and got a "CXRP"Boombox!");

			Log_Write("log_redeem", "%s (uid: %i) has redeemed `%s` code for a Boombox.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], code);			
		}
		else if(backpack != -1)
		{
			PlayerInfo[playerid][pBackpack] = backpack;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET backpack = %i WHERE uid = %i", backpack, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vouchers WHERE code=\"%s\"", code);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_GREEN, "** Congratulations! You have just redeemed your EDM Voucher Code and got a %s%s Backpack!", CXRP, GetBackpackSize(playerid));

			Log_Write("log_redeem", "%s (uid: %i) has redeemed `%s` code for a %s Backpack.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], code, GetBackpackSize(playerid));			
		}
	}
	return 1;
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	new rows, id;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
			cache_get_value_name_int(0, "id", id);
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == id)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
	    }

		new impound;
		cache_get_value_name_int(0, "impounded", impound);
		if(impound)
		{
		    return SCM(playerid, COLOR_WHITE, "That vehicle has been impounded by Police. Use /releasecar at DMV to release.");
		}
		new jacked;
		cache_get_value_name_int(0, "jacked", jacked);
		if(gettime() < jacked && jacked != 0)
		{
			new jackcd[32], time = jacked - gettime();
			if(1 <= time <= 3599)
			{
				format(jackcd, sizeof(jackcd), "%i minutes", time / 60);
			}
			else if(3600 <= time)
			{
				format(jackcd, sizeof(jackcd), "%i hours", time / 3600);
			}
			else
			{
				format(jackcd, sizeof(jackcd), "%i seconds", time);
			}
		    return SM(playerid, COLOR_WHITE, "Your vehicle was jacked by a thief, you can spawn it after %s%s.", CXRP, jackcd);
		}
		else
		{
			cache_get_value_name_int(0, "id", id);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET jacked = 0 WHERE id = %i", id);
			mysql_tquery(connectionID, queryBuffer);
		}
	    new
			modelid, Float:x, Float:y, Float:z, Float:a, vehicleid, color1, color2;
		cache_get_value_name_int(0, "modelid", modelid);
		cache_get_value_name_float(0, "pos_x", x);
		cache_get_value_name_float(0, "pos_y", y);
		cache_get_value_name_float(0, "pos_z", z);
		cache_get_value_name_float(0, "pos_a", a);
		cache_get_value_name_int(0, "color1", color1);
		cache_get_value_name_int(0, "color2", color2);

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_value_name(0, "owner", VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
		    cache_get_value_name(0, "plate", VehicleInfo[vehicleid][vPlate], 32);

		    cache_get_value_name_int(0, "id", VehicleInfo[vehicleid][vID]);
		    cache_get_value_name_int(0, "ownerid", VehicleInfo[vehicleid][vOwnerID]);
		    cache_get_value_name_int(0, "price", VehicleInfo[vehicleid][vPrice]);
		    cache_get_value_name_int(0, "tickets", VehicleInfo[vehicleid][vTickets]);
		    cache_get_value_name_int(0, "locked", VehicleInfo[vehicleid][vLocked]);
		    cache_get_value_name_float(0, "health", VehicleInfo[vehicleid][vHealth]);
		    cache_get_value_name_int(0, "paintjob", VehicleInfo[vehicleid][vPaintjob]);
		    cache_get_value_name_int(0, "interior", VehicleInfo[vehicleid][vInterior]);
	        cache_get_value_name_int(0, "world", VehicleInfo[vehicleid][vWorld]);
	        cache_get_value_name_int(0, "neon", VehicleInfo[vehicleid][vNeon]);
	        cache_get_value_name_int(0, "neonenabled", VehicleInfo[vehicleid][vNeonEnabled]);
	        cache_get_value_name_int(0, "trunk", VehicleInfo[vehicleid][vTrunk]);
	        cache_get_value_name_int(0, "mod_1", VehicleInfo[vehicleid][vMods][0]);
	        cache_get_value_name_int(0, "mod_2", VehicleInfo[vehicleid][vMods][1]);
	        cache_get_value_name_int(0, "mod_3", VehicleInfo[vehicleid][vMods][2]);
	        cache_get_value_name_int(0, "mod_4", VehicleInfo[vehicleid][vMods][3]);
	        cache_get_value_name_int(0, "mod_5", VehicleInfo[vehicleid][vMods][4]);
	        cache_get_value_name_int(0, "mod_6", VehicleInfo[vehicleid][vMods][5]);
	        cache_get_value_name_int(0, "mod_7", VehicleInfo[vehicleid][vMods][6]);
	        cache_get_value_name_int(0, "mod_8", VehicleInfo[vehicleid][vMods][7]);
	        cache_get_value_name_int(0, "mod_9", VehicleInfo[vehicleid][vMods][8]);
	        cache_get_value_name_int(0, "mod_10", VehicleInfo[vehicleid][vMods][9]);
	        cache_get_value_name_int(0, "mod_11", VehicleInfo[vehicleid][vMods][10]);
	        cache_get_value_name_int(0, "mod_12", VehicleInfo[vehicleid][vMods][11]);
	        cache_get_value_name_int(0, "mod_13", VehicleInfo[vehicleid][vMods][12]);
	        cache_get_value_name_int(0, "mod_14", VehicleInfo[vehicleid][vMods][13]);
	        cache_get_value_name_int(0, "cash", VehicleInfo[vehicleid][vCash]);
	        cache_get_value_name_int(0, "materials", VehicleInfo[vehicleid][vMaterials]);
	        cache_get_value_name_int(0, "pot", VehicleInfo[vehicleid][vPot]);
	        cache_get_value_name_int(0, "crack", VehicleInfo[vehicleid][vCrack]);
	        cache_get_value_name_int(0, "meth", VehicleInfo[vehicleid][vMeth]);
	        cache_get_value_name_int(0, "painkillers", VehicleInfo[vehicleid][vPainkillers]);
	        cache_get_value_name_int(0, "weapon_1", VehicleInfo[vehicleid][vWeapons][0]);
	        cache_get_value_name_int(0, "weapon_2", VehicleInfo[vehicleid][vWeapons][1]);
	        cache_get_value_name_int(0, "weapon_3", VehicleInfo[vehicleid][vWeapons][2]);
			cache_get_value_name_int(0, "weapon_4", VehicleInfo[vehicleid][vWeapons][3]);
			cache_get_value_name_int(0, "weapon_5", VehicleInfo[vehicleid][vWeapons][4]);
			cache_get_value_name_int(0, "v_panels", VehicleInfo[vehicleid][v_panels]);
			cache_get_value_name_int(0, "v_lights", VehicleInfo[vehicleid][v_lights]);
			cache_get_value_name_int(0, "v_tires", VehicleInfo[vehicleid][v_tires]);
			cache_get_value_name_int(0, "v_doors", VehicleInfo[vehicleid][v_doors]);
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vDonator] = 0;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vImpounded] = 0;
			adminVehicle{vehicleid} = false;
			cache_get_value_name_int(0, "fuel", vehicleFuel[vehicleid]);
			UpdateVehicleDamageStatus(vehicleid, VehicleInfo[vehicleid][v_panels], VehicleInfo[vehicleid][v_doors], VehicleInfo[vehicleid][v_lights], VehicleInfo[vehicleid][v_tires]);

			ReloadVehicle(vehicleid);

			if(parked)
			{
				PutPlayerInVehicle(playerid, vehicleid, 0);
			}

		    else if(!parked)
			{
			    SM(playerid, COLOR_AQUA, "You have spawned your "CXRP"%s{CCFFFF} which is located in {F7A763}%s{CCFFFF}. /findcar to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				
			}
	    }
	}
	return 1;
}

forward OnPlayerPayImpound(playerid);
public OnPlayerPayImpound(playerid)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can release.");
	}
	else
	{
	    new cost, id, model;
		cache_get_value_name_int(0, "tickets", cost);
		cache_get_value_name_int(0, "id", id);
		cache_get_value_name_int(0, "modelid", model);

		GivePlayerCash(playerid, -cost);

	 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = 0, tickets = 0 WHERE id = %i", id);
 		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "You've released your "CXRP"%s "WHITE"for "CXRP"%s", vehicleNames[model - 400], AddCommas(cost));
	}
	return 1;
}


forward OnPlayerBuyClothingItem(playerid, name[], clothingid);
public OnPlayerBuyClothingItem(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id();
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	new rows;
	new imprisoned, mobile;
	cache_get_value_index_int(0, 1, imprisoned);
	cache_get_value_index_int(0, 2, mobile);
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The number you're trying to reach does not belong to any particular person.");
	}
	else if(imprisoned)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
 	}
 	else if(mobile)
 	{
 	    SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_value_index(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, \"%s\", NOW(), \"%e\")", PlayerInfo[playerid][pNumber], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", username, number, msg);
	    SCM(playerid, COLOR_WHITE, "** The player who owns the number is offline, but will receive your text when they log in.");

        GivePlayerCash(playerid, -1);
		Dyuze(playerid, "Notice", "Text sent! We deduct you $1.");
	}
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	new data;
	cache_get_value_index_int(0, 0, data);
	if( data >= GetHouseTenantCapacity(houseid))
	{
	    SM(playerid, COLOR_SYNTAX, "This house has reached its limit of %i tenants.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SM(playerid, COLOR_YELLOW, "You are now renting at %s's house. You will pay $%i every paycheck.", HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice]);
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't exist, or is not renting at your home.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && PlayerInfo[i][pLogged])
	        {
	            PlayerInfo[i][pRentingHouse] = 0;
	            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = \"%e\"", username);
	    mysql_tquery(connectionID, queryBuffer);

        SM(playerid, COLOR_WHITE, "** You have evicted %s from your property.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no flags listed under their account.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SM(playerid, SERVER_COLOR, "%s's Flags", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name(i, "flaggedby", flaggedby);
	        cache_get_value_name(i, "date", date);
	        cache_get_value_name(i, "description", desc);

	        SM(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
	new rows;
	cache_get_row_count(rows);
    if(rows)
	{
	    cache_get_value_name(0, "username", PlayerInfo[playerid][pMarriedName], MAX_PLAYER_NAME);
	}
}

forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = \"%s\" WHERE username = \"%e\"", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has changed %s's account password.", GetRPName(playerid), username);
	}
}

forward OnVerifyRemoveFlag(playerid, targetid, slot);
public OnVerifyRemoveFlag(playerid, targetid, slot)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new flag;
		cache_get_value_index_int(0, 0, flag);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", flag);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_RED, "AdmCmd: %s's flag in slot %i was removed by %s.", GetRPName(targetid), slot, GetRPName(playerid));
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has no outstanding flag in that slot.");
	}
}

forward OnAdminListVehiclesForRemoval(playerid, targetid);
public OnAdminListVehiclesForRemoval(playerid, targetid)
{
    new rows;
	cache_get_row_count(rows);

    if(!rows)
    {
        SendClientMessage(playerid, COLOR_GREY, "This player owns no vehicles.");
	}
	else
	{
		static string[1024];

		string = "#\tModel\tLocation";

		for(new i = 0; i < rows; i ++)
    	{
			new c_veh;
			cache_get_value_name_int(i, "id", c_veh);
			new
				vehicleid = GetVehicleLinkedID(c_veh);

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				new model, interior, Float:pos[3];
				cache_get_value_name_int(i, "modelid", model);
				model -= 400;
				cache_get_value_name_int(i, "interior", interior);
				cache_get_value_name_float(i, "pos_x", pos[0]);
				cache_get_value_name_float(i, "pos_y", pos[1]);
				cache_get_value_name_float(i, "pos_z", pos[2]);
				format(string, sizeof(string), "%s\nn/a\t%s\t%s", string, vehicleNames[model], (interior) ? ("Garage") : GetZoneName(pos[0], pos[1], pos[2]));
			}
			else
			{
				format(string, sizeof(string), "%s\nID %i\t%s\t%s", string, vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
		}

		PlayerInfo[playerid][pRemoveFrom] = targetid;
		ShowPlayerDialog(playerid, DIALOG_REMOVEPVEH, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to remove.", string, "Select", "Cancel");
	}
}

forward OnVerifyRemoveVehicle(playerid, targetid);
public OnVerifyRemoveVehicle(playerid, targetid)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new id, modelid;
		cache_get_value_name_int(0, "id", id);
		cache_get_value_name_int(0, "modelid", modelid);
	    new vehicleid = GetVehicleLinkedID(id);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);

	    if(vehicleid != INVALID_VEHICLE_ID)
	    {
	        DespawnVehicle(vehicleid, false);
		}

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	    SM(targetid, COLOR_AQUA, "%s has removed your {FF6347}%s{33CCFF} from your vehicle list.", GetRPName(playerid), vehicleNames[modelid - 400]);
	}
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    cache_get_value_name_int(0, "uid", PlayerInfo[MAX_PLAYERS][pID]);
		cache_get_value_name_int(0, "setup", PlayerInfo[MAX_PLAYERS][pSetup]);
        cache_get_value_name_int(0, "gender", PlayerInfo[MAX_PLAYERS][pGender]);
        cache_get_value_name_int(0, "age", PlayerInfo[MAX_PLAYERS][pAge]);
        cache_get_value_name_int(0, "skin", PlayerInfo[MAX_PLAYERS][pSkin]);
        cache_get_value_name_float(0, "camera_x", PlayerInfo[MAX_PLAYERS][pCameraX]);
        cache_get_value_name_float(0, "camera_y", PlayerInfo[MAX_PLAYERS][pCameraY]);
        cache_get_value_name_float(0, "camera_z", PlayerInfo[MAX_PLAYERS][pCameraZ]);
        cache_get_value_name_float(0, "pos_x", PlayerInfo[MAX_PLAYERS][pPosX]);
        cache_get_value_name_float(0, "pos_y", PlayerInfo[MAX_PLAYERS][pPosY]);
        cache_get_value_name_float(0, "pos_z", PlayerInfo[MAX_PLAYERS][pPosZ]);
        cache_get_value_name_float(0, "pos_a", PlayerInfo[MAX_PLAYERS][pPosA]);
        cache_get_value_name_int(0, "interior", PlayerInfo[MAX_PLAYERS][pInterior]);
        cache_get_value_name_int(0, "world", PlayerInfo[MAX_PLAYERS][pWorld]);
        cache_get_value_name_int(0, "cash", PlayerInfo[MAX_PLAYERS][pCash]);
        cache_get_value_name_int(0, "bank", PlayerInfo[MAX_PLAYERS][pBank]);
        cache_get_value_name_int(0, "level", PlayerInfo[MAX_PLAYERS][pLevel]);
        cache_get_value_name_int(0, "exp", PlayerInfo[MAX_PLAYERS][pEXP]);
        cache_get_value_name_int(0, "minutes", PlayerInfo[MAX_PLAYERS][pMinutes]);
        cache_get_value_name_int(0, "hours", PlayerInfo[MAX_PLAYERS][pHours]);
        cache_get_value_name_int(0, "adminlevel", PlayerInfo[MAX_PLAYERS][pAdmin]);
        cache_get_value_name_int(0, "helperlevel", PlayerInfo[MAX_PLAYERS][pHelper]);
        cache_get_value_name_float(0, "health", PlayerInfo[MAX_PLAYERS][pHealth]);
        cache_get_value_name_float(0, "armor", PlayerInfo[MAX_PLAYERS][pArmor]);
        cache_get_value_name_int(0, "upgradepoints", PlayerInfo[MAX_PLAYERS][pUpgradePoints]);
		cache_get_value_name_int(0, "warnings", PlayerInfo[MAX_PLAYERS][pWarnings]);
		cache_get_value_name_int(0, "comserv", PlayerInfo[MAX_PLAYERS][pComserv]);
		cache_get_value_name_int(0, "comservskin", PlayerInfo[MAX_PLAYERS][pComservSkin]);
		cache_get_value_name_int(0, "injured", PlayerInfo[MAX_PLAYERS][pInjured]);
		cache_get_value_name_int(0, "hospital", PlayerInfo[MAX_PLAYERS][pHospital]);
		cache_get_value_name_float(0, "spawnhealth", PlayerInfo[MAX_PLAYERS][pSpawnHealth]);
        cache_get_value_name_float(0, "spawnarmor", PlayerInfo[MAX_PLAYERS][pSpawnArmor]);
        cache_get_value_name_int(0, "jailtype", PlayerInfo[MAX_PLAYERS][pJailType]);
        cache_get_value_name_int(0, "jailtime", PlayerInfo[MAX_PLAYERS][pJailTime]);
        cache_get_value_name_int(0, "newbiemuted", PlayerInfo[MAX_PLAYERS][pNewbieMuted]);
        cache_get_value_name_int(0, "helpmuted", PlayerInfo[MAX_PLAYERS][pHelpMuted]);
        cache_get_value_name_int(0, "admuted", PlayerInfo[MAX_PLAYERS][pAdMuted]);
        cache_get_value_name_int(0, "livemuted", PlayerInfo[MAX_PLAYERS][pLiveMuted]);
        cache_get_value_name_int(0, "globalmuted", PlayerInfo[MAX_PLAYERS][pGlobalMuted]);
        cache_get_value_name_int(0, "reportmuted", PlayerInfo[MAX_PLAYERS][pReportMuted]);
        cache_get_value_name_int(0, "reportwarns", PlayerInfo[MAX_PLAYERS][pReportWarns]);
        cache_get_value_name_int(0, "fightstyle", PlayerInfo[MAX_PLAYERS][pFightStyle]);
        cache_get_value_name_int(0, "dirtycash", PlayerInfo[MAX_PLAYERS][pDirtyCash]);
		cache_get_value_name_int(0, "phone", PlayerInfo[MAX_PLAYERS][pPhone]);
		cache_get_value_name_int(0, "number", PlayerInfo[MAX_PLAYERS][pNumber]);
		cache_get_value_name_int(0, "job", PlayerInfo[MAX_PLAYERS][pJob]);
		cache_get_value_name_int(0, "secondjob", PlayerInfo[MAX_PLAYERS][pSecondJob]);
		cache_get_value_name_int(0, "crimes", PlayerInfo[MAX_PLAYERS][pCrimes]);
		cache_get_value_name_int(0, "arrested", PlayerInfo[MAX_PLAYERS][pArrested]);
		cache_get_value_name_int(0, "wantedlevel", PlayerInfo[MAX_PLAYERS][pWantedLevel]);
		cache_get_value_name_int(0, "materials", PlayerInfo[MAX_PLAYERS][pMaterials]);
		cache_get_value_name_int(0, "pot", PlayerInfo[MAX_PLAYERS][pPot]);
		cache_get_value_name_int(0, "crack", PlayerInfo[MAX_PLAYERS][pCrack]);
		cache_get_value_name_int(0, "meth", PlayerInfo[MAX_PLAYERS][pMeth]);
		cache_get_value_name_int(0, "painkillers", PlayerInfo[MAX_PLAYERS][pPainkillers]);
		cache_get_value_name_int(0, "seeds", PlayerInfo[MAX_PLAYERS][pSeeds]);
		cache_get_value_name_int(0, "ephedrine", PlayerInfo[MAX_PLAYERS][pEphedrine]);
		cache_get_value_name_int(0, "muriaticacid", PlayerInfo[MAX_PLAYERS][pMuriaticAcid]);
		cache_get_value_name_int(0, "bakingsoda", PlayerInfo[MAX_PLAYERS][pBakingSoda]);
		cache_get_value_name_int(0, "cigars", PlayerInfo[MAX_PLAYERS][pCigars]);
		cache_get_value_name_int(0, "walkietalkie", PlayerInfo[MAX_PLAYERS][pWalkieTalkie]);
		cache_get_value_name_int(0, "channel", PlayerInfo[MAX_PLAYERS][pChannel]);
		cache_get_value_name_int(0, "rentinghouse", PlayerInfo[MAX_PLAYERS][pRentingHouse]);
		cache_get_value_name_int(0, "spraycans", PlayerInfo[MAX_PLAYERS][pSpraycans]);
		cache_get_value_name_int(0, "boombox", PlayerInfo[MAX_PLAYERS][pBoombox]);
		cache_get_value_name_int(0, "mp3player", PlayerInfo[MAX_PLAYERS][pMP3Player]);
		cache_get_value_name_int(0, "phonebook", PlayerInfo[MAX_PLAYERS][pPhonebook]);
		cache_get_value_name_int(0, "fishingrod", PlayerInfo[MAX_PLAYERS][pFishingRod]);
		cache_get_value_name_int(0, "fishingbait", PlayerInfo[MAX_PLAYERS][pFishingBait]);
		cache_get_value_name_int(0, "fishweight", PlayerInfo[MAX_PLAYERS][pFishWeight]);
		cache_get_value_name_int(0, "truckerskill", PlayerInfo[MAX_PLAYERS][pTruckerSkill]);
		cache_get_value_name_int(0, "fishingskill", PlayerInfo[MAX_PLAYERS][pFishingSkill]);
		cache_get_value_name_int(0, "weaponskill", PlayerInfo[MAX_PLAYERS][pWeaponSkill]);
		cache_get_value_name_int(0, "lawyerskill", PlayerInfo[MAX_PLAYERS][pLawyerSkill]);
		cache_get_value_name_int(0, "smugglerskill", PlayerInfo[MAX_PLAYERS][pSmugglerSkill]);
		cache_get_value_name_int(0, "detectiveskill", PlayerInfo[MAX_PLAYERS][pDetectiveSkill]);
		cache_get_value_name_int(0, "toggletextdraws", PlayerInfo[MAX_PLAYERS][pToggleTextdraws]);
		cache_get_value_name_int(0, "toggleooc", PlayerInfo[MAX_PLAYERS][pToggleOOC]);
		cache_get_value_name_int(0, "togglephone", PlayerInfo[MAX_PLAYERS][pTogglePhone]);
		cache_get_value_name_int(0, "toggleadmin", PlayerInfo[MAX_PLAYERS][pToggleAdmin]);
		cache_get_value_name_int(0, "togglehelper", PlayerInfo[MAX_PLAYERS][pToggleHelper]);
		cache_get_value_name_int(0, "togglenewbie", PlayerInfo[MAX_PLAYERS][pToggleNewbie]);
		cache_get_value_name_int(0, "togglewt", PlayerInfo[MAX_PLAYERS][pToggleWT]);
		cache_get_value_name_int(0, "toggleradio", PlayerInfo[MAX_PLAYERS][pToggleRadio]);
		cache_get_value_name_int(0, "togglevip", PlayerInfo[MAX_PLAYERS][pToggleVIP]);
		cache_get_value_name_int(0, "togglemusic", PlayerInfo[MAX_PLAYERS][pToggleMusic]);
		cache_get_value_name_int(0, "togglefaction", PlayerInfo[MAX_PLAYERS][pToggleFaction]);
		cache_get_value_name_int(0, "togglenews", PlayerInfo[MAX_PLAYERS][pToggleNews]);
		cache_get_value_name_int(0, "toggleglobal", PlayerInfo[MAX_PLAYERS][pToggleGlobal]);
		cache_get_value_name_int(0, "togglechat", PlayerInfo[MAX_PLAYERS][pToggleChat]);
		cache_get_value_name_int(0, "togglehud", PlayerInfo[MAX_PLAYERS][pToggleHUD]);
		cache_get_value_name_int(0, "carlicense", PlayerInfo[MAX_PLAYERS][pCarLicense]);
		cache_get_value_name_int(0, "gunlicense", PlayerInfo[MAX_PLAYERS][pWeaponLicense]);
		cache_get_value_name_int(0, "vippackage", PlayerInfo[MAX_PLAYERS][pDonator]);
		cache_get_value_name_int(0, "viptime", PlayerInfo[MAX_PLAYERS][pVIPTime]);
		cache_get_value_name_int(0, "vipcooldown", PlayerInfo[MAX_PLAYERS][pVIPCooldown]);
		cache_get_value_name_int(0, "weapon_0", PlayerInfo[MAX_PLAYERS][pWeapons][0]);
		cache_get_value_name_int(0, "weapon_1", PlayerInfo[MAX_PLAYERS][pWeapons][1]);
		cache_get_value_name_int(0, "weapon_2", PlayerInfo[MAX_PLAYERS][pWeapons][2]);
		cache_get_value_name_int(0, "weapon_3", PlayerInfo[MAX_PLAYERS][pWeapons][3]);
		cache_get_value_name_int(0, "weapon_4", PlayerInfo[MAX_PLAYERS][pWeapons][4]);
		cache_get_value_name_int(0, "weapon_5", PlayerInfo[MAX_PLAYERS][pWeapons][5]);
		cache_get_value_name_int(0, "weapon_6", PlayerInfo[MAX_PLAYERS][pWeapons][6]);
		cache_get_value_name_int(0, "weapon_7", PlayerInfo[MAX_PLAYERS][pWeapons][7]);
		cache_get_value_name_int(0, "weapon_8", PlayerInfo[MAX_PLAYERS][pWeapons][8]);
		cache_get_value_name_int(0, "weapon_9", PlayerInfo[MAX_PLAYERS][pWeapons][9]);
		cache_get_value_name_int(0, "weapon_10", PlayerInfo[MAX_PLAYERS][pWeapons][10]);
		cache_get_value_name_int(0, "weapon_11", PlayerInfo[MAX_PLAYERS][pWeapons][11]);
		cache_get_value_name_int(0, "weapon_12", PlayerInfo[MAX_PLAYERS][pWeapons][12]);
		cache_get_value_name_int(0, "faction", PlayerInfo[MAX_PLAYERS][pFaction]);
		cache_get_value_name_int(0, "factionrank", PlayerInfo[MAX_PLAYERS][pFactionRank]);
		cache_get_value_name_int(0, "gang", PlayerInfo[MAX_PLAYERS][pGang]);
		cache_get_value_name_int(0, "gangrank", PlayerInfo[MAX_PLAYERS][pGangRank]);
		cache_get_value_name_int(0, "division", PlayerInfo[MAX_PLAYERS][pDivision]);
		cache_get_value_name_int(0, "contracted", PlayerInfo[MAX_PLAYERS][pContracted]);
		cache_get_value_name_int(0, "bombs", PlayerInfo[MAX_PLAYERS][pBombs]);
		cache_get_value_name_int(0, "completedhits", PlayerInfo[MAX_PLAYERS][pCompletedHits]);
		cache_get_value_name_int(0, "failedhits", PlayerInfo[MAX_PLAYERS][pFailedHits]);
		cache_get_value_name_int(0, "reports", PlayerInfo[MAX_PLAYERS][pReports]);
		cache_get_value_name_int(0, "newbies", PlayerInfo[MAX_PLAYERS][pNewbies]);
		cache_get_value_name_int(0, "helprequests", PlayerInfo[MAX_PLAYERS][pHelpRequests]);
		cache_get_value_name_int(0, "speedometer", PlayerInfo[MAX_PLAYERS][pSpeedometer]);
		cache_get_value_name_int(0, "factionmod", PlayerInfo[MAX_PLAYERS][pFactionMod]);
		cache_get_value_name_int(0, "mafia", PlayerInfo[MAX_PLAYERS][pMafia]);
		cache_get_value_name_int(0, "gangmod", PlayerInfo[MAX_PLAYERS][pGangMod]);
		cache_get_value_name_int(0, "banappealer", PlayerInfo[MAX_PLAYERS][pBanAppealer]);
        cache_get_value_name_int(0, "ap", PlayerInfo[MAX_PLAYERS][pAP]);
        cache_get_value_name_int(0, "hm", PlayerInfo[MAX_PLAYERS][pHM]);
		cache_get_value_name_int(0, "mapper", PlayerInfo[MAX_PLAYERS][pMapper]);
		cache_get_value_name_int(0, "potplanted", PlayerInfo[MAX_PLAYERS][pPotPlanted]);
		cache_get_value_name_int(0, "pottime", PlayerInfo[MAX_PLAYERS][pPotTime]);
		cache_get_value_name_int(0, "potgrams", PlayerInfo[MAX_PLAYERS][pPotGrams]);
		cache_get_value_name_float(0, "pot_x", PlayerInfo[MAX_PLAYERS][pPotX]);
		cache_get_value_name_float(0, "pot_y", PlayerInfo[MAX_PLAYERS][pPotY]);
		cache_get_value_name_float(0, "pot_z", PlayerInfo[MAX_PLAYERS][pPotZ]);
		cache_get_value_name_float(0, "pot_a", PlayerInfo[MAX_PLAYERS][pPotA]);
		cache_get_value_name_int(0, "inventoryupgrade", PlayerInfo[MAX_PLAYERS][pInventoryUpgrade]);
		cache_get_value_name_int(0, "addictupgrade", PlayerInfo[MAX_PLAYERS][pAddictUpgrade]);
        cache_get_value_name_int(0, "traderupgrade", PlayerInfo[MAX_PLAYERS][pTraderUpgrade]);
        cache_get_value_name_int(0, "assetupgrade", PlayerInfo[MAX_PLAYERS][pAssetUpgrade]);
        cache_get_value_name_int(0, "laborupgrade", PlayerInfo[MAX_PLAYERS][pLaborUpgrade]);
		cache_get_value_name_int(0, "dmwarnings", PlayerInfo[MAX_PLAYERS][pDMWarnings]);
		cache_get_value_name_int(0, "weaponrestricted", PlayerInfo[MAX_PLAYERS][pWeaponRestricted]);
		cache_get_value_name_int(0, "referral_uid", PlayerInfo[MAX_PLAYERS][pReferralUID]);
		cache_get_value_name_int(0, "watch", PlayerInfo[MAX_PLAYERS][pWatch]);
		cache_get_value_name_int(0, "gps", PlayerInfo[MAX_PLAYERS][pGPS]);
		cache_get_value_name_int(0, "mask", PlayerInfo[MAX_PLAYERS][pMask]);
		cache_get_value_name_int(0, "repairkit", PlayerInfo[MAX_PLAYERS][pRepairkit]);
		cache_get_value_name_int(0, "gascan", PlayerInfo[MAX_PLAYERS][pGasCan]);
		cache_get_value_name_int(0, "blindfold", PlayerInfo[MAX_PLAYERS][pBlindfold]);
		cache_get_value_name_int(0, "hunger", PlayerInfo[MAX_PLAYERS][pHunger]);
		cache_get_value_name_int(0, "hungertimer", PlayerInfo[MAX_PLAYERS][pHungerTimer]);
		cache_get_value_name_int(0, "thirst", PlayerInfo[MAX_PLAYERS][pThirst]);
		cache_get_value_name_int(0, "thirsttimer", PlayerInfo[MAX_PLAYERS][pThirstTimer]);
        cache_get_value_name_int(0, "lastsign", PlayerInfo[MAX_PLAYERS][pLastSign]);


		strcpy(PlayerInfo[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
		new uid;
		cache_get_value_name_int(0, "uid", uid);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, \"%s\", NOW(), \"%e\")", uid, GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s offline flagged %s's account for \"%s\".", GetRPName(playerid), username, desc);
	}
}

forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "This player has no ban history recorded.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_value_index(i, 0, date);
	        cache_get_value_index(i, 1, description);

	        SM(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_value_index(0, 0, date);
		SM(playerid, COLOR_YELLOW, "%s last logged in on the %s (server time).", username, date);
	}
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = \"%e\"", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's helper level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	}
}

forward OnGivePlayerVehicle(playerid, username[], model[], color1, color2);
public OnGivePlayerVehicle(playerid, username[], model[], color1, color2)
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a, modelid;
		if((modelid = GetVehicleModelByName(model)) == 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		new uid;
		cache_get_value_name_int(0, "uid", uid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, impounded) VALUES(%i, \"%s\", %i, '%f', '%f', '%f', '%f', %i, %i, 0)", uid, username, modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline given %s their own "CXRP"%s{CCFFFF}.", username, vehicleNames[modelid - 400]);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has offline given %s their own %s.", GetRPName(playerid), username, vehicleNames[modelid - 400]);
		Log_Write("log_admin", "%s (uid: %i) has offline given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, vehicleNames[modelid - 400]);
	}
	return 1;
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
	new rows;
	cache_get_row_count(rows);
	new data;
	cache_get_value_index_int(0, 0, data);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(data > PlayerInfo[playerid][pAdmin] && level < data)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = \"%e\"", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's admin level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "Pending", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 24;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;

	ReloadTurf(turfid);
	SM(playerid, COLOR_YELLOW, "** Turf %i created successfully.", turfid);
}

forward OnAdminCreateSafeZone(playerid, zoneid, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z);
public OnAdminCreateSafeZone(playerid, zoneid, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z)
{
	SafeZone[zoneid][sExists] = 1;
	SafeZone[zoneid][sID] = cache_insert_id();
	SafeZone[zoneid][sMinX] = minx;
	SafeZone[zoneid][sMinY] = miny;
	SafeZone[zoneid][sMaxX] = maxx;
	SafeZone[zoneid][sMaxY] = maxy;
	SafeZone[zoneid][sX] = x;
	SafeZone[zoneid][sY] = y;
	SafeZone[zoneid][sZ] = z;
	SafeZone[zoneid][sHeight] = height;
	SafeZone[zoneid][sGangZone] = -1;
    SafeZone[zoneid][sArea] = -1;

    ReloadSafeZone(zoneid);
    SM(playerid, SERVER_COLOR, "** Safe Zone %i created successfully.", zoneid);
}


forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id();
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 1318;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 40000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = 1318;
	EntranceInfo[entranceid][eColor] = -256;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SM(playerid, SERVER_COLOR, "** Entrance %i created successfully.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(BusinessInfo[businessid][bOwner], "Bangladesh_Govt.", MAX_PLAYER_NAME);

	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id();
	BusinessInfo[businessid][bOwnerID] = 284;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bLocked] = 0;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 30000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bRobbed] = 3;
	BusinessInfo[businessid][bRobbing] = 0;

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			BusinessInfo[businessid][bPrices][0] = 10000; 
			BusinessInfo[businessid][bPrices][1] = 25000; 
			BusinessInfo[businessid][bPrices][2] = 250; 
			BusinessInfo[businessid][bPrices][3] = 5000; 
			BusinessInfo[businessid][bPrices][4] = 5000; 
			BusinessInfo[businessid][bPrices][5] = 20000; 
			BusinessInfo[businessid][bPrices][6] = 5000; 
			BusinessInfo[businessid][bPrices][7] = 3000; 
			BusinessInfo[businessid][bPrices][8] = 100; 
			BusinessInfo[businessid][bPrices][9] = 5000; 
			BusinessInfo[businessid][bPrices][10] = 8000; 
			BusinessInfo[businessid][bPrices][11] = 5000;
			BusinessInfo[businessid][bPrices][12] = 8000;
			BusinessInfo[businessid][bPrices][13] = 1000; 
			BusinessInfo[businessid][bPrices][14] = 1000; 
			BusinessInfo[businessid][bPrices][15] = 5000;
			BusinessInfo[businessid][bPrices][16] = 1000; 
			BusinessInfo[businessid][bPrices][17] = 1000; 
			BusinessInfo[businessid][bPrices][18] = 3500;
			BusinessInfo[businessid][bPrices][19] = 2000;
			BusinessInfo[businessid][bPrices][20] = 1500;
			format(BusinessInfo[businessid][bName], 64, "24/7");
	    }
	    case BUSINESS_GUNSHOP: //1
	    {
			BusinessInfo[businessid][bPrices][0] = 20000;
			BusinessInfo[businessid][bPrices][1] = 8000;
			BusinessInfo[businessid][bPrices][2] = 5000;
			BusinessInfo[businessid][bPrices][3] = 5000;
			BusinessInfo[businessid][bPrices][4] = 5000;
			format(BusinessInfo[businessid][bName], 64, "Ammunation");
	    }
	    case BUSINESS_CLOTHES: //2
	    {
			BusinessInfo[businessid][bPrices][0] = 4500;
			BusinessInfo[businessid][bPrices][1] = 2500;
			BusinessInfo[businessid][bPrices][2] = 2500;
			BusinessInfo[businessid][bPrices][3] = 2500;
			format(BusinessInfo[businessid][bName], 64, "Clothes Shop");
	    }
	    case BUSINESS_GYM: //3
	    {
			BusinessInfo[businessid][bPrices][0] = 5000;
			BusinessInfo[businessid][bPrices][1] = 5000;
			BusinessInfo[businessid][bPrices][2] = 5000;
			BusinessInfo[businessid][bPrices][3] = 5000;
			BusinessInfo[businessid][bPrices][4] = 5000;
			format(BusinessInfo[businessid][bName], 64, "Gym");
	    }
	    case BUSINESS_RESTAURANT: //4
	    {
			BusinessInfo[businessid][bPrices][0] = 500;
			BusinessInfo[businessid][bPrices][1] = 750;
			BusinessInfo[businessid][bPrices][2] = 1500;
			BusinessInfo[businessid][bPrices][3] = 2500;
			BusinessInfo[businessid][bPrices][4] = 3500;
			format(BusinessInfo[businessid][bName], 64, "Restaurant");
	    }
		// 5 = ad agency
	    case BUSINESS_BARCLUB: //6
	    {
			BusinessInfo[businessid][bPrices][0] = 500;
			BusinessInfo[businessid][bPrices][1] = 750;
			BusinessInfo[businessid][bPrices][2] = 2500;
			BusinessInfo[businessid][bPrices][3] = 5000;
			BusinessInfo[businessid][bPrices][4] = 8000;
			format(BusinessInfo[businessid][bName], 64, "Bar/Club");
	    }
	}

	switch(BusinessInfo[businessid][bType])
	{
		case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to %s. Type /buy to purchase from this business.", bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_GYM:
		    format(BusinessInfo[businessid][bMessage], 128, "Welcome to %s. /buy to purchase a fighting style.", bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_AGENCY:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to %s. /(ad)vertise to make an advertisement.", bizInteriors[BusinessInfo[businessid][bType]][intType]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET ownerid=%i, owner = \"%s\", world = %i, name = \"%e\", message = \"%e\", locked = 0 WHERE id = %i", BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	for (new j = 0; j < 21; j ++)
	{
	 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%i = %i WHERE id = %i", j, BusinessInfo[businessid][bPrices][j], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	ReloadBusiness(businessid);
	SM(playerid, SERVER_COLOR, "** Business %i created successfully.", businessid);
}

forward OnAdminCreateMapIcon(playerid, mapiconid, model, Float:x, Float:y, Float:z);
public OnAdminCreateMapIcon(playerid, mapiconid, model, Float:x, Float:y, Float:z)
{
	MapIconInfo[mapiconid][mpExists] = 1;
	MapIconInfo[mapiconid][mpID] = cache_insert_id();
	MapIconInfo[mapiconid][mpModel] = model;
	MapIconInfo[mapiconid][mpPosX] = x;
	MapIconInfo[mapiconid][mpPosY] = y;
	MapIconInfo[mapiconid][mpPosZ] = z;
	MapIconInfo[mapiconid][mpInt] = GetPlayerInterior(playerid);
	MapIconInfo[mapiconid][mpVW] = GetPlayerVirtualWorld(playerid);
	MapIconInfo[mapiconid][mpIcon] = CreateDynamicMapIcon(MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ], MapIconInfo[mapiconid][mpModel], 0, MapIconInfo[mapiconid][mpVW], MapIconInfo[mapiconid][mpInt], .style = MAPICON_GLOBAL);

	SM(playerid, SERVER_COLOR, "** Mapicon ID %i created successfully.", mapiconid);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE mapicons SET mp_model = %i, mp_x = '%f', mp_y = '%f', mp_z = '%f', mp_int = '%i', mp_vw = '%i' WHERE mid = %i", MapIconInfo[mapiconid][mpModel], MapIconInfo[mapiconid][mpPosX], MapIconInfo[mapiconid][mpPosY], MapIconInfo[mapiconid][mpPosZ], MapIconInfo[mapiconid][mpInt], MapIconInfo[mapiconid][mpVW], MapIconInfo[mapiconid][mpID]);
	mysql_tquery(connectionID, queryBuffer);

}


forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id();
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 20000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SM(playerid, SERVER_COLOR, "** Garage %i created successfully.", garageid);
}

forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(HouseInfo[houseid][hOwner], "Bangladesh_Govt.", MAX_PLAYER_NAME);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id();
	HouseInfo[houseid][hOwnerID] = 284;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 10000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hRobbed] = 3;
	HouseInfo[houseid][hRobbing] = 0;

	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET ownerid = %i, owner = \"%s\", world = %i, locked = 0 WHERE id = %i", HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, SERVER_COLOR, "** House %i created successfully.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
	new data;
	cache_get_value_index_int(0, 0, data);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if( data > PlayerInfo[playerid][pAdmin])
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. You cannot delete them.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = \"%e\"", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted %s's account.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows;
	cache_get_row_count(rows);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't killed, or has been killed, by anyone since they registered.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SCM(playerid, SERVER_COLOR, "Kills & Deaths");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name(i, "date", date);
	        cache_get_value_name(i, "killer", killer);
	        cache_get_value_name(i, "target", target);
	        cache_get_value_name(i, "reason", reason);
			new killerID, target_id;
			cache_get_value_name_int(i, "killer_uid", killerID);
			cache_get_value_name_int(i, "target_uid", target_id);
	        if(killerID == PlayerInfo[targetid][pID])
	        {
		        SM(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(target_id == PlayerInfo[targetid][pID])
	        {
	            SM(playerid, COLOR_YELLOW, "[%s] %s was killed by %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This IP address is already banned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SM(i, COLOR_YELLOW, "** Your IP address has been banned by %s, reason: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', \"%s\", \"%s\", NOW(), \"%s\", 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has banned IP \"%s\", reason: %s", GetRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128], rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "There are no bans that match your criteria.");
	}
	else
	{
	    cache_get_value_name(0, "bannedby", bannedby);
	    cache_get_value_name(0, "username", username);
	    cache_get_value_name(0, "ip", ip);
	    cache_get_value_name(0, "date", date);
	    cache_get_value_name(0, "reason", reason);
		new prem;
		cache_get_value_name_int(0, "permanent", prem);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] IP address \"%s\" was rangebanned by %s, reason: %s", date, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] IP address \"%s\" was banned by %s, reason: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was rangebanned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else if(prem) {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was permanently banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	new rows, data, data1;
	cache_get_value_index_int(0, 1, data);
	cache_get_value_index_int(0, 0, data1);
	cache_get_row_count(rows);
	if(rows)
	{
	    if(data && PlayerInfo[playerid][pAdmin] < 7)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This player is permanently banned. Permabans may only be lifted by Management.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", data1);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned %s.", GetRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "There is no banned player known by that name.");
	}

	return 1;
}

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = \"%e\"", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has locked %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) locked %s's account.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
	new rows;
	cache_get_row_count(rows);
    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = \"%e\"", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has unlocked %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) unlocked %s's account.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The name specified is taken already.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has changed %s's name to %s.", GetRPName(playerid), GetRPName(targetid), name);
		SM(targetid, COLOR_WHITE, "** %s changed your name from %s to %s.", GetRPName(playerid), GetRPName(targetid), name);

		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
	new rows, data;
	cache_get_value_index_int(0, 0, data); 
	cache_get_row_count(rows);
    if(rows)
	{
	    if( data > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
		}

		new
		    ip[16];

		cache_get_value_index(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);
		new uid;
		cache_get_value_name_int(0, "uid", uid);
    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", uid, username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline banned by %s, reason: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, reason);
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	new rows, data;
	cache_get_value_index_int(0, 0, data);
	cache_get_row_count(rows);
	if(rows)
	{
	    if( data > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = \"%e\", prisonreason = \"%e\" WHERE username = \"%e\"", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline prisoned for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}



forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	new rows, data;
	cache_get_value_index_int(0, 0, data);
	cache_get_row_count(rows);
	if(rows)
	{
	    if(data > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = \"%e\"", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline fined for $%i by %s, reason: %s", username, amount, GetRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, amount, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\n[!] %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		fwrite(file, string);
		fclose(file);
	}
	return 1;
}

forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows;
	cache_get_row_count(rows);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
				for(new i = 0; i < 23; i ++)
				{
					TextDrawShowForPlayer(extraid, Banned_TD[i]);
				}
				new prem;
				cache_get_value_name_int(0, "permanent", prem);
				if(prem)
				    SM(extraid, COLOR_YELLOW, "You are permanently banned from this server.");
				else
					SM(extraid, COLOR_YELLOW, "You are banned from this server. You can appeal your ban at ("SERVER_URL")");

				KickPlayer(extraid);
	        }
	        else
	        {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM whitelist WHERE name = \"%s\"", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_WHITE_LIST, extraid);
	        }
		}
	    case THREAD_WHITE_LIST:
	    {
	        if(rows)
        	{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%s\"", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
	        else
	        {
			    ShowPlayerDialog(extraid, 0, DIALOG_STYLE_MSGBOX, "CXRP Whitelist System", "Recently, Due to massive hacking on our server we had no choice but to enable {00FF00}Whitelist System{FFFFFF}\n\nYour current name is {FF0000}not whitelisted{FFFFFF} on our server\nIn-order to play here, you need to request to {00FF00}whitelist{FFFFFF} your name\n\nIf you wanna get {00FF00}whitelisted{FFFFFF}, Goto our {5865F2}Discord Server (Link: www.cyberx-rp.com/samp){FFFFFF} and find\nThe channel named {FF0000}#request-whitelist{FFFFFF}. Request there to get whitelisted NOW!", "Okay", "");
				KickPlayer(extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
			new string[128];
			for(new i = 0; i < 2; i++)
			{
				TextDrawShowForPlayer(extraid, PublicTD[i]);
			}
			PlayerTextDrawShow(extraid, PublicTD2[extraid]);
			TextDrawShowForPlayer(extraid, Watermark[0]);
			TextDrawShowForPlayer(extraid, Watermark[1]);
			TextDrawShowForPlayer(extraid, Watermark[2]);
			TextDrawShowForPlayer(extraid, Watermark[3]);
			TextDrawShowForPlayer(extraid, Watermark[4]);
			SetPlayerName(extraid, GetPlayerNameEx(extraid));
	        if(rows)
	        {
				format(string, sizeof(string), "%s~n~~w~CXRP Status: ~r~Registered~n~~w~CURRENT PLAYERS:~r~ %d",GetRPName(extraid),Iter_Count(Player));
				PlayerTextDrawSetString(extraid, PublicTD2[extraid], string);
    			ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
				format(string, sizeof(string), "%s", GetPlayerNameEx(extraid));
				PlayerTextDrawSetString(extraid, Register_TD[extraid][0], string);
				for(new i =0; i < 6; i ++)
				{
					PlayerTextDrawShow(extraid, Register_TD[extraid][i]);
				}
				for(new i =0; i < 17; i ++)
				{
					TextDrawShowForPlayer(extraid, RegisterGlobal[i]);
				}
				SelectTextDraw(extraid, 0xFFFF00FF);
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id();

			if(id)
	        {
	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
	        }
	    }
	    case THREAD_PROCESS_LOGIN:
	    {	// OnPlayerLogin
			new locked;
			cache_get_value_name_int(0, "locked", locked);
	        if(!rows)
	        {
				PlayerInfo[extraid][pLoginTries]++;
				if(PlayerInfo[extraid][pLoginTries] < 5)
				{
					ShowDialogToPlayer(extraid, DIALOG_LOGIN);
					SM(extraid, COLOR_LIGHTRED, "Incorrect password. You have %i more attempts before you are kicked.", 5 - PlayerInfo[extraid][pLoginTries]);
				}
				else
				{
					KickPlayer(extraid);
				}
		    } // put "!" for whitelist
	        else if(locked)
         	{
          		SCM(extraid, COLOR_LIGHTRED, "** This account currently locked. Please create an account recovery request to unlock your account.");
            	SAM(COLOR_YELLOW, "AdmWarning: %s tried to login while the account is locked.", GetRPName(extraid));
             	KickPlayer(extraid);
            }
			else
   			{
				
				TextDrawShowForPlayer(extraid, Watermark[0]);
				TextDrawShowForPlayer(extraid, Watermark[1]);
				TextDrawShowForPlayer(extraid, Watermark[2]);
				TextDrawShowForPlayer(extraid, Watermark[3]);
				TextDrawShowForPlayer(extraid, Watermark[4]);

				for(new i = 0; i < 2; i++) {
					TextDrawHideForPlayer(extraid, PublicTD[i]);
				}
				PlayerTextDrawHide(extraid, PublicTD2[extraid]);

	            new string[64];

	            cache_get_value_name(0, "accent", PlayerInfo[extraid][pAccent], 256);
	            cache_get_value_name(0, "adminname", PlayerInfo[extraid][pAdminName], MAX_PLAYER_NAME);
	            cache_get_value_name(0, "contractby", PlayerInfo[extraid][pContractBy], MAX_PLAYER_NAME);
	            cache_get_value_name(0, "contractreason", PlayerInfo[extraid][pContractReason], 256);
	            cache_get_value_name(0, "prisonedby", PlayerInfo[extraid][pPrisonedBy], MAX_PLAYER_NAME);
	            cache_get_value_name(0, "prisonreason", PlayerInfo[extraid][pPrisonReason], 256);
	            cache_get_value_name(0, "passportname", PlayerInfo[extraid][pPassportName], MAX_PLAYER_NAME);
	            cache_get_value_name(0, "regdate", PlayerInfo[extraid][pRegDate], 20);
				cache_get_value_name_float(0, "health", PlayerInfo[extraid][pHealth]);
                cache_get_value_name_float(0, "armor", PlayerInfo[extraid][pArmor]);


	            cache_get_value_name_int(0, "uid", PlayerInfo[extraid][pID]);
				cache_get_value_name_int(0, "setup", PlayerInfo[extraid][pSetup]);
                cache_get_value_name_int(0, "gender", PlayerInfo[extraid][pGender]);
                cache_get_value_name_int(0, "age", PlayerInfo[extraid][pAge]);
                cache_get_value_name_int(0, "skin", PlayerInfo[extraid][pSkin]);
                cache_get_value_name_float(0, "camera_x", PlayerInfo[extraid][pCameraX]);
                cache_get_value_name_float(0, "camera_y",PlayerInfo[extraid][pCameraY]);
                cache_get_value_name_float(0, "camera_z", PlayerInfo[extraid][pCameraZ]);
                cache_get_value_name_float(0, "pos_x", PlayerInfo[extraid][pPosX]);
                cache_get_value_name_float(0, "pos_y", PlayerInfo[extraid][pPosY]);
                cache_get_value_name_float(0, "pos_z", PlayerInfo[extraid][pPosZ]);
                cache_get_value_name_float(0, "pos_a", PlayerInfo[extraid][pPosA]);
                cache_get_value_name_int(0, "interior", PlayerInfo[extraid][pInterior]);
                cache_get_value_name_int(0, "world", PlayerInfo[extraid][pWorld]);
                cache_get_value_name_int(0, "cash", PlayerInfo[extraid][pCash]);
                cache_get_value_name_int(0, "bank", PlayerInfo[extraid][pBank]);
                cache_get_value_name_int(0, "level", PlayerInfo[extraid][pLevel]);
                cache_get_value_name_int(0, "exp", PlayerInfo[extraid][pEXP]);
                cache_get_value_name_int(0, "minutes", PlayerInfo[extraid][pMinutes]);
                cache_get_value_name_int(0, "hours", PlayerInfo[extraid][pHours]);
                cache_get_value_name_int(0, "adminlevel", PlayerInfo[extraid][pAdmin]);
                cache_get_value_name_int(0, "helperlevel", PlayerInfo[extraid][pHelper]);
                
                cache_get_value_name_int(0, "upgradepoints", PlayerInfo[extraid][pUpgradePoints]);
				cache_get_value_name_int(0, "warnings", PlayerInfo[extraid][pWarnings]);
				cache_get_value_name_int(0, "comserv", PlayerInfo[extraid][pComserv]);
				cache_get_value_name_int(0, "comservskin", PlayerInfo[extraid][pComservSkin]);
				cache_get_value_name_int(0, "injured", PlayerInfo[extraid][pInjured]);
				cache_get_value_name_int(0, "hospital", PlayerInfo[extraid][pHospital]);
				cache_get_value_name_float(0, "spawnhealth", PlayerInfo[extraid][pSpawnHealth]);
                cache_get_value_name_float(0, "spawnarmor", PlayerInfo[extraid][pSpawnArmor]);
                cache_get_value_name_int(0, "jailtype", PlayerInfo[extraid][pJailType]);
                cache_get_value_name_int(0, "jailtime", PlayerInfo[extraid][pJailTime]);
                cache_get_value_name_int(0, "formeradmin", PlayerInfo[extraid][pFormerAdmin]);
                cache_get_value_name_int(0, "newbiemuted", PlayerInfo[extraid][pNewbieMuted]);
                cache_get_value_name_int(0, "helpmuted", PlayerInfo[extraid][pHelpMuted]);
                cache_get_value_name_int(0, "admuted", PlayerInfo[extraid][pAdMuted]);
                cache_get_value_name_int(0, "livemuted", PlayerInfo[extraid][pLiveMuted]);
                cache_get_value_name_int(0, "globalmuted", PlayerInfo[extraid][pGlobalMuted]);
                cache_get_value_name_int(0, "reportmuted", PlayerInfo[extraid][pReportMuted]);
                cache_get_value_name_int(0, "reportwarns", PlayerInfo[extraid][pReportWarns]);
                cache_get_value_name_int(0, "fightstyle", PlayerInfo[extraid][pFightStyle]);
                cache_get_value_name_int(0, "dirtycash", PlayerInfo[extraid][pDirtyCash]);
				cache_get_value_name_int(0, "phone", PlayerInfo[extraid][pPhone]);
				cache_get_value_name_int(0, "number", PlayerInfo[extraid][pNumber]);
				cache_get_value_name_int(0, "job", PlayerInfo[extraid][pJob]);
				cache_get_value_name_int(0, "secondjob", PlayerInfo[extraid][pSecondJob]);
				cache_get_value_name_int(0, "crimes", PlayerInfo[extraid][pCrimes]);
				cache_get_value_name_int(0, "arrested", PlayerInfo[extraid][pArrested]);
				cache_get_value_name_int(0, "wantedlevel", PlayerInfo[extraid][pWantedLevel]);
				cache_get_value_name_int(0, "materials", PlayerInfo[extraid][pMaterials]);
				cache_get_value_name_int(0, "pot", PlayerInfo[extraid][pPot]);
				cache_get_value_name_int(0, "foods", PlayerInfo[extraid][pFoods]);
				cache_get_value_name_int(0, "drinks", PlayerInfo[extraid][pDrinks]);
				cache_get_value_name_int(0, "crack", PlayerInfo[extraid][pCrack]);
				cache_get_value_name_int(0, "meth", PlayerInfo[extraid][pMeth]);
				cache_get_value_name_int(0, "painkillers", PlayerInfo[extraid][pPainkillers]);
				cache_get_value_name_int(0, "seeds", PlayerInfo[extraid][pSeeds]);
				cache_get_value_name_int(0, "ephedrine", PlayerInfo[extraid][pEphedrine]);
				cache_get_value_name_int(0, "muriaticacid", PlayerInfo[extraid][pMuriaticAcid]);
				cache_get_value_name_int(0, "bakingsoda", PlayerInfo[extraid][pBakingSoda]);
				cache_get_value_name_int(0, "cigars", PlayerInfo[extraid][pCigars]);
				cache_get_value_name_int(0, "walkietalkie", PlayerInfo[extraid][pWalkieTalkie]);
				cache_get_value_name_int(0, "channel", PlayerInfo[extraid][pChannel]);
				cache_get_value_name_int(0, "rentinghouse", PlayerInfo[extraid][pRentingHouse]);
				cache_get_value_name_int(0, "spraycans", PlayerInfo[extraid][pSpraycans]);
				cache_get_value_name_int(0, "boombox", PlayerInfo[extraid][pBoombox]);
				cache_get_value_name_int(0, "mp3player", PlayerInfo[extraid][pMP3Player]);
				cache_get_value_name_int(0, "phonebook", PlayerInfo[extraid][pPhonebook]);
				cache_get_value_name_int(0, "fishingrod", PlayerInfo[extraid][pFishingRod]);
				cache_get_value_name_int(0, "fishingbait", PlayerInfo[extraid][pFishingBait]);
				cache_get_value_name_int(0, "fishweight", PlayerInfo[extraid][pFishWeight]);
				cache_get_value_name_int(0, "fishingskill", PlayerInfo[extraid][pFishingSkill]);
				cache_get_value_name_int(0, "truckerskill", PlayerInfo[extraid][pTruckerSkill]);
				cache_get_value_name_int(0, "weaponskill", PlayerInfo[extraid][pWeaponSkill]);
				cache_get_value_name_int(0, "lawyerskill", PlayerInfo[extraid][pLawyerSkill]);
				cache_get_value_name_int(0, "smugglerskill", PlayerInfo[extraid][pSmugglerSkill]);
            	cache_get_value_name_int(0, "detectiveskill", PlayerInfo[extraid][pDetectiveSkill]);
				cache_get_value_name_int(0, "toggletextdraws", PlayerInfo[extraid][pToggleTextdraws]);
				cache_get_value_name_int(0, "toggleooc", PlayerInfo[extraid][pToggleOOC]);
				cache_get_value_name_int(0, "togglephone", PlayerInfo[extraid][pTogglePhone]);
				cache_get_value_name_int(0, "toggleadmin", PlayerInfo[extraid][pToggleAdmin]);
				cache_get_value_name_int(0, "togglehelper", PlayerInfo[extraid][pToggleHelper]);
				cache_get_value_name_int(0, "togglenewbie", PlayerInfo[extraid][pToggleNewbie]);
				cache_get_value_name_int(0, "togglewt", PlayerInfo[extraid][pToggleWT]);
				cache_get_value_name_int(0, "toggleradio", PlayerInfo[extraid][pToggleRadio]);
				cache_get_value_name_int(0, "togglevip", PlayerInfo[extraid][pToggleVIP]);
				cache_get_value_name_int(0, "togglemusic", PlayerInfo[extraid][pToggleMusic]);
				cache_get_value_name_int(0, "togglefaction", PlayerInfo[extraid][pToggleFaction]);
				cache_get_value_name_int(0, "togglenews", PlayerInfo[extraid][pToggleNews]);
				cache_get_value_name_int(0, "toggleglobal", PlayerInfo[extraid][pToggleGlobal]);
				cache_get_value_name_int(0, "togglechat", PlayerInfo[extraid][pToggleChat]);
				cache_get_value_name_int(0, "togglehud", PlayerInfo[extraid][pToggleHUD]);
				cache_get_value_name_int(0, "carlicense", PlayerInfo[extraid][pCarLicense]);
				cache_get_value_name_int(0, "gunlicense", PlayerInfo[extraid][pWeaponLicense]);
				cache_get_value_name_int(0, "vippackage", PlayerInfo[extraid][pDonator]);
				cache_get_value_name_int(0, "viptime", PlayerInfo[extraid][pVIPTime]);
				cache_get_value_name_int(0, "vipcooldown", PlayerInfo[extraid][pVIPCooldown]);
				cache_get_value_name_int(0, "weapon_0", PlayerInfo[extraid][pWeapons][0]);
				cache_get_value_name_int(0, "weapon_1", PlayerInfo[extraid][pWeapons][1]);
				cache_get_value_name_int(0, "weapon_2", PlayerInfo[extraid][pWeapons][2]);
				cache_get_value_name_int(0, "weapon_3", PlayerInfo[extraid][pWeapons][3]);
				cache_get_value_name_int(0, "weapon_4", PlayerInfo[extraid][pWeapons][4]);
				cache_get_value_name_int(0, "weapon_5", PlayerInfo[extraid][pWeapons][5]);
				cache_get_value_name_int(0, "weapon_6", PlayerInfo[extraid][pWeapons][6]);
				cache_get_value_name_int(0, "weapon_7", PlayerInfo[extraid][pWeapons][7]);
				cache_get_value_name_int(0, "weapon_8", PlayerInfo[extraid][pWeapons][8]);
				cache_get_value_name_int(0, "weapon_9", PlayerInfo[extraid][pWeapons][9]);
				cache_get_value_name_int(0, "weapon_10", PlayerInfo[extraid][pWeapons][10]);
				cache_get_value_name_int(0, "weapon_11", PlayerInfo[extraid][pWeapons][11]);
				cache_get_value_name_int(0, "weapon_12", PlayerInfo[extraid][pWeapons][12]);
				cache_get_value_name_int(0, "faction", PlayerInfo[extraid][pFaction]);
				cache_get_value_name_int(0, "factionrank", PlayerInfo[extraid][pFactionRank]);
				cache_get_value_name_int(0, "gang", PlayerInfo[extraid][pGang]);
				cache_get_value_name_int(0, "gangrank", PlayerInfo[extraid][pGangRank]);
				cache_get_value_name_int(0, "division", PlayerInfo[extraid][pDivision]);
				cache_get_value_name_int(0, "contracted", PlayerInfo[extraid][pContracted]);
				cache_get_value_name_int(0, "bombs", PlayerInfo[extraid][pBombs]);
				cache_get_value_name_int(0, "completedhits", PlayerInfo[extraid][pCompletedHits]);
				cache_get_value_name_int(0, "failedhits", PlayerInfo[extraid][pFailedHits]);
				cache_get_value_name_int(0, "reports", PlayerInfo[extraid][pReports]);
				cache_get_value_name_int(0, "newbies", PlayerInfo[extraid][pNewbies]);
				cache_get_value_name_int(0, "helprequests", PlayerInfo[extraid][pHelpRequests]);
				cache_get_value_name_int(0, "speedometer", PlayerInfo[extraid][pSpeedometer]);
				cache_get_value_name_int(0, "factionmod", PlayerInfo[extraid][pFactionMod]);
				cache_get_value_name_int(0, "gangmod", PlayerInfo[extraid][pGangMod]);
				cache_get_value_name_int(0, "mafia", PlayerInfo[extraid][pMafia]);
				cache_get_value_name_int(0, "banappealer", PlayerInfo[extraid][pBanAppealer]);
                cache_get_value_name_int(0, "ap", PlayerInfo[extraid][pAP]);
                cache_get_value_name_int(0, "hm", PlayerInfo[extraid][pHM]);
				cache_get_value_name_int(0, "mapper", PlayerInfo[extraid][pMapper]);
				cache_get_value_name_int(0, "potplanted", PlayerInfo[extraid][pPotPlanted]);
				cache_get_value_name_int(0, "pottime", PlayerInfo[extraid][pPotTime]);
				cache_get_value_name_int(0, "potgrams", PlayerInfo[extraid][pPotGrams]);
				cache_get_value_name_float(0, "pot_x", PlayerInfo[extraid][pPotX]);
				cache_get_value_name_float(0, "pot_y", PlayerInfo[extraid][pPotY]);
				cache_get_value_name_float(0, "pot_z", PlayerInfo[extraid][pPotZ]);
				cache_get_value_name_float(0, "pot_a", PlayerInfo[extraid][pPotA]);
				cache_get_value_name_int(0, "inventoryupgrade", PlayerInfo[extraid][pInventoryUpgrade]);
				cache_get_value_name_int(0, "addictupgrade", PlayerInfo[extraid][pAddictUpgrade]);
                cache_get_value_name_int(0, "traderupgrade", PlayerInfo[extraid][pTraderUpgrade]);
                cache_get_value_name_int(0, "assetupgrade", PlayerInfo[extraid][pAssetUpgrade]);
                cache_get_value_name_int(0, "laborupgrade", PlayerInfo[extraid][pLaborUpgrade]);
				cache_get_value_name_int(0, "dmwarnings", PlayerInfo[extraid][pDMWarnings]);
				cache_get_value_name_int(0, "weaponrestricted", PlayerInfo[extraid][pWeaponRestricted]);
				cache_get_value_name_int(0, "referral_uid", PlayerInfo[extraid][pReferralUID]);
				cache_get_value_name_int(0, "watch", PlayerInfo[extraid][pWatch]);
				cache_get_value_name_int(0, "gps", PlayerInfo[extraid][pGPS]);
				cache_get_value_name_int(0, "clothes", PlayerInfo[extraid][pClothes]);
				cache_get_value_name_int(0, "showturfs", PlayerInfo[extraid][pShowTurfs]);
				cache_get_value_name_int(0, "showzones", PlayerInfo[extraid][pShowSafeZones]);
				cache_get_value_name_int(0, "watchon", PlayerInfo[extraid][pWatchOn]);
				cache_get_value_name_int(0, "gpson", PlayerInfo[extraid][pGPSOn]);
				cache_get_value_name_int(0, "doublexp", PlayerInfo[extraid][pDoubleXP]);
                cache_get_value_name_int(0, "pizzacooldown", PlayerInfo[extraid][pYFoodCooldown]);
                cache_get_value_name_int(0, "deathcooldown", PlayerInfo[extraid][pDeathCooldown]);
                cache_get_value_name_int(0, "detectivecooldown", PlayerInfo[extraid][pDetectiveCooldown]);
                cache_get_value_name_int(0, "carjackcooldown", PlayerInfo[extraid][pCarJackCooldown]);
            	cache_get_value_name_int(0, "duty", PlayerInfo[extraid][pDuty]);
            	cache_get_value_name_int(0, "backpack", PlayerInfo[extraid][pBackpack]);
            	cache_get_value_name_int(0, "bpcash", PlayerInfo[extraid][bpCash]);
				cache_get_value_name_int(0, "bpmaterials", PlayerInfo[extraid][bpMaterials]);
				cache_get_value_name_int(0, "bppot", PlayerInfo[extraid][bpPot]);
				cache_get_value_name_int(0, "bpcrack", PlayerInfo[extraid][bpCrack]);
				cache_get_value_name_int(0, "bpmeth", PlayerInfo[extraid][bpMeth]);
				cache_get_value_name_int(0, "bppainkillers", PlayerInfo[extraid][bpPainkillers]);
    			cache_get_value_name_int(0, "bpweapon_0", PlayerInfo[extraid][bpWeapons][0]);
				cache_get_value_name_int(0, "bpweapon_1", PlayerInfo[extraid][bpWeapons][1]);
				cache_get_value_name_int(0, "bpweapon_2", PlayerInfo[extraid][bpWeapons][2]);
				cache_get_value_name_int(0, "bpweapon_3", PlayerInfo[extraid][bpWeapons][3]);
				cache_get_value_name_int(0, "bpweapon_4", PlayerInfo[extraid][bpWeapons][4]);
				cache_get_value_name_int(0, "bpweapon_5", PlayerInfo[extraid][bpWeapons][5]);
				cache_get_value_name_int(0, "bpweapon_6", PlayerInfo[extraid][bpWeapons][6]);
				cache_get_value_name_int(0, "bpweapon_7", PlayerInfo[extraid][bpWeapons][7]);
				cache_get_value_name_int(0, "bpweapon_8", PlayerInfo[extraid][bpWeapons][8]);
				cache_get_value_name_int(0, "bpweapon_9", PlayerInfo[extraid][bpWeapons][9]);
				cache_get_value_name_int(0, "bpweapon_10", PlayerInfo[extraid][bpWeapons][10]);
				cache_get_value_name_int(0, "bpweapon_11", PlayerInfo[extraid][bpWeapons][11]);
				cache_get_value_name_int(0, "bpweapon_13", PlayerInfo[extraid][bpWeapons][13]);
				cache_get_value_name_int(0, "bpweapon_14", PlayerInfo[extraid][bpWeapons][14]);
                cache_get_value_name_int(0, "rpgammo", PlayerInfo[extraid][pRPGAmmo]);
                cache_get_value_name_int(0, "passport", PlayerInfo[extraid][pPassport]);
                cache_get_value_name_int(0, "passportlevel", PlayerInfo[extraid][pPassportLevel]);
                cache_get_value_name_int(0, "passportskin", PlayerInfo[extraid][pPassportSkin]);
                cache_get_value_name_int(0, "passportphone", PlayerInfo[extraid][pPassportPhone]);
                cache_get_value_name_int(0, "rope", PlayerInfo[extraid][pRope]);
                cache_get_value_name_int(0, "blindfold", PlayerInfo[extraid][pBlindfold]);
                cache_get_value_name_int(0, "mask", PlayerInfo[extraid][pMask]);
                cache_get_value_name_int(0, "repairkit", PlayerInfo[extraid][pRepairkit]);
				cache_get_value_name_int(0, "gascan", PlayerInfo[extraid][pGasCan]);
				cache_get_value_name_int(0, "toolkit", PlayerInfo[extraid][pToolkit]);
				cache_get_value_name_int(0, "rob_phone", PlayerInfo[extraid][pRobPhone]);
				cache_get_value_name_int(0, "rob_watch", PlayerInfo[extraid][pRobWatch]);
				cache_get_value_name_int(0, "flashlight", PlayerInfo[extraid][pFlashlight]);
				cache_get_value_name_int(0, "totalpatients", PlayerInfo[extraid][pTotalPatients]);
				cache_get_value_name_int(0, "totalfires", PlayerInfo[extraid][pTotalFires]);
				cache_get_value_name_int(0, "chatanim", PlayerInfo[extraid][pChatAnim]);

                PlayerInfo[extraid][pLogged] = 1;
                PlayerInfo[extraid][pACTime] = gettime() + 5;

                cache_get_value_name_int(0, "rarecooldown", PlayerInfo[extraid][pRareTime]);
                cache_get_value_name_int(0, "vipdlcooldown", PlayerInfo[extraid][pVipTimes]);
                cache_get_value_name_int(0, "diamonds", PlayerInfo[extraid][pDiamonds]);
				cache_get_value_name_int(0, "hunger", PlayerInfo[extraid][pHunger]);
				cache_get_value_name_int(0, "hungertimer", PlayerInfo[extraid][pHungerTimer]);
				cache_get_value_name_int(0, "thirst", PlayerInfo[extraid][pThirst]);
				cache_get_value_name_int(0, "thirsttimer", PlayerInfo[extraid][pThirstTimer]);
				cache_get_value_name_int(0, "marriedto", PlayerInfo[extraid][pMarriedTo]);
                cache_get_value_name_int(0, "lastsign", PlayerInfo[extraid][pLastSign]);
				Freeze(extraid);
				
				if(PlayerInfo[extraid][pInjured] || PlayerInfo[extraid][pHospital])
				{
					Unfreeze(extraid);
					PlayerInfo[extraid][pInjured] = 0;
					PlayerInfo[extraid][pBandana] = 0;
		     	   	SetPlayerInHospital(extraid);

					ResetPlayerWeaponsEx(extraid);
				}
				else
				{
					SetTimerEx("Unfreeze", 5000, false, "i", extraid);
				}
				#if defined DISCORD
					cache_get_value_name(0, "discord", PlayerInfo[extraid][pDiscord], DCC_ID_SIZE);
					if(strlen(PlayerInfo[extraid][pDiscord]) < 2)
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, discord FROM whitelist WHERE name = \"%s\"", GetPlayerNameEx(extraid));
						mysql_tquery(connectionID, queryBuffer, "DCC_IDUpdate", "i", extraid);
					}
				#endif

				if(PlayerInfo[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", PlayerInfo[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(PlayerInfo[extraid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
				}

                if(!PlayerInfo[extraid][pAdminDuty])
				{
					ClearChat(extraid);
				}
				if(!PlayerInfo[extraid][pToggleTextdraws])
				{
					if(!PlayerInfo[extraid][pToggleHUD])
					{
					    PlayerTextDrawShow(extraid, PlayerInfo[extraid][pText][4]);
					    PlayerTextDrawShow(extraid, PlayerInfo[extraid][pText][5]);
					}
					if(PlayerInfo[extraid][pWatchOn])
					{
					    TextDrawShowForPlayer(extraid, TimeTD);
					}
					if(PlayerInfo[extraid][pGPSOn])
					{
                        ShowGPSTextdraw(extraid);
					}
				}

            	if(!isnull(Settings[gServerMOTD]))
            	{
            		SM(extraid, SERVER_COLOR, "News:"WHITE" %s", Settings[gServerMOTD]);
            	}
            	if(!isnull(Settings[adminMOTD]) && PlayerInfo[extraid][pAdmin] > 0)
            	{
            		SM(extraid, COLOR_LIGHTRED, "Admin News:"WHITE" %s", Settings[adminMOTD]);
            	}
            	if(!isnull(Settings[helperMOTD]) && (PlayerInfo[extraid][pHelper] > 0))
            	{
            		SM(extraid, COLOR_AQUA, "Helper News:"WHITE" %s", Settings[helperMOTD]);
            	}
            	if(PlayerInfo[extraid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[extraid][pGang]][gMOTD], "None", true) != 0)
            	{
            		SM(extraid, COLOR_GREEN, "Gang News:"WHITE" %s", GangInfo[PlayerInfo[extraid][pGang]][gMOTD]);
            	}
				new refcount;
				cache_get_value_name_int(extraid, "refercount", refcount);
				if( refcount > 0)
				{
				    new count;
					cache_get_value_name_int(0, "refercount", count);

				    SM(extraid, COLOR_YELLOW, "%i players who you've referred reached level 3. Therefore you received +1 level!", count);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!PlayerInfo[extraid][pSetup])
                {
                    if(PlayerInfo[extraid][pPotPlanted] && PlayerInfo[extraid][pPotObject] == INVALID_OBJECT_ID)
                    {
                        PlayerInfo[extraid][pPotObject] = CreateDynamicObject(3409, PlayerInfo[extraid][pPotX], PlayerInfo[extraid][pPotY], PlayerInfo[extraid][pPotZ] - 1.8, 0.0, 0.0, PlayerInfo[extraid][pPotA]);
					}
					if(PlayerInfo[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					if(PlayerInfo[extraid][pShowSafeZones])
					{
					    ShowSafeZonesForPlayer(extraid, true);
					}

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = NOW(), ip = \"%s\" WHERE uid = %i", GetPlayerIP(extraid), PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

					strcpy(PlayerInfo[extraid][pSerial], ReturnGPCI(extraid), 41);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET serial = \"%s\" WHERE uid = %i", PlayerInfo[extraid][pSerial], PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

			     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

				    if(!PlayerInfo[extraid][pTogglePhone])
				    {
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", PlayerInfo[extraid][pNumber]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
					}

					

					SetPlayerHealth(extraid, PlayerInfo[extraid][pHealth]);
					SetScriptArmour(extraid, PlayerInfo[extraid][pArmor]);
					printf("%f, %i", PlayerInfo[extraid][pArmor], extraid);

				    if(PlayerInfo[extraid][pAdminDuty])
				    {
				    	PlayerInfo[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, PlayerInfo[extraid][pUsername]);

				        SAM(COLOR_LIGHTRED, "AdmCmd: %s is no longer on admin duty.", GetRPName(extraid));
				        SCM(extraid, COLOR_WHITE, "** You are no longer on admin duty. Your account's statistics have been preserved.");
					}
				    else
				    {
					    if(PlayerInfo[extraid][pAdmin] && PlayerInfo[extraid][pPassport] == 0)
					    {
					        SAM(COLOR_LIGHTRED, "AdmCmd: %s %s has logged in.", GetAdminRank(extraid), GetRPName(extraid));
					    }
					    if(PlayerInfo[extraid][pGang] >= 0 && PlayerInfo[extraid][pPassport] == 0)
					    {
							SendGangMessage(PlayerInfo[extraid][pGang], COLOR_AQUA, "(( %s %s has logged in. ))", GangRanks[PlayerInfo[extraid][pGang]][PlayerInfo[extraid][pGangRank]], GetRPName(extraid));
						}
						if(PlayerInfo[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(PlayerInfo[extraid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has logged in. ))", FactionRanks[PlayerInfo[extraid][pFaction]][PlayerInfo[extraid][pFactionRank]], GetRPName(extraid));
						}

					    format(string, sizeof(string), "Welcome to "SERVER_NAME", %s.", GetRPName(extraid));
						Dyuze(extraid, "Notice", string);

        	        	if(PlayerInfo[extraid][pAdmin] > 0) {
							SM(extraid, COLOR_WHITE, "Welcome back to "CXRP""SERVER_NAME""WHITE". You have logged in as a level %i %s.", PlayerInfo[extraid][pAdmin], GetAdminRank(extraid));
						} else if(PlayerInfo[extraid][pHelper] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "CXRP""SERVER_NAME""WHITE". You have logged in as a %s.", GetHelperRank(extraid));
						} else if(PlayerInfo[extraid][pDonator] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "CXRP""SERVER_NAME""WHITE". You have logged in as a %s Donator.", GetDonatorRank(PlayerInfo[extraid][pDonator]));
        	        	} else {
        	        	    SM(extraid, COLOR_WHITE, "Welcome back to "CXRP""SERVER_NAME""WHITE". You have logged in as a level %i player.", PlayerInfo[extraid][pLevel]);
        	        	}
						new contract;
						cache_get_value_name_int(0, "contractresult", contract);
						if(contract == 1)
						{
							SM(extraid, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contracts has been completed and target has been killed.");
						}
						else if(contract == 0)
						{
							SM(extraid, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contracts has been failed and the hitman got killed.");
						}
						else if(contract == 3)
						{
							SM(extraid, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contract has been denied, you got your money back");
						}
						else if(contract == 2)
						{
							SM(extraid, COLOR_YELLOW, "SMS from Unknown Hitman: One of your contract has been accepted and being processed by a Hitman");
						}
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contractresult = -1 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
						PreloadAnims(extraid);

						#if defined DISCORD
							DCC_SendText(5, extraid, PlayerInfo[extraid][pSerial], "1118611293000188055", INVALID_PLAYER_ID, PlayerInfo[extraid][pLevel]);
						#endif
					}

					if(PlayerInfo[extraid][pFaction] >= 0 && FactionInfo[PlayerInfo[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	ResetPlayerWeaponsEx(extraid);
				        SM(extraid, COLOR_LIGHTRED, "You were either kicked from the faction while offline or it was deleted.");
			            SetScriptSkin(extraid, 230);

				        PlayerInfo[extraid][pFaction] = -1;
				        PlayerInfo[extraid][pFactionRank] = 0;
				        PlayerInfo[extraid][pDivision] = -1;
				        PlayerInfo[extraid][pDuty] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(PlayerInfo[extraid][pGang] >= 0 && !GangInfo[PlayerInfo[extraid][pGang]][gSetup])
					{
					    SCM(extraid, COLOR_LIGHTRED, "You have either been kicked from the gang while offline or it was deleted.");
					    PlayerInfo[extraid][pGang] = -1;
					    PlayerInfo[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
				}
				SetPlayerToSpawn(extraid);
	        }
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has %i pending flags. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SM(extraid, SERVER_COLOR, "%i Results Found", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_value_name(i, "username", username);
		            cache_get_value_name(i, "lastlogin", date);
		            
		            SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
		        }
		    }
		    else
		    {
		        SCM(extraid, COLOR_SYNTAX, "This IP address is not associated with any accounts.");
			}
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SCM(extraid, SERVER_COLOR, ""REVISION"");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_value_name(i, "text", text);
			    SM(extraid, COLOR_GREY1, "%s", text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Helper Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_name(i, "username", username);
		        cache_get_value_name(i, "lastlogin", lastlogin);
				new level;
				cache_get_value_name_int(i, "helperlevel", level);

		        switch(level)
				{
					case 1: SM(extraid, COLOR_AQUA, "[H1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, COLOR_AQUA, "[H2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, COLOR_AQUA, "[H3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, COLOR_AQUA, "[H4]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Admin Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_name(i, "username", username);
		        cache_get_value_name(i, "lastlogin", lastlogin);
				new level;
				cache_get_value_name_int(i, "adminlevel", level);
		        switch(level)
				{
					case 1: SM(extraid, SERVER_COLOR, "[A1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, SERVER_COLOR, "[A2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, SERVER_COLOR, "[A3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, SERVER_COLOR, "[A4]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 5: SM(extraid, SERVER_COLOR, "[A5]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 6: SM(extraid, SERVER_COLOR, "[A6]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 7: SM(extraid, SERVER_COLOR, "[A7]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 8: SM(extraid, SERVER_COLOR, "[A8]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_value_name(i, "owner", HouseInfo[i][hOwner], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "id",  HouseInfo[i][hID]);
		        cache_get_value_name_int(i, "ownerid",  HouseInfo[i][hOwnerID]);
		        cache_get_value_name_int(i, "type",  HouseInfo[i][hType]);
		        cache_get_value_name_int(i, "price",  HouseInfo[i][hPrice]);
		        cache_get_value_name_int(i, "rentprice",  HouseInfo[i][hRentPrice]);
		        cache_get_value_name_int(i, "level",  HouseInfo[i][hLevel]);
		        cache_get_value_name_int(i, "locked",  HouseInfo[i][hLocked]);
		        cache_get_value_name_int(i, "timestamp",  HouseInfo[i][hTimestamp]);
		        cache_get_value_name_float(i, "pos_x",  HouseInfo[i][hPosX]);
		        cache_get_value_name_float(i, "pos_y",  HouseInfo[i][hPosY]);
		        cache_get_value_name_float(i, "pos_z",  HouseInfo[i][hPosZ]);
		        cache_get_value_name_float(i, "pos_a",  HouseInfo[i][hPosA]);
                cache_get_value_name_float(i, "int_x",  HouseInfo[i][hIntX]);
		        cache_get_value_name_float(i, "int_y",  HouseInfo[i][hIntY]);
		        cache_get_value_name_float(i, "int_z",  HouseInfo[i][hIntZ]);
		        cache_get_value_name_float(i, "int_a",  HouseInfo[i][hIntA]);
		        cache_get_value_name_int(i, "interior",  HouseInfo[i][hInterior]);
		        cache_get_value_name_int(i, "world",  HouseInfo[i][hWorld]);
		        cache_get_value_name_int(i, "outsideint",  HouseInfo[i][hOutsideInt]);
		        cache_get_value_name_int(i, "outsidevw",  HouseInfo[i][hOutsideVW]);
		        cache_get_value_name_int(i, "cash",  HouseInfo[i][hCash]);
		        cache_get_value_name_int(i, "materials",  HouseInfo[i][hMaterials]);
                cache_get_value_name_int(i, "pot",  HouseInfo[i][hPot]);
                cache_get_value_name_int(i, "crack",  HouseInfo[i][hCrack]);
                cache_get_value_name_int(i, "meth",  HouseInfo[i][hMeth]);
                cache_get_value_name_int(i, "painkillers",  HouseInfo[i][hPainkillers]);
                cache_get_value_name_int(i, "weapon_1",  HouseInfo[i][hWeapons][0]);
                cache_get_value_name_int(i, "weapon_2",  HouseInfo[i][hWeapons][1]);
                cache_get_value_name_int(i, "weapon_3",  HouseInfo[i][hWeapons][2]);
                cache_get_value_name_int(i, "weapon_4",  HouseInfo[i][hWeapons][3]);
                cache_get_value_name_int(i, "weapon_5",  HouseInfo[i][hWeapons][4]);
                cache_get_value_name_int(i, "weapon_6",  HouseInfo[i][hWeapons][5]);
                cache_get_value_name_int(i, "weapon_7",  HouseInfo[i][hWeapons][6]);
                cache_get_value_name_int(i, "weapon_8",  HouseInfo[i][hWeapons][7]);
                cache_get_value_name_int(i, "weapon_9",  HouseInfo[i][hWeapons][8]);
                cache_get_value_name_int(i, "weapon_10",  HouseInfo[i][hWeapons][9]);
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
				cache_get_value_name_int(i, "robbed", HouseInfo[i][hRobbed]);
				cache_get_value_name_int(i, "robbing", HouseInfo[i][hRobbing]);
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "There is nobody currently renting at your home.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SCM(extraid, SERVER_COLOR, "List of Tenants");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_value_name(i, "username", username);
			        cache_get_value_name(i, "lastlogin", date);

			        SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				new modelid, Float:pos[3], Float:rot[3], world, interior;
				cache_get_value_name_int(i, "modelid", modelid);
				cache_get_value_name_float(i, "pos_x", pos[0]);
				cache_get_value_name_float(i, "pos_y", pos[1]);
				cache_get_value_name_float(i, "pos_z", pos[2]);
				cache_get_value_name_float(i, "rot_x", rot[0]);
				cache_get_value_name_float(i, "rot_y", rot[1]);
				cache_get_value_name_float(i, "rot_z", rot[2]);
				cache_get_value_name_int(i, "world", world);
				cache_get_value_name_int(i, "interior", interior);
		        new objectid = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], rot[0], rot[1], rot[2], world, interior);
				new id, h_id;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "houseid", h_id);
				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, id);
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, h_id);

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_value_name(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, pos[0], pos[1], pos[2], 10.0, .worldid = world, .interiorid = interior));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_value_name(i, "owner", GarageInfo[i][gOwner], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "id", GarageInfo[i][gID]);
		        cache_get_value_name_int(i, "ownerid", GarageInfo[i][gOwnerID]);
		        cache_get_value_name_int(i, "type", GarageInfo[i][gType]);
		        cache_get_value_name_int(i, "price", GarageInfo[i][gPrice]);
		        cache_get_value_name_int(i, "locked", GarageInfo[i][gLocked]);
		        cache_get_value_name_int(i, "timestamp", GarageInfo[i][gTimestamp]);
		        cache_get_value_name_float(i, "pos_x", GarageInfo[i][gPosX]);
		        cache_get_value_name_float(i, "pos_y", GarageInfo[i][gPosY]);
		        cache_get_value_name_float(i, "pos_z", GarageInfo[i][gPosZ]);
		        cache_get_value_name_float(i, "pos_a", GarageInfo[i][gPosA]);
		        cache_get_value_name_float(i, "exit_x", GarageInfo[i][gExitX]);
		        cache_get_value_name_float(i, "exit_y", GarageInfo[i][gExitY]);
		        cache_get_value_name_float(i, "exit_z", GarageInfo[i][gExitZ]);
		        cache_get_value_name_float(i, "exit_a", GarageInfo[i][gExitA]);
		        cache_get_value_name_int(i, "world", GarageInfo[i][gWorld]);
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_value_name(i, "owner", BusinessInfo[i][bOwner], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "id", BusinessInfo[i][bID]);
		        cache_get_value_name_int(i, "ownerid", BusinessInfo[i][bOwnerID]);
		        cache_get_value_name_int(i, "type", BusinessInfo[i][bType]);
		        cache_get_value_name_int(i, "price", BusinessInfo[i][bPrice]);
		        cache_get_value_name_int(i, "locked", BusinessInfo[i][bLocked]);
		        cache_get_value_name_int(i, "timestamp", BusinessInfo[i][bTimestamp]);
		        cache_get_value_name_int(i, "biztime", BusinessInfo[i][bTime]);
		        cache_get_value_name_float(i, "pos_x", BusinessInfo[i][bPosX]);
		        cache_get_value_name_float(i, "pos_y", BusinessInfo[i][bPosY]);
		        cache_get_value_name_float(i, "pos_z", BusinessInfo[i][bPosZ]);
		        cache_get_value_name_float(i, "pos_a", BusinessInfo[i][bPosA]);
                cache_get_value_name_float(i, "int_x", BusinessInfo[i][bIntX]);
		        cache_get_value_name_float(i, "int_y", BusinessInfo[i][bIntY]);
		        cache_get_value_name_float(i, "int_z", BusinessInfo[i][bIntZ]);
		        cache_get_value_name_float(i, "int_a", BusinessInfo[i][bIntA]);
		        cache_get_value_name_int(i, "interior", BusinessInfo[i][bInterior]);
		        cache_get_value_name_int(i, "world", BusinessInfo[i][bWorld]);
		        cache_get_value_name_int(i, "outsideint", BusinessInfo[i][bOutsideInt]);
		        cache_get_value_name_int(i, "outsidevw", BusinessInfo[i][bOutsideVW]);
		        cache_get_value_name_int(i, "cash", BusinessInfo[i][bCash]);
                cache_get_value_name_int(i, "products", BusinessInfo[i][bProducts]);
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bExists] = 1;
          		cache_get_value_name(i, "name", BusinessInfo[i][bName], 64);
                cache_get_value_name(i, "message", BusinessInfo[i][bMessage], 128);
				cache_get_value_name_int(i, "robbed", BusinessInfo[i][bRobbed]);
				cache_get_value_name_int(i, "robbing", BusinessInfo[i][bRobbing]);

				new str[64];
				for (new j = 0; j < 21; j ++)
				{
					format(str, 32, "prices%d", j);
					cache_get_value_name_int(i, str, BusinessInfo[i][bPrices][j]);
				}

                ReloadBusiness(i);
		    }

		    printf("[Script] %i businesses loaded.", rows);
		}
		case THREAD_LOAD_MAPICONS:
		{
		    for(new i = 0; i < rows && i < MAX_MAPICONS; i ++)
		    {
				MapIconInfo[i][mpExists] = 1;
		        cache_get_value_name_int(i, "mid", MapIconInfo[i][mpID]);
		        cache_get_value_name_int(i, "mp_model", MapIconInfo[i][mpModel]);
		        cache_get_value_name_float(i, "mp_x", MapIconInfo[i][mpPosX]);
		        cache_get_value_name_float(i, "mp_y", MapIconInfo[i][mpPosY]);
		        cache_get_value_name_float(i, "mp_z", MapIconInfo[i][mpPosZ]);
		        cache_get_value_name_int(i, "mp_int", MapIconInfo[i][mpInt]);
		        cache_get_value_name_int(i, "mp_vw", MapIconInfo[i][mpVW]);
		        MapIconInfo[i][mpIcon] = -1;
				ReloadMapicon(i);
			}
		    printf("[Script] %i mapicons loaded.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_value_name(i, "owner", EntranceInfo[i][eOwner], MAX_PLAYER_NAME);
		        cache_get_value_name(i, "name", EntranceInfo[i][eName], 40);
		        cache_get_value_name(i, "password", EntranceInfo[i][ePassword], 64);

				cache_get_value_name_int(i, "id", EntranceInfo[i][eID]);
				cache_get_value_name_int(i, "ownerid", EntranceInfo[i][eOwnerID]);
				cache_get_value_name_int(i, "iconid", EntranceInfo[i][eIcon]);
                cache_get_value_name_int(i, "locked", EntranceInfo[i][eLocked]);
                cache_get_value_name_float(i, "radius", EntranceInfo[i][eRadius]);
                cache_get_value_name_float(i, "pos_x", EntranceInfo[i][ePosX]);
                cache_get_value_name_float(i, "pos_y", EntranceInfo[i][ePosY]);
                cache_get_value_name_float(i, "pos_z", EntranceInfo[i][ePosZ]);
                cache_get_value_name_float(i, "pos_a", EntranceInfo[i][ePosA]);
                cache_get_value_name_float(i, "int_x", EntranceInfo[i][eIntX]);
                cache_get_value_name_float(i, "int_y", EntranceInfo[i][eIntY]);
                cache_get_value_name_float(i, "int_z", EntranceInfo[i][eIntZ]);
                cache_get_value_name_float(i, "int_a", EntranceInfo[i][eIntA]);
                cache_get_value_name_int(i, "interior", EntranceInfo[i][eInterior]);
                cache_get_value_name_int(i, "world", EntranceInfo[i][eWorld]);
                cache_get_value_name_int(i, "outsideint", EntranceInfo[i][eOutsideInt]);
                cache_get_value_name_int(i, "outsidevw", EntranceInfo[i][eOutsideVW]);
                cache_get_value_name_int(i, "adminlevel", EntranceInfo[i][eAdminLevel]);
                cache_get_value_name_int(i, "factiontype", EntranceInfo[i][eFactionType]);
                cache_get_value_name_int(i, "vip", EntranceInfo[i][eVIP]);
                cache_get_value_name_int(i, "vehicles", EntranceInfo[i][eVehicles]);
                cache_get_value_name_int(i, "freeze", EntranceInfo[i][eFreeze]);
                cache_get_value_name_int(i, "label", EntranceInfo[i][eLabel]);
                cache_get_value_name_int(i, "color", EntranceInfo[i][eColor]);
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eExists] = 1;

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid;
				cache_get_value_name_int(i, "id", factionid);

		        cache_get_value_name(i, "name", FactionInfo[factionid][fName], 48);
		        cache_get_value_name(i, "shortname", FactionInfo[factionid][fShortName], 24);
		        cache_get_value_name(i, "leader", FactionInfo[factionid][fLeader], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "type", FactionInfo[factionid][fType]);
		        cache_get_value_name_int(i, "color", FactionInfo[factionid][fColor]);
		        cache_get_value_name_int(i, "rankcount", FactionInfo[factionid][fRankCount]);
		        cache_get_value_name_float(i, "lockerx", FactionInfo[factionid][fLockerX]);
		        cache_get_value_name_float(i, "lockery", FactionInfo[factionid][fLockerY]);
		        cache_get_value_name_float(i, "lockerz", FactionInfo[factionid][fLockerZ]);
		        cache_get_value_name_int(i, "lockerinterior", FactionInfo[factionid][fLockerInterior]);
		        cache_get_value_name_int(i, "lockerworld", FactionInfo[factionid][fLockerWorld]);
		        cache_get_value_name_int(i, "turftokens", FactionInfo[factionid][fTurfTokens]);
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
                cache_get_value_name_int(i, "cash", FactionInfo[factionid][fsCash]);
                cache_get_value_name_int(i, "mats", FactionInfo[factionid][fsMats]);
                cache_get_value_name_int(i, "pot", FactionInfo[factionid][fsPot]);
                cache_get_value_name_int(i, "crack", FactionInfo[factionid][fsCrack]);
                cache_get_value_name_int(i, "meth", FactionInfo[factionid][fsMeth]);
                cache_get_value_name_int(i, "painkiller", FactionInfo[factionid][fsPainkiller]);
				FactionVC[factionid] = SvCreateGStream((FactionInfo[factionid][fColor] & ~0xff), FactionInfo[factionid][fShortName]);
				ReloadFaction(factionid);
		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
				new id, rank;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "rank", rank);
		        cache_get_value_name(i, "name", FactionRanks[id][rank], 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				new id, slot, skinid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "slot", slot);
				cache_get_value_name_int(i, "skinid", skinid);
				FactionInfo[id][fSkins][slot] = skinid;
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				new id, rank, amount;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "rank", rank);
				cache_get_value_name_int(i, "amount", amount);
				FactionInfo[id][fPaycheck][rank] = amount;
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
				new id, divisionid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "divisionid", divisionid);
		        cache_get_value_name(i, "name", FactionDivisions[id][divisionid], 32);
      		}
		}
		case THREAD_LOAD_SETTINGS:
		{
			cache_get_value_name_int(0, "tax", Settings[gTax]);
		       
			cache_get_value_name_int(0, "vault", Settings[gVault]);
			        
			cache_get_value_name_int(0, "playerrecord", Settings[gPlayerRecord]);

			cache_get_value_name_int(0, "connections", Settings[gConnections]);
			    
			cache_get_value_name_int(0, "registered", Settings[gTotalRegistered]);
			    
			cache_get_value_name_int(0, "kills", Settings[gTotalKills]);
			    
			cache_get_value_name_int(0, "deaths", Settings[gTotalDeaths]);
			    
	        cache_get_value_name_int(0, "hours", Settings[gTotalHours]);
			    
	        cache_get_value_name_int(0, "bans", Settings[gAnticheatBans]);
			    
	        cache_get_value_name_int(0, "turfcap", Settings[TurfCapCount]);
			    
	        //Settings[PointCapCount] = cache_get_value_name_int(0, "pointcap");
			    

			cache_get_value_name(0, "recorddate", Settings[gRecordDate], 24);
			cache_get_value_name(0, "motd", Settings[gServerMOTD], 255);
			cache_get_value_name(0, "adminmotd", Settings[adminMOTD], 255);
			cache_get_value_name(0, "helpermotd", Settings[helperMOTD], 255);

			cache_get_value_name_int(0, "doublexp", Settings[gDoubleXP]);

			cache_get_value_name_int(0, "mafiacash", Settings[gMafiaCash]);
			SaveServerInfo();
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid;
				cache_get_value_name_int(i, "id", gangid);

		        cache_get_value_name(i, "name", GangInfo[gangid][gName], 32);
		        cache_get_value_name(i, "motd", GangInfo[gangid][gMOTD], 128);
		        cache_get_value_name(i, "leader", GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "color", GangInfo[gangid][gColor]);
		        cache_get_value_name_int(i, "strikes", GangInfo[gangid][gStrikes]);
		        cache_get_value_name_int(i, "level", GangInfo[gangid][gLevel]);
		        cache_get_value_name_int(i, "points", GangInfo[gangid][gPoints]);
		        cache_get_value_name_int(i, "turftokens", GangInfo[gangid][gTurfTokens]);
		        cache_get_value_name_float(i, "stash_x", GangInfo[gangid][gStashX]);
		        cache_get_value_name_float(i, "stash_y", GangInfo[gangid][gStashY]);
		        cache_get_value_name_float(i, "stash_z", GangInfo[gangid][gStashZ]);
		        cache_get_value_name_int(i, "stashinterior", GangInfo[gangid][gStashInterior]);
		        cache_get_value_name_int(i, "stashworld", GangInfo[gangid][gStashWorld]);
		        cache_get_value_name_int(i, "cash", GangInfo[gangid][gCash]);
		        cache_get_value_name_int(i, "materials", GangInfo[gangid][gMaterials]);
		        cache_get_value_name_int(i, "pot", GangInfo[gangid][gPot]);
		        cache_get_value_name_int(i, "crack", GangInfo[gangid][gCrack]);
		        cache_get_value_name_int(i, "meth", GangInfo[gangid][gMeth]);
		        cache_get_value_name_int(i, "painkillers", GangInfo[gangid][gPainkillers]);
				cache_get_value_name_int (i, "alliance", GangInfo[gangid][gAlliance]);

				// Gang stash weapons
				cache_get_value_name_int(i, "weapon_9mm", GangInfo[gangid][gWeapons][GANGWEAPON_9MM]);
				cache_get_value_name_int(i, "weapon_sdpistol", GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL]);
				cache_get_value_name_int(i, "weapon_deagle", GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE]);
				cache_get_value_name_int(i, "weapon_shotgun", GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN]);
				cache_get_value_name_int(i, "weapon_spas12", GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12]);
				cache_get_value_name_int(i, "weapon_tec9", GangInfo[gangid][gWeapons][GANGWEAPON_TEC9]);
				cache_get_value_name_int(i, "weapon_uzi", GangInfo[gangid][gWeapons][GANGWEAPON_UZI]);
				cache_get_value_name_int(i, "weapon_mp5", GangInfo[gangid][gWeapons][GANGWEAPON_MP5]);
				cache_get_value_name_int(i, "weapon_ak47", GangInfo[gangid][gWeapons][GANGWEAPON_AK47]);
				cache_get_value_name_int(i, "weapon_m4", GangInfo[gangid][gWeapons][GANGWEAPON_M4]);
				cache_get_value_name_int(i, "weapon_rifle", GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE]);
				cache_get_value_name_int(i, "weapon_sniper", GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER]);
				cache_get_value_name_int(i, "weapon_rpg", GangInfo[gangid][gWeapons][GANGWEAPON_RPG]);

				// Gang arms & drug dealer
		        cache_get_value_name_int(i, "armsdealer", GangInfo[gangid][gArmsDealer]);
		        cache_get_value_name_int(i, "drugdealer", GangInfo[gangid][gDrugDealer]);
		        cache_get_value_name_float(i, "arms_x", GangInfo[gangid][gArmsX]);
		        cache_get_value_name_float(i, "arms_y", GangInfo[gangid][gArmsY]);
		        cache_get_value_name_float(i, "arms_z", GangInfo[gangid][gArmsZ]);
		        cache_get_value_name_float(i, "arms_a", GangInfo[gangid][gArmsA]);
		        cache_get_value_name_float(i, "drug_x", GangInfo[gangid][gDrugX]);
		        cache_get_value_name_float(i, "drug_y", GangInfo[gangid][gDrugY]);
		        cache_get_value_name_float(i, "drug_z", GangInfo[gangid][gDrugZ]);
		        cache_get_value_name_float(i, "drug_a", GangInfo[gangid][gDrugA]);
		        cache_get_value_name_int(i, "armsworld", GangInfo[gangid][gArmsWorld]);
		        cache_get_value_name_int(i, "drugworld", GangInfo[gangid][gDrugWorld]);
                cache_get_value_name_int(i, "drugpot", GangInfo[gangid][gDrugPot]);
                cache_get_value_name_int(i, "drugcrack", GangInfo[gangid][gDrugCrack]);
                cache_get_value_name_int(i, "drugmeth", GangInfo[gangid][gDrugMeth]);
                cache_get_value_name_int(i, "armsmaterials", GangInfo[gangid][gArmsMaterials]);
                cache_get_value_name_int(i, "armsprice_1", GangInfo[gangid][gArmsPrices][0]);
                cache_get_value_name_int(i, "armsprice_2", GangInfo[gangid][gArmsPrices][1]);
                cache_get_value_name_int(i, "armsprice_3", GangInfo[gangid][gArmsPrices][2]);
                cache_get_value_name_int(i, "armsprice_4", GangInfo[gangid][gArmsPrices][3]);
                cache_get_value_name_int(i, "armsprice_5", GangInfo[gangid][gArmsPrices][4]);
                cache_get_value_name_int(i, "armsprice_6", GangInfo[gangid][gArmsPrices][5]);
                cache_get_value_name_int(i, "armsprice_7", GangInfo[gangid][gArmsPrices][6]);
                cache_get_value_name_int(i, "armsprice_8", GangInfo[gangid][gArmsPrices][7]);
                cache_get_value_name_int(i, "armsprice_9", GangInfo[gangid][gArmsPrices][8]);
                cache_get_value_name_int(i, "armsprice_10", GangInfo[gangid][gArmsPrices][9]);
                cache_get_value_name_int(i, "armsprice_11", GangInfo[gangid][gArmsPrices][10]);
                cache_get_value_name_int(i, "armsprice_12", GangInfo[gangid][gArmsPrices][11]);
                cache_get_value_name_int(i, "pot_price", GangInfo[gangid][gDrugPrices][0]);
                cache_get_value_name_int(i, "crack_price", GangInfo[gangid][gDrugPrices][1]);
                cache_get_value_name_int(i, "meth_price", GangInfo[gangid][gDrugPrices][2]);
		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;
				GangVC[gangid] = SvCreateGStream((GangInfo[gangid][gColor] & ~0xff), "Family");
				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 6; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
				new id, rank;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "rank", rank);
		        cache_get_value_name(i, "name", GangRanks[id][rank], 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				new id, slot, skinid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name_int(i, "slot", slot);
				cache_get_value_name_int(i, "skinid", skinid);
				GangInfo[id][gSkins][slot] = skinid;
		    }
		}
		/*case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_value_name_int(i, "id");

		        cache_get_value_name(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_value_name(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_value_name_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_value_name_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_value_name_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_value_name_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_value_name_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_value_name_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_value_name_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_value_name_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_value_name_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;
				PointInfo[pointid][pCapturingGang] = -1;
				strcpy(PointInfo[pointid][pCapturingUser], "none", MAX_PLAYER_NAME);

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}*/
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid;
				cache_get_value_name_int(i, "id", turfid);

		        cache_get_value_name(i, "name", TurfInfo[turfid][tName], 32);
		        cache_get_value_name(i, "capturedby", TurfInfo[turfid][tCapturedBy], MAX_PLAYER_NAME);

		        cache_get_value_name_int(i, "capturedgang", TurfInfo[turfid][tCapturedGang]);
		        cache_get_value_name_int(i, "type", TurfInfo[turfid][tType]);
		        cache_get_value_name_int(i, "time", TurfInfo[turfid][tTime]);
		        cache_get_value_name_float(i, "min_x", TurfInfo[turfid][tMinX]);
		        cache_get_value_name_float(i, "min_y", TurfInfo[turfid][tMinY]);
		        cache_get_value_name_float(i, "max_x", TurfInfo[turfid][tMaxX]);
		        cache_get_value_name_float(i, "max_y", TurfInfo[turfid][tMaxY]);
		        cache_get_value_name_float(i, "height", TurfInfo[turfid][tHeight]);
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_name(i, "name", ClothingInfo[extraid][i][cName], 32);

		        cache_get_value_name_int(i, "id", ClothingInfo[extraid][i][cID]);
		        cache_get_value_name_int(i, "modelid", ClothingInfo[extraid][i][cModel]);
		        cache_get_value_name_int(i, "boneid", ClothingInfo[extraid][i][cBone]);
		        cache_get_value_name_int(i, "attached", ClothingInfo[extraid][i][cAttached]);
		        cache_get_value_name_float(i, "pos_x", ClothingInfo[extraid][i][cPosX]);
		        cache_get_value_name_float(i, "pos_y", ClothingInfo[extraid][i][cPosY]);
		        cache_get_value_name_float(i, "pos_z", ClothingInfo[extraid][i][cPosZ]);
		        cache_get_value_name_float(i, "rot_x", ClothingInfo[extraid][i][cRotX]);
		        cache_get_value_name_float(i, "rot_y", ClothingInfo[extraid][i][cRotY]);
		        cache_get_value_name_float(i, "rot_z", ClothingInfo[extraid][i][cRotZ]);
		        cache_get_value_name_float(i, "scale_x", ClothingInfo[extraid][i][cScaleX]);
		        cache_get_value_name_float(i, "scale_y", ClothingInfo[extraid][i][cScaleY]);
		        cache_get_value_name_float(i, "scale_z", ClothingInfo[extraid][i][cScaleZ]);
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    PlayerInfo[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}
			new data, data1;
			cache_get_value_index_int(0, 0, data);
			cache_get_value_index_int(0, 0, data1);
			SM(extraid, SERVER_COLOR, "House ID %i", houseid);
			SM(extraid, COLOR_GREY2, "(Value: $%i) - (Rent Price: $%i) - (Level: %i/5) - (Active: %s) - (Locked: %s)", HouseInfo[houseid][hPrice], HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 1209600) ? ("{FFA500}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SM(extraid, COLOR_GREY2, "(Class: %s) - (Location: %s) - (Furniture: %i/%i) - (Tenants: %i/%i)", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), data, GetHouseFurnitureCapacity(houseid), data1, GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid), data;
			cache_get_value_index_int(0, 0, data);

		    if( data >= GetHouseFurnitureCapacity(houseid))
		    {
		        SM(extraid, COLOR_SYNTAX, "Your house is only allowed up to %i furniture at its current level.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
				ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
			cache_get_row_count(rows);
		    if(rows)
		    {
				new pp;
				cache_get_value_name_int(0, "price", pp);
		        new name[32], price = percent(pp, 75);

		        cache_get_value_name(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "CXRP"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveFurniture(PlayerInfo[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your home contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
					new pp;
					cache_get_value_name_int(i, "price", pp);
				    price += percent(pp, 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		case THREAD_COUNT_TEXTS:
		{
		    cache_get_value_index_int(0, 0, rows);

		    if(rows)
		    {
		        SM(extraid, COLOR_YELLOW, "** You have %i unread text messages. (/texts)", rows);
			}
		}
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You have no more unread text messages to read.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Texts sent to you while offline (recent first):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_value_name(i, "sender", sender);
		    	    cache_get_value_name(i, "date", date);
		        	cache_get_value_name(i, "message", message);
					new number;
					cache_get_value_name_int(i, "sender_number", number);
			        format(listString, sizeof(listString), "%s\n[%s] SMS from %s (%i): %s", listString, date, sender, number, message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "Next", "OK");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
					new model, world, Float:pos[3];
					cache_get_value_name_int(i, "modelid", model);
					model -= 400;
					cache_get_value_name_int(i, "world", world);
					cache_get_value_name_float(i, "pos_x", pos[0]);
					cache_get_value_name_float(i, "pos_y", pos[1]);
					cache_get_value_name_float(i, "pos_z", pos[2]);
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[model], (world) ? ("Garage") : (GetZoneName(pos[0], pos[1], pos[2])));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        
				new string[2084], vehicleid, model, world, Float:pos[3];
		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
					
					cache_get_value_name_int(i, "modelid", model);
					model -= 400;
					cache_get_value_name_int(i, "world", world);
					cache_get_value_name_float(i, "pos_x", pos[0]);
					cache_get_value_name_float(i, "pos_y", pos[1]);
					cache_get_value_name_float(i, "pos_z", pos[2]);
					new veh_id;
					cache_get_value_name_int(i, "id", veh_id);
		            if((vehicleid = GetVehicleLinkedID(veh_id)) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
     				else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[model], (world) ? ("Garage") : (GetZoneName(pos[0], pos[1], pos[2])));
				}

				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Faction Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_name(i, "username", username);
		        cache_get_value_name(i, "lastlogin", date);
				new rank;
				cache_get_value_name_int(i, "factionrank", rank);
		        SM(extraid, COLOR_GREY2, "%s %s - Last Seen: %s", FactionRanks[PlayerInfo[extraid][pFaction]][rank], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Gang Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_name(i, "username", username);
		        cache_get_value_name(i, "lastlogin", date);
				new rank;
				cache_get_value_name_int(i, "gangrank", rank);
		        SM(extraid, COLOR_GREY2, "[%i] %s %s - Last Seen: %s", rank, GangRanks[PlayerInfo[extraid][pGang]][rank], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && PlayerInfo[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The phonebook directory is currently empty.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_value_name(i, "name", name);
					new number;
					cache_get_value_name_int(i, "number", number);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((PlayerInfo[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, number);
				}

				if(PlayerInfo[extraid][pPage] > 1)
				{
				    strcat(string, "\n"CXRP"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n"CXRP">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Phonebook directory", string, "Select", "Close");
		    }
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
				cache_get_value_name_int(i, "modelid", modelid),
				cache_get_value_name_float(i, "pos_x", pos_x),
				cache_get_value_name_float(i, "pos_y", pos_y),
				cache_get_value_name_float(i, "pos_z", pos_z),
				cache_get_value_name_float(i, "pos_a", pos_a),
				cache_get_value_name_int(i, "color1", color1),
				cache_get_value_name_int(i, "color2", color2),
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, -1);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					cache_get_value_name_int(i, "id", VehicleInfo[vehicleid][vID]);
					cache_get_value_name_int(i, "gangid", VehicleInfo[vehicleid][vGang]);
					cache_get_value_name_int(i, "factiontype", VehicleInfo[vehicleid][vFactionType]);
					cache_get_value_name_int(i, "donator", VehicleInfo[vehicleid][vDonator]);
					cache_get_value_name_int(i, "job", VehicleInfo[vehicleid][vJob]);
					cache_get_value_name_float(i, "health", VehicleInfo[vehicleid][vHealth]);
					cache_get_value_name_int(i, "fuel", vehicleFuel[vehicleid]);
					//cache_get_value_name_int(i, "mafia", VehicleInfo[vehicleid][vMafia]);
					


					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    cache_get_value_name_int(i, "price", VehicleInfo[vehicleid][vPrice]);
					    cache_get_value_name_int(i, "locked", VehicleInfo[vehicleid][vLocked]);
					    cache_get_value_name_int(i, "paintjob", VehicleInfo[vehicleid][vPaintjob]);
					    cache_get_value_name_int(i, "interior", VehicleInfo[vehicleid][vInterior]);
				        cache_get_value_name_int(i, "world", VehicleInfo[vehicleid][vWorld]);
				        cache_get_value_name_int(i, "mod_1", VehicleInfo[vehicleid][vMods][0]);
				        cache_get_value_name_int(i, "mod_2", VehicleInfo[vehicleid][vMods][1]);
				        cache_get_value_name_int(i, "mod_3", VehicleInfo[vehicleid][vMods][2]);
				        cache_get_value_name_int(i, "mod_4", VehicleInfo[vehicleid][vMods][3]);
				        cache_get_value_name_int(i, "mod_5", VehicleInfo[vehicleid][vMods][4]);
				        cache_get_value_name_int(i, "mod_6", VehicleInfo[vehicleid][vMods][5]);
				        cache_get_value_name_int(i, "mod_7", VehicleInfo[vehicleid][vMods][6]);
				        cache_get_value_name_int(i, "mod_8", VehicleInfo[vehicleid][vMods][7]);
				        cache_get_value_name_int(i, "mod_9", VehicleInfo[vehicleid][vMods][8]);
				        cache_get_value_name_int(i, "mod_10", VehicleInfo[vehicleid][vMods][9]);
				        cache_get_value_name_int(i, "mod_11", VehicleInfo[vehicleid][vMods][10]);
				        cache_get_value_name_int(i, "mod_12", VehicleInfo[vehicleid][vMods][11]);
				        cache_get_value_name_int(i, "mod_13", VehicleInfo[vehicleid][vMods][12]);
				        cache_get_value_name_int(i, "mod_14", VehicleInfo[vehicleid][vMods][13]);
						cache_get_value_name_int(0, "v_panels", VehicleInfo[vehicleid][v_panels]);
						cache_get_value_name_int(0, "v_lights", VehicleInfo[vehicleid][v_lights]);
						cache_get_value_name_int(0, "v_tires", VehicleInfo[vehicleid][v_tires]);
						cache_get_value_name_int(0, "v_doors", VehicleInfo[vehicleid][v_doors]);
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					UpdateVehicleDamageStatus(vehicleid, VehicleInfo[vehicleid][v_panels], VehicleInfo[vehicleid][v_doors], VehicleInfo[vehicleid][v_lights], VehicleInfo[vehicleid][v_tires]);


					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
					// faction number plates by Nafiz
					if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE)
					{
						new string[128];
						if(VehicleInfo[vehicleid][vFactionType] == FACTION_POLICE)
						{
							format(string, sizeof(string), "SFPD-%i", vehicleid);
						}
						else if(VehicleInfo[vehicleid][vFactionType] == FACTION_MEDIC)
						{
							format(string, sizeof(string), "EMFD-%i", vehicleid);
						}
						else if(VehicleInfo[vehicleid][vFactionType] == FACTION_NEWS)
						{
							format(string, sizeof(string), "LSNB-%i", vehicleid);
						}
						else if(VehicleInfo[vehicleid][vFactionType] == FACTION_GOVERNMENT)
						{
							format(string, sizeof(string), "GOV-%i", vehicleid);
      					}
						else if(VehicleInfo[vehicleid][vMafia] == 1)
						{
							format(string, sizeof(string), "Mafia-%i", vehicleid);
						}
						SetVehicleNumberPlate(vehicleid, string);
					}
					switch(VehicleInfo[vehicleid][vDonator])
					{
						case 3:
						{
							SetVehicleNumberPlate(vehicleid, "P. VIP");
						}
						case 2:
						{
							SetVehicleNumberPlate(vehicleid, "G. VIP");
						}
						case 1:
						{
							SetVehicleNumberPlate(vehicleid, "S. VIP");
						}
					}
					if(VehicleInfo[vehicleid][vLocked])
					{
     					SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
					}
					ReloadVehicle(vehicleid);
		        }
			}
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == PlayerInfo[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}
				new data;
				cache_get_value_index_int(0, 0, data);
			    SM(extraid, SERVER_COLOR, "%s:", GangInfo[PlayerInfo[extraid][pGang]][gName]);
			    SM(extraid, COLOR_GREY2, "Leader: %s - Level: %i/3 - Strikes: %i/3 - Members: %i/%i - Vehicles: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gLeader], GangInfo[PlayerInfo[extraid][pGang]][gLevel], GangInfo[PlayerInfo[extraid][pGang]][gStrikes], data, GetGangMemberLimit(PlayerInfo[extraid][pGang]), GetGangVehicles(PlayerInfo[extraid][pGang]), GetGangVehicleLimit(PlayerInfo[extraid][pGang]));
			    SM(extraid, COLOR_GREY2, "Gang Points: %i GP - Turf Tokens: %i - Cash: $%i/$%i - Materials: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gPoints], GangInfo[PlayerInfo[extraid][pGang]][gTurfTokens], GangInfo[PlayerInfo[extraid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_CASH), GangInfo[PlayerInfo[extraid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_MATERIALS));
			    SM(extraid, COLOR_GREY2, "Turfs: %i/%i - Pot: %i/%ig - Crack: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[PlayerInfo[extraid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[extraid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[extraid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_METH),
					GangInfo[PlayerInfo[extraid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The username specified is not registered.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_value_name(0, "username", username);
		        cache_get_value_name(0, "ip", ip);

		        SM(extraid, COLOR_WHITE, "** %s's IP: %s **", username, ip);

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The player specified doesn't exist.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_value_name(0, "username", username);
		        cache_get_value_name(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SCM(extraid, COLOR_SYNTAX, "This account is listed under your own IP address. You can't refer yourself.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
					new uid;
					cache_get_value_name_int(0, "uid", uid);
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", uid, PlayerInfo[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

					PlayerInfo[extraid][pTutorial] = 1;
					PlayerInfo[extraid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", extraid);

	                SM(extraid, COLOR_YELLOW, "** You have chosen %s as your referrer. They will be rewarded once you reach level 3.", username);
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_value_name(0, "username", username);
				cache_get_value_name(0, "ip", ip);

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && PlayerInfo[i][pLogged] && PlayerInfo[i][pID] == PlayerInfo[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        PlayerInfo[referralid][pLevel]++;
			        SCM(referralid, COLOR_YELLOW, "A player who you've referred reached level 3. Therefore you received 1 level!");
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1 WHERE uid = %i", PlayerInfo[referralid][pID]);
					mysql_tquery(connectionID, queryBuffer);

				}
				else
				{
				    // Referrer is offline. Let's give them their dirtycash and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", PlayerInfo[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SCM(extraid, SERVER_COLOR, "Flagged Players:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_value_index(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SM(extraid, COLOR_WHITE, "** %s[%i] has %i active flags.", GetRPName(i), i, flags[i]);
				}
			}
		}
		case THREAD_SHOW_IMPOUND:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You have no vehicles which you can release.");
		    }
		    else
		    {
				SCM(extraid, COLOR_WHITE, "Select a vehicle you want to release.");
				new string[2048], cost;
				string = "#\tVehicle\tCost";
				for(new i = 0; i < rows; i ++)
				{
					new model_;
					cache_get_value_name_int(i, "modelid", model_);
					model_ -= 400;
				    cache_get_value_name_int(i, "tickets", cost);
					format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i+1, vehicleNames[model_], AddCommas(cost+100));
				}
				ShowPlayerDialog(extraid, DIALOG_RELEASECAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle you want to release.", string, "Release", "Cancel");
		    }
		}
		case THREAD_LOAD_SAFEZONE:
		{
		    for(new i = 0; i < rows && i < MAX_ZONES; i ++)
		    {
		        cache_get_value_name_int(i, "id", SafeZone[i][sID]);
		        cache_get_value_name_float(i, "min_x", SafeZone[i][sMinX]);
		        cache_get_value_name_float(i, "min_y", SafeZone[i][sMinY]);
		        cache_get_value_name_float(i, "max_x", SafeZone[i][sMaxX]);
		        cache_get_value_name_float(i, "max_y", SafeZone[i][sMaxY]);
		        cache_get_value_name_float(i, "height", SafeZone[i][sHeight]);
		        cache_get_value_name_float(i, "lx", SafeZone[i][sX]);
		        cache_get_value_name_float(i, "ly", SafeZone[i][sY]);
		        cache_get_value_name_float(i, "lz", SafeZone[i][sZ]);
		        SafeZone[i][sGangZone] = -1;
		        SafeZone[i][sArea] = -1;
		        SafeZone[i][sExists] = 1;

		        ReloadSafeZone(i);
			}

			printf("[Script] %i safe zones loaded.", rows);
		}
		case THREAD_LOAD_RENTS:
		{
			for(new i = 0; i < rows && i < MAX_RENTS; i ++)
			{
				cache_get_value_name_int(i, "rid", RentInfo[i][rId]);
				cache_get_value_name(i, "name", RentInfo[i][rName], 32);
				
				cache_get_value_name_float(i, "rpos_x", RentInfo[i][rPosX]);
				cache_get_value_name_float(i, "rpos_y", RentInfo[i][rPosY]);
				cache_get_value_name_float(i, "rpos_z", RentInfo[i][rPosZ]);
				cache_get_value_name_float(i, "vpos_x", RentInfo[i][rVehX]);
				cache_get_value_name_float(i, "vpos_y", RentInfo[i][rVehY]);
				cache_get_value_name_float(i, "vpos_z", RentInfo[i][rVehZ]);
				cache_get_value_name_float(i, "vpos_a", RentInfo[i][rVehA]);

				cache_get_value_name_int(i, "v_model_1", RentInfo[i][v_model][0]);
				cache_get_value_name_int(i, "v_model_2", RentInfo[i][v_model][1]);
				cache_get_value_name_int(i, "v_model_3", RentInfo[i][v_model][2]);
				cache_get_value_name_int(i, "v_model_4", RentInfo[i][v_model][3]);
				cache_get_value_name_int(i, "v_model_5", RentInfo[i][v_model][4]);
				cache_get_value_name_int(i, "v_model_6", RentInfo[i][v_model][5]);
				cache_get_value_name_int(i, "v_model_7", RentInfo[i][v_model][6]);
				cache_get_value_name_int(i, "v_model_8", RentInfo[i][v_model][7]);
				cache_get_value_name_int(i, "v_model_9", RentInfo[i][v_model][8]);
				cache_get_value_name_int(i, "v_model_10", RentInfo[i][v_model][9]);

				cache_get_value_name_int(i, "v_price_1", RentInfo[i][v_price][0]);
				cache_get_value_name_int(i, "v_price_2", RentInfo[i][v_price][1]);
				cache_get_value_name_int(i, "v_price_3", RentInfo[i][v_price][2]);
				cache_get_value_name_int(i, "v_price_4", RentInfo[i][v_price][3]);
				cache_get_value_name_int(i, "v_price_5", RentInfo[i][v_price][4]);
				cache_get_value_name_int(i, "v_price_6", RentInfo[i][v_price][5]);
				cache_get_value_name_int(i, "v_price_7", RentInfo[i][v_price][6]);
				cache_get_value_name_int(i, "v_price_8", RentInfo[i][v_price][7]);
				cache_get_value_name_int(i, "v_price_9", RentInfo[i][v_price][8]);
				cache_get_value_name_int(i, "v_price_10", RentInfo[i][v_price][9]);

				cache_get_value_name_int(i, "rtype", RentInfo[i][rType]);
				cache_get_value_name_int(i, "rsetup", RentInfo[i][rSetup]);
				RentInfo[i][rExists] = 1;
				RentInfo[i][rPickup] = -1;
				RentInfo[i][rText] = Text3D:INVALID_3DTEXT_ID;

				ReloadRent(i);
			}
			printf("[Script] %i Rent Stations loaded.", rows);
		}
		case THREAD_LOAD_FUELS:
		{
			for(new i = 0; i < rows && i < MAX_FUEL_STATIONS; i ++)
			{
				cache_get_value_name_int(i, "id", FuelStationInfo[i][fid]);
				cache_get_value_name_float(i, "pos_x", FuelStationInfo[i][FuelX]);
				cache_get_value_name_float(i, "pos_y", FuelStationInfo[i][FuelY]);
				cache_get_value_name_float(i, "pos_z", FuelStationInfo[i][FuelZ]);
				cache_get_value_name_float(i, "stash_x", FuelStationInfo[i][Stash_X]);
				cache_get_value_name_float(i, "stash_y", FuelStationInfo[i][Stash_Y]);
				cache_get_value_name_float(i, "stash_z", FuelStationInfo[i][Stash_Z]);
				cache_get_value_name_int(i, "price", FuelStationInfo[i][fprice]);
				cache_get_value_name_int(i, "net_fuel", FuelStationInfo[i][total_fuel]);
				cache_get_value_name_int(i, "max_fuel", FuelStationInfo[i][max_fuel]);
				cache_get_value_name_int(i, "stash_cash", FuelStationInfo[i][fcash]);
				cache_get_value_name_int(i, "level", FuelStationInfo[i][flevel]);
				FuelStationInfo[i][fExists] = 1;
				FuelStationInfo[i][fPickup] = -1;
				FuelStationInfo[i][fText] = Text3D:INVALID_3DTEXT_ID;

				ReloadFuelStation(i);
			}
			printf("[Script] %i Fuel Stations loaded.", rows);
		}
	}
	return 1;
}



//Functions
#include "./modules/Weed System/weed_harvest.pwn"

/*forward UpdateNametag();
public UpdateNametag()
{
    for(new i = 0; i < MAX_PLAYERS; i ++)
    {
        if(IsPlayerConnected(i))
        {
            new nametag[128], playername[MAX_PLAYER_NAME];
            GetPlayerName(i, playername, sizeof(playername));
			if(NameTagEnabled[i] == false)
			{
				UpdateDynamic3DTextLabelText(Nametags[i], 0xFFFFFFFF, "");
				return 1;
			}
			format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)", GetPlayerColor(i) >>> 8, playername, i);
			UpdateDynamic3DTextLabelText(Nametags[i], 0xFFFFFFFF, nametag);
			return 1;
        }
		return 1;
    }
	return 1;
}*/

stock GetPlayerCargoWeight(playerid)
{
	new weight = 0;
	for(new j = 0; j < MAX_DELIVERIES; j++)
	{
		if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
		{
			weight = weight + PlayerDeliveries[playerid][ j ][ player_del_weight ];
		}
	}
	return weight;
}
bool:IsTruckingVehicle(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 403, 413, 414, 418, 440, 455, 456, 482, 498, 499, 514, 515: return true;
	}
	return false;
}
stock GetTruckWeight(vehid)
{
	new weight = 0;
	switch(GetVehicleModel(vehid))
	{
		case 403: weight = 50;
		case 413: weight = 25;
		case 414: weight = 35;
		case 418: weight = 25;
		case 440: weight = 25;
		case 455: weight = 40;  
		case 456: weight = 40;
		case 482: weight = 25;
		case 498: weight = 35;
		case 499: weight = 35;
		case 514: weight = 50;
		case 515: weight = 50;
	}
	return weight;
}

forward LoadDepotsTruck();
public LoadDepotsTruck()
{
	for(new i = 0; i < MAX_TRUCKING_SPOTS; i ++)
	{
		TruckDepots[i][dynamic_area] = CreateDynamicCircle(TruckDepots[i][dep_x], TruckDepots[i][dep_y], 5.1);
		CreateDynamicMapIcon(TruckDepots[i][dep_x], TruckDepots[i][dep_y], TruckDepots[i][dep_z], 51, -1, -1, -1, -1, 400, MAPICON_GLOBAL);
		CreateDynamicPickup(1318, 1, TruckDepots[i][dep_x], TruckDepots[i][dep_y], TruckDepots[i][dep_z]);
		CreateDynamic3DTextLabel("[Trucker]\n"WHITE"Loading Dock", COLOR_YELLOW, TruckDepots[i][dep_x], TruckDepots[i][dep_y], TruckDepots[i][dep_z], 10.5);
		TruckDepots[i][pickup] = CreateDynamicPickup(1275, 1, TruckDepots[i][dep_pickupx], TruckDepots[i][dep_pickupy], TruckDepots[i][dep_pickupz]);
		new string[128];
		format( string, sizeof( string ), ""WHITE"[ "AQUA"Trucker "YELLOW"]\n"YELLOW"Warehouse: "WHITE"%s", TruckDepots[ i ][ dName ]);
		CreateDynamic3DTextLabel( string, 0x008080FF, TruckDepots[ i ][ dep_pickupx ], TruckDepots[ i ][ dep_pickupy ], TruckDepots[ i ][ dep_pickupz ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1 );
	}
	AddTruckDeliveries();
	return 1;
}

stock AddTruckDeliveries()
{	
	for(new i = 0; i < MAX_TRUCKING_SPOTS; i++)
	{
		for(new j = 0; j < MAX_DELIVERIES; j++)
		{
			Deliveries[ i ][ j ][ delivery_depot ] = random(sizeof(TruckDepots));
			while(Deliveries[ i ][ j ][ delivery_depot ] == i)
			{
				Deliveries[ i ][ j ][ delivery_depot ] = random(sizeof(TruckDepots));
			}
 			Deliveries[ i ][ j ][ delivery_type ] = DELIVERY_AVAILABLE;
			Deliveries[ i ][ j ][ delivery_weight ] = minrand(5, 11);
			Deliveries[ i ][ j ][ delivery_cash ] = (minrand(100, 121)) * Deliveries[ i ][ j ][ delivery_weight ];
			new index = random( sizeof( RandomDeliveryName ) );
			strmid( Deliveries[ i ][ j ][ delivery_name ], RandomDeliveryName[index], 0, strlen( RandomDeliveryName[index] ), 48);
		}
	}
	return 1;
}
stock RefreshTruckDeliveries()
{	
	for(new i = 0; i < MAX_TRUCKING_SPOTS; i++)
	{
		for(new j = 0; j < MAX_DELIVERIES; j++)
		{
			if(Deliveries[ i ][ j ][ delivery_type ] == DELIVERY_DONE)
			{
				Deliveries[ i ][ j ][ delivery_depot ] = random(sizeof(TruckDepots));
				while(Deliveries[ i ][ j ][ delivery_depot ] == i)
				{
					Deliveries[ i ][ j ][ delivery_depot ] = random(sizeof(TruckDepots));
				}
				Deliveries[ i ][ j ][ delivery_type ] = DELIVERY_AVAILABLE;
				Deliveries[ i ][ j ][ delivery_weight ] = minrand(5, 11);
				Deliveries[ i ][ j ][ delivery_cash ] = (minrand(100, 121)) * Deliveries[ i ][ j ][ delivery_weight ];
				new index = random( sizeof( RandomDeliveryName ) );
				strmid( Deliveries[ i ][ j ][ delivery_name ], RandomDeliveryName[index], 0, strlen( RandomDeliveryName[index] ), 48);
			}
		}
	}
	return 1;
}

stock ResetPlayerDeliveries(playerid)
{
	for(new j = 0; j < MAX_DELIVERIES; j++)
	{
		PlayerDeliveries[playerid][ j ][ player_del_taken ] = 0;
		PlayerDeliveries[playerid][ j ][ player_del_weight ] = 0;
		PlayerDeliveries[playerid][ j ][ player_del_id ] = -1;
		PlayerDeliveries[playerid][ j ][ player_del_from ] = -1;
		PlayerDeliveries[playerid][ j ][ player_del_to ] = -1;
		PlayerDeliveries[playerid][ j ][ player_del_vehicle ] = 0;
		if(IsValidDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]))
			DestroyDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]);
		PlayerDeliveries[playerid][ j ][ player_del_marker ] = -1;
	}
	return 1;
}
stock ResetPlayerDelivery(playerid, j)
{
	PlayerDeliveries[playerid][ j ][ player_del_taken ] = 0;
	PlayerDeliveries[playerid][ j ][ player_del_weight ] = 0;
	PlayerDeliveries[playerid][ j ][ player_del_id ] = -1;
	PlayerDeliveries[playerid][ j ][ player_del_from ] = -1;
	PlayerDeliveries[playerid][ j ][ player_del_to ] = -1;
	PlayerDeliveries[playerid][ j ][ player_del_vehicle ] = 0;
	if(IsValidDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]))
		DestroyDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]);
	PlayerDeliveries[playerid][ j ][ player_del_marker ] = -1;
	return 1;
}

stock CancelPlayerDeliveries(playerid)
{
	for(new j = 0; j < MAX_DELIVERIES; j++)
	{
		if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
		{
			for(new i = 0; i < MAX_TRUCKING_SPOTS; i++)
			{
				if( PlayerDeliveries[playerid][ j ][ player_del_from ] ==  i)
				{
					for(new k = 0; k < MAX_DELIVERIES; k++)
					{
						if(PlayerDeliveries[playerid][ j ][ player_del_id ] == k)
						{
							Deliveries[ i ][ k ][ delivery_type ] = DELIVERY_AVAILABLE;
						}
					}
				}
			}
		}
	}
	return 1;
}
stock CancelPlayerDelivery(playerid, j)
{
	if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
	{
		for(new i = 0; i < MAX_TRUCKING_SPOTS; i++)
		{
			if( PlayerDeliveries[playerid][ j ][ player_del_from ] ==  i)
			{
				for(new k = 0; k < MAX_DELIVERIES; k++)
				{
					if(PlayerDeliveries[playerid][ j ][ player_del_id ] == k)
					{
						Deliveries[ i ][ k ][ delivery_type ] = DELIVERY_AVAILABLE;
					}
				}
			}
		}
	}
	return 1;
}

public OnGameModeInit()
{
	new MySQLOpt: option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
	connectionID = mysql_connect( dini_Get("MySQL.ini", "Host"), dini_Get("MySQL.ini", "User"), dini_Get("MySQL.ini", "Password"), dini_Get("MySQL.ini", "Database"), option_id);

	if(mysql_errno(connectionID))
	{
	    print("Unable to establish a connection with the MySQL server...");
		printf("Connection failed %s@%s -> %s", dini_Get("MySQL.ini", "User"), dini_Get("MySQL.ini", "Host"), dini_Get("MySQL.ini", "Database"));
	    return 0;
	}
	
	SvDebug(SV_TRUE);

	SendRconCommand("loadfs map");
	SendRconCommand("loadfs mafia");

	Flint_WeedField = CreateDynamicRectangle(-1195.34375, -1062.9375839233398, -1002.34375, -905.9375839233398);
	#if defined DISCORD
		DCC_SetBotActivity("https://cyberx-rp.com");
	#endif
	LoadDepotsTruck();
	mafiazone = CreateDynamicRectangle(1312.6036,-3874.241,1285.4950,-3891.7849);

	new label[128];
	for(new i; i < sizeof(TrashData); i++)
	{
	    format(label, sizeof(label), "%s\n{FFFFFF}\n/collect to collect.", (TrashData[i][TrashType] == TYPE_BIN) ? ("Trash Bin") : ("Dumpster"));
		TrashData[i][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]+1.25, 15.0, .testlos = 1);
		TrashData[i][TrashLevel] = (TrashData[i][TrashType] == TYPE_BIN) ? 1 : 2;
	}

	for(new i = 0; i < sizeof(pns_label); i ++)
	{
		new pstring[128];
		format(pstring, sizeof(pstring), "Pay 'N' Spray\n"WHITE"Press 'Y' to use\n "YELLOW"%s", GetZoneName(pns_label[i][PosX], pns_label[i][PosY], pns_label[i][PosZ]));
		CreateDynamicPickup(1239, 1, pns_label[i][PosX], pns_label[i][PosY], pns_label[i][PosZ], .streamdistance = 50);
		CreateDynamic3DTextLabel(pstring, COLOR_YELLOW, pns_label[i][PosX], pns_label[i][PosY], pns_label[i][PosZ], 20.5, .testlos = 1);
	}

	
	for(new i; i < sizeof(FactoryData); i++)
	{
	    format(label, sizeof(label), "Recycling Factory - %s\n\n{FFFFFF}Current Trash Bags: {F39C12}0\n{FFFFFF}Bring trash here to earn money!", FactoryData[i][FactoryName]);
		FactoryData[i][FactoryLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ] + 0.5, 15.0, .testlos = 1);
		FactoryData[i][FactoryCP] = CreateDynamicCP(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 6.0);
	}

	for(new i, m = GetPlayerPoolSize(); i <= m; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
		Trash_InitPlayer(i);
	}

	CreateSpeedoGlobal();
	CreateRegisterTD();
	CreateBannedTD();
	CreateGROTTI_TD();


	pingTimer = SetTimer("WifiCheck", 1000, true);
	WifiBox = TextDrawCreate(5.333310, 421.941436, "box");
	TextDrawLetterSize(WifiBox, 0.000000, 2.248336);
	TextDrawTextSize(WifiBox, 24.349935, 0.000000);
	TextDrawAlignment(WifiBox, 1);
	TextDrawColor(WifiBox, -1);
	TextDrawUseBox(WifiBox, 1);
	TextDrawBoxColor(WifiBox, 102);
	TextDrawSetShadow(WifiBox, 0);
	TextDrawBackgroundColor(WifiBox, 255);
	TextDrawFont(WifiBox, 1);
	TextDrawSetProportional(WifiBox, 1);
    Bar1 = TextDrawCreate(9.466705, 437.567565, "box");
	TextDrawLetterSize(Bar1, 0.000000, 0.358998);
	TextDrawTextSize(Bar1, 4.729997, 0.000000);
	TextDrawAlignment(Bar1, 1);
	TextDrawColor(Bar1, -1061109505);
	TextDrawUseBox(Bar1, 1);
	TextDrawBoxColor(Bar1, -1061109505);
	TextDrawSetShadow(Bar1, 0);
	TextDrawBackgroundColor(Bar1, 255);
	TextDrawFont(Bar1, 1);
	TextDrawSetProportional(Bar1, 1);
	Bar2 = TextDrawCreate(13.066704, 435.167541, "box");
	TextDrawLetterSize(Bar2, 0.000000, 0.637996);
	TextDrawTextSize(Bar2, 8.329997, 0.000000);
	TextDrawAlignment(Bar2, 1);
	TextDrawColor(Bar2, -1061109505);
	TextDrawUseBox(Bar2, 1);
	TextDrawBoxColor(Bar2, -1061109505);
	TextDrawSetShadow(Bar2, 0);
	TextDrawBackgroundColor(Bar2, 255);
	TextDrawFont(Bar2, 1);
	TextDrawSetProportional(Bar2, 1);
	Bar3 = TextDrawCreate(17.066711, 433.267425, "box");
	TextDrawLetterSize(Bar3, 0.000000, 0.885999);
	TextDrawTextSize(Bar3, 12.329998, 0.000000);
	TextDrawAlignment(Bar3, 1);
	TextDrawColor(Bar3, -1061109505);
	TextDrawUseBox(Bar3, 1);
	TextDrawBoxColor(Bar3, -1061109505);
	TextDrawSetShadow(Bar3, 0);
	TextDrawBackgroundColor(Bar3, 255);
	TextDrawFont(Bar3, 1);
	TextDrawSetProportional(Bar3, 1);
	Bar4 = TextDrawCreate(20.966726, 430.467254, "box");
	TextDrawLetterSize(Bar4, 0.000000, 1.195999);
	TextDrawTextSize(Bar4, 16.230014, 0.000000);
	TextDrawAlignment(Bar4, 1);
	TextDrawColor(Bar4, -1061109505);
	TextDrawUseBox(Bar4, 1);
	TextDrawBoxColor(Bar4, -1061109505);
	TextDrawSetShadow(Bar4, 0);
	TextDrawBackgroundColor(Bar4, 255);
	TextDrawFont(Bar4, 1);
	TextDrawSetProportional(Bar4, 1);
	Bar5 = TextDrawCreate(24.966741, 428.567138, "box");
	TextDrawLetterSize(Bar5, 0.000000, 1.443999);
	TextDrawTextSize(Bar5, 20.230030, 0.000000);
	TextDrawAlignment(Bar5, 1);
	TextDrawColor(Bar5, -1061109505);
	TextDrawUseBox(Bar5, 1);
	TextDrawBoxColor(Bar5, -1061109505);
	TextDrawSetShadow(Bar5, 0);
	TextDrawBackgroundColor(Bar5, 255);
	TextDrawFont(Bar5, 1);
	TextDrawSetProportional(Bar5, 1);


	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	    TextDrawShowForPlayer(i, WifiBox);
	}

	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	LimitPlayerMarkerRadius(9999.9);
    CreateTextDraws();
	new string[2000];

    SetNameTagDrawDistance(20.0);

    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        OnPlayerConnect(i);
    }
	UsePlayerPedAnims();

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM graffiti", "Graffiti_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM mapicons", "OnQueryFinished", "ii", THREAD_LOAD_MAPICONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM safezones", "OnQueryFinished", "ii", THREAD_LOAD_SAFEZONE, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM rents", "OnQueryFinished", "ii", THREAD_LOAD_RENTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `fuelstations`", "OnQueryFinished", "ii", THREAD_LOAD_FUELS, 0);
	mysql_tquery(connectionID, "SELECT * FROM settings", "OnQueryFinished", "ii", THREAD_LOAD_SETTINGS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `gates`", "Gate_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `object`", "Object_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `speedcameras`", "Speed_Load", "");

	for(new x=0; x<MAX_VEHICLES; x++)
	{
		Flasher[x] = 0;
		FlasherState[x] = 0;
		sirenInfo[x][attachObject] = INVALID_OBJECT_ID;
		sirenInfo[x][useAttach] = false;
	}

	FlashTimer = SetTimer("FlasherFunc", 200, 1);

	SetWeather(gWeather);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	AllowInteriorWeapons(0);
	ManualVehicleEngineAndLights();
	GiftAllowed = 1;
	ShowNameTags(1);

	//Streamer_TickRate(100);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2500);
	gDoubleSalary = false;

	// Point bounds
	pointboundaries[0] = GangZoneCreate(-1142.3438, -848.5196, -951.3438, -578.5196); // FFC
	pointboundaries[1] = GangZoneCreate(-1503.3750, 1379.9375, -1316.3750, 1548.9375); // MP1
	pointboundaries[2] = GangZoneCreate(-862.9617, 1393.9478, -621.9617, 1628.9478); // MF1
	pointboundaries[3] = GangZoneCreate(-2273.0000, 576.5000, -2083.0000, 723.5000); // MP2
	pointboundaries[4] = GangZoneCreate(-2218.0000, -297.5000, -2097.0000, -74.5000); // MF2
	pointboundaries[5] = GangZoneCreate(-1759.0568, -60.4714, -1466.0568, 309.5285); // AEC
	pointboundaries[6] = GangZoneCreate(-2506.5156, -213.5000, -2404.5156, -73.5000); // Drug House
	pointboundaries[7] = GangZoneCreate(-2806.0000, -21.5000, -2710.0000, 190.5000); // Crack Lab
	pointboundaries[8] = GangZoneCreate(-2357.3281, 2223.8281, -2156.3281, 2470.8281); // Drug Factory

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
		CreateDynamic3DTextLabel("Community Service\n"CXRP"(( Type '/clean' to start cleaning. ))", COLOR_GREY, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2], 10.0);
	}

    CreateDynamic3DTextLabel("Paintball arena\n/enter to play paintball!", COLOR_YELLOW, 1310.1492, -1366.7960, 13.5064, 10.0);
	CreateDynamicPickup(1254, 1, 1310.1492, -1366.7960, 13.5064);

	CreateDynamic3DTextLabel("Materials\nCost: $500\n"CXRP"(( Type '/getmats' to begin. ))", COLOR_GREY, 2138.1108, -2287.8926, 14.7801, 10.0);
	CreateDynamicPickup(1575, 1, 2138.1108, -2287.8926, 14.7801); // Materials Pickup 1

	CreateDynamic3DTextLabel("Loading Dock\n"CXRP"(( Type '/loadtruck' and pick a load to begin delivery. ))", COLOR_GREY, 2733.7070,-2512.6345,13.6641, 15.0);
	CreateDynamicPickup(1239, 1, 2733.7070,-2512.6345,13.6641);

	CreateDynamic3DTextLabel("Black Market\n"CXRP"(( Type '/blackmarket' to view the itemlist. ))", COLOR_GREY, 2591.7256, -2175.2224, 0.2969, 10.0);
	//======================
	CreateDynamic3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}1\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -20.4854, 1574.7264, 12.7500, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}2\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -16.1826, 1575.7219, 12.7500, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}3\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -9.6513, 1574.4042, 12.7500, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}4\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -3.8314, 1573.5138, 12.7500, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}5\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, 0.9510, 1571.9641, 19.6841, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}6\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -0.3898, 1564.7903, 19.6841, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}7\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -1.7840, 1557.8475, 19.6841, 30.0, .testlos=1);
	CreateDynamic3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}8\n{C1C1C1}To start chopping meats, just press 'N'.", COLOR_WHITE, -3.0651, 1551.0083, 19.6841, 30.0, .testlos=1);

	new BlackMart = CreateActor(149, 2591.7256, -2175.2224, 0.29695, 353.8452);// Blackmarket Actor
	ApplyActorAnimation(BlackMart, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(BlackMart, true);

    CreateDynamic3DTextLabel("Meat Chopper Job\nType [/meatchop] to get this job.", 0x00FF00FF, -16.9641, 1543.6111, 12.7560, 20.0);
    CreateDynamicPickup(1275, 23, -16.9641,1543.6111,12.7560);

	CreateDynamic3DTextLabel("Drivers Test: $100\n"CXRP"(( Type '/taketest' to begin. ))\n{AFAFAF}Release Vehicle\n"CXRP"(( Type '/releasecar' to release ))", COLOR_GREY, 209.2540,-195.8876,1000.5235, 10.0, .worldid=4000033);
	CreateDynamicPickup(1239, 1, 209.2540,-195.8876,1000.5235, 4000033);

	PDM = CreateActor(164, -1967.9045,259.9217,35.9149,184.2731);// PDM ACTOR
	ApplyActorAnimation(PDM, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(PDM, true);
	CreateDynamic3DTextLabel("Vehicle Dealership\n"CXRP"(( Type '/buyvehicle' to buy vehicle. ))", COLOR_GREY, 544.8441,-1293.9301,17.2422, 10.0);
	CreateDynamicPickup(1274, 1, 544.8441,-1293.9301,17.2422);

	CreateDynamic3DTextLabel(CXRP"(( Type '/gunlic' to buy Gun License ))\n(( Type '/changename' to request one. ))\n(( Type '/buylevel to buy new level ))\n(( '/upgrade' to use upgrade points ))\n(([/gunlic] = Costs 8,500$ ))\n(([/buylevel] = 200$ Per Level.))\n(([/changename] = $10,000 Per Level))\n(([/upgrade] = $500 Per Upgrade))", COLOR_GREY, 1396.2074,-4.2695,1000.8535, 10.0);
	CreateDynamicPickup(1239, 1, 1396.2080, -4.1093, 1000.8535);

	CreateDynamicPickup(1239, 1, 815.4244, -1107.9791, 25.78991);
	CreateDynamic3DTextLabel("Dirty Money\n"CXRP"(( Type /washmoney to wash the money. ))", COLOR_GREY, 815.4244, -1107.9791, 25.7899, 10.0);

	CreateDynamic3DTextLabel("Drug Smuggling\nCost: $600\n"CXRP"(( Type '/getcrate' to begin smuggling. ))", COLOR_GREY, 2205.5740,1581.2896,999.9812, 10.0);
	CreateDynamicPickup(1279, 1, 2205.5740,1581.2896,999.9812);

	CreateDynamic3DTextLabel("Meth Cookoff\n> Requires Ephedrine <\n"CXRP"(( Type '/cookmeth' to begin cooking. ))", COLOR_GREY, 333.5727, 1121.8536, 1083.8903, 10.0);
	CreateDynamicPickup(1577, 1, 333.5727, 1121.8536, 1083.8903);

	CreateDynamic3DTextLabel("Bank\n"CXRP"(( Type '/bank' to access the Bank. ))", COLOR_GREY, 1667.4260, -972.6691, 683.6873, 10.0);
	CreateDynamicPickup(1239, 1, 1667.4260, -972.6691, 683.6873);

	CreateDynamic3DTextLabel("Mafia Shipment\n"CXRP"(( Type '/spawntruck' to spawn shipment truck. ))", COLOR_GREY, 2755.7466,-70.7004,1312.6029, 10.0, .worldid=4000328, .interiorid=5);
	CreateDynamicPickup(1254, 1, 2755.7466,-70.7004,1312.6029, 4000328, 5);

	CreateDynamic3DTextLabel("Bank Vault Keypad\n"CXRP"(( Police can type '/vault' to open the Bank Vault. ))", COLOR_GREY, 1679.3070, -987.4791, 671.1152, 10.0);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana Seeds\nStock: 100\n"CXRP"(( Type '/getdrug seeds [amount]' ))\n((/getwater [amount]))", COLOR_GREY, -1184.4346, -1141.9376, 129.2188, 10.0);
	CreateDynamicPickup(1578, 1, -1184.4346, -1141.9376, 129.2188);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw Ephedrine\nStock: 100\n"CXRP"(( '/getdrug ephedrine [amount]' ))", COLOR_GREY, 321.6007, 1117.3717, 1083.8828, 10.0);
	CreateDynamicPickup(1577, 1, 321.6007, 1117.3717, 1083.8828);

	gCrackText = CreateDynamic3DTextLabel("Crack\nStock: 100\n"CXRP"(( Type '/getdrug Crack [amount]' ))", COLOR_GREY, 2345.8250,-1185.5159,1031.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2345.8250,-1185.5159,1031.9766);

	CreateDynamic3DTextLabel("Newbie Information:\n"CXRP"(( Type '/newbinfo' for more information. ))", COLOR_GREY, -1992.6461,137.8248,27.5391, 18.0); // 2

	gParachutes[0] = CreateDynamicPickup(371, 1, -1753.6581, 885.2425, 295.8750); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior
	gParachutes[2] = CreateDynamicPickup(371, 1, -4543.2896,-2180.9702,100.6375); // Admin Island

	//PAWNSHOP
	PAWNSHOP = CreateActor(150, 81.9193, 2504.4148, 2001.0847, 181.0000);// PAWNSHOP ACTOR
	ApplyActorAnimation(PAWNSHOP, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(PAWNSHOP, true);

	//CITYHALL
	CITYHALL = CreateActor(120, 359.7139, 173.5686, 1008.3893, 267.9870);// CITYHALL ACTOR
	ApplyActorAnimation(CITYHALL, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(CITYHALL, true);
	SetActorVirtualWorld(CITYHALL, 1);

	EDM = CreateActor(23, -1657.9865, 1208.1818, 7.2500, 0.5911);// EDM ACTOR
	ApplyActorAnimation(EDM, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(EDM, true);
	CreateDynamic3DTextLabel("Redeem Voucher Code\n"CXRP"(( Type '/redeem' to redeem code ))", COLOR_WHITE, -1657.8021,1210.5331,7.2500, 10.0);
	CreateDynamicPickup(1247, 1, -1657.8021,1210.5331,7.2500); // Admin Island

	CreateDynamic3DTextLabel("Welcome to\n{00FFFF}CyberX {00FFFF}Roleplay\n"WHITE"Use "CXRP"/helpme "WHITE"to get a Server Tour!", COLOR_WHITE, 1225.7238, -1815.5806, 16.5938, 8.0);
	CreateDynamic3DTextLabel("Don't know where to go?\nUse "CXRP"/locate"WHITE" to get a list of locations\nand locate them easily!", COLOR_WHITE, 1225.6647, -1813.2511, 16.5938, 8.0);
	CreateDynamic3DTextLabel("Wanna spawn your car?\nUse "CXRP"/vst"WHITE" to get a list of your owned cars\nand spawn them to use it!", COLOR_WHITE, 1219.8665, -1814.5585, 16.5938, 8.0);
	CreateDynamic3DTextLabel("{00FFFF}CyberX\n"WHITE"Join our "YELLOW"Discord"WHITE", "YELLOW"Facebook "WHITE"&"YELLOW" YouTube"WHITE"!\n"WHITE"Use "CXRP"/info "WHITE"for the links", COLOR_WHITE, 1219.2935, -1812.6146, 16.5938, 8.0);

	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), "%s\n"CXRP"(( Type '/join' to get job. ))", jobLocations[i][jobName]);
	    CreateDynamic3DTextLabel(string, COLOR_GREY, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
		CreateDynamicPickup(1275, 1, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]);
	}
	for(new i = 0; i< sizeof(jobsvehicle); i ++)
	{
		format(string, sizeof(string), "Vehicle Station\n"AQUA"[Job: %s]\n [CMD: /jobvehicle or /jv]", jobsvehicle[i][JobName]);
		CreateDynamic3DTextLabel(string, COLOR_WHITE, jobsvehicle[i][jvPosX], jobsvehicle[i][jvPosY], jobsvehicle[i][jvPosZ], 10.0);
		CreateDynamicPickup(1210, 1, jobsvehicle[i][jvPosX], jobsvehicle[i][jvPosY], jobsvehicle[i][jvPosZ]);
	}
	CreateDynamicPickup(1239, 1, 2067.2627, -2073.6421, 13.1158);

	YFOOD[0] = CreateActor(155, 372.6925,-117.2780,1001.4922,183.5682); //yFood NPC
	ApplyActorAnimation(YFOOD[0], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, -1);
	SetActorVirtualWorld(YFOOD[0], 1);
	SetActorInvulnerable(YFOOD[0], true);

	YFOOD[1] = CreateActor(155, 378.6101,-117.2767,1001.4922,177.3015); //yFood NPC
	ApplyActorAnimation(YFOOD[1], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, -1);
	SetActorVirtualWorld(YFOOD[1], 1);
	SetActorInvulnerable(YFOOD[1], true);

	CreateDynamicPickup(1582, 1, 378.8622,-118.8034,1001.4922);
	CreateDynamic3DTextLabel("{FF00FF}Pizza Man Pickup Point\n"CXRP"(( Type '/getfood' to pickup food ))", SERVER_COLOR, 378.8622,-118.8034,1001.4922, 15.0);

	for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
	{
		new fstring[128];
		format(fstring, sizeof(fstring), ""CXRP"[Fuel Station: %i]\n [Fuel Left - %i]\n"ORANGE"Rate %i$ Per Litre\n"CXRP"(( Type '/refuel' to refill ))", FuelStationInfo[i][fid], FuelStationInfo[i][total_fuel], FuelStationInfo[i][fprice]);
	    CreateDynamic3DTextLabel(fstring, COLOR_GREY, FuelStationInfo[i][FuelX], FuelStationInfo[i][FuelY], FuelStationInfo[i][FuelZ] + 0.4, 12.0);
	}

	for(new i = 0; i < sizeof(MechStation); i ++)
	{
		CreateDynamicPickup(19627, 1, MechStation[i][MechX], MechStation[i][MechY], MechStation[i][MechZ]);
	    CreateDynamic3DTextLabel("Mechanic Station\n"CXRP"(( '/tune or /upgradevehicle' ))\nto tune/upgrade the car", SERVER_COLOR, MechStation[i][MechX], MechStation[i][MechY], MechStation[i][MechZ] + 0.4, 12.0);
	}

    CreateDynamic3DTextLabel("{00FF00}Oak {FFFFFF}tree\n{C1C1C1}To get started, go to the tree", COLOR_WHITE, -1931.063354, -2360.959228, 30.820381, 90.0, .testlos=1);
	CreateDynamic3DTextLabel("{00FF00}Oak {FFFFFF}tree\n{C1C1C1}To get started, go to the tree", COLOR_WHITE, -1914.466308, -2369.007685, 29.804220, 90.0, .testlos=1);
	CreateDynamic3DTextLabel("{00FF00}Oak {FFFFFF}tree\n{C1C1C1}To get started, go to the tree", COLOR_WHITE, -1903.706787, -2361.488769, 31.170394, 90.0, .testlos=1);
	CreateDynamic3DTextLabel("{00FF00}Spruce {FFFFFF}tree\n{C1C1C1}To get started, go to the tree", COLOR_WHITE, -1934.799438, -2243.597412, 65.4831, 90.0, .testlos=1);
	CreateDynamic3DTextLabel("{00FF00}Spruce {FFFFFF}tree\n{C1C1C1}To get started, go to the tree", COLOR_WHITE, -1917.573364, -2251.707519, 65.8043, 90.0, .testlos=1);
	CreateDynamicPickup(1275, 23, -1991.550659, -2389.910644, 30.625000);
	CreateDynamic3DTextLabel("Lumberjack Sidejob\n Type [/lumber] to get this job.", 0x00FF00FF, -1991.550659, -2389.910644, 30.625000, 20.0);

    CreateDynamic3DTextLabel("{00FF00}Marijuana {FFFFFF}plant\n{C1C1C1}To get started, go to the plant", COLOR_WHITE, -989.6240, -1681.1686, 76.3672, 90.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	

	CreateDynamicPickup(1275, 23, -988.0164,-1638.0801,76.3884);
	CreateDynamic3DTextLabel("Harvester Sidejob\n Type [/harvest] to get this job.",0x00FF00FF, -988.0164,-1638.0801,76.3884, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
	    CreateDynamic3DTextLabel("Type '/packagemeat' to begin packaging.", COLOR_WHITE, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2], 25.0);
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Arrest\n"CXRP"(( Type '/arrest' to arrest a suspect. ))", COLOR_GREY, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}

	CreateDynamic3DTextLabel("{2B60DE}SFPD Faction Stash\n"CXRP"(( Type '/pstash' to access. ))", COLOR_GREY, 233.4311,201.4753,1042.1980, 7.0, .worldid = 1, .interiorid = 10);
	CreateDynamicPickup(1247, 1, 233.4311,201.4753,1042.1980, .worldid = 1, .interiorid = 10);

	for(new i = 0; i < sizeof(selfRepairPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Self Repair Costs $800\n"CXRP"(( Type '/selfrepair' to repair your vehicle. )) ",COLOR_GREY, selfRepairPoints[i][0], selfRepairPoints[i][1], selfRepairPoints[i][2], 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	    CreateDynamicPickup(19627, 1, selfRepairPoints[i][0], selfRepairPoints[i][1], selfRepairPoints[i][2]);
	}
	CreateDynamic3DTextLabel("Vehicle Crane Area\n"CXRP"(( Type '/impound' to impound a vehicle. ))\n"CXRP"(( Type '/sellmycar' to sell your vehicle. ))", COLOR_GREY, 571.0540, -1302.5659, 16.7883, 10.0);

	//Textdraws
	Watermark[0] = TextDrawCreate(546.000000, 16.000000, "ld_dual:white");
	TextDrawFont(Watermark[0], 4);
	TextDrawLetterSize(Watermark[0], 0.600000, 2.000000);
	TextDrawTextSize(Watermark[0], 79.500000, 8.500000);
	TextDrawSetOutline(Watermark[0], 1);
	TextDrawSetShadow(Watermark[0], 0);
	TextDrawAlignment(Watermark[0], 1);
	TextDrawColor(Watermark[0], 16777022);
	TextDrawBackgroundColor(Watermark[0], 255);
	TextDrawBoxColor(Watermark[0], 50);
	TextDrawUseBox(Watermark[0], 1);
	TextDrawSetProportional(Watermark[0], 1);
	TextDrawSetSelectable(Watermark[0], 0);

	Watermark[1] = TextDrawCreate(536.000000, 6.000000, "ld_pool:ball");
	TextDrawFont(Watermark[1], 4);
	TextDrawLetterSize(Watermark[1], 0.600000, 2.000000);
	TextDrawTextSize(Watermark[1], 17.500000, 18.500000);
	TextDrawSetOutline(Watermark[1], 1);
	TextDrawSetShadow(Watermark[1], 0);
	TextDrawAlignment(Watermark[1], 1);
	TextDrawColor(Watermark[1], 9109759);
	TextDrawBackgroundColor(Watermark[1], 255);
	TextDrawBoxColor(Watermark[1], 50);
	TextDrawUseBox(Watermark[1], 1);
	TextDrawSetProportional(Watermark[1], 1);
	TextDrawSetSelectable(Watermark[1], 0);

	Watermark[2] = TextDrawCreate(540.200012, 10.000000, "ld_pool:ball");
	TextDrawFont(Watermark[2], 4);
	TextDrawLetterSize(Watermark[2], 0.600000, 2.000000);
	TextDrawTextSize(Watermark[2], 9.000000, 10.000000);
	TextDrawSetOutline(Watermark[2], 1);
	TextDrawSetShadow(Watermark[2], 0);
	TextDrawAlignment(Watermark[2], 1);
	TextDrawColor(Watermark[2], -16776961);
	TextDrawBackgroundColor(Watermark[2], 255);
	TextDrawBoxColor(Watermark[2], 50);
	TextDrawUseBox(Watermark[2], 1);
	TextDrawSetProportional(Watermark[2], 1);
	TextDrawSetSelectable(Watermark[2], 0);

	Watermark[3] = TextDrawCreate(588.000000, 3.000000, "CyberX");
	TextDrawFont(Watermark[3], 1);
	TextDrawLetterSize(Watermark[3], 0.229165, 1.399999);
	TextDrawTextSize(Watermark[3], 408.500000, 92.500000);
	TextDrawSetOutline(Watermark[3], 0);
	TextDrawSetShadow(Watermark[3], 1);
	TextDrawAlignment(Watermark[3], 2);
	TextDrawColor(Watermark[3], 16777215);
	TextDrawBackgroundColor(Watermark[3], 255);
	TextDrawBoxColor(Watermark[3], 50);
	TextDrawUseBox(Watermark[3], 0);
	TextDrawSetProportional(Watermark[3], 1);
	TextDrawSetSelectable(Watermark[3], 0);

	Watermark[4] = TextDrawCreate(584.000000, 14.000000, "Roleplay");
	TextDrawFont(Watermark[4], 1);
	TextDrawLetterSize(Watermark[4], 0.258332, 1.049999);
	TextDrawTextSize(Watermark[4], 400.000000, 17.000000);
	TextDrawSetOutline(Watermark[4], 0);
	TextDrawSetShadow(Watermark[4], 1);
	TextDrawAlignment(Watermark[4], 2);
	TextDrawColor(Watermark[4], -1);
	TextDrawBackgroundColor(Watermark[4], 255);
	TextDrawBoxColor(Watermark[4], 50);
	TextDrawUseBox(Watermark[4], 0);
	TextDrawSetProportional(Watermark[4], 1);
	TextDrawSetSelectable(Watermark[4], 0);
	

	//Phone
	notch = TextDrawCreate(420.000000, 231.000000, "_");
	TextDrawFont(notch, 1);
	TextDrawLetterSize(notch, 0.600000, 10.300003);
	TextDrawTextSize(notch, 304.000000, 91.000000);
	TextDrawSetOutline(notch, 1);
	TextDrawSetShadow(notch, 0);
	TextDrawAlignment(notch, 2);
	TextDrawColor(notch, -1);
	TextDrawBackgroundColor(notch, 255);
	TextDrawBoxColor(notch, 255);
	TextDrawUseBox(notch, 1);
	TextDrawSetProportional(notch, 1);
	TextDrawSetSelectable(notch, 0);

	body = TextDrawCreate(420.000000, 241.000000, "_");
	TextDrawFont(body, 1);
	TextDrawLetterSize(body, 0.600000, 20.300010);
	TextDrawTextSize(body, 335.000000, 91.000000);
	TextDrawSetOutline(body, 1);
	TextDrawSetShadow(body, 0);
	TextDrawAlignment(body, 2);
	TextDrawColor(body, -1);
	TextDrawBackgroundColor(body, 255);
	TextDrawBoxColor(body, 255);
	TextDrawUseBox(body, 1);
	TextDrawSetProportional(body, 1);
	TextDrawSetSelectable(body, 0);

	walp = TextDrawCreate(377.000000, 244.000000, "ld_grav:sky");
	TextDrawFont(walp, 4);
	TextDrawLetterSize(walp, 0.600000, 2.000000);
	TextDrawTextSize(walp, 85.500000, 167.500000);
	TextDrawSetOutline(walp, 1);
	TextDrawSetShadow(walp, 0);
	TextDrawAlignment(walp, 1);
	TextDrawColor(walp, -1);
	TextDrawBackgroundColor(walp, 255);
	TextDrawBoxColor(walp, 50);
	TextDrawUseBox(walp, 1);
	TextDrawSetProportional(walp, 1);
	TextDrawSetSelectable(walp, 0);

	wtrmrk = TextDrawCreate(388.000000, 238.000000, "Y_P");
	TextDrawFont(wtrmrk, 1);
	TextDrawLetterSize(wtrmrk, 1.216665, 17.900024);
	TextDrawTextSize(wtrmrk, 400.000000, 17.000000);
	TextDrawSetOutline(wtrmrk, 0);
	TextDrawSetShadow(wtrmrk, 0);
	TextDrawAlignment(wtrmrk, 1);
	TextDrawColor(wtrmrk, -140);
	TextDrawBackgroundColor(wtrmrk, 255);
	TextDrawBoxColor(wtrmrk, 50);
	TextDrawUseBox(wtrmrk, 0);
	TextDrawSetProportional(wtrmrk, 1);
	TextDrawSetSelectable(wtrmrk, 0);

	cam = TextDrawCreate(416.000000, 232.000000, "ld_pool:nib");
	TextDrawFont(cam, 4);
	TextDrawLetterSize(cam, 0.600000, 2.000000);
	TextDrawTextSize(cam, 7.500000, 9.500000);
	TextDrawSetOutline(cam, 1);
	TextDrawSetShadow(cam, 0);
	TextDrawAlignment(cam, 1);
	TextDrawColor(cam, -1);
	TextDrawBackgroundColor(cam, 255);
	TextDrawBoxColor(cam, 50);
	TextDrawUseBox(cam, 1);
	TextDrawSetProportional(cam, 1);
	TextDrawSetSelectable(cam, 0);

	home = TextDrawCreate(413.000000, 414.000000, "ld_pool:ball");
	TextDrawFont(home, 4);
	TextDrawLetterSize(home, 0.600000, 2.000000);
	TextDrawTextSize(home, 15.000000, 9.500000);
	TextDrawSetOutline(home, 1);
	TextDrawSetShadow(home, 0);
	TextDrawAlignment(home, 1);
	TextDrawColor(home, -1);
	TextDrawBackgroundColor(home, 255);
	TextDrawBoxColor(home, 50);
	TextDrawUseBox(home, 1);
	TextDrawSetProportional(home, 1);
	TextDrawSetSelectable(home, 1);

	call = TextDrawCreate(379.000000, 250.000000, "HUD:radar_catalinapink");
	TextDrawFont(call, 4);
	TextDrawLetterSize(call, 0.600000, 2.000000);
	TextDrawTextSize(call, 17.000000, 17.000000);
	TextDrawSetOutline(call, 1);
	TextDrawSetShadow(call, 0);
	TextDrawAlignment(call, 1);
	TextDrawColor(call, -1);
	TextDrawBackgroundColor(call, 255);
	TextDrawBoxColor(call, 50);
	TextDrawUseBox(call, 1);
	TextDrawSetProportional(call, 1);
	TextDrawSetSelectable(call, 1);

	PhoneTD[0] = TextDrawCreate(387.000000, 268.000000, "Call");
	TextDrawFont(PhoneTD[0], 1);
	TextDrawLetterSize(PhoneTD[0], 0.224997, 0.949998);
	TextDrawTextSize(PhoneTD[0], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[0], 1);
	TextDrawSetShadow(PhoneTD[0], 0);
	TextDrawAlignment(PhoneTD[0], 2);
	TextDrawColor(PhoneTD[0], -1);
	TextDrawBackgroundColor(PhoneTD[0], 255);
	TextDrawBoxColor(PhoneTD[0], 50);
	TextDrawUseBox(PhoneTD[0], 0);
	TextDrawSetProportional(PhoneTD[0], 1);
	TextDrawSetSelectable(PhoneTD[0], 0);

	sms = TextDrawCreate(412.000000, 249.000000, "HUD:radar_girlfriend");
	TextDrawFont(sms, 4);
	TextDrawLetterSize(sms, 0.600000, 2.000000);
	TextDrawTextSize(sms, 17.000000, 17.000000);
	TextDrawSetOutline(sms, 1);
	TextDrawSetShadow(sms, 0);
	TextDrawAlignment(sms, 1);
	TextDrawColor(sms, -1);
	TextDrawBackgroundColor(sms, 255);
	TextDrawBoxColor(sms, 50);
	TextDrawUseBox(sms, 1);
	TextDrawSetProportional(sms, 1);
	TextDrawSetSelectable(sms, 1);

	PhoneTD[1] = TextDrawCreate(421.000000, 268.000000, "SMS");
	TextDrawFont(PhoneTD[1], 1);
	TextDrawLetterSize(PhoneTD[1], 0.224996, 0.949998);
	TextDrawTextSize(PhoneTD[1], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[1], 1);
	TextDrawSetShadow(PhoneTD[1], 0);
	TextDrawAlignment(PhoneTD[1], 2);
	TextDrawColor(PhoneTD[1], -1);
	TextDrawBackgroundColor(PhoneTD[1], 255);
	TextDrawBoxColor(PhoneTD[1], 50);
	TextDrawUseBox(PhoneTD[1], 0);
	TextDrawSetProportional(PhoneTD[1], 1);
	TextDrawSetSelectable(PhoneTD[1], 0);

	chat = TextDrawCreate(443.000000, 249.000000, "hud:radar_boatyard");
	TextDrawFont(chat, 4);
	TextDrawLetterSize(chat, 0.600000, 2.000000);
	TextDrawTextSize(chat, 17.000000, 17.000000);
	TextDrawSetOutline(chat, 1);
	TextDrawSetShadow(chat, 0);
	TextDrawAlignment(chat, 1);
	TextDrawColor(chat, -1);
	TextDrawBackgroundColor(chat, 255);
	TextDrawBoxColor(chat, 50);
	TextDrawUseBox(chat, 1);
	TextDrawSetProportional(chat, 1);
	TextDrawSetSelectable(chat, 1);

	PhoneTD[2] = TextDrawCreate(451.000000, 268.000000, "yChat");
	TextDrawFont(PhoneTD[2], 1);
	TextDrawLetterSize(PhoneTD[2], 0.224996, 0.949998);
	TextDrawTextSize(PhoneTD[2], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[2], 1);
	TextDrawSetShadow(PhoneTD[2], 0);
	TextDrawAlignment(PhoneTD[2], 2);
	TextDrawColor(PhoneTD[2], -1);
	TextDrawBackgroundColor(PhoneTD[2], 255);
	TextDrawBoxColor(PhoneTD[2], 50);
	TextDrawUseBox(PhoneTD[2], 0);
	TextDrawSetProportional(PhoneTD[2], 1);
	TextDrawSetSelectable(PhoneTD[2], 0);

	locate = TextDrawCreate(380.000000, 288.000000, "HUD:arrow");
	TextDrawFont(locate, 4);
	TextDrawLetterSize(locate, 0.600000, 2.000000);
	TextDrawTextSize(locate, 17.000000, 17.000000);
	TextDrawSetOutline(locate, 1);
	TextDrawSetShadow(locate, 0);
	TextDrawAlignment(locate, 1);
	TextDrawColor(locate, -1);
	TextDrawBackgroundColor(locate, 255);
	TextDrawBoxColor(locate, 50);
	TextDrawUseBox(locate, 1);
	TextDrawSetProportional(locate, 1);
	TextDrawSetSelectable(locate, 1);

	PhoneTD[3] = TextDrawCreate(389.000000, 306.000000, "Locate");
	TextDrawFont(PhoneTD[3], 1);
	TextDrawLetterSize(PhoneTD[3], 0.170833, 0.949998);
	TextDrawTextSize(PhoneTD[3], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[3], 1);
	TextDrawSetShadow(PhoneTD[3], 0);
	TextDrawAlignment(PhoneTD[3], 2);
	TextDrawColor(PhoneTD[3], -1);
	TextDrawBackgroundColor(PhoneTD[3], 255);
	TextDrawBoxColor(PhoneTD[3], 50);
	TextDrawUseBox(PhoneTD[3], 0);
	TextDrawSetProportional(PhoneTD[3], 1);
	TextDrawSetSelectable(PhoneTD[3], 0);

	vst = TextDrawCreate(412.000000, 286.000000, "HUD:radar_impound");
	TextDrawFont(vst, 4);
	TextDrawLetterSize(vst, 0.600000, 2.000000);
	TextDrawTextSize(vst, 17.000000, 17.000000);
	TextDrawSetOutline(vst, 1);
	TextDrawSetShadow(vst, 0);
	TextDrawAlignment(vst, 1);
	TextDrawColor(vst, -1);
	TextDrawBackgroundColor(vst, 255);
	TextDrawBoxColor(vst, 50);
	TextDrawUseBox(vst, 1);
	TextDrawSetProportional(vst, 1);
	TextDrawSetSelectable(vst, 1);

	PhoneTD[4] = TextDrawCreate(420.000000, 306.000000, "Cars");
	TextDrawFont(PhoneTD[4], 1);
	TextDrawLetterSize(PhoneTD[4], 0.224997, 0.949998);
	TextDrawTextSize(PhoneTD[4], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[4], 1);
	TextDrawSetShadow(PhoneTD[4], 0);
	TextDrawAlignment(PhoneTD[4], 2);
	TextDrawColor(PhoneTD[4], -1);
	TextDrawBackgroundColor(PhoneTD[4], 255);
	TextDrawBoxColor(PhoneTD[4], 50);
	TextDrawUseBox(PhoneTD[4], 0);
	TextDrawSetProportional(PhoneTD[4], 1);
	TextDrawSetSelectable(PhoneTD[4], 0);

	noo = TextDrawCreate(443.000000, 287.000000, "HUD:radar_fire");
	TextDrawFont(noo, 4);
	TextDrawLetterSize(noo, 0.600000, 2.000000);
	TextDrawTextSize(noo, 17.000000, 17.000000);
	TextDrawSetOutline(noo, 1);
	TextDrawSetShadow(noo, 0);
	TextDrawAlignment(noo, 1);
	TextDrawColor(noo, -1);
	TextDrawBackgroundColor(noo, 255);
	TextDrawBoxColor(noo, 50);
	TextDrawUseBox(noo, 1);
	TextDrawSetProportional(noo, 1);
	TextDrawSetSelectable(noo, 1);

	PhoneTD[5] = TextDrawCreate(451.000000, 306.000000, "911");
	TextDrawFont(PhoneTD[5], 1);
	TextDrawLetterSize(PhoneTD[5], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[5], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[5], 1);
	TextDrawSetShadow(PhoneTD[5], 0);
	TextDrawAlignment(PhoneTD[5], 2);
	TextDrawColor(PhoneTD[5], -1);
	TextDrawBackgroundColor(PhoneTD[5], 255);
	TextDrawBoxColor(PhoneTD[5], 50);
	TextDrawUseBox(PhoneTD[5], 0);
	TextDrawSetProportional(PhoneTD[5], 1);
	TextDrawSetSelectable(PhoneTD[5], 0);

	statss = TextDrawCreate(380.000000, 333.000000, "HUD:radar_qmark");
	TextDrawFont(statss, 4);
	TextDrawLetterSize(statss, 0.600000, 2.000000);
	TextDrawTextSize(statss, 17.000000, 17.000000);
	TextDrawSetOutline(statss, 1);
	TextDrawSetShadow(statss, 0);
	TextDrawAlignment(statss, 1);
	TextDrawColor(statss, -1);
	TextDrawBackgroundColor(statss, 255);
	TextDrawBoxColor(statss, 50);
	TextDrawUseBox(statss, 1);
	TextDrawSetProportional(statss, 1);
	TextDrawSetSelectable(statss, 1);

	PhoneTD[6] = TextDrawCreate(389.000000, 351.000000, "Stats");
	TextDrawFont(PhoneTD[6], 1);
	TextDrawLetterSize(PhoneTD[6], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[6], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[6], 1);
	TextDrawSetShadow(PhoneTD[6], 0);
	TextDrawAlignment(PhoneTD[6], 2);
	TextDrawColor(PhoneTD[6], -1);
	TextDrawBackgroundColor(PhoneTD[6], 255);
	TextDrawBoxColor(PhoneTD[6], 50);
	TextDrawUseBox(PhoneTD[6], 0);
	TextDrawSetProportional(PhoneTD[6], 1);
	TextDrawSetSelectable(PhoneTD[6], 0);

	ping = TextDrawCreate(410.000000, 330.000000, "HUD:radar_light");
	TextDrawFont(ping, 4);
	TextDrawLetterSize(ping, 0.600000, 2.000000);
	TextDrawTextSize(ping, 17.000000, 17.000000);
	TextDrawSetOutline(ping, 1);
	TextDrawSetShadow(ping, 0);
	TextDrawAlignment(ping, 1);
	TextDrawColor(ping, -1);
	TextDrawBackgroundColor(ping, 255);
	TextDrawBoxColor(ping, 50);
	TextDrawUseBox(ping, 1);
	TextDrawSetProportional(ping, 1);
	TextDrawSetSelectable(ping, 1);

	PhoneTD[7] = TextDrawCreate(420.000000, 346.000000, "Ping Loc");
	TextDrawFont(PhoneTD[7], 1);
	TextDrawLetterSize(PhoneTD[7], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[7], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[7], 1);
	TextDrawSetShadow(PhoneTD[7], 0);
	TextDrawAlignment(PhoneTD[7], 2);
	TextDrawColor(PhoneTD[7], -1);
	TextDrawBackgroundColor(PhoneTD[7], 255);
	TextDrawBoxColor(PhoneTD[7], 50);
	TextDrawUseBox(PhoneTD[7], 0);
	TextDrawSetProportional(PhoneTD[7], 1);
	TextDrawSetSelectable(PhoneTD[7], 0);

	inv = TextDrawCreate(442.000000, 331.000000, "HUD:radar_gym");
	TextDrawFont(inv, 4);
	TextDrawLetterSize(inv, 0.600000, 2.000000);
	TextDrawTextSize(inv, 17.000000, 17.000000);
	TextDrawSetOutline(inv, 1);
	TextDrawSetShadow(inv, 0);
	TextDrawAlignment(inv, 1);
	TextDrawColor(inv, -1);
	TextDrawBackgroundColor(inv, 255);
	TextDrawBoxColor(inv, 50);
	TextDrawUseBox(inv, 1);
	TextDrawSetProportional(inv, 1);
	TextDrawSetSelectable(inv, 1);

	PhoneTD[8] = TextDrawCreate(450.000000, 350.000000, "Inv");
	TextDrawFont(PhoneTD[8], 1);
	TextDrawLetterSize(PhoneTD[8], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[8], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[8], 1);
	TextDrawSetShadow(PhoneTD[8], 0);
	TextDrawAlignment(PhoneTD[8], 2);
	TextDrawColor(PhoneTD[8], -1);
	TextDrawBackgroundColor(PhoneTD[8], 255);
	TextDrawBoxColor(PhoneTD[8], 50);
	TextDrawUseBox(PhoneTD[8], 0);
	TextDrawSetProportional(PhoneTD[8], 1);
	TextDrawSetSelectable(PhoneTD[8], 0);

	camera = TextDrawCreate(380.000000, 377.000000, "HUD:radar_police");
	TextDrawFont(camera, 4);
	TextDrawLetterSize(camera, 0.600000, 2.000000);
	TextDrawTextSize(camera, 17.000000, 17.000000);
	TextDrawSetOutline(camera, 1);
	TextDrawSetShadow(camera, 0);
	TextDrawAlignment(camera, 1);
	TextDrawColor(camera, -1);
	TextDrawBackgroundColor(camera, 255);
	TextDrawBoxColor(camera, 50);
	TextDrawUseBox(camera, 1);
	TextDrawSetProportional(camera, 1);
	TextDrawSetSelectable(camera, 1);

	PhoneTD[9] = TextDrawCreate(389.000000, 397.000000, "Camera");
	TextDrawFont(PhoneTD[9], 1);
	TextDrawLetterSize(PhoneTD[9], 0.154165, 0.949998);
	TextDrawTextSize(PhoneTD[9], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[9], 1);
	TextDrawSetShadow(PhoneTD[9], 0);
	TextDrawAlignment(PhoneTD[9], 2);
	TextDrawColor(PhoneTD[9], -1);
	TextDrawBackgroundColor(PhoneTD[9], 255);
	TextDrawBoxColor(PhoneTD[9], 50);
	TextDrawUseBox(PhoneTD[9], 0);
	TextDrawSetProportional(PhoneTD[9], 1);
	TextDrawSetSelectable(PhoneTD[9], 0);

	report = TextDrawCreate(410.000000, 376.000000, "HUD:radar_gangn");
	TextDrawFont(report, 4);
	TextDrawLetterSize(report, 0.600000, 2.000000);
	TextDrawTextSize(report, 17.000000, 17.000000);
	TextDrawSetOutline(report, 1);
	TextDrawSetShadow(report, 0);
	TextDrawAlignment(report, 1);
	TextDrawColor(report, -1);
	TextDrawBackgroundColor(report, 255);
	TextDrawBoxColor(report, 50);
	TextDrawUseBox(report, 1);
	TextDrawSetProportional(report, 1);
	TextDrawSetSelectable(report, 1);

	PhoneTD[10] = TextDrawCreate(420.000000, 397.000000, "Report");
	TextDrawFont(PhoneTD[10], 1);
	TextDrawLetterSize(PhoneTD[10], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[10], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[10], 1);
	TextDrawSetShadow(PhoneTD[10], 0);
	TextDrawAlignment(PhoneTD[10], 2);
	TextDrawColor(PhoneTD[10], -1);
	TextDrawBackgroundColor(PhoneTD[10], 255);
	TextDrawBoxColor(PhoneTD[10], 50);
	TextDrawUseBox(PhoneTD[10], 0);
	TextDrawSetProportional(PhoneTD[10], 1);
	TextDrawSetSelectable(PhoneTD[10], 0);

	rdm = TextDrawCreate(441.000000, 376.000000, "HUD:radar_gangp");
	TextDrawFont(rdm, 4);
	TextDrawLetterSize(rdm, 0.600000, 2.000000);
	TextDrawTextSize(rdm, 17.000000, 17.000000);
	TextDrawSetOutline(rdm, 1);
	TextDrawSetShadow(rdm, 0);
	TextDrawAlignment(rdm, 1);
	TextDrawColor(rdm, -1);
	TextDrawBackgroundColor(rdm, 255);
	TextDrawBoxColor(rdm, 50);
	TextDrawUseBox(rdm, 1);
	TextDrawSetProportional(rdm, 1);
	TextDrawSetSelectable(rdm, 1);

	PhoneTD[11] = TextDrawCreate(450.000000, 397.000000, "RDM");
	TextDrawFont(PhoneTD[11], 1);
	TextDrawLetterSize(PhoneTD[11], 0.224998, 0.949998);
	TextDrawTextSize(PhoneTD[11], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[11], 1);
	TextDrawSetShadow(PhoneTD[11], 0);
	TextDrawAlignment(PhoneTD[11], 2);
	TextDrawColor(PhoneTD[11], -1);
	TextDrawBackgroundColor(PhoneTD[11], 255);
	TextDrawBoxColor(PhoneTD[11], 50);
	TextDrawUseBox(PhoneTD[11], 0);
	TextDrawSetProportional(PhoneTD[11], 1);
	TextDrawSetSelectable(PhoneTD[11], 0);

	//call
	call_stat = TextDrawCreate(380.000000, 255.000000, "Incoming Call");
	TextDrawFont(call_stat, 1);
	TextDrawLetterSize(call_stat, 0.345833, 1.699998);
	TextDrawTextSize(call_stat, 530.500000, 126.000000);
	TextDrawSetOutline(call_stat, 1);
	TextDrawSetShadow(call_stat, 0);
	TextDrawAlignment(call_stat, 1);
	TextDrawColor(call_stat, -1);
	TextDrawBackgroundColor(call_stat, 255);
	TextDrawBoxColor(call_stat, 50);
	TextDrawUseBox(call_stat, 0);
	TextDrawSetProportional(call_stat, 1);
	TextDrawSetSelectable(call_stat, 0);

	call_pickup = TextDrawCreate(385.000000, 356.000000, "ld_pool:ball");
	TextDrawFont(call_pickup, 4);
	TextDrawLetterSize(call_pickup, 0.600000, 2.000000);
	TextDrawTextSize(call_pickup, 15.000000, 16.000000);
	TextDrawSetOutline(call_pickup, 0);
	TextDrawSetShadow(call_pickup, 0);
	TextDrawAlignment(call_pickup, 1);
	TextDrawColor(call_pickup, 16711935);
	TextDrawBackgroundColor(call_pickup, 255);
	TextDrawBoxColor(call_pickup, 50);
	TextDrawUseBox(call_pickup, 1);
	TextDrawSetProportional(call_pickup, 1);
	TextDrawSetSelectable(call_pickup, 1);

	call_text[0] = TextDrawCreate(394.000000, 374.000000, "Pickup");
	TextDrawFont(call_text[0], 1);
	TextDrawLetterSize(call_text[0], 0.237499, 1.449998);
	TextDrawTextSize(call_text[0], 400.000000, 17.000000);
	TextDrawSetOutline(call_text[0], 1);
	TextDrawSetShadow(call_text[0], 0);
	TextDrawAlignment(call_text[0], 2);
	TextDrawColor(call_text[0], 9109759);
	TextDrawBackgroundColor(call_text[0], 255);
	TextDrawBoxColor(call_text[0], 50);
	TextDrawUseBox(call_text[0], 0);
	TextDrawSetProportional(call_text[0], 1);
	TextDrawSetSelectable(call_text[0], 0);

	call_hangup = TextDrawCreate(438.000000, 356.000000, "ld_pool:ball");
	TextDrawFont(call_hangup, 4);
	TextDrawLetterSize(call_hangup, 0.600000, 2.000000);
	TextDrawTextSize(call_hangup, 15.000000, 16.000000);
	TextDrawSetOutline(call_hangup, 0);
	TextDrawSetShadow(call_hangup, 0);
	TextDrawAlignment(call_hangup, 1);
	TextDrawColor(call_hangup, -16776961);
	TextDrawBackgroundColor(call_hangup, 255);
	TextDrawBoxColor(call_hangup, 50);
	TextDrawUseBox(call_hangup, 1);
	TextDrawSetProportional(call_hangup, 1);
	TextDrawSetSelectable(call_hangup, 1);

	call_text[1] = TextDrawCreate(446.000000, 374.000000, "Hangup");
	TextDrawFont(call_text[1], 1);
	TextDrawLetterSize(call_text[1], 0.237499, 1.449998);
	TextDrawTextSize(call_text[1], 400.000000, 17.000000);
	TextDrawSetOutline(call_text[1], 1);
	TextDrawSetShadow(call_text[1], 0);
	TextDrawAlignment(call_text[1], 2);
	TextDrawColor(call_text[1], -1962934017);
	TextDrawBackgroundColor(call_text[1], 255);
	TextDrawBoxColor(call_text[1], 50);
	TextDrawUseBox(call_text[1], 0);
	TextDrawSetProportional(call_text[1], 1);
	TextDrawSetSelectable(call_text[1], 0);


	// Blindfold - Ez Jeck
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
	TextDrawLetterSize(Blind, 0.000000, 49.378147);
	TextDrawTextSize(Blind, -2.000000, 0.000000);
	TextDrawAlignment(Blind, 3);
	TextDrawColor(Blind, -1);
	TextDrawUseBox(Blind, true);
	TextDrawBoxColor(Blind, 255);
	TextDrawSetShadow(Blind, 0);
	TextDrawSetOutline(Blind, 0);
	TextDrawBackgroundColor(Blind, 255);
	TextDrawFont(Blind, 1);

	ANN[0] = TextDrawCreate(321.000000, 139.000000, "_");
	TextDrawFont(ANN[0], 1);
	TextDrawLetterSize(ANN[0], 0.600000, 8.949996);
	TextDrawTextSize(ANN[0], 298.500000, 748.500000);
	TextDrawSetOutline(ANN[0], 1);
	TextDrawSetShadow(ANN[0], 0);
	TextDrawAlignment(ANN[0], 2);
	TextDrawColor(ANN[0], -1);
	TextDrawBackgroundColor(ANN[0], 255);
	TextDrawBoxColor(ANN[0], 180);
	TextDrawUseBox(ANN[0], 1);
	TextDrawSetProportional(ANN[0], 1);
	TextDrawSetSelectable(ANN[0], 0);

	ANN[1] = TextDrawCreate(319.000000, 146.000000, "Announcement");
	TextDrawFont(ANN[1], 3);
	TextDrawLetterSize(ANN[1], 0.737499, 4.099997);
	TextDrawTextSize(ANN[1], 400.000000, 17.000000);
	TextDrawSetOutline(ANN[1], 0);
	TextDrawSetShadow(ANN[1], 0);
	TextDrawAlignment(ANN[1], 2);
	TextDrawColor(ANN[1], -2686721);
	TextDrawBackgroundColor(ANN[1], 255);
	TextDrawBoxColor(ANN[1], 50);
	TextDrawUseBox(ANN[1], 0);
	TextDrawSetProportional(ANN[1], 1);
	TextDrawSetSelectable(ANN[1], 0);

	ANN[2] = TextDrawCreate(319.000000, 187.000000, ""); // text
	TextDrawFont(ANN[2], 1);
	TextDrawLetterSize(ANN[2], 0.233332, 2.000000);
	TextDrawTextSize(ANN[2], 400.000000, 505.000000);
	TextDrawSetOutline(ANN[2], 0);
	TextDrawSetShadow(ANN[2], 0);
	TextDrawAlignment(ANN[2], 2);
	TextDrawColor(ANN[2], -1);
	TextDrawBackgroundColor(ANN[2], 255);
	TextDrawBoxColor(ANN[2], 50);
	TextDrawUseBox(ANN[2], 0);
	TextDrawSetProportional(ANN[2], 1);
	TextDrawSetSelectable(ANN[2], 0);

    PublicTD[0] = TextDrawCreate(315.000000, 26.000000, ""SERVER_NAME"");
	TextDrawAlignment(PublicTD[0], 2);
	TextDrawBackgroundColor(PublicTD[0], 255);
	TextDrawFont(PublicTD[0], 2);
	TextDrawLetterSize(PublicTD[0], 0.549999, 3.199999);
	TextDrawColor(PublicTD[0], 0x003366FF);
	TextDrawSetOutline(PublicTD[0], 1);
	TextDrawSetProportional(PublicTD[0], 1);

	PublicTD[1] = TextDrawCreate(312.000000, 55.000000, REVISION);
	TextDrawAlignment(PublicTD[1], 2);
	TextDrawBackgroundColor(PublicTD[1], 255);
	TextDrawFont(PublicTD[1], 3);
	TextDrawLetterSize(PublicTD[1], 0.670000, 2.299998);
	TextDrawColor(PublicTD[1], 0xFF0000FF);
	TextDrawSetOutline(PublicTD[1], 0);
	TextDrawSetProportional(PublicTD[1], 1);
	TextDrawSetShadow(PublicTD[1], 5);

	TimeTD = TextDrawCreate(328.000000, 30.000000, "12:34");
	TextDrawAlignment(TimeTD, 2);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawFont(TimeTD, 2);
	TextDrawLetterSize(TimeTD, 0.140000, 1.200000);
	TextDrawColor(TimeTD, -1);
	TextDrawSetOutline(TimeTD, 0);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetShadow(TimeTD, 1);
	TextDrawUseBox(TimeTD, 1);
	TextDrawBoxColor(TimeTD, 85);
	TextDrawTextSize(TimeTD, 0.000000, 19.000000);

	// Animation textdraw
	AnimationTD = TextDrawCreate(435.000000, 426.000000, "Press ~b~~k~~PED_SPRINT~~w~ to stop animation");
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.260000, 1.299999);
	TextDrawColor(AnimationTD, -1);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetProportional(AnimationTD, 1);

	// Unknwon Command Error textdraw
	UnknownTD[0] = TextDrawCreate(26.000000, 260.000000, "Error:");
	TextDrawBackgroundColor(UnknownTD[0], 255);
	TextDrawFont(UnknownTD[0], 2);
	TextDrawLetterSize(UnknownTD[0], 0.159999, 1.000000);
	TextDrawColor(UnknownTD[0], SERVER_COLOR);
	TextDrawSetOutline(UnknownTD[0], 0);
	TextDrawSetProportional(UnknownTD[0], 1);
	TextDrawSetShadow(UnknownTD[0], 1);
	TextDrawSetSelectable(UnknownTD[0], 0);

	UnknownTD[1] = TextDrawCreate(26.000000, 269.000000, "Unknown Command, please check /help");
	TextDrawBackgroundColor(UnknownTD[1], 255);
	TextDrawFont(UnknownTD[1], 2);
	TextDrawLetterSize(UnknownTD[1], 0.149999, 0.899999);
	TextDrawColor(UnknownTD[1], -1);
	TextDrawSetOutline(UnknownTD[1], 0);
	TextDrawSetProportional(UnknownTD[1], 1);
	TextDrawSetShadow(UnknownTD[1], 1);
	TextDrawSetSelectable(UnknownTD[1], 0);

	UnknownTD[2] = TextDrawCreate(167.000000, 261.000000, "New Textdraw");
	TextDrawBackgroundColor(UnknownTD[2], 255);
	TextDrawFont(UnknownTD[2], 1);
	TextDrawLetterSize(UnknownTD[2], 0.000000, 1.000000);
	TextDrawColor(UnknownTD[2], -1);
	TextDrawSetOutline(UnknownTD[2], 0);
	TextDrawSetProportional(UnknownTD[2], 1);
	TextDrawSetShadow(UnknownTD[2], 1);
	TextDrawUseBox(UnknownTD[2], 1);
	TextDrawBoxColor(UnknownTD[2], 96);
	TextDrawTextSize(UnknownTD[2], -3.000000, 0.000000);
	TextDrawSetSelectable(UnknownTD[2], 0);

	UnknownTD[3] = TextDrawCreate(7.000000, 258.000000, "?");
	TextDrawBackgroundColor(UnknownTD[3], 255);
	TextDrawFont(UnknownTD[3], 2);
	TextDrawLetterSize(UnknownTD[3], 0.620000, 2.499999);
	TextDrawColor(UnknownTD[3], -1);
	TextDrawSetOutline(UnknownTD[3], 0);
	TextDrawSetProportional(UnknownTD[3], 1);
	TextDrawSetShadow(UnknownTD[3], 1);
	TextDrawSetSelectable(UnknownTD[3], 0);
	CreateVST_GLOBAL();

	Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
    Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
    Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
    Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
    Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
    Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
    Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
    Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
	Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);
	Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);

    CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 52.789,-1538.231,5.003,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
 	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 56.351,-1526.141,4.884,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 1809.4454,811.5417,10.8997,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 1783.6510,803.8441,11.0599,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 50.1882,-1282.9015,14.0709,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 68.1923,-1304.1959,12.4487,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 517.2233,472.0292,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, 523.5045,473.5910,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, -169.2154,374.7297,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"CXRP"(( Type '/pass' or press HORN key to open the toll gate. ))",COLOR_GREY, -163.9199,370.8330,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

    CreateDynamic3DTextLabel("Pawnshop\n"CXRP"[Type '/exchange' to exchange your diamonds.]",COLOR_GREY, 81.8814, 2503.2380, 2001.1209,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

    CreateDynamic3DTextLabel("{FFFFFF}Welcome to\n{00FFFF}CyberX\n{FFFFFF}Admin Island",COLOR_GREY, -4556.1558,-2197.9829,53.2298,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 555, -1, -1, 30.0);
    CreateDynamic3DTextLabel("{FFFFFF}Welcome to\n{00FFFF}CyberX\n{FFFFFF}Admin Island",COLOR_GREY, -4541.6328,-2167.0801,53.2298,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 555, -1, -1, 30.0);

	CreateDynamic3DTextLabel("'/viplocker'\n"CXRP"[To open the donator's locker.]",COLOR_GREY,2556.376953, 1404.385864, 7699.584472,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamicPickup(1239, 1, 2556.376953, 1404.385864, 7699.584472, .worldid=4000277, .interiorid=2);

	gPrisonCells[0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);

	for(new i = 0; i < 24; i ++)
	{
		SetDynamicObjectMaterial(gPrisonCells[i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	}
	// Hospital Garage Doors (Main)
	CreateDynamicObject(10149, 1150.004394, -1345.316284, 14.201147, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(10149, 2007.520874, -1408.116088, 16.992187, 0.000000, 0.000000, 0.000000);

    CreateDynamic3DTextLabel("/deliverpt\nto drop off a patient", COLOR_DOCTOR, 1257.2606,1715.9121,1061.1492, 10.0);
    CreateDynamicPickup(1240, 1, 1257.2606,1715.9121,1061.1492);

    CreateDynamic3DTextLabel("/carry\nto drop off an injured person", COLOR_DOCTOR, 1257.3260,1718.4550,1061.1492, 10.0, .interiorid=1);
    CreateDynamicPickup(1241, 1, 1257.3260,1718.4550,1061.1492, .interiorid=1);

	// Driving Test (Main)
    testVehicles[0] = AddStaticVehicleEx(400, 2085.93, -2081.58, 13.205, 180.965, 1, 1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(400, 2082.4, -2081.48, 13.207, 179.197, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(400, 2079.38, -2081.47, 13.207, 179.379, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(400, 2075.92, -2081.41, 13.207, 180.466, 1, 1, 10); // test car 4
	testVehicles[4] = AddStaticVehicleEx(400, 2072.4, -2081.23, 13.206, 178.343, 1, 1, 10); // test car 5
	testVehicles[5] = AddStaticVehicleEx(400, 2089.75, -2081.44, 13.207, 179.825, 1, 1, 10); // test car 6
	testVehicles[6] = AddStaticVehicleEx(400, 2088.78, -2097.44, 13.184, 359.333, 1, 1, 10); // test car 7
	testVehicles[7] = AddStaticVehicleEx(400, 2085.58, -2097.46, 13.207, 359.856, 1, 1, 10); // test car 8
	testVehicles[8] = AddStaticVehicleEx(400, 2082.33, -2097.39, 13.208, 0.488, 1, 1, 10); // test car 9

	MafiaVeh[0] = CreateVehicle(470, 1355.0632, -3985.2568, 10.9108, 354.6220, 0, 0, -1, 0); // m1
	MafiaVeh[1] = CreateVehicle(580, 1361.2427, -3985.4902, 10.7267, 354.5184, 0, 0, -1, 0); // m2
	MafiaVeh[2] = CreateVehicle(470, 1364.1221, -3973.7478, 10.9689, 84.5630, 255, 255, -1, 0); // m3
	MafiaVeh[3] = CreateVehicle(521, 1358.6864, -3952.1909, 10.5244, 172.8102, 0, 3, -1, 0); // m4
	MafiaVeh[4] = CreateVehicle(522, 1355.3850, -3952.0454, 10.5536, 173.4790, 0, 0, -1, 0); // m5
	MafiaVeh[5] = CreateVehicle(522, 1352.0796, -3951.9131, 10.5530, 174.9429, 0, 0, -1, 0); // m6
	MafiaVeh[6] = CreateVehicle(548, 1344.4010, -4012.1611, 12.6722, 81.5942, 0, 0, -1, 0); // m7
	MafiaVeh[7] = CreateVehicle(425, 1163.9860, -3939.9670, 11.6287, 84.7443, 0, 0, -1, 0); // m8
	MafiaVeh[8] = CreateVehicle(493, 1187.6147, -3824.3730, 0.0708, 82.9837, 0, 0, -1, 0); // m9
	MafiaVeh[9] = CreateVehicle(493, 1184.5917, -3836.6736, 0.5734, 86.3609, 0, 0, -1, 0); // m10

	new mafia_attachment;

	//Patriot 1
	mafia_attachment = CreateDynamicObject(2985,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[0], 0.000, -0.260, 0.320, 0.000, 0.000, 90.000);
	mafia_attachment = CreateDynamicObject(1254,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(mafia_attachment, 0, -1, "none", "none", -6750208);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[0], 0.000, 2.155, 0.246, 1.999, 720.000, 540.000);
	mafia_attachment = CreateDynamicObject(1076,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[0], 0.000, -2.641, 0.250, 0.000, 0.000, 270.000);

	//Patriot 2
	mafia_attachment = CreateDynamicObject(2985,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[2], 0.000, -0.260, 0.320, 0.000, 0.000, 90.000);
	mafia_attachment = CreateDynamicObject(1254,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(mafia_attachment, 0, -1, "none", "none", -6750208);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[2], 0.000, 2.155, 0.246, 1.999, 720.000, 540.000);
	mafia_attachment = CreateDynamicObject(1076,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[2], 0.000, -2.641, 0.250, 0.000, 0.000, 270.000);

	//Remington
	mafia_attachment = CreateDynamicObject(1254,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(mafia_attachment, 0, -1, "none", "none", -6750208);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[1], 0.000, 2.630, 0.100, 0.000, 0.000, 0.000);

	//Hunter
	mafia_attachment = CreateDynamicObject(1254,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(mafia_attachment, 0, -1, "none", "none", -6750208);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[7], -0.430, 1.101, 0.720, 0.000, 0.000, 90.000);
	mafia_attachment = CreateDynamicObject(1254,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(mafia_attachment, 0, -1, "none", "none", -6750208);
	AttachDynamicObjectToVehicle(mafia_attachment, MafiaVeh[7], 0.488, 1.280, 0.650, 0.000, 0.000, 90.000);
	

	new engine, lights, alarm, doors, bonnet, boot, objective;
	for (new veh = 0; veh < 5; veh ++)
	{
		if(IsValidVehicle(dealershipVeh[veh]))
		{			
			GetVehicleParamsEx(dealershipVeh[veh], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(dealershipVeh[veh], engine, lights, alarm, 1, bonnet, boot, objective);
		}
	}

	new hour;
	gettime(.hour = hour);
	gHour = hour;
	gWorldTime = hour;
//	SetWorldTime(gWorldTime);

	// Timers
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("ThreeSecond", 3000, true);
	SetTimer("InjuredTimer", 5000, true);
	//SetTimer("UpdateNametag", 3000, true);
	SetTimer("SaveServerInfo", 100000, true);
	SetTimer("OnWeedCheckState", 1000, true);

	SetTimerEx("RandomFire", 60000 * 10, true, "i", 0);

	//Model Wise Fuel Timers
	SetTimer("SaloonsFuelTimer", 26000, true);
	SetTimer("SuperBikeFuelTimer", 22000, true);
	SetTimer("ConvertiblesFuelTimer", 28000, true);
	SetTimer("LowBikeFuelTimer", 30000, true);
	SetTimer("BikeFuelTimer", 25000, true);
	SetTimer("PSVFuelTimer", 24000, true);
	SetTimer("LowRidersFuelTimer", 36000, true);
	SetTimer("SportCarFuelTimer", 23000, true);
	SetTimer("UniqueFuelTimer", 20000, true);
	SetTimer("StationWagonsFuelTimer", 27000, true);
	SetTimer("IndustrialFuelTimer", 25000, true);
	SetTimer("OffRoadFuelTimer", 32000, true);
	SetTimer("MonsterFuelTimer", 18000, true);

	// Misc
    RefreshTime();
    ResetEvent();
    ResetRobbery();
	
	gLastSave = 0;
	if(Settings[gDoubleXP])
	 	SendRconCommand("hostname [2XP!] "SERVER_NAME"("REVISION")");
	else
		SendRconCommand("hostname "SERVER_NAME"("REVISION")");
	SetGameModeText("RolePlay");
	print(""SERVER_NAME"("REVISION")");


	new ocount;
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) ocount++;
	}

	printf("%i objects loaded.", ocount);
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][pKicked]) return 0;

	for(new i = 0, l = strlen(inputtext); i < l; i ++)
	{
	    if(inputtext[i] == '%') inputtext[i] = '#';
	}
   	if(dialogid == DIALOG_TYPE_MAIN)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0: // Hoods
        	    {
	                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
        	    case 1: // Vents
        	    {
    	            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 2: // Lights
        	    {
        	        ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Exhausts
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
				case 4: // Front Bumpers
        	    {
	                ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5: // Rear Bumpers
        	    {
    	            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 6: // Roofs
        	    {
        	        ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 7: // Spoilers
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 8: // Side Skirts
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9: // Bullbars
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 10: // Wheels
        	    {
    	 			ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 11: // Car Stereo
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
				case 12: // Hydraulics
        	    {
 					ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
				case 13: // Nitrous Oxide
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_EXHAUSTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 558 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562)
						{
							AddVehicleComponent(car,1034);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565)
						{
							AddVehicleComponent(car,1046);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559)
						{
							AddVehicleComponent(car,1065);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561)
						{
							AddVehicleComponent(car,1064);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560)
						{
							AddVehicleComponent(car,1028);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)
						{
							AddVehicleComponent(car,1089);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                	if(pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 558 || pmodelid[playerid] == 560)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562)
						{
							AddVehicleComponent(car,1037);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565)
						{
							AddVehicleComponent(car,1045);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559)
						{
							AddVehicleComponent(car,1066);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561)
						{
							AddVehicleComponent(car,1059);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560)
						{
							AddVehicleComponent(car,1029);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)
						{
							AddVehicleComponent(car,1092);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
					if(pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 575) // Brodway
						{
							AddVehicleComponent(car,1044);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
							AddVehicleComponent(car,1126);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
							AddVehicleComponent(car,1129);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1104);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1113);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
							AddVehicleComponent(car,1136);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 575) // Brodway
						{
							AddVehicleComponent(car,1043);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
							AddVehicleComponent(car,1127);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
							AddVehicleComponent(car,1132);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1105);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}

						else if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1114);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}

						else if(pmodelid[playerid] == 576) // Tornado
						{
							AddVehicleComponent(car,1135);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1020);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
				}
        	    case 5: // Medium
        	    {
                    if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr350
			        	{
							AddVehicleComponent(car,1021);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 6: // Small
        	    {
                    if(
					pmodelid[playerid] == 436)//previon
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							AddVehicleComponent(car,1022);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 7: // Twin
        	    {
                    if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405 ) // sentinel
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
							AddVehicleComponent(car,1019);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 8: // Upswept
        	    {
                    if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1018);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1018);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
				case 9: // _
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
        	    case 10: // Back
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_FBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1171);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1153);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
							AddVehicleComponent(car,1160);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1155);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1169);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
							AddVehicleComponent(car,1166);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{

						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1172);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1152);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
							AddVehicleComponent(car,1173);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1157);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1170);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
							AddVehicleComponent(car,1165);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
					if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 575) // Brodway
						{
							AddVehicleComponent(car,1174);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
							AddVehicleComponent(car,1179);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
							AddVehicleComponent(car,1189);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1182);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1115);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
							AddVehicleComponent(car,1191);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 576)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 575) // Brodway
						{
							AddVehicleComponent(car,1175);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
							AddVehicleComponent(car,1185);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
							AddVehicleComponent(car,1188);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1181);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}

						else if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1116);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
							AddVehicleComponent(car,1190);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
						}

					}
					else
					{
					    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
	             	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_RBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{

						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1149);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1150);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
							AddVehicleComponent(car,1159);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1154);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1141);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
							AddVehicleComponent(car,1168);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{


						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1148);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1151);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
							AddVehicleComponent(car,1161);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1156);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1140);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
							AddVehicleComponent(car,1167);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560)
					{


						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1148);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1151);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
							AddVehicleComponent(car,1161);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1156);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1140);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
							AddVehicleComponent(car,1167);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 575) // Brodway
						{
							AddVehicleComponent(car,1177);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
							AddVehicleComponent(car,1178);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
							AddVehicleComponent(car,1186);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1183);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}

						else if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1110);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}

						else if(pmodelid[playerid] == 576) // Tornado
						{
							AddVehicleComponent(car,1193);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
						}

					}
					else
					{
					    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Paint Jobs\nColors\nHoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide\nRepair Car", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_ROOFS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{

						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1038);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1054);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
							AddVehicleComponent(car,1067);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1055);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1032);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
							AddVehicleComponent(car,1088);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{


						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1035);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1053);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
							AddVehicleComponent(car,1068);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1061);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1033);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
							AddVehicleComponent(car,1091);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
					if(pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 567) // Savanna
						{
							AddVehicleComponent(car,1130);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1128);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 567) // Savanna
						{
							AddVehicleComponent(car,1131);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
							AddVehicleComponent(car,1103);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
					if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 550||
					pmodelid[playerid] == 477)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 401)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 518)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 589)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 492)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 546)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 603)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 426)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 436)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 580)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 550)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 477)
						{
							AddVehicleComponent(car,1006);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    	}
        	   		else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
	                ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 6:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SPOILERS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{

						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1147);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1049);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
							AddVehicleComponent(car,1162);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1158);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1138);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
							AddVehicleComponent(car,1164);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{


						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 562) // Elegy
						{
							AddVehicleComponent(car,1146);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
							AddVehicleComponent(car,1150);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
							AddVehicleComponent(car,1158);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
							AddVehicleComponent(car,1060);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
							AddVehicleComponent(car,1139);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
							AddVehicleComponent(car,1163);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:// Win
        	    {
					if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 401) // bravura
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 518) // buccaneer
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 527) // cadrona
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 415) // cheetah
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 546) // intruder
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 603) // phoenix
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 426) // premier
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 436) // previon
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 405) // sentinel
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 477) // stallion
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 580) // stafford
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 550) // sunrise
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 549) // tampa
						{
							AddVehicleComponent(car,1001);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 3: // Fury
        	    {
                    if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1023);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 4: // Alpha
        	    {
                    if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1003);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 5: // Pro
        	    {
                    if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 492 ||//greenwood
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // club
			        	{
							AddVehicleComponent(car,1000);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
							AddVehicleComponent(car,1000);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1000);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1000);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
				case 6: // Champ
        	    {
                    if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
							AddVehicleComponent(car,1014);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
							AddVehicleComponent(car,1014);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
							AddVehicleComponent(car,1014);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 7: // Race
        	    {
					if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542)//clover
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 527) // cadrona
						{
							AddVehicleComponent(car,1014);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 542) // clover
						{
							AddVehicleComponent(car,1014);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
				case 8: // Drag
        	    {
                	if(
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517)//majestic
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1002);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1002);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 9:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
	        	}
				case 10:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SIDESKIRTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1036);
		            	AddVehicleComponent(car,1040);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1047);
					    AddVehicleComponent(car,1051);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1069);
					    AddVehicleComponent(car,1071);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1056);
					    AddVehicleComponent(car,1062);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1026);
					    AddVehicleComponent(car,1027);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1090);
					    AddVehicleComponent(car,1094);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1039);
			            AddVehicleComponent(car,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1048);
					    AddVehicleComponent(car,1052);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1070);
					    AddVehicleComponent(car,1072);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1057);
					    AddVehicleComponent(car,1063);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1031);
					    AddVehicleComponent(car,1030);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1093);
					    AddVehicleComponent(car,1095);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
	               {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
	       		        AddVehicleComponent(car,1042);
	       		        AddVehicleComponent(car,1099);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
	   				else if(pmodelid[playerid] == 567) // Savanna
					{
					    AddVehicleComponent(car,1102);
					    AddVehicleComponent(car,1133);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1134);
					    AddVehicleComponent(car,1137);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1108);
					    AddVehicleComponent(car,1107);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	                    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1122);
			            AddVehicleComponent(car,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1106);
			            AddVehicleComponent(car,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1118);
			            AddVehicleComponent(car,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 6:
        	    {
				if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1119);
			            AddVehicleComponent(car,1121);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 7:
        	    {
					if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 527 ||
					pmodelid[playerid] == 415 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 517 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 439 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 549 ||
					pmodelid[playerid] == 477)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 401)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 518)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 527)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 415)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 589)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 546)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 517)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 603)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 436)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 439)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 580)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 549)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
						if(pmodelid[playerid] == 477)
						{
							AddVehicleComponent(car,1007);
							AddVehicleComponent(car,1017);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
						}
        	    	}
       	    		else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 8:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_BULLBARS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(pmodelid[playerid] == 534)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 534) // Remington
						{
							AddVehicleComponent(car,1100);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
						}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1: 
        	    {
					if(pmodelid[playerid] == 534)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 534) // Remington
						{
							AddVehicleComponent(car,1123);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1125);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 535)

					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 535) // Slamvan
						{
							AddVehicleComponent(car,1117);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] ou cannot install this component to your car. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_WHEELS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1025);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Offroad Wheels ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1074);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Mega Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1076);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Wires Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1078);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Twist Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1081);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Grove Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1082);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Import Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 6:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1085);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Atomic Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 7:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1096);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Ahab Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 8:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1097);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Virtual Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 9:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1098);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Access Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 10:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1084);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Trance Wheels ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 11:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1073);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Shadow Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 12:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1075);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Rimshine Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 13:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1077);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Classic Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 14:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1079);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Cutter Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 15:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1080);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Switch Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 16:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1083);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Dollar Wheels");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 17:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 18:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_CSTEREO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1086);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HYDRAULICS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1087);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_NITRO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1008);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
					}
        	    }
        	    case 1:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
					{
						new car = GetPlayerVehicleID(playerid);
						AddVehicleComponent(car,1009);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
					}
        	    }
        	    case 2:
        	    if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1010);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
        	    case 3:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
        	    case 4:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HOODS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// fury
        	    {
                	if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
							AddVehicleComponent(car,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							AddVehicleComponent(car,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // Race
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1011);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 3: // Worx
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1012);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
				case 5: // Back
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
    if(dialogid == DIALOG_TYPE_VENTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
						{
							AddVehicleComponent(car,1142);
							AddVehicleComponent(car,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
					}
				}
        	    case 1: // Square
        	    {
                	if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							AddVehicleComponent(car,1144);
							AddVehicleComponent(car,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // _
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_LIGHTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// round
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 439)//stallion
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
						{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							AddVehicleComponent(car,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
                    else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
					}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 400)//landstalker
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 589) // club
			        	{
							AddVehicleComponent(car,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							AddVehicleComponent(car,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							AddVehicleComponent(car,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
					{
						SendClientMessage(playerid,COLOR_WHITE,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // _
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""CXRP"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	switch(dialogid)
	{
		case DIALOG_CARSTORAGE:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
			}
		}
		case DIALOG_PAYCHECK:
		{
	 		if(!response) return 1;
			new
				szMessage[150];
	   		if(strlen(inputtext) < 1)
			{
	            format(szMessage, sizeof(szMessage), "You must enter the check code before signing.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Paycheck","Cancel");
				return 1;
	        }
			if(!IsNumeric(inputtext))
			{
	 			format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of numbers only.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Paycheck","Cancel");
				return 1;
			}
	        if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
			{
	           	format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of 6 digits.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Paycheck","Cancel");
				return 1;
	        }
	        new code = strval(inputtext);
        	if(code == PayCheckCode[playerid])
	        {
				SendPaycheck(playerid);
	        	PayCheckCode[playerid] = 0;
			}
			else
			{
	            SCM(playerid, COLOR_WHITE, "Wrong check code.");
	        }
		}
		case DIALOG_PAINTBALL:
		{
		    if(response)
		    {
				SavePlayerVariables(playerid);
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has entered the paintball arena.", GetRPName(playerid));
				SetPlayerInPaintball(playerid, listitem+1);
				if(listitem+1 == 2)
				{
	           		new players[50];
					format(players, sizeof(players), "%s", GetArenaPlayers(2) / 2);
					if(IsNumeric(players))
					{
					    pbNext = 1;
					}
					else
					{
					    pbNext = 0;
					}
					PlayerInfo[playerid][pPaintballTeam] = pbNext;
				}
				ClearChat(playerid);
				foreach(new i : Player)
				{
				    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
				    {
				        SM(i, COLOR_LIGHTORANGE, "(( %s has entered the paintball arena. ))", GetRPName(playerid));
						PaintballKills[playerid] = 0;
					}
			    }
		        SCM(playerid, COLOR_WHITE, "Use "RED"/exit"WHITE" to exit the paintball.");

	    		if(listitem+1 == 2)
				{
				    SCM(playerid, COLOR_WHITE, "Use "RED"/switchteam"WHITE" to switch between teams.");
				}
			}
		}
 		case DIALOG_GRAFFITICOLOR:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (IsSprayingInProgress(id))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}

			    switch (listitem)
			    {
			        case 0:
			        {
		    	        PlayerInfo[playerid][pGraffitiColor] = 0xFFFFFFFF;
					}

			        case 1:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFFFF0000;
					}

			        case 2:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFFFFFF00;
					}

			        case 3:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF33CC33;
					}

			        case 4:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF33CCFF;
					}

		    	    case 5:
		    	    {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF0080FF;
					}

		    	    case 6:
		    	    {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF1394BF;
					}
					case 7:
					{
						PlayerInfo[playerid][pGraffitiColor] = 0x000000AA;
					}
			    }
			    ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
			}
		}
		case DIALOG_GRAFFITITEXT:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
				if (strlen(inputtext) > 64)
				{
				    return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "[!] Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
		        if (IsSprayingInProgress(id))
		        {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}
		        PlayerInfo[playerid][pGraffiti] = id;
		        PlayerInfo[playerid][pGraffitiTime] = 15;

				strpack(PlayerInfo[playerid][pGraffitiText], inputtext, 64 char);
				ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);

				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);

				SendProximityMessage(playerid, 30.0, SERVER_COLOR, "**{C2A2DA} %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
		}
		case DIALOG_BIZMENU:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_BIZNAME, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new name below for your business.", "Confirm", "Return");
				}
				if(listitem == 1)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_MESSAGE, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new message below for your business.", "Confirm", "Return");
				}
				if(listitem == 2)
			    {
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),"Your business's safe currently contain:\n\t\t$%s\n\t\tProducts: %i.", number_format(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bProducts]);
    				ShowPlayerDialog(playerid,DIALOG_BIZSAFE,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Deposit","Withdraw");
				}
				if(listitem == 3)
	   		   	{
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),""WHITE"Are you sure you want to "CXRP"%s "WHITE"your business?", RBS(businessid));
    				ShowPlayerDialog(playerid,DIALOG_BIZLOCK,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Unlock","Lock");
				}
			}
		}
        case DIALOG_BIZNAME:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];
			if(strlen(inputtext) < 3)
			{
				SCM(playerid, COLOR_RED, "Business name changing declined, the name needs to be more than 3 characters");
			}
			else
			{
				format(BusinessInfo[businessid][bName], 64, inputtext);
				format(string28,sizeof(string28), "You have set your business name to %s.", inputtext);
				SCM(playerid, COLOR_AQUA, string28);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET name = \"%s\" WHERE id = %i", BusinessInfo[businessid][bName], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
        case DIALOG_BIZSAFE:
        {
            if(!response)
            {
                if(!response)
                {
                    new businessid = GetNearbyBusinessEx(playerid);
                    new string[128];
                    format(string, sizeof(string),""WHITE"Enter the amount of money you want to withdraw your business vault.\n\t\t\t"CXRP"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
			    	ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
			    }
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    new string[128];
			    format(string, sizeof(string),""WHITE"Enter the amount of money you want to deposit your business vault.\n\t\t\t"CXRP"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
		    	ShowPlayerDialog(playerid,DIALOG_DEPOSIT,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
		    }
		}
		case DIALOG_WITHDRAW:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"CXRP"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
    		else
    		{
	            new string28[128];
	    		new money = strval(inputtext);
	   			if(money > BusinessInfo[businessid][bCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money in your business vault.");
	    		BusinessInfo[businessid][bCash] -= money;
	    		GivePlayerCash(playerid, money);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "**{C2A2DA} %s has withdrawn money from their business vault.", GetRPName(playerid));
				format(string28, sizeof(string28), " You have withdrawn $%s from your business vault, There is now $%s remaining", number_format(money), number_format(BusinessInfo[businessid][bCash]));
				SCM(playerid, COLOR_AQUA, string28);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
        case DIALOG_DEPOSIT:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"CXRP"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > PlayerInfo[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money on you.");
    		BusinessInfo[businessid][bCash] += money;
    		GivePlayerCash(playerid, -money);

			format(string28, sizeof(string28), " You have deposit $%s from your business vault, There is now $%s available", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_MESSAGE:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bMessage], 128, inputtext);
			format(string28,sizeof(string28), "You have set your business message to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET message = \"%s\" WHERE id = %i", BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
		case DIALOG_BIZLOCK:
		{
		    if(!response)
	    	{
	    	    new businessid = GetNearbyBusinessEx(playerid);

                if(!BusinessInfo[businessid][bLocked])
				{
    				BusinessInfo[businessid][bLocked] = 1;
    				GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));

			    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
				}
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    BusinessInfo[businessid][bLocked] = 0;
			    GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
		case DIALOG_DGUN1:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetScriptArmour(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a Kevlar Vest for free!.");
					}
					case 1:
					{
						SetPlayerHealth(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a First Aid Kit for free!.");
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 2500)
						{
							GiveWeapon(playerid, 23);
							GivePlayerCash(playerid, -2500);
							Dyuze(playerid, "Transaction", "You have bought a Silenced Pistol for $2,500 Cash.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough cash.");
					}
					case 3:
					{
						if(PlayerInfo[playerid][pMaterials] >= 480)
						{
							GiveWeapon(playerid, 25);
							PlayerInfo[playerid][pMaterials] -= 480;
							Dyuze(playerid, "Transaction", "You have bought a Shotgun for 480 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 4:
					{
						if(PlayerInfo[playerid][pMaterials] >= 800)
						{
							GiveWeapon(playerid, 28);
							PlayerInfo[playerid][pMaterials] -= 800;
							Dyuze(playerid, "Transaction", "You have bought a UZI for 800 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
				}
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	
		case DIALOG_DGUN2: 
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetScriptArmour(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a Kevlar Vest for free!.");
					}
					case 1:
					{
						SetPlayerHealth(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a First Aid Kit for free!.");
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 2350)
						{
							GiveWeapon(playerid, 23);
							GivePlayerCash(playerid, -2350);
							Dyuze(playerid, "Transaction", "You have bought a Silenced Pistol for $2,350 Cash.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough cash.");
					}
					case 3:
					{
						if(PlayerInfo[playerid][pMaterials] >= 450)
						{
							GiveWeapon(playerid, 25);
							PlayerInfo[playerid][pMaterials] -= 450;
							Dyuze(playerid, "Transaction", "You have bought a Shotgun for 450 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 4:
					{
						if(PlayerInfo[playerid][pMaterials] >= 750)
						{
							GiveWeapon(playerid, 28);
							PlayerInfo[playerid][pMaterials] -= 750;
							Dyuze(playerid, "Transaction", "You have bought a UZI for 750 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 5:
					{
						if(PlayerInfo[playerid][pMaterials] >= 900)
						{
							GiveWeapon(playerid, 29);
							PlayerInfo[playerid][pMaterials] -= 900;
							Dyuze(playerid, "Transaction", "You have bought a Mp5 for 900 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
				}
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_DGUN3:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetScriptArmour(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a Kevlar Vest for free!.");
					}
					case 1:
					{
						SetPlayerHealth(playerid, 100.0);
						Dyuze(playerid, "Transaction", "You have bought a First Aid Kit for free!.");
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 2100)
						{
							GiveWeapon(playerid, 23);
							GivePlayerCash(playerid, -2100);
							Dyuze(playerid, "Transaction", "You have bought a Silenced Pistol for $2,100 Cash.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough cash.");
					}
					case 3:
					{
						if(PlayerInfo[playerid][pMaterials] >= 420)
						{
							GiveWeapon(playerid, 25);
							PlayerInfo[playerid][pMaterials] -= 420;
							Dyuze(playerid, "Transaction", "You have bought a Shotgun for 420 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 4:
					{
						if(PlayerInfo[playerid][pMaterials] >= 700)
						{
							GiveWeapon(playerid, 28);
							PlayerInfo[playerid][pMaterials] -= 700;
							Dyuze(playerid, "Transaction", "You have bought a UZI for 700.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 5:
					{
						if(PlayerInfo[playerid][pMaterials] >= 840)
						{
							GiveWeapon(playerid, 29);
							PlayerInfo[playerid][pMaterials] -= 840;
							Dyuze(playerid, "Transaction", "You have bought a Mp5 for 840 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 6:
					{
						if(PlayerInfo[playerid][pMaterials] >= 700)
						{
							GiveWeapon(playerid, 32);
							PlayerInfo[playerid][pMaterials] -= 700;
							Dyuze(playerid, "Transaction", "You have bought a Tec-9 for 700 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 7:
					{
						if(PlayerInfo[playerid][pMaterials] >= 1400)
						{
							GiveWeapon(playerid, 24);
							PlayerInfo[playerid][pMaterials] -= 1400;
							Dyuze(playerid, "Transaction", "You have bought a Deagle for 1,400 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
					case 8:
					{
						if(PlayerInfo[playerid][pMaterials] >= 560)
						{
							GiveWeapon(playerid, 33);
							PlayerInfo[playerid][pMaterials] -= 560;
							Dyuze(playerid, "Transaction", "You have bought a County Rifle for 560 Materials.");
						}
						else
							return SCM(playerid, COLOR_GREY, "You don't have enough materials.");
					}
				}
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_LGUN1:
		{
			if(response)
			{
				new ques[512], rand=Random(1,4);
				switch(rand)
				{
					case 1:
					{
						strcat(ques, ""WHITE"1. You can use only Ammu-Nation guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"2. You can use any guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"3. You can only use 9mm legally without Gun License.\n");	
						strcat(ques, ""WHITE"4. You can't use any guns legally without Gun License.");	
						SetPVarInt(playerid, "GunLic", 1);
					}
					case 2:
					{
						strcat(ques, ""WHITE"1. You can use any guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"2. You can use only Ammu-Nation guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"3. You can only use 9mm legally without Gun License.\n");	
						strcat(ques, ""WHITE"4. You can't use any guns legally without Gun License.");	
						SetPVarInt(playerid, "GunLic", 2);
					}
					case 3:
					{
						strcat(ques, ""WHITE"1. You can use any guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"2. You can only use 9mm legally without Gun License.\n");	
						strcat(ques, ""WHITE"3. You can use only Ammu-Nation guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"4. You can't use any guns legally without Gun License.");	
						SetPVarInt(playerid, "GunLic", 3);
					}
					case 4:
					{
						strcat(ques, ""WHITE"1. You can use any guns legally without Gun License.\n");	
						strcat(ques, ""WHITE"2. You can only use 9mm legally without Gun License.\n");	
						strcat(ques, ""WHITE"3. You can't use any guns legally without Gun License.");	
						strcat(ques, ""WHITE"4. You can use only Ammu-Nation guns legally without Gun License.\n");	
						SetPVarInt(playerid, "GunLic", 4);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_LGUN2, DIALOG_STYLE_LIST, "Question 1:", ques, "Next", "Cancel");
			}
			else
			{
				return SCM(playerid, COLOR_SYNTAX, "You've cancelled buying Gun License");
			}
		}
		case DIALOG_LGUN2:
		{
			if(response)
			{
				if(listitem == (GetPVarInt(playerid, "GunLic")-1))
				{
					new ques[512], rand=Random(1,4);
					switch(rand)
					{
						case 1:
						{
							strcat(ques, ""WHITE"1. Police can arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"2. Police can't arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"3. Police can only fine, can't arrest.\n");	
							strcat(ques, ""WHITE"4. Police will shake hands with you and help you to kill someone.");	
							SetPVarInt(playerid, "GunLic", 1);
						}
						case 2:
						{
							strcat(ques, ""WHITE"1. Police can't arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"2. Police can arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"3. Police can only fine, can't arrest.\n");	
							strcat(ques, ""WHITE"4. Police will shake hands with you and help you to kill someone.");	
							SetPVarInt(playerid, "GunLic", 2);
						}
						case 3:
						{
							strcat(ques, ""WHITE"1. Police can't arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"2. Police can only fine, can't arrest.\n");	
							strcat(ques, ""WHITE"3. Police can arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"4. Police will shake hands with you and help you to kill someone.");	
							SetPVarInt(playerid, "GunLic", 3);
						}
						case 4:
						{
							strcat(ques, ""WHITE"1. Police can't arrest you if you kill or try to kill someone.\n");	
							strcat(ques, ""WHITE"2. Police can only fine, can't arrest.\n");	
							strcat(ques, ""WHITE"3. Police will shake hands with you and help you to kill someone.");	
							strcat(ques, ""WHITE"4. Police can arrest you if you kill or try to kill someone.\n");	
							SetPVarInt(playerid, "GunLic", 4);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_LGUN3, DIALOG_STYLE_LIST, "Question 2:", ques, "Next", "Cancel");
				}
				else
				{
					return SCM(playerid, COLOR_WHITE, "You did not answer the Question 1 correctly!");
				}
			}
			else
			{
				return SCM(playerid, COLOR_SYNTAX, "You've cancelled buying Gun License");
			}
		}
		case DIALOG_LGUN3:
		{
			if(response)
			{
				if(listitem == (GetPVarInt(playerid, "GunLic")-1))
				{
					new ques[512], rand=Random(1,4);
					switch(rand)
					{
						case 1:
						{
							strcat(ques, ""WHITE"1. You can legally hold Arms Dealer level 1-3 guns with Gun License.\n");	
							strcat(ques, ""WHITE"2. You can legally hold Arms Dealer level 2 guns with Gun License\n");	
							strcat(ques, ""WHITE"3. You can legally hold Arms Dealer level 1-4 guns with Gun License.\n");	
							strcat(ques, ""WHITE"4. You can legally hold Arms Dealer level 1-2 guns with Gun License.");	
							SetPVarInt(playerid, "GunLic", 1);
						}
						case 2:
						{
							strcat(ques, ""WHITE"1. You can legally hold Arms Dealer level 2 guns with Gun License\n");	
							strcat(ques, ""WHITE"2. You can legally hold Arms Dealer level 1-3 guns with Gun License.\n");	
							strcat(ques, ""WHITE"3. You can legally hold Arms Dealer level 1-4 guns with Gun License.\n");	
							strcat(ques, ""WHITE"4. You can legally hold Arms Dealer level 1-2 guns with Gun License.");	
							SetPVarInt(playerid, "GunLic", 2);
						}
						case 3:
						{
							strcat(ques, ""WHITE"1. You can legally hold Arms Dealer level 2 guns with Gun License\n");	
							strcat(ques, ""WHITE"2. You can legally hold Arms Dealer level 1-4 guns with Gun License.\n");	
							strcat(ques, ""WHITE"3. You can legally hold Arms Dealer level 1-3 guns with Gun License.\n");	
							strcat(ques, ""WHITE"4. You can legally hold Arms Dealer level 1-2 guns with Gun License.");	
							SetPVarInt(playerid, "GunLic", 3);
						}
						case 4:
						{
							strcat(ques, ""WHITE"1. You can legally hold Arms Dealer level 2 guns with Gun License\n");	
							strcat(ques, ""WHITE"2. You can legally hold Arms Dealer level 1-4 guns with Gun License.\n");	
							strcat(ques, ""WHITE"3. You can legally hold Arms Dealer level 1-2 guns with Gun License.");	
							strcat(ques, ""WHITE"4. You can legally hold Arms Dealer level 1-3 guns with Gun License.\n");	
							SetPVarInt(playerid, "GunLic", 4);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_LGUN4, DIALOG_STYLE_LIST, "Question 3:", ques, "Next", "Cancel");
				}
				else
				{
					return SCM(playerid, COLOR_WHITE, "You did not answer the Question 2 correctly!");
				}
			}
			else
			{
				return SCM(playerid, COLOR_SYNTAX, "You've cancelled buying Gun License");
			}
		}
		case DIALOG_LGUN4:
		{
			if(response)
			{
				if(listitem == (GetPVarInt(playerid, "GunLic")-1))
				{
					new ques[512], rand=Random(1,4);
					switch(rand)
					{
						case 1:
						{
							strcat(ques, ""WHITE"1. OOC: You will be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"2. OOC: You won't be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"3. OOC: You will be fined if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"4. OOC: You will be warned if you shoot randomly in public.\n");	
							SetPVarInt(playerid, "GunLic", 1);
						}
						case 2:
						{
							strcat(ques, ""WHITE"1. OOC: You won't be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"2. OOC: You will be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"3. OOC: You will be fined if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"4. OOC: You will be warned if you shoot randomly in public.\n");	
							SetPVarInt(playerid, "GunLic", 2);
						}
						case 3:
						{
							strcat(ques, ""WHITE"1. OOC: You won't be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"2. OOC: You will be fined if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"3. OOC: You will be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"4. OOC: You will be warned if you shoot randomly in public.\n");	
							SetPVarInt(playerid, "GunLic", 3);
						}
						case 4:
						{
							strcat(ques, ""WHITE"1. OOC: You won't be prisoned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"2. OOC: You will be fined if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"3. OOC: You will be warned if you shoot randomly in public.\n");	
							strcat(ques, ""WHITE"4. OOC: You will be prisoned if you shoot randomly in public.\n");	
							SetPVarInt(playerid, "GunLic", 4);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_LGUN5, DIALOG_STYLE_LIST, "Question 4:", ques, "Next", "Cancel");
				}
				else
				{
					return SCM(playerid, COLOR_WHITE, "You did not answer the Question 3 correctly!");
				}
			}
			else
			{
				return SCM(playerid, COLOR_SYNTAX, "You've cancelled buying Gun License");
			}
		}
		case DIALOG_LGUN5:
		{
			if(response)
			{
				if(listitem == (GetPVarInt(playerid, "GunLic")-1))
				{
					new string[512];
					strcat(string, ""GREEN"Congratulations! You haave answered every single question correctly\n");	
					strcat(string, ""GREEN"and you have been given a Gun License!\n\n");	
					strcat(string, ""WHITE"Please keep in mind all the question's answer and all the Gun Rules. (( IC & OOC ))\n");	
					strcat(string, ""WHITE"If you lost or police takes away your Gun License, you can get one from here again!\n\n");
					strcat(string, ""WHITE"Have a nice day there!");
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Bangladesh Legal Gun License Station", string, "Cool!", "");
					DeletePVar(playerid, "GunLic");
					GivePlayerCash(playerid, -8500);
					PlayerInfo[playerid][pWeaponLicense] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[playerid][pWeaponLicense], PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
					return SCM(playerid, COLOR_WHITE, "You did not answer the Question 4 correctly!");
				}
			}
			else
			{
				return SCM(playerid, COLOR_SYNTAX, "You've cancelled buying Gun License");
			}
		}
		case PHONE_CALL:
		{
			if(response)
			{
				new number, final[128];
	            if(sscanf(inputtext, "i", number))
	            {
					ShowPlayerDialog(playerid, PHONE_CALL, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Phone Call", "Please enter the number of the person you want to call:", "Call", "Cancel");
					return 1;
	            }
				HidePhone(playerid);
				ShowingPhone[playerid] = false;
				format(final, sizeof(final), "%i", number);
				callcmd::call(playerid, final);
			}
		}
		case PHONE_SMS:
		{
			if(response)
			{
				new number;
	            if(sscanf(inputtext, "i", number))
	            {
					ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Text Messaging", "Please enter the number of the person you want to send the SMS:", "Next", "Cancel");
					return 1;
	            }
				PlayerInfo[playerid][pSelected] = number;
				ShowPlayerDialog(playerid, PHONE_SMS2, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Text Messaging", "Please enter the message you want to send:", "Send", "Cancel");
			}
		}
		case PHONE_SMS2:
		{
			if(response)
			{
				new msg[128], final[256];
	            if(sscanf(inputtext, "s[128]", msg))
	            {
					ShowPlayerDialog(playerid, PHONE_SMS2, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Text Messaging", "Please enter the message you want to send:", "Send", "Cancel");
					return 1;
	            }
	            if(strlen(msg) > 128)
	            {
					SCM(playerid, COLOR_WHITE, "Your message can't be over 128 characters!");
					ShowPlayerDialog(playerid, PHONE_SMS2, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Text Messaging", "Please enter the message you want to send:", "Send", "Cancel");
					return 1;
	            }
				HidePhone(playerid);
				ShowingPhone[playerid] = false;				
				format(final, sizeof(final), "%i %s", PlayerInfo[playerid][pSelected], msg);
				callcmd::sms(playerid, final);
				PlayerInfo[playerid][pSelected] = -1;
			}
		}
		case PHONE_911:
		{
			if(response)
			{
				new option[8];
	            if(sscanf(inputtext, "s[8]", option))
	            {
					ShowPlayerDialog(playerid, PHONE_911, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "Hello this is 911 Emergecy! What emergency service do you require?\n\n(( Type \"police\" or \"medic\" )):", "Next", "Cancel");
					return 1;
	            }
				if(!strcmp(option, "police", true))
	            {
					PlayerInfo[playerid][pSelected] = 912;
					ShowPlayerDialog(playerid, PHONE_9112, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "This is the San Fierro Police Department. What is your emergency?", "Next", "Cancel");
					return 1;
	            }
				else if(!strcmp(option, "medic", true))
	            {
					PlayerInfo[playerid][pSelected] = 913;
					ShowPlayerDialog(playerid, PHONE_9112, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "This is the San Fierro Fire & Medical Department. What is your emergency?", "Next", "Cancel");
					return 1;
	            }
				else
				{
					ShowPlayerDialog(playerid, PHONE_911, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "Hello this is 911 Emergecy! What emergency service do you require?\n\n(( Type \"police\" or \"medic\" )):", "Next", "Cancel");
				}
			}
		}
		case PHONE_9112:
		{
			if(response)
			{
				if(strlen(inputtext) > 128)
				{
					SCM(playerid, COLOR_SYNTAX, "Your message can't be over 128 characters!");
					if(PlayerInfo[playerid][pSelected] == 912)
						ShowPlayerDialog(playerid, PHONE_9112, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "This is the San Fierro Police Department. What is your emergency?", "Next", "Cancel");
					else
						ShowPlayerDialog(playerid, PHONE_9112, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - 911 Emergency", "This is the San Fierro Fire & Medical Department. What is your emergency?", "Next", "Cancel");
					return 1;
				}
				HidePhone(playerid);
				ShowingPhone[playerid] = false;				
			    PlayerInfo[playerid][pCallLine] = playerid;
				PlayerInfo[playerid][pCallStage] = PlayerInfo[playerid][pSelected];
				PlayerInfo[playerid][pSelected] = -1;
				switch(PlayerInfo[playerid][pCallStage])
				{
					case 912:
					{
					    foreach(new i : Player)
					    {
					        if(IsLawEnforcement(i))
					        {
					            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
					            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
								if(GetPlayerInterior(playerid) > 0)
								{
									SCM(i, COLOR_GREY2, "Location: Interior");
								}
								else
								{
									SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
								}
								SM(i, COLOR_GREY2, "Emergency: %s", inputtext);
					            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
					        }
					    }

						strcpy(PlayerInfo[playerid][pEmergency], inputtext, 128);

	                    PlayerInfo[playerid][pEmergencyCall] = 120;
	                    PlayerInfo[playerid][pEmergencyType] = FACTION_POLICE;
	                    PlayerInfo[playerid][pEmergencyType] = FACTION_FEDERAL;
	                    PlayerInfo[playerid][pEmergencyType] = FACTION_ARMY;

					    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
					    HangupCall(playerid, HANGUP_USER);
					}
					case 913:
					{
					    foreach(new i : Player)
					    {
					        if(GetFactionType(i) == FACTION_MEDIC)
					        {
					            SM(i, COLOR_DOCTOR, "Emergency Hotline:");
					            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
								if(GetPlayerInterior(playerid) > 0)
								{
									SCM(i, COLOR_GREY2, "Location: Interior");
								}
								else
								{
									SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
								}
					            SM(i, COLOR_GREY2, "Emergency: %s", inputtext);
					            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
					        }
					    }

					    strcpy(PlayerInfo[playerid][pEmergency], inputtext, 128);

					    PlayerInfo[playerid][pEmergencyCall] = 120;
					    PlayerInfo[playerid][pEmergencyType] = FACTION_MEDIC;

					    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
					    HangupCall(playerid, HANGUP_USER);
					}
				}
			}
		}
		case PHONE_PING:
		{
			if(response)
			{
				new targetid, string[256];
	            if(sscanf(inputtext, "u", targetid))
	            {
					ShowPlayerDialog(playerid, PHONE_PING, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Location Pinging", "Please enter the ID or the name of the person you want to ping your location to", "Ping", "Cancel");
					return 1;
	            }
				if(!IsPlayerConnected(targetid))
				{
					return SCM(playerid, COLOR_SYNTAX, "The specific player is not online!");					
				}
				if(targetid == playerid) return SCM(playerid, COLOR_SYNTAX, "You can't ping location to you");
				format(string, sizeof(string), "Are you sure you want to ping your location to\n\n%sName: {FFFFFF}%s\n%sID: {FFFFFF}%i\n%sLevel: {FFFFFF}%i", ORANGE, GetRPName(targetid), ORANGE, targetid, ORANGE, PlayerInfo[targetid][pLevel]);
				ShowPlayerDialog(playerid, PHONE_PING2, DIALOG_STYLE_MSGBOX, "{FFA500}yPhone{FFFFFF} - Location Pinging Confirmation", string, "Yes", "No");
				PlayerInfo[playerid][pSelected] = targetid;
			}
		}
		case PHONE_PING2:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, PHONE_PING, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Location Pinging", "Please enter the ID or the name of the person you want to ping your location to", "Ping", "Cancel");
			}
			else
			{
				HidePhone(playerid);
				ShowingPhone[playerid] = false;
				PingLoc(playerid, PlayerInfo[playerid][pSelected]);
				PlayerInfo[playerid][pSelected] = -1;
			}
		}
		case PHONE_REPORT:
		{
			if(response)
			{
				new text[128];
	            if(sscanf(inputtext, "s[128]", text))
	            {
					ShowPlayerDialog(playerid, PHONE_REPORT, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Report System", "Please tell us detailed on what you want to report:", "Reort", "Cancel");
					return 1;
	            }
				if(strlen(text) > 128)
				{
					return SCM(playerid, COLOR_SYNTAX, "Your report message can't be over 128 characters!");
				}
				HidePhone(playerid);
				ShowingPhone[playerid] = false;
				callcmd::report(playerid, text);
			}
		}
		case PHONE_RDM:
		{
			if(response)
			{
				new targetid, final[128];
	            if(sscanf(inputtext, "u", targetid))
	            {
					ShowPlayerDialog(playerid, PHONE_RDM, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - Report System", "Please tell us detailed on what you want to report:", "Reort", "Cancel");
					return 1;
	            }
				if(!IsPlayerSpawned(targetid) || !IsPlayerConnected(targetid))
				{
					return SCM(playerid, COLOR_SYNTAX, "Specific player is not online or hasn't spawned yet!");
				}
				HidePhone(playerid);
				ShowingPhone[playerid] = false;
				format(final, sizeof(final), "%i", targetid);
				callcmd::rdm(playerid, final);
			}
		}
		case PHONE_CHAT:
		{
			if(response)
			{
				new text[800], newtext[800+MAX_PLAYER_NAME];
	            if(sscanf(inputtext, "s[800]", text))
	            {
					ShowPlayerDialog(playerid, PHONE_CHAT, DIALOG_STYLE_INPUT, "{FFA500}yPhone{FFFFFF} - yChat Communication", "Type the message you wanna send!", "Send", "Cancel");
					return 1;
	            }
				if(strlen(text) > 800)
				{
					return SCM(playerid, COLOR_SYNTAX, "Your message can't be over 800 characters!");
				}
				HidePhone(playerid);
				ShowingPhone[playerid] = false;

				format(newtext, sizeof(newtext), "~y~- %s~w~: %s", GetRPName(playerid), text);

				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && !PlayerInfo[i][pToggleChat])
					{
						if(!ShowTDN(i, newtext))
						{
							return SCM(playerid, COLOR_SYNTAX, "yChat is currently full. Please wait for a message to disappear.");
						}
					}
				}
				PlayerInfo[playerid][pLastChat] = gettime();
				#if defined DISCORD
					DCC_SendText(-1, playerid, newtext, "1143417985843875890", INVALID_PLAYER_ID, -1);
				#endif
			}
		}
 		case DIALOG_CREATEQUIZ:
		{
			if(response) {
				if(CreateQuiz == 0)
				{
				    strcpy(quizQuestion, inputtext);
				    CreateQuiz = 1;
	                ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
				}
				else if(CreateQuiz == 1)
				{
				    strcpy(quizAnswer, inputtext);
	                CreateQuiz = -1;
	                SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a quiz.", GetRPName(playerid));
	                SMA(COLOR_LIGHTRED, "Quiz: %s Type (/answer) to answer", quizQuestion);
				}
			}
			else CreateQuiz = -1;
		}
		case DIALOG_NEWBWELCOME:
		{
		    if(response)
		    {
		        new count;
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pHelper] > 0)
					{
					    count++;
					}
				}
				if(count > 0)
				{
		        	new string[30];
		        	format(string, sizeof(string), "Show me around San Fierro, I am new here.");
					strcpy(PlayerInfo[playerid][pHelpRequest], string, 128);
					SendHelperMessage(COLOR_AQUA, "** Help Request: New Player %s (ID:%d) is requesting a helper to show them around. **", GetRPName(playerid), playerid);

					PlayerInfo[playerid][pLastRequest] = gettime();
					SCM(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "No Helpers Online", ""WHITE"Unfortunately there are no members of the helper team online.\nYou can also try /(n)ewbie, This is where most of the community can help you with simple questions such as 'Where is the Bank'.\nYou can also checkout "SERVER_URL" for beginner tutorials.", "Cancel", "");
				}
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Oh, since you don't want a tour. Make sure you use /gethelp or /newb to ask any question at any time!");
			}
		}
		case DIALOG_POINTLIST:
		{
		    if(response)
		    {
		        if(strlen(psstring) > 5)
		        {
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, ""CXRP"Point List"GREY" - "REVISION"", psstring, "", "Cancel");
				}
			}
		}
		case DIALOG_TURFLIST:
		{
		    if(response)
		    {
		        if(strlen(tsstring) > 5)
		        {
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, ""CXRP"Turf List"GREY" - "REVISION"", tsstring, "", "Cancel");
				}
			}
		}
    	case DIALOG_RULES:
		{
  			if(response)
      		{
      		    new sstring[2048];
				switch(listitem)
				{
				    case 0: // SERVER
				    {
				        format(sstring, sizeof(sstring), ""CXRP"- First of all, always roleplay. Your character's behavior needs to be as realistic, and close to real life as possible! -\n");
						strcat(sstring, ""WHITE"1. "CXRP"Metagaming (MG): Don't mix in-character (IC) and out-of-character (OOC) chat/information. IC chat is the default chat, OOC is used by typing /b\n");
						strcat(sstring, ""WHITE"2. "CXRP"Killing on sight (KOS): Killing a player on sight without a word or any attempt to roleplay is not allowed and is prisonable.\n");
						strcat(sstring, ""WHITE"3. "CXRP"Revenge killing (RK): If a player has critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes.\n");
						strcat(sstring, ""WHITE"4. "CXRP"Powergaming (PG): Impossible roleplay - Anything that cannot be done in real life is forbidden.\n");
						strcat(sstring, ""WHITE"5. "CXRP"Non RP Car Ramming: (NRCR): Repeatedly ramming others without an IC reason.\n");
						strcat(sstring, ""WHITE"6. "CXRP"Logging To Avoid (LTA): Never log out or tab out of the game to avoid death, arrest or prison.\n");
						strcat(sstring, ""WHITE"Note: "CXRP"This is a short version of our server rules. Please visit our website to see the full list of the server rules.");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Server Rules", sstring, "Ok","");
				    }
				    case 1: // TRAFFIC
				    {
				        format(sstring, sizeof(sstring), ""WHITE"1. "CXRP"Drive on the right side of the road at all times or else you will be punished.\n");
				        strcat(sstring, ""WHITE"2. "CXRP"Yield to emergency vehicles.\n");
				        strcat(sstring, ""WHITE"3. "CXRP"Move over and slow down for stopped emergency vehicles.\n");
				        strcat(sstring, ""WHITE"4. "CXRP"Turn your headlights on at night. Use (/lights) to turn it on.\n");
				        strcat(sstring, ""WHITE"5. "CXRP"Wear your seatbelt or helmet at all times while driving. Use (/seatbelt) to wear it.\n");
				        strcat(sstring, ""WHITE"6. "CXRP"Traffic lights are synced. Red is for Stop, Yellow is for Slow down and Green is for Go.\n");
				        strcat(sstring, ""WHITE"7. "CXRP"Only follow traffic lights above a junction. (Marked with a solid white line).\n");
				        strcat(sstring, ""WHITE"8. "CXRP"Remain at a safe distance from other vehicles when driving, at least 3 car lengths.\n");
				        strcat(sstring, ""WHITE"9. "CXRP"Pedestrians always have the right of way, regardless of the situation.\n");
				        strcat(sstring, ""WHITE"10. "CXRP"Drive how you would in real life, dont be a moron.\n");
				    	ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Traffic Rules", sstring, "Ok","");
				    }
				    case 2: // SPEED
				    {
				        format(sstring, sizeof(sstring), ""CXRP"- This server has limitations. -\n");
				        strcat(sstring, ""WHITE"1. "CXRP"50 MPH if you are in the City.\n");
				        strcat(sstring, ""WHITE"2. "CXRP"70 MPH on the County roads.\n");
				        strcat(sstring, ""WHITE"3. "CXRP"90 MPH on the Highways and Interstates.\n");
				        strcat(sstring, ""WHITE"4. "CXRP"Box trucks cannot exceed 50 MPH.\n");
				        strcat(sstring, ""WHITE"5. "CXRP"Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Speed Rules", sstring, "Ok","");
				    }
				}
      		}
		}
		case DIALOG_REMOVEPVEH:
		{
      		if(response)
		    {
		        new targetid = PlayerInfo[playerid][pRemoveFrom];

				if(targetid == INVALID_PLAYER_ID)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "The player has disconnected. You can't remove their vehicles now.");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[targetid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveVehicle", "ii", playerid, targetid);
		    }
		}
		case DIALOG_LOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // JOBS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATE_JOB, DIALOG_STYLE_LIST, "Select Job", "Pizza Man\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nMeat Packager\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nPurity Delivery Service", "Locate", "Close");
				    }
				    case 1: // STORES
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATE_BIZ, DIALOG_STYLE_LIST, "Select Business", "24/7\nAmmunation\nClothing Store\nGymnasium\nRestaurant\nAdvertisement Store\nClub", "Locate", "Close");
				    }
				    case 2: // GENERAL LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATE_GEN, DIALOG_STYLE_LIST, "Select Location", "Mall\nDMV\nBank\nCasino\nCar Dealership\nPawnshop\nPaintball\nVIP Lounge\nCityHall\nPolice Dept.\nHospital\nMaterial Pickup 1\nMaterial Factory 1\nMaterial Pickup 2\nMaterial Factory 2\nMechanic Station", "Locate", "Close");
				    }
					case 3: // Find Points
					{
					    new string[34 * MAX_POINTS];
					    for(new x = 0; x < MAX_POINTS; x++)
						{
						    if(PointInfo[x][pExists]) {
					    		strcat(string, PointInfo[x][pName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATE_POINTS, DIALOG_STYLE_LIST, "Select Point", string, "Locate", "Close");
						} else {
          					SCM(playerid, COLOR_WHITE, "Unable to locate any new locations.");
						}
					}
					case 4: // Find Turfs
					{
					    new string[34 * MAX_TURFS];
					    for(new x = 0; x < MAX_TURFS; x++)
						{
						    if(TurfInfo[x][tExists]) {
					    		strcat(string, TurfInfo[x][tName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATE_TURFS, DIALOG_STYLE_LIST, "Select Turf", string, "Locate", "Close");
						} else {
						    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
						}
					}
					case 5: // WASH MONEY LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATE_WASH, DIALOG_STYLE_LIST, "Select Wash Money", "Graveyard", "Locate", "Close");
				    }
				    case 6: // STATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATE_STATION, DIALOG_STYLE_LIST, "Select Station", "Self Repair\nFuel Pump\nEDM Voucher Redeen Station", "Locate", "Close");
				    }
				}
      		}
		}
		case DIALOG_LOCATE_JOB:
		{
			if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"yfood");
					case 1:
					    LocateMethod(playerid,"trucker");
	                case 2:
						LocateMethod(playerid,"fisherman");
	   				case 3:
						LocateMethod(playerid,"nodyguard");
	                case 4:
						LocateMethod(playerid,"armsdealer");
	                case 5:
						LocateMethod(playerid,"miner");
					case 6:
						LocateMethod(playerid,"meatpackager");
	                case 7:
						LocateMethod(playerid,"taxidriver");
	                case 8:
						LocateMethod(playerid,"drugdealer");
	                case 9:
						LocateMethod(playerid,"lawyer");
	                case 10:
						LocateMethod(playerid,"detective");
					case 11:
						LocateMethod(playerid,"purity");
				}
			}
		}
		case DIALOG_LOCATE_BIZ:
		{
		    if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"supermarket");
				    case 1:
				        LocateMethod(playerid,"gunShop");
				    case 2:
				        LocateMethod(playerid,"clothesshop");
				    case 3:
				        LocateMethod(playerid,"gym");
				    case 4:
				        LocateMethod(playerid,"restaurant");
				    case 5:
				        LocateMethod(playerid,"adagency");
				    case 6:
				        LocateMethod(playerid,"club");
				}
			}
		}
		case DIALOG_LOCATE_GEN:
		{
		    if(response)
			{
			    switch(listitem)
			    {
					case 0:
						LocateMethod(playerid, "mall");
                    case 1:
						LocateMethod(playerid,"dmv");
                    case 2:
						LocateMethod(playerid,"bank");
                	case 3:
						LocateMethod(playerid,"casino");
                	case 4:
						LocateMethod(playerid,"dealership");
					case 5:
					    LocateMethod(playerid,"pawnshop");
	    			case 6:
					    LocateMethod(playerid,"paintball");
	    			case 7:
					    LocateMethod(playerid,"vip");
                    case 8:
					    LocateMethod(playerid,"cityhall");
				    case 9:
				        LocateMethod(playerid,"pdhq");
				    case 10:
				        LocateMethod(playerid,"hospital");
				    case 11:
				        LocateMethod(playerid,"matpickup1");
				    case 12:
				        LocateMethod(playerid,"matfactory1");
				    case 13:
				        LocateMethod(playerid,"matpickup2");
				    case 14:
				        LocateMethod(playerid,"matfactory2");
					case 15:
						LocateMethod(playerid,"mechanic");
				}
			}
		}
		case DIALOG_LOCATE_WASH:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			            LocateMethod(playerid,"grave");
				}
			}
		}
		case DIALOG_LOCATE_SIDEJOB:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			            LocateMethod(playerid,"meatchopper");
					case 1:
					    LocateMethod(playerid,"lumberjack");
					case 2:
					    LocateMethod(playerid,"harvester");
				}
			}
		}
		case DIALOG_LOCATE_STATION:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			            LocateMethod(playerid,"selfrepair");
					case 1:
					    LocateMethod(playerid,"fuel");
					case 2:
					    LocateMethod(playerid,"redeem");
				}
			}
		}
		case DIALOG_LOCATE_TURFS:
		{
			if(response)
			{
				new Float:x, Float:y, Float:z, turfid = listitem+1;
				if(TurfInfo[turfid][tTime] == 0)
				{
					GetDynamicObjectPos(tFlag[turfid][1], x, y, z);
				}
				else
				{
					CreateFlag(turfid, playerid);
					GetDynamicObjectPos(tFlag[turfid][1], x, y, z);
					DestroyDynamicObject(tFlag[turfid][1]);
				}
				SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s%s.", CXRP, TurfInfo[turfid][tName]);
				PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_LOCATE_POINTS:
		{
		    if(response)
			{
			    if(PointInfo[listitem][pExists])
			    {
	                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
				    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
				    SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", PointInfo[listitem][pName]);
			    }
			 }
		}
	    case DIALOG_REGISTER:
    	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "** Please choose a password containing at least 4 characters.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(PlayerInfo[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""CXRP"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
			}
			else
			{
			    KickPlayer(playerid);
			}
		}
		case DIALOG_PASS:
		{
			if(response)
			{
				if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "** Please choose a password containing at least 4 characters.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(PlayerInfo[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""CXRP"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
			}
		}
		case DIALOG_CONFIRMPASS:
		{
		    if(response)
		    {
		        new
					password[129];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""CXRP"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
				}

				WP_Hash(password, sizeof(password), inputtext);

				if(!strcmp(PlayerInfo[playerid][pPassword], password))
				{
				    PlayerInfo[playerid][pPassCode] = password;
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_PASS);
				    SCM(playerid, COLOR_LIGHTRED, "** Your repeated password does not match your chosen password. Please try again.");
				}
		    }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_PASS);
	        }
	    }
	    case DIALOG_LOGIN:
	    {
	        if(response)
	        {
	            new
	                specifiers[] = "%D of %M, %Y @ %k:%i",
	                password[129];

				if(isnull(inputtext))
				{
				    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
				    return 1;
				}

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, \"%s\") FROM users WHERE username = \"%s\" AND password = \"%s\"", specifiers, GetPlayerNameEx(playerid), password);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);

	        }
	        else
	        {
				KickPlayer(playerid);
			}
	    }
	    case DIALOG_GENDER:
	    {
	        if(response)
	        {
				new gen[32];
	            if(listitem == 0)
	            {
	                PlayerInfo[playerid][pGender] = 1;
	                PlayerInfo[playerid][pSkin] = 299;
					gen = "Male";
				}
				else if(listitem == 1)
				{
	                PlayerInfo[playerid][pGender] = 2;
	                PlayerInfo[playerid][pSkin] = 12;
					gen = "FeMale";
				}
				else if(listitem == 2)
				{
	                PlayerInfo[playerid][pGender] = 3;
	                PlayerInfo[playerid][pSkin] = 12;
					gen = "Shemale";
				}
				else if(listitem == 3)
				{
	                PlayerInfo[playerid][pGender] = 4;
	                PlayerInfo[playerid][pSkin] = 299;
					gen = "Gay";
				}
				else if(listitem == 4)
				{
	                PlayerInfo[playerid][pGender] = 5;
	                PlayerInfo[playerid][pSkin] = 12;
					gen = "Lesbian";
				}
				PlayerInfo[playerid][pGenderCode] = 1;
				new string[32];
				format(string, sizeof(string), "%s", gen);
				PlayerTextDrawSetString(playerid, Register_TD[playerid][3], string);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
	    }
	    case DIALOG_AGE:
	    {
	        if(response)
	        {
	            new age = strval(inputtext);
				if(!(13 <= age <= 99))
				{
				    ShowDialogToPlayer(playerid, DIALOG_AGE);
				    SCM(playerid, COLOR_SYNTAX, "You may only enter a number from 13 to 99. Please try again.");
				    return 1;
	            }
	            PlayerInfo[playerid][pAge] = age;
	            PlayerInfo[playerid][pReferralUID] = 0;
				PlayerInfo[playerid][pAgeCode] = 1;
				new string[32];
				format(string, sizeof(string), "%i", age);
				PlayerTextDrawSetString(playerid, Register_TD[playerid][2], string);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_AGE);
			}
	    }
	    case DIALOG_REFERRAL:
	    {
	        if(response)
	        {
	            if(isnull(inputtext) || strlen(inputtext) > 24)
	            {
	                return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}
				if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
				{
				    SCM(playerid, COLOR_SYNTAX, "You can't put down your own name as a referral.");
				    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM users WHERE username = \"%e\"", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
	        }
	    }
		case DIALOG_TEXT:
		{
			if(response)
			{
				PlayerInfo[playerid][pTutorial] = 1;
				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 300, false, "ii", playerid);
				PlayerInfo[playerid][pSetup] = 0;
			}
		}
	    case DIALOG_INTERIORS:
	    {
	        if(response)
	        {
	            TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
	            GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	        }
	    }
	    case DIALOG_BUYFURNITURE1:
	    {
	        new houseid = GetInsideHouse(playerid);

		    if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	   	    if(response)
	        {
				PlayerInfo[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
	        }
	    }
	    case DIALOG_BUYFURNITURE2:
	    {
	        new houseid = GetInsideHouse(playerid);

	        if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	        if(response)
	        {
	            listitem += PlayerInfo[playerid][pFurnitureIndex];

	            if(PlayerInfo[playerid][pCash] < furnitureArray[listitem][fPrice])
	            {
	                return SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
	            }
	            else
	            {
		            new
		                Float:x,
	    	            Float:y,
	        	        Float:z,
	            	    Float:a;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					PlayerInfo[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
					PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[listitem][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[listitem][fModel] <= 19417) || (19426 <= furnitureArray[listitem][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                    PlayerInfo[playerid][pSelected] = listitem;

					SM(playerid, COLOR_AQUA, "You are now previewing "CXRP"%s{CCFFFF}. This furniture item costs $%i to purchase.", furnitureArray[listitem][fName], furnitureArray[listitem][fPrice]);
					SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
                    EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
		case GatePass:
		{
			if (response)
			{
				new id = Gate_Nearest(playerid);

				if (id == -1)
					return 0;

				if (isnull(inputtext))
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");

				if (strcmp(inputtext, GateData[id][gatePass]) != 0)
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Error: Incorrect password specified.\n\nPlease enter the password for this gate below:", "Submit", "Cancel");

				Gate_Operate(id);
			}
		}
		case DIALOG_EDITBUY:
		{
			if(response)
			{
				PlayerInfo[playerid][pProductChoose] = listitem;
				ShowPlayerDialog(playerid, DIALOG_EDITBUY2, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the new product price:", "Modify", "");
			}
		}
		case DIALOG_EDITBUY2:
		{
			if(response)
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid), product = PlayerInfo[playerid][pProductChoose];
				if(!(1 <= number <= 100000))
				{
					return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $100,000 at once.");
				}
				BusinessInfo[businessid][bPrices][product] = number;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%d = %i WHERE id = %i", product, number,BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_TRUCKING:
		{
			if( !response ) return 1;
			else
			{
				if(PlayerInfo[playerid][pJob] != JOB_CARGO) return SCM(playerid, COLOR_REALRED, "You must be employed as trucker to do deliveries.");
				new depot = ChosenDepot[playerid];
				new del = PlayerDeliveryList[playerid][listitem];
				new otherDepot = Deliveries[ depot ][ del ][ delivery_depot ];
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == 0) return SCM(playerid, COLOR_REALRED, "You are not in a vehicle.");
				if(!IsTruckingVehicle( vehicleid)) return SCM(playerid, COLOR_REALRED, "You cannot truck with this vehicle.");
				new weight = GetTruckWeight(vehicleid);
				if(weight == 0) return SCM(playerid, COLOR_REALRED, "You cannot truck with this vehicle.");
				if((GetPlayerCargoWeight(playerid) + Deliveries[ depot ][ del ][ delivery_weight ]) > weight) 
				{
					SCM(playerid, COLOR_REALRED, "This delivery will exceed the total weight your vehicle can carry.");
					new count = 0;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "Item\tLocation\tCash\tWeight" );
					for(new j = 0; j < MAX_DELIVERIES; j++)
					{
						if(Deliveries[ depot ][ j ][ delivery_type ] == DELIVERY_AVAILABLE)
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s\n%s\t%s\t$%d\t%d", DialogStrgEx, Deliveries[ depot ][ j ][ delivery_name ], TruckDepots[ Deliveries[ depot ][ j ][ delivery_depot ] ][ dName ], Deliveries[ depot ][ j ][ delivery_cash ], Deliveries[ depot ][ j ][ delivery_weight ] );
							PlayerDeliveryList[playerid][count] = j;
							count++;
						}
					}
					new header[48];
					format(header, sizeof(header), "Current Weight: %d | Vehicle's Limit: %d", GetPlayerCargoWeight(playerid), weight);
					if(count > 0) ShowPlayerDialog( playerid, DIALOG_TRUCKING, DIALOG_STYLE_TABLIST_HEADERS, header, DialogStrgEx, "Select", "Close" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					return 1;
				}
				new Float:x, Float:y, Float:z;
				x = TruckDepots[otherDepot][dep_x];
				y = TruckDepots[otherDepot][dep_y];
				z = TruckDepots[otherDepot][dep_z];
				if(Deliveries[ depot ][ del ][ delivery_type ] != DELIVERY_AVAILABLE) return SCM(playerid, COLOR_REALRED, "Selected delivery is taken by someone else.");
				
				for(new j = 0; j < MAX_DELIVERIES; j++)
				{
					if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 0 )
					{
						PlayerDeliveries[playerid][ j ][ player_del_taken ] = 1;
						PlayerDeliveries[playerid][ j ][ player_del_id ] = del;
						PlayerDeliveries[playerid][ j ][ player_del_from ] = depot;
						PlayerDeliveries[playerid][ j ][ player_del_to ] = otherDepot;
						PlayerDeliveries[playerid][ j ][ player_del_vehicle ] = vehicleid;
						PlayerDeliveries[playerid][ j ][ player_del_weight ] = Deliveries[ depot ][ del ][ delivery_weight ];
						Deliveries[ depot ][ del ][ delivery_type ] = DELIVERY_PENDING;
						if(IsValidDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]))
							DestroyDynamicMapIcon(PlayerDeliveries[playerid][ j ][ player_del_marker ]);

						PlayerDeliveries[playerid][ j ][ player_del_marker ] = CreateDynamicMapIcon(x, y, z, 53, COLOR_AQUA, 0, 0, playerid, 10000.0, MAPICON_GLOBAL);
						SM(playerid, COLOR_AQUA, "You took a delivery of %s to %s for $%d.", Deliveries[ depot ][ del ][ delivery_name ], TruckDepots[ otherDepot ][ dName ], Deliveries[ depot ][ del ][ delivery_cash ]);
						break;
					}
				}
				//ChosenDepot[playerid] = i;
				new count = 0;
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Item\tLocation\tCash\tWeight" );
				for(new j = 0; j < MAX_DELIVERIES; j++)
				{
					if(Deliveries[ depot ][ j ][ delivery_type ] == DELIVERY_AVAILABLE)
					{
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s\n%s\t%s\t$%d\t%d", DialogStrgEx, Deliveries[ depot ][ j ][ delivery_name ], TruckDepots[ Deliveries[ depot ][ j ][ delivery_depot ] ][ dName ], Deliveries[ depot ][ j ][ delivery_cash ], Deliveries[ depot ][ j ][ delivery_weight ] );
						PlayerDeliveryList[playerid][count] = j;
						count++;
					}
				}
				new header[48];
				format(header, sizeof(header), "Current Weight: %d | Vehicle's Limit: %d", GetPlayerCargoWeight(playerid), weight);
				if(count > 0) ShowPlayerDialog( playerid, DIALOG_TRUCKING, DIALOG_STYLE_TABLIST_HEADERS, header, DialogStrgEx, "Select", "Close" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
		case DIALOG_CARGO:
		{
			if( response ) {
				if(listitem == 0)
				{
					new count = 0, weight = 0;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "Item\tLocation\tWeight\tCash" );
					for(new j = 0; j < MAX_DELIVERIES; j++)
					{
						if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
						{
							count++;
							weight = weight + PlayerDeliveries[playerid][ j ][ player_del_weight ];
							new del = PlayerDeliveries[playerid][ j ][ player_del_id ];
							new fromdepot = PlayerDeliveries[playerid][ j ][ player_del_from ];
							new todepot = PlayerDeliveries[playerid][ j ][ player_del_to ];
							new cash = Deliveries[ fromdepot ][ del ][ delivery_cash ];
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s\n%s\t%s\t%d\t$%d", DialogStrgEx, Deliveries[ fromdepot ][ del ][ delivery_name ], TruckDepots[ todepot ][ dName ], Deliveries[ fromdepot ][ del ][ delivery_weight ], cash );
						}
					}
					if(count == 0)
					{
						SCM(playerid, COLOR_REALRED, "You don't have any active deliveries right now.");
						ShowDialogToPlayer(playerid, DIALOG_CARGO);
					}
					else
					{
						new header[32];
						format(header, sizeof(header), "Deliveries | Total Weight: %d", weight);
						ShowPlayerDialog( playerid, DIALOG_CARGOINFO, DIALOG_STYLE_TABLIST_HEADERS, header, DialogStrgEx, "Back", "" );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					}
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_CARGOCANCEL);
				}
				else if(listitem == 2)
				{
					new count = 0;
					for(new j = 0; j < MAX_DELIVERIES; j++)
					{
						if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
						{
							count++;
						}
					}
					if(count == 0)
					{
						SCM(playerid, COLOR_REALRED, "You don't have any active deliveries right now.");
						return ShowDialogToPlayer(playerid, DIALOG_CARGO);
					}
					ShowPlayerDialog( playerid, DIALOG_CARGOCANCELALL, DIALOG_STYLE_MSGBOX, "Cancel All Deliveries", "Are you sure you want to cancel all deliveries?", "Yes", "Back" );
				}
			}
		}
		case DIALOG_CARGOINFO:
		{
			return ShowDialogToPlayer(playerid, DIALOG_CARGO);
		}
		case DIALOG_CARGOCANCEL:
		{
			if(!response) return ShowDialogToPlayer(playerid, DIALOG_CARGO);
			new j = PlayerDeliveryList[playerid][listitem];
			new del = PlayerDeliveries[playerid][ j ][ player_del_id ];
			new fromdepot = PlayerDeliveries[playerid][ j ][ player_del_from ];
			new todepot = PlayerDeliveries[playerid][ j ][ player_del_to ];
			SM(playerid, COLOR_YELLOW, "You cancelled delivery of %s to %s.", Deliveries[ fromdepot ][ del ][ delivery_name ], TruckDepots[ todepot ][ dName ]);
			ResetPlayerDelivery(playerid, j);
			Deliveries[ fromdepot ][ del ][ delivery_type ] = DELIVERY_AVAILABLE;
			return ShowDialogToPlayer(playerid, DIALOG_CARGOCANCEL);
		}
		case DIALOG_CARGOCANCELALL:
		{
			if(!response) return ShowDialogToPlayer(playerid, DIALOG_CARGO);
			CancelPlayerDeliveries(playerid);
			ResetPlayerDeliveries(playerid);
			SCM(playerid, COLOR_YELLOW, "You cancelled all of your deliveries.");
		}
		case DIALOG_CHOOSENUM:
		{
			if(response && ChoosingNum[playerid])
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid);
				new price = BusinessInfo[businessid][bPrices][0];
				if(number == 911 || number == 6397 || number == 6324 || number == 8294 || number == 666)
				{
					return ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "{FF0000}You can't choose an emergency or special numbers!\n{FFFFFF}Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");
				}
				if(strlen(inputtext) != 6)
				{
					return ShowPlayerDialog(playerid, DIALOG_CHOOSENUM, DIALOG_STYLE_INPUT, "Choose your phone number", "{FF0000}Your specified number wasn't a 6 digits Number\n{FFFFFF}Type your desired phone number below\nMake sure it's a 6 digit number!", "Choose", "Cancel");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE number = %i", number);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumberEx", "iiii", playerid, number, price, businessid);
			}
			else
			{
				ChoosingNum[playerid] = 0;
				SCM(playerid, COLOR_WHITE, "You didn't get a cellphone as you've canceled choosing the number.");
			}
		}
     	case DIALOG_BUY:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }

				if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
				{
				    if(PlayerInfo[playerid][pWeaponRestricted])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than 2 hours. You can't buy stuff here.");
					}

				    switch(listitem)
					{
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 22))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 9mm Pistol.", GetRPName(playerid), price);
		                        SCM(playerid, COLOR_WHITE, "** 9mm Pistol purchased.");
	                        }
	                        else
	                        {
	                            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a 9mm Pistol from their business.", GetRPName(playerid));
		                        SCM(playerid, COLOR_WHITE, "** 9mm Pistol purchased.");
	                        }


	                        GiveWeapon(playerid, 22);

	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);
				        }
				        case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Light Armor.", GetRPName(playerid), price);
		                        SCM(playerid, COLOR_WHITE, "** Light Armor of 50.0 armor points purchased.");
	                        }
	                        else
	                        {
	                            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a Light Armor from their business.", GetRPName(playerid));
		                        SCM(playerid, COLOR_WHITE, "** Light Armor of 50.0 armor points purchased.");
	                        }

	                        SetScriptArmour(playerid, 50.0);
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);
				        }
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 22))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Base ball Bat.", GetRPName(playerid), price);
		                        SCM(playerid, COLOR_WHITE, "** Base ball Bat purchased.");
	                        }
	                        else
	                        {
	                            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a Base ball Bat from their business.", GetRPName(playerid));
		                        SCM(playerid, COLOR_WHITE, "** Base ball Bat purchased.");
	                        }

	                        GiveWeapon(playerid, 5);

	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);
				        }
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
				    if(listitem == 0)
					{
						ShowClothesSelectionMenu(playerid);
					}
					else
					{
						new count=0;
						for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
						{
							if(ClothingInfo[playerid][i][cExists])
							{
								count++;
							}
						}
						if(count == 5 && PlayerInfo[playerid][pDonator] == 0)
						{
							return SCM(playerid, COLOR_SYNTAX, "You've reached your clothing limit. As a Non-Donator player you only have 5 slots limit!.");
						}
						else if(count == 7 && PlayerInfo[playerid][pDonator] == 1)
						{
							return SCM(playerid, COLOR_SYNTAX, "You've reached your clothing limit. As a Silver Donator you only have 7 slots limit!.");
						}
						else if(count == 8 && PlayerInfo[playerid][pDonator] == 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You've reached your clothing limit. As a Gold Donator you only have 8 slots limit!.");
						}
						else if(count == 10 && PlayerInfo[playerid][pDonator] == 3)
						{
							return SCM(playerid, COLOR_SYNTAX, "You've reached your 10 slots clothing limit.");
						}
						PlayerInfo[playerid][pCategory] = listitem - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
				    }
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "** You have chosen the normal fighting style.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][0];

						    if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }
                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Boxing fighting style for $%i.", price);
	                        }
	                        else
	                        {
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Boxing fighting style for free from your own business.");
	                        }

                            PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Kung-Fu fighting style for $%i.", price);
	                        }
	                        else
	                        {
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Kung-Fu fighting style for free from your own business.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }
	                        
                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Kneehead fighting style for $%i.", price);
	                        }
	                        else
	                        {
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Kneehead fighting style for free from own business.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Grabkick fighting style for $%i.", price);
	                        }
	                        else
	                        {
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Grabkick fighting style for free from your own business.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

                            if(!IsBusinessOwner(playerid, businessid))
	                        {
		                        GivePlayerCash(playerid, -price);
								BusinessInfo[businessid][bCash] += price;
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Elbow fighting style for $%i.", price);
	                        }
	                        else
	                        {
		                        SM(playerid, COLOR_WHITE, "** You have purchased the Elbow fighting style for free from own business.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

 							PlayerInfo[playerid][pThirst] += 25;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

         					PlayerInfo[playerid][pThirst] += 30;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 15.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of Mountain Dew.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

        					PlayerInfo[playerid][pHunger] += 25;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 20.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a plate of Fuchka.", GetRPName(playerid), price);
							ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pHunger] += 30;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 25.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pack of Cha Porota.", GetRPName(playerid), price);
							ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pHunger] += 100;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 30.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a plate of Kacchi Biriyani.", GetRPName(playerid), price);
							ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 25;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 30;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of Mountain Dew.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 35;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of Bangla.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 40;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of Oscar.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 50;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of Wine.", GetRPName(playerid), price);
						}
					}
				}
	        }
	    }
		case DIALOG_PICKLOAD:
	    {
	        if(response)
	        {
	            if(!PlayerHasJob(playerid, JOB_TRUCKER))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
				}
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 499)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
				}
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2733.7070,-2512.6345,13.6641))
				{
					SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock. A checkpoint has been set to the dock point.");
					PlayerInfo[playerid][pCP] = CHECKPOINT_LOADTRUCK;
					SetPlayerCheckpoint(playerid, 2733.7070,-2512.6345,13.6641, 6.0);
					return 1;
				}

				switch(listitem)
				{
				    case 0: SetLoadTruck(playerid, LOADTYPE_STORE);
	                case 1: SetLoadTruck(playerid, LOADTYPE_CLOTHES);
	                case 2: SetLoadTruck(playerid, LOADTYPE_RESTAURANT);
	                case 3: SetLoadTruck(playerid, LOADTYPE_BARCLUB);
	                case 4: SetLoadTruck(playerid, LOADTYPE_GUNSHOP);
	                case 5: SetLoadTruck(playerid, LOADTYPE_AGENCY);
	                case 6: SetLoadTruck(playerid, LOADTYPE_GYM);
					case 7: SetLoadTruck(playerid, LOADTYPE_ILLEGAL);
				}

				PlayerInfo[playerid][pLastLoad] = gettime();
	        }
	    }
	    case DIALOG_UNREADTEXTS:
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", PlayerInfo[playerid][pNumber]);
	        mysql_tquery(connectionID, queryBuffer);

	        if(response)
	        {
				callcmd::texts(playerid, "\1");
	        }
	    }
		case BANK_WITHDRAW:
		{
			if(response)
			{
				new amount, string[256];
	            if(sscanf(inputtext, "i", amount))
	            {
					format(string, sizeof(string), "How much would you like to withdraw? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
					ShowPlayerDialog(playerid, BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Withdrawal", string, "Withdraw", "Cancel");
					return 1;
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	            {
	                SCM(playerid, COLOR_WHITE, "Insufficient amount. Please try again.");
					format(string, sizeof(string), "How much would you like to withdraw? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
					ShowPlayerDialog(playerid, BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Withdrawal", string, "Withdraw", "Cancel");
	                return 1;
	            }
				PlayerInfo[playerid][pBank] -= amount;
				GivePlayerCash(playerid, amount);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "** You have withdrawn $%s from your bank account. Your new balance is $%s.", AddCommas(amount), AddCommas(PlayerInfo[playerid][pBank]));
				ShowBankTD(playerid);
			}
		}
		case BANK_DEPOSIT:
		{
			if(response)
			{
				new amount, string[256];
	            if(sscanf(inputtext, "i", amount))
	            {
					format(string, sizeof(string), "How much would you like to deposit? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
					ShowPlayerDialog(playerid, BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Deposit", string, "Deposit", "Cancel");
					return 1;
	            }
				if(amount < 1 || amount > PlayerInfo[playerid][pCash])
				{
					SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again!");
					format(string, sizeof(string), "How much would you like to deposit? (Your bank balance is $%s.)", AddCommas(PlayerInfo[playerid][pBank]));
					ShowPlayerDialog(playerid, BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Deposit", string, "Deposit", "Cancel");
					return 1;
				}

				PlayerInfo[playerid][pBank] += amount;
				GivePlayerCash(playerid, -amount);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "** You have deposited $%s into your bank account. Your new balance is $%s.", AddCommas(amount), AddCommas(PlayerInfo[playerid][pBank]));
				ShowBankTD(playerid);
			}
		}
		case BANK_WIRETRANSFER:
		{
			if(response)
			{
				new targetid;
	            if(sscanf(inputtext, "i", targetid))
	            {
					SCM(playerid, COLOR_GREY, "Please type a valid player ID");
					ShowPlayerDialog(playerid, BANK_WIRETRANSFER, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Transfer", "Who would you like to transfer money? {FF0000}((Type the player ID.))", "Submit", "Cancel");
					return 1;
	            }
				if(IsPlayerNPC(targetid))
				{
					return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
				}
				if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
				{
					return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or hasn't logged in yet.");
				}
				if(targetid == playerid)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself.");
				}
				PlayerInfo[playerid][pSelected] = -1;
				PlayerInfo[playerid][pSelected] = targetid;
				ShowPlayerDialog(playerid, BANK_WIRETRANSFER2, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Transfer", "How much money would you like to transfer? {FF0000}((Type the money amount.))", "Transfer", "Cancel");
			}
		}
		case BANK_WIRETRANSFER2:
		{
			if(response)
			{
				new targetid = PlayerInfo[playerid][pSelected], amount;
	            if(sscanf(inputtext, "i", amount))
	            {
					ShowPlayerDialog(playerid, BANK_WIRETRANSFER2, DIALOG_STYLE_INPUT, "{FFA500}Central Bank of Bangladesh{FFFFFF} - Cash Transfer", "How much money would you like to transfer? {FF0000}((Type the money amount.))", "Transfer", "Cancel");
					return 1;
	            }
				if(IsPlayerNPC(targetid))
				{
					return SCM(playerid, COLOR_SYNTAX, "Invalid player specified, try again.");
				}
				if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
				{
					return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or hasn't logged in yet, try again.");
				}
				if(targetid == playerid)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself, try again.");
				}
				if(amount < 1 || amount > PlayerInfo[playerid][pBank])
				{
					return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				}
				PlayerInfo[targetid][pBank] += amount;
				PlayerInfo[playerid][pBank] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), PlayerInfo[playerid][pBank]);
				SM(targetid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
				Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

				if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
				{
					SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
				}
				PlayerInfo[playerid][pSelected] = -1;
				ShowBankTD(playerid);
			}
		}
	    case DIALOG_AWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_AWITHDRAW);
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_AWITHDRAW);
	                return 1;
	            }
	            if(amount > 1000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't withdraw more than $1,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_AWITHDRAW);
	                return 1;
	            }

	            PlayerInfo[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            if(PlayerInfo[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                PlayerInfo[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
	            SM(playerid, COLOR_AQUA, "You have withdrawn $%i from your account. Your new balance is $%i.", amount, PlayerInfo[playerid][pBank]);

				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            else if(PlayerInfo[playerid][pDonator] > 0)
	            {
					SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            }
	        }
		}
		case DIALOG_ADEPOSIT:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ADEPOSIT);
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ADEPOSIT);
	                return 1;
	            }
	            if(amount > 1000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't deposit more than $1,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_ADEPOSIT);
	                return 1;
	            }

	            PlayerInfo[playerid][pBank] += amount;
	            GivePlayerCash(playerid, -amount);
//	            PlayerInfo[playerid][pCash] -= amount;

	            if(PlayerInfo[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                PlayerInfo[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", PlayerInfo[playerid][pCash], PlayerInfo[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and deposits some cash from the ATM.", GetRPName(playerid));
	            SM(playerid, COLOR_AQUA, "You have deposited $%i from your account. Your new balance is $%i.", amount, PlayerInfo[playerid][pBank]);

				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            else if(PlayerInfo[playerid][pDonator] > 0)
	            {
					SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            }
	        }
		}
		case DIALOG_CHANGEPASS:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 4)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You need to enter a password greater than 4 characters.");
		        }

				new
				    password[129];

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = \"%s\" WHERE uid = %i", password, PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCM(playerid, COLOR_WHITE, "** Your account password was changed successfully.");
    		}
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    if(response)
		    {
		        PlayerInfo[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu(playerid);
		    }
		    else
		    {
		        callcmd::buy(playerid, "\1");
			}
		}
		case DIALOG_CLOTHING:
		{
		    if(response)
		    {
		        if(!ClothingInfo[playerid][listitem][cExists])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "The slot you've selected does not contain any item of clothing.");
		        }

		        if(ClothingInfo[playerid][listitem][cAttached]) {
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Detach\nEdit\nDelete", "Select", "Cancel");
		        } else {
                    ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Attach\nEdit\nDelete", "Select", "Cancel");
		        }

		        PlayerInfo[playerid][pSelected] = listitem;
			}
		}
		case DIALOG_CLOTHINGMENU:
		{
		    if(response)
		    {
		        new clothingid = PlayerInfo[playerid][pSelected];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(!ClothingInfo[playerid][clothingid][cAttached])
		                {
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

		                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
		                    {
			                    ClothingInfo[playerid][clothingid][cAttached] = 1;

			                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
									ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
								SM(playerid, COLOR_WHITE, "** %s attached to slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
								mysql_tquery(connectionID, queryBuffer);
							}
							else
							{
							    SCM(playerid, COLOR_SYNTAX, "No attachment slots available. You can only have up to five clothing items attached at once.");
		                    }
		                }
		                else
		                {
		                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		                    ClothingInfo[playerid][clothingid][cAttached] = 0;
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
							mysql_tquery(connectionID, queryBuffer);

							SM(playerid, COLOR_WHITE, "** %s detached and added to inventory.", ClothingInfo[playerid][clothingid][cName]);
		                }
		            }
					case 1:
					{
				    	ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Edition menu", "Edit offset\nChange bone\nEdit offset Android", "Select", "Cancel");
					}
					case 2:
					{
				    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
				    	SM(playerid, COLOR_WHITE, "** %s deleted from your clothing inventory.", ClothingInfo[playerid][clothingid][cName]);

				    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
				    	mysql_tquery(connectionID, queryBuffer);

					    ClothingInfo[playerid][clothingid][cAttached] = 0;
			            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
					    ClothingInfo[playerid][clothingid][cExists] = 0;
					    ClothingInfo[playerid][clothingid][cID] = 0;
					    ClothingInfo[playerid][clothingid][cName] = 0;
					}
				}
			}
		}
		case DIALOG_CLOTHINGEDIT:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                PlayerInfo[playerid][pEditType] = EDIT_CLOTHING;

		                if(!ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached]) {
		                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
								ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);

							EditAttachedObject(playerid, 9);
		                }
		                else {
		                    EditAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
		                }

		                GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Choose a new bone for this clothing item.", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Select", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
					}
				}
			}
		}
		case DIALOG_CLOTHINGBONE:
		{
		    if(response)
		    {
		        ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone] = listitem + 1;

		        if(ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached])
		        {
		            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
		            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_WHITE, "** Bone for "CXRP"%s"WHITE" changed to \"%s\".", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cName], inputtext);
		    }
		}
		case DIALOG_CLOTHINGEDITMOB:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, DIALOG_MOBPOS, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.00 to 1.00 to change the X Position. (Ex: 0.45)", "Submit", "Back");
					case 1: ShowPlayerDialog(playerid, DIALOG_MOBPOS, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.00 to 1.00 to change the Y Position. (Ex: 0.45)", "Submit", "Back");
					case 2: ShowPlayerDialog(playerid, DIALOG_MOBPOS, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.00 to 1.00 to change the Z Position. (Ex: 0.45)", "Submit", "Back");
					case 3: ShowPlayerDialog(playerid, DIALOG_MOBROT, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from 0 to 360 to change the X Rotation. (Ex: 90)", "Submit", "Back");
					case 4: ShowPlayerDialog(playerid, DIALOG_MOBROT, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from 0 to 360 to change the Y Rotation. (Ex: 90)", "Submit", "Back");
					case 5: ShowPlayerDialog(playerid, DIALOG_MOBROT, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from 0 to 360 to change the Z Rotation. (Ex: 90)", "Submit", "Back");
					case 6: ShowPlayerDialog(playerid, DIALOG_MOBSCALE, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.0 to 1.0 to change the X Scale. (Ex: 1.0)", "Submit", "Back");
					case 7: ShowPlayerDialog(playerid, DIALOG_MOBSCALE, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.0 to 1.0 to change the Y Scale. (Ex: 1.0)", "Submit", "Back");
					case 8: ShowPlayerDialog(playerid, DIALOG_MOBSCALE, DIALOG_STYLE_INPUT, "Clothing Editing Offset Android", "Input a value from -1.0 to 1.0 to change the Z Scale. (Ex: 1.0)", "Submit", "Back");
				}
				SetPVarInt(playerid, "MobileEdit", listitem);
			}
		}
		case DIALOG_MOBPOS:
		{
			if(response)
			{
				if(floatstr(inputtext) > 1.0 || floatstr(inputtext) < -1.0) SCM(playerid, COLOR_WHITE, "Value can't be higher than 1.0 or lower than -1.0");
				else
				{
					switch(GetPVarInt(playerid, "MobileEdit"))
					{
						case 0: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX] = floatstr(inputtext);
						case 1: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY] = floatstr(inputtext);
						case 2: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ] = floatstr(inputtext);
					}
					if(ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached])
					{
						RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
						SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
							ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
					}
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cID]);
					mysql_tquery(connectionID, queryBuffer);
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
			}
		}
		case DIALOG_MOBROT:
		{
			if(response)
			{
				if(floatstr(inputtext) > 360.0 || floatstr(inputtext) < 0.0) SCM(playerid, COLOR_WHITE, "Value can't be higher than 360 or lower than 0");
				else
				{
					switch(GetPVarInt(playerid, "MobileEdit"))
					{
						case 3: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX] = floatstr(inputtext);
						case 4: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY] = floatstr(inputtext);
						case 5: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ] = floatstr(inputtext);
					}
					if(ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached])
					{
						RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
						SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
							ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
					}
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cID]);
					mysql_tquery(connectionID, queryBuffer);
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
			}
		}
		case DIALOG_MOBSCALE:
		{
			if(response)
			{
				if(floatstr(inputtext) > 1.0 || floatstr(inputtext) < -1.0) SCM(playerid, COLOR_WHITE, "Value can't be higher than 1.0 or lower than -1.0");
				else
				{
					switch(GetPVarInt(playerid, "MobileEdit"))
					{
						case 6: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX] = floatstr(inputtext);
						case 7: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY] = floatstr(inputtext);
						case 8: ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ] = floatstr(inputtext);
					}
					if(ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached])
					{
						RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
						SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
							ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
					}
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cID]);
					mysql_tquery(connectionID, queryBuffer);
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDITMOB, DIALOG_STYLE_LIST, "Clothing Editing Offset Mobile", "Position X\nPosition Y\nPosition Z\nRotation X\nRotation Y\nRotation Z\nScale X\nScale Y\nScale Z", "Edit", "Back");
			}
		}
		case DIALOG_BUYVEHICLE:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
		        }

		        new
		            string[128];

		        PlayerInfo[playerid][pSelected] = listitem;

				format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "CXRP"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
				ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
			}
		}
		case DIALOG_BUYVEHICLE2:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pGangCar])
		        {
		            listitem = PlayerInfo[playerid][pSelected];

		            if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
			        {
			            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
			        }
			        if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not rank 4+ in any gang at the moment.");
					}
					if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
				    }

		            new
						Float:x,
						Float:y,
						Float:z,
						Float:angle;
					
		            if(IsPlayerInRangeOfPoint(playerid, 3.0, 544.8441,-1293.9301,17.2422))
					{
						switch(random(2))
			    	    {
			        	    case 0: x = 549.8856, y = -1287.8274, z = 17.0064, angle = 358.1196;
							case 1: x = 540.0930, y = -1287.8613, z = 16.9456, angle = 1.8657;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, price, pos_x, pos_y, pos_z, pos_a, gangid) VALUES(%i, %i, '%f', '%f', '%f', '%f', %i)", vehicleArray[listitem][carModel], vehicleArray[listitem][cARPrice], x, y, z, angle, PlayerInfo[playerid][pGang]);
					mysql_tquery(connectionID, queryBuffer);

                    AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[listitem][cARPrice], 3));
			        mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

					GivePlayerCash(playerid, -vehicleArray[listitem][cARPrice]);
					PlayerInfo[playerid][pGangCar] = 0;

			        SM(playerid, COLOR_GREEN, "%s purchased for your gang for $%i. /ganghelp for more commands.", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
		    	    Log_Write("log_give", "%s (uid: %i) purchased a %s for %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], vehicleNames[vehicleArray[listitem][carModel] - 400], GangInfo[PlayerInfo[playerid][pGang]][gName], vehicleArray[listitem][cARPrice]);
		        }
		        else
		        {
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, PlayerInfo[playerid][pSelected]);
				}
			}
		}
		case DIALOG_REDEEM:
		{
	 		if(!response) return 1;
	   		if(strlen(inputtext) < 1)
			{
				return ShowPlayerDialog(playerid, DIALOG_REDEEM, DIALOG_STYLE_INPUT, "EDM Voucher Redeeming", ""RED"Wrong Voucher Code Entered!\n"WHITE"Type your voucher code below:", "Redeem", "Cancel");			
	        }
	        if(strlen(inputtext) > 15)
			{
				return ShowPlayerDialog(playerid, DIALOG_REDEEM, DIALOG_STYLE_INPUT, "EDM Voucher Redeeming", ""RED"Wrong Voucher Code Entered!\n"WHITE"Type your voucher code below:", "Redeem", "Cancel");
	        }
			SCM(playerid, COLOR_WHITE, "Please wait, we are checking your EDM Voucher Code...");
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vouchers WHERE code=\"%s\"", inputtext);
			mysql_tquery(connectionID, queryBuffer, "OnPlayerRedeemCode", "is", playerid, inputtext);
		}
  		case DIALOG_SPAWNCAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
		    }
		}
		case DIALOG_RELEASECAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i AND impounded = 1 LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerPayImpound", "i", playerid);
		    }
		}
		case DIALOG_DESPAWNCAR:
		{
		    if(response)
		    {
		        new count;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
			 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
			 	        {
			 	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
			 	        }

			 	        SM(playerid, COLOR_AQUA, "Your "CXRP"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(i), GetVehicleZoneName(i));
            			DespawnVehicle(i);
            			return 1;
			 	    }
		        }
		    }
		}
		case DIALOG_FINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
                        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
						}
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
						}

			            return 1;
		            }
				}
			}
		}
		case MAFIA_FINDTRUCK:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if(TruckMafia[i] && (count++ == listitem))
			 	    {
                        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** Shipment Truck %s (%i) is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i), i);
						}
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** Shipment Truck %s (%i) is located in %s. Checkpoint marked at the location.", GetVehicleName(i), i, GetZoneName(x, y, z));
						}
			            return 1;
		            }
				}
			}
		}
		case MAFIA_SHIPMENT:
		{
		    if(response)
		    {
				new string[256], vehicleid = PlayerInfo[playerid][pSelected];
				switch(listitem)
				{
					case 0:
					{
						if(TruckLoads[vehicleid][0] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 0;
						format(string, sizeof(string), "Type the amount of Snipers you wanna load on this\nShipment Truck. (Currently loaded %i Snipers)", TruckLoads[vehicleid][0]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Sniper", string, "Confirm", "Cancel");
					}
					case 1:
					{
						if(TruckLoads[vehicleid][1] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 1;
						format(string, sizeof(string), "Type the amount of Spas-12 you wanna load on this\nShipment Truck. (Currently loaded %i Spas-12s)", TruckLoads[vehicleid][1]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Spas-12", string, "Confirm", "Cancel");
					}
					case 2:
					{
						if(TruckLoads[vehicleid][2] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 2;
						format(string, sizeof(string), "Type the amount of Ak-47 you wanna load on this\nShipment Truck. (Currently loaded %i Ak-47s)", TruckLoads[vehicleid][2]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Ak-47", string, "Confirm", "Cancel");
					}
					case 3:
					{
						if(TruckLoads[vehicleid][3] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 3;
						format(string, sizeof(string), "Type the amount of Deagle you wanna load on this\nShipment Truck. (Currently loaded %i Deagles)", TruckLoads[vehicleid][3]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Deagle", string, "Confirm", "Cancel");
					}
					case 4:
					{
						if(TruckLoads[vehicleid][4] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 4;
						format(string, sizeof(string), "Type the amount of MP5 you wanna load on this\nShipment Truck. (Currently loaded %i MP5s)", TruckLoads[vehicleid][4]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - MP5", string, "Confirm", "Cancel");
					}
					case 5:
					{
						if(TruckLoads[vehicleid][5] >= MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Max load limit reached for this item");
						}
						PlayerInfo[playerid][pSelected2] = 5;
						format(string, sizeof(string), "Type the amount of RPG you wanna load on this\nShipment Truck. (Currently loaded %i RPGs)", TruckLoads[vehicleid][5]);
						ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - RPG", string, "Confirm", "Cancel");
					}
				}
			}
		}
		case MAFIA_SHIPMENT2:
		{
			if(response)
			{
				new string[256], amount, item = PlayerInfo[playerid][pSelected2], vehicleid = PlayerInfo[playerid][pSelected];
				switch(item)
				{
					case 0:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of Snipers you wanna load on this\nShipment Truck. (Currently loaded %i Snipers)", TruckLoads[vehicleid][0]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Sniper", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][0] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][0] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i Snipers, this truck now have total %i Snipers loaded", amount, TruckLoads[vehicleid][0]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
					case 1:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of Spas-12 you wanna load on this\nShipment Truck. (Currently loaded %i Spas-12s)", TruckLoads[vehicleid][1]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Spas-12", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][1] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][1] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i Spas-12s, this truck now have total %i Spas-12s loaded", amount, TruckLoads[vehicleid][1]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
					case 2:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of Ak-47s you wanna load on this\nShipment Truck. (Currently loaded %i Ak-47s)", TruckLoads[vehicleid][2]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Ak-47", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][2] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][2] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i Ak-47s, this truck now have total %i Ak-47s loaded", amount, TruckLoads[vehicleid][2]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
					case 3:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of Deagles you wanna load on this\nShipment Truck. (Currently loaded %i Deagles)", TruckLoads[vehicleid][3]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - Deagle", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][3] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][3] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i Deagles, this truck now have total %i Deagles loaded", amount, TruckLoads[vehicleid][3]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
					case 4:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of MP5s you wanna load on this\nShipment Truck. (Currently loaded %i MP5s)", TruckLoads[vehicleid][4]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - MP5", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][4] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][4] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i MP5s, this truck now have total %i MP5s loaded", amount, TruckLoads[vehicleid][4]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
					case 5:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(string, sizeof(string), "Type the amount of RPGs you wanna load on this\nShipment Truck. (Currently loaded %i RPGs)", TruckLoads[vehicleid][5]);
							return ShowPlayerDialog(playerid, MAFIA_SHIPMENT2, DIALOG_STYLE_INPUT, "Mafia Shipment - RPG", string, "Confirm", "Cancel");
						}
						if(amount + TruckLoads[vehicleid][5] > MAX_MAFIA_LOAD)
						{
							return SCM(playerid, COLOR_WHITE, "Specified amount reaches the max limit for this item.");
						}
						if(amount < 1)
						{
							return SCM(playerid, COLOR_WHITE, "Invalid amount specified!");
						}
						TruckLoads[vehicleid][5] += amount;
						SM(playerid, COLOR_WHITE, "You've loaded %i RPGs, this truck now have total %i RPGs loaded", amount, TruckLoads[vehicleid][5]);
						PlayerInfo[playerid][pSelected] = -1;
						PlayerInfo[playerid][pSelected2] = -1;
					}
				}
			}
			else
			{
				new string[256], vehicleid = PlayerInfo[playerid][pSelected];
				format(string, sizeof(string), "#\tWeapon\tQty\n1\tSniper\t%i\n2\tSpas-12\t%i\n3\tAk-47\t%i\n4\tDeagle\t%i\n5\tMP5\t%i\n6\tRPG\t%i", TruckLoads[vehicleid][0], TruckLoads[vehicleid][1], TruckLoads[vehicleid][2], TruckLoads[vehicleid][3], TruckLoads[vehicleid][4], TruckLoads[vehicleid][5]);
				ShowPlayerDialog(playerid, MAFIA_SHIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Choose a shipment item to load.", string, "Load", "Cancel");
			}
		}
		case DIALOG_BIZINTERIOR:
		{
		    if(response)
		    {
		        new bizid = PlayerInfo[playerid][pSelected];

		        foreach(new i : Player)
		        {
		            if(GetInsideBusiness(i) == bizid)
		            {
						TeleportToCoords(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ], bizInteriorArray[listitem][intA], bizInteriorArray[listitem][intID], GetPlayerVirtualWorld(i), true, false);
						SetCameraBehindPlayer(i);
		            }
		        }

                BusinessInfo[bizid][bIntX] = bizInteriorArray[listitem][intX];
                BusinessInfo[bizid][bIntY] = bizInteriorArray[listitem][intY];
                BusinessInfo[bizid][bIntZ] = bizInteriorArray[listitem][intZ];
                BusinessInfo[bizid][bIntA] = bizInteriorArray[listitem][intA];
			    BusinessInfo[bizid][bInterior] = bizInteriorArray[listitem][intID];

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[bizid][bIntX], BusinessInfo[bizid][bIntY], BusinessInfo[bizid][bIntZ], BusinessInfo[bizid][bIntA], BusinessInfo[bizid][bInterior], BusinessInfo[bizid][bID]);
			    mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(bizid);
			    SM(playerid, COLOR_AQUA, "You've changed the interior of business %i to %s.", bizid, bizInteriorArray[listitem][intName]);
		    }
		}
		case DIALOG_FACTIONLOCKER:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
		    {
				switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY:
					{
					    if(listitem == 0) // Toggle duty
					    {
					        if(!PlayerInfo[playerid][pDuty])
					        {
					            if(IsLawEnforcement(playerid))
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their police issued equipment from the locker.", GetRPName(playerid));
									GiveWeapon(playerid, 24);
									GiveWeapon(playerid, 3);
								}
								else if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC)
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their medical supplies from the locker.", GetRPName(playerid));
								}

                                PlayerInfo[playerid][pDuty] = 1;

								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
							    PlayerInfo[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Equipment
						{
		    				if(IsLawEnforcement(playerid))
		    				{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\n9mm Pistol\nDesert Eagle\nShotgun\nMP5\nRifle", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nFire Extinguisher\nShotgun\nShovel\nPainkillers (5p)", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(PlayerInfo[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_SYNTAX, "There are no uniforms setup for your faction.");
							}
							if(PlayerInfo[playerid][pClothes] >= 0)
							{
							    PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pClothes];
							    PlayerInfo[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            PlayerInfo[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "CXRP">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
						else if(listitem == 3) // Tactical
						{
							if(IsLawEnforcement(playerid))
							{
								if(GetFactionType(playerid) == FACTION_POLICE && !IsTactical(playerid))
									SCM(playerid, COLOR_SYNTAX, "You are not in SWAT Division or high rank enough to use this section.");
						        else
						        {
							        if(!PlayerInfo[playerid][pDuty])
							        {
										SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their tactical equipment from the locker.", GetRPName(playerid));
										GiveWeapon(playerid, 24);
										GiveWeapon(playerid, 17);
										GiveWeapon(playerid, 31);
										GiveWeapon(playerid, 34);
										GiveWeapon(playerid, 45);
										GiveWeapon(playerid, 27);

		                                PlayerInfo[playerid][pDuty] = 1;

										SetPlayerHealth(playerid, 100.0);
										SetScriptArmour(playerid, 100.0);
										SetScriptSkin(playerid, 285);
									}
									else
									{
									    PlayerInfo[playerid][pDuty] = 0;
									    ResetPlayerWeaponsEx(playerid);

									    SetScriptArmour(playerid, 0.0);
										SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their tactical equipment back in the locker.", GetRPName(playerid));
									}
								}
							}
							else
							{
								SCM(playerid, COLOR_SYNTAX, "Tactical is only for Law Enforcement Officers.");
							}
						}

					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
						if(listitem == 0) // Toggle duty
					    {
					        if(!PlayerInfo[playerid][pDuty])
					        {
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their equipment from the locker.", GetRPName(playerid));

                                PlayerInfo[playerid][pDuty] = 1;

								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
								if(IsNews(playerid))
								{
									GiveWeapon(playerid, 43);
								}
							}
							else
							{
							    PlayerInfo[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
					    if(listitem == 1) // Equipment
					    {

					        if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nCamera\nShotgun", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(PlayerInfo[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_SYNTAX, "There are no uniforms setup for your faction.");
							}
							if(PlayerInfo[playerid][pClothes] >= 0)
							{
							    PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pClothes];
							    PlayerInfo[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    PlayerInfo[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "CXRP">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_HITMAN:
					{
					    if(listitem == 0) // Order weapons
					    {
					        ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Order weapons", "Heal Up\nKnife ($1500)\nSilenced pistol ($1000)\nShotgun ($1500)\nDesert Eagle\nMP5 ($2500)\nCountry rifle ($2000)\nAK-47 ($3000)\nM4 ($3000)\nSniper rifle ($5000)\nC4 Bomb", "Order", "Cancel");
						}
						else if(listitem == 1) // Change clothes
						{
						    ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: https://team.sa-mp.com/wiki/Skins_All.html ))", "Submit", "Cancel");
						}
					}
		        }
		    }
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
		    {
				switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 22);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a 9mm from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 33);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an County Rifle from the locker.", GetRPName(playerid));
					        }
						}
					}
					case FACTION_MEDIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 42);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a fire extinguisher from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                 				GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
                 				GiveWeapon(playerid, 6);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shovel from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
								new amount = 5;
								if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
								{
									return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
								}
								
								PlayerInfo[playerid][pPainkillers] += amount;
                                
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a %i pills of painkillers from the locker.", GetRPName(playerid), amount);
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
						    }
						}
					}
					case FACTION_GOVERNMENT:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_NEWS:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a digital camera from the locker.", GetRPName(playerid));
					        }
							case 3:
							{
								GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a shotgun from the locker.", GetRPName(playerid));
							}
					    }
					}
					case FACTION_HITMAN:
					{
					    switch(listitem)
					    {
					        case 0:
							{
					            SetScriptArmour(playerid, 100.0);
								SetPlayerHealth(playerid, 100.0);

					            SM(playerid, COLOR_AQUA, "** You ordered a kevlar vest & Medkit for FREE.");
					    	}
							case 1:
							{
							    if(PlayerInfo[playerid][pCash] < 1500)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

					            GiveWeapon(playerid, 4);
					            GivePlayerCash(playerid, -1500);

					            SM(playerid, COLOR_AQUA, "** You ordered a knife for $1500.");
					    	}
					    	case 2:
							{
							    if(PlayerInfo[playerid][pCash] < 1000)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 23);
					            GivePlayerCash(playerid, -1000);

					            SM(playerid, COLOR_AQUA, "** You ordered a silenced pistol for $1000.");
					    	}
					    	case 3:
							{
							    if(PlayerInfo[playerid][pCash] < 1500)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 25);
					            GivePlayerCash(playerid, -1500);

					            SM(playerid, COLOR_AQUA, "** You ordered a shotgun for $1500.");
					    	}
					    	case 4:
							{
								GiveWeapon(playerid, 24);
					            SM(playerid, COLOR_AQUA, "** You ordered a Desert Eagle for FREE.");
					    	}
					    	case 5:
							{
							    if(PlayerInfo[playerid][pCash] < 2500)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 29);
					            GivePlayerCash(playerid, -2500);

					            SM(playerid, COLOR_AQUA, "** You ordered an MP5 for $2500.");
					    	}
					    	case 6:
							{
							    if(PlayerInfo[playerid][pCash] < 2000)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 33);
					            GivePlayerCash(playerid, -2000);

					            SM(playerid, COLOR_AQUA, "** You ordered a country rifle for $2000.");
					    	}
					    	case 7:
							{
							    if(PlayerInfo[playerid][pCash] < 6000)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 30);
					            GivePlayerCash(playerid, -3000);

					            SM(playerid, COLOR_AQUA, "** You ordered an AK-47 for $3000.");
					    	}
					    	case 8:
							{
							    if(PlayerInfo[playerid][pCash] < 3000)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 31);
					            GivePlayerCash(playerid, -3000);

					            SM(playerid, COLOR_AQUA, "** You ordered an M4 for $3000.");
					    	}
					    	case 9:
							{
							    if(PlayerInfo[playerid][pCash] < 5000)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 34);
					            GivePlayerCash(playerid, -5000);

					            SM(playerid, COLOR_AQUA, "** You ordered a sniper rifle for $5000.");
					    	}
					    	case 10:
							{
					            if(PlayerInfo[playerid][pBombs] > 3)
					            {
					                return SCM(playerid, COLOR_SYNTAX, "You have more than 3 bombs. You can't buy anymore.");
								}

					            PlayerInfo[playerid][pBombs]++;
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
								mysql_tquery(connectionID, queryBuffer);

					            SM(playerid, COLOR_AQUA, "** You ordered a bomb for FREE. /plantbomb to place the bomb.");
					    	}
					    }
					}
				}
			}
		}
		case DIALOG_FACTIONSKINS:
		{
		    if(PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
		    {
		        if(response)
		        {
					new index = PlayerInfo[playerid][pSkinSelected] + 1;

					if(index >= MAX_FACTION_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
					    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
					    PlayerInfo[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_FACTION_SKINS; i ++)
						{
						    if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
						        PlayerInfo[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == PlayerInfo[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
							{
						    	if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
						        	PlayerInfo[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "CXRP">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
		        }
		        else
		        {
		            PlayerInfo[playerid][pClothes] = PlayerInfo[playerid][pSkin];
		            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
		            PlayerInfo[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pClothes], PlayerInfo[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a uniform out of the locker and puts it on.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_HITMANCLOTHES:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
		    {
				new skinid;

		    	if(sscanf(inputtext, "i", skinid))
				{
					return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }
		        if(!(0 <= skinid <= 311))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		            return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }

		        PlayerInfo[playerid][pSkin] = skinid;
		        SetPlayerSkin(playerid, skinid);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				GameTextForPlayer(playerid, "~w~Clothes changed for free", 3000, 3);
		    }
		}
		case DIALOG_MDC:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                static string[2048], count;

		                string = "Suspect\tLocation\tWanted level";

		                count = 0;

						foreach(new i : Player)
						{
						    if(PlayerInfo[i][pWantedLevel] > 0)
						    {
						        format(string, sizeof(string), "%s\n%s\t%s\t%i/6", string, GetRPName(i), GetPlayerZoneName(i), PlayerInfo[i][pWantedLevel]);
						        count++;
						    }
						}

						if(!count)
						{
						    return SCM(playerid, COLOR_SYNTAX, "There are currently no wanted suspects online.");
						}

						ShowPlayerDialog(playerid, DIALOG_MDCWANTED, DIALOG_STYLE_TABLIST_HEADERS, "Suspects wanted", string, "Track", "Cancel");
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
					}
				}
			}
		}
		case DIALOG_MDCWANTED:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        foreach(new i : Player)
				{
    				if(!strcmp(GetRPName(i), inputtext))
    				{
    				    new
    				        Float:x,
    				        Float:y,
    				        Float:z;

    				    GetPlayerPosEx(i, x, y, z);

    				    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

    				    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the suspect's last known location.");
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "The suspect you've selected has went offline.");
			}
		}
		case DIALOG_PLAYERLOOKUP:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        new username[MAX_PLAYER_NAME];

		        if(sscanf(inputtext, "s[24]", username))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gender, age, wantedlevel, crimes, arrested, carlicense, gunlicense FROM users WHERE username = \"%e\"", username);
				mysql_tquery(connectionID, queryBuffer, "MDC_PlayerLookup", "is", playerid, username);
			}
		}
		case DIALOG_MDCPLAYER1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges\nCheck Vehicles", "Select", "Cancel");
			}
		}
		case DIALOG_MDCPLAYER2:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", PlayerInfo[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);
		            }
		            case 1:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", PlayerInfo[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ClearCharges", "i", playerid);
		            }
		            case 2:
		            {
		                SM(playerid, SERVER_COLOR, "[!]"WHITE" Coming soon.");
					}
				}
		    }
		}
		case DIALOG_MDCCHARGES:
		{
			if(GetPVarInt(playerid, "lastcharges") == 1)
			{
			    SetPVarInt(playerid, "lastcharges", 0);
			}
			else
			{
		    	ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges", "Select", "Cancel");
			}
		}
		case DIALOG_VEHICLELOOKUP1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
			    new vehicleid, string[512];

			    if(sscanf(inputtext, "i", vehicleid))
			    {
		    	    return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}
				if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
				{
				    SCM(playerid, COLOR_SYNTAX, "The vehicle ID specified is not owned by any particular person.");
			    	return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}

				PlayerInfo[playerid][pSelected] = vehicleid;

				format(string, sizeof(string), "Name: %s\nOwner: %s\nTickets: $%i\nLocation: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vTickets], GetVehicleZoneName(vehicleid));
            	ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Vehicle lookup", string, "Track", "Cancel");
			}
		}
		case DIALOG_VEHICLELOOKUP2:
		{
			if((response) && IsLawEnforcement(playerid))
		    {
				new garageid, vehicleid = PlayerInfo[playerid][pSelected];

				if((garageid = GetVehicleGarage(vehicleid)) >= 0)
				{
				    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the garage this vehicle is inside of.");
				}
				else
				{
				    new
						Float:x,
						Float:y,
						Float:z;

                    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the vehicle's last known location.");

					GetVehiclePos(vehicleid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				}

    			PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    if((response) && GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
		    }
		}
		case DIALOG_FACTIONPAY2:
		{
		    if(GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        if(response)
		        {
		            new amount, factionid = PlayerInfo[playerid][pFactionEdit], rankid = PlayerInfo[playerid][pSelected];

		            if(sscanf(inputtext, "i", amount))
		            {
		                return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}
					if(!(1 <= amount <= 50000))
					{
					    SCM(playerid, COLOR_SYNTAX, "The specified amount must range from $1 to $50,000.");
					    return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}

					FactionInfo[factionid][fPaycheck][rankid] = amount;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
				    mysql_tquery(connectionID, queryBuffer);

					SM(playerid, COLOR_AQUA, "You have set the paycheck for rank %i to $%i.", rankid, amount);
				    Log_Write("log_faction", "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
		        }

				ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
		    }
		}
		case DIALOG_PHONEBOOK:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            PlayerInfo[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && PlayerInfo[playerid][pPage] > 1)
		        {
		            PlayerInfo[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		    }
		}
		case DIALOG_CREATEZONE:
		{
		    if((response) && (PlayerInfo[playerid][pAdmin] >= 5 || PlayerInfo[playerid][pGangMod]))
		    {
		        PlayerInfo[playerid][pMinX] = 0.0;
		        PlayerInfo[playerid][pMinY] = 0.0;
		        PlayerInfo[playerid][pMaxX] = 0.0;
		        PlayerInfo[playerid][pMaxY] = 0.0;

				if(PlayerInfo[playerid][pZoneType] == ZONETYPE_SAFE)
				{
					new Float:sx = PlayerInfo[playerid][plX],
					    Float:sy = PlayerInfo[playerid][plY],
					    Float:sz = PlayerInfo[playerid][plZ];

                    GetPlayerPos(playerid, sx, sy, sz);
					PlayerInfo[playerid][plX] = sx;
					PlayerInfo[playerid][plY] = sy;
					PlayerInfo[playerid][plZ] = sz;

			        PlayerInfo[playerid][pZoneCreation] = ZONETYPE_SAFE;
			        SCM(playerid, COLOR_WHITE, "** Your safe zone needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
				else if(PlayerInfo[playerid][pZoneType] == ZONETYPE_TURF)
				{
			        PlayerInfo[playerid][pZoneCreation] = ZONETYPE_TURF;
			        SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
		    }
		}
		case DIALOG_CONFIRMZONE:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_SAFE)
		        {
			        for(new i = 0; i < MAX_ZONES; i ++)
					{
					    if(!SafeZone[i][sExists])
					    {
					        new
					            Float:minx = PlayerInfo[playerid][pMinX],
					            Float:miny = PlayerInfo[playerid][pMinY],
					            Float:maxx = PlayerInfo[playerid][pMaxX],
					            Float:maxy = PlayerInfo[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            PlayerInfo[playerid][pMinX] = maxx;
	                            PlayerInfo[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            PlayerInfo[playerid][pMinY] = maxy;
					            PlayerInfo[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO safezones (min_x, min_y, max_x, max_y, height, sx, sy, sz) VALUES('%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z, PlayerInfo[playerid][plX], PlayerInfo[playerid][plY], PlayerInfo[playerid][plZ]);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateSafeZone", "iiffffffff", playerid, i, PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z, PlayerInfo[playerid][plX], PlayerInfo[playerid][plY], PlayerInfo[playerid][plZ]);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Safe Zone slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}

		    	else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF)
		    	{
		    	    for(new i = 1; i < MAX_TURFS; i ++)
					{
					    if(!TurfInfo[i][tExists])
					    {
					        new
					            Float:minx = PlayerInfo[playerid][pMinX],
					            Float:miny = PlayerInfo[playerid][pMinY],
					            Float:maxx = PlayerInfo[playerid][pMaxX],
					            Float:maxy = PlayerInfo[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            PlayerInfo[playerid][pMinX] = maxx;
	                            PlayerInfo[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            PlayerInfo[playerid][pMinY] = maxy;
					            PlayerInfo[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, \"%e\", %i, '%f', '%f', '%f', '%f', '%f')", i, PlayerInfo[playerid][pTurfName], PlayerInfo[playerid][pTurfType], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, PlayerInfo[playerid][pTurfName], PlayerInfo[playerid][pTurfType], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Turf slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
			}
			else
			{
			    CancelZoneCreation(playerid);

				if(PlayerInfo[playerid][pZoneType] == ZONETYPE_TURF)
				{
					SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /turfcancel to exit turf creation mode.");
					PlayerInfo[playerid][pZoneCreation] = ZONETYPE_TURF;
				}
				else if(PlayerInfo[playerid][pZoneType] == ZONETYPE_SAFE)
				{
					SCM(playerid, COLOR_WHITE, "** Your safe zone needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /zonecancel to exit turf creation mode.");
					PlayerInfo[playerid][pZoneCreation] = ZONETYPE_SAFE;
				}
			}
		}
		case DIALOG_MP3PLAYER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
		            }
		            case 1:
		            {
						/*if(!radioConnectionID)
						{
						    return SCM(playerid, COLOR_SYNTAX, "The radio station database is currently unavailable.");
						}*/
						SCM(playerid, COLOR_SYNTAX, "The radio station database is currently unavailable.");
						ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
					}
		            case 2:
		            {
						switch(PlayerInfo[playerid][pMusicType])
						{
				            case MUSIC_MP3PLAYER:
				            {
								if(PlayerInfo[playerid][pStreamType] == MUSIC_NONE) return SCM(playerid, COLOR_SYNTAX, "Your MP3 is already turned off!");
				                SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
				                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their MP3 player.", GetRPName(playerid));
							}
							case MUSIC_BOOMBOX:
							{
								if(PlayerInfo[playerid][pStreamType] == MUSIC_NONE) return SCM(playerid, COLOR_SYNTAX, "Your boombox is already turned off!");
							    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their boombox.", GetRPName(playerid));
							}
							case MUSIC_VEHICLE:
							{
							    if(IsPlayerInAnyVehicle(playerid))
							    {
									if(PlayerInfo[playerid][pStreamType] == MUSIC_NONE) return SCM(playerid, COLOR_SYNTAX, "Your vehicle radio is already turned off!");
								    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the radio in the vehicle.", GetRPName(playerid));
								}
							}
						}
					}
		        }
			}
		}
		case DIALOG_MP3URL:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
          		}

				if(strlen(inputtext) > 128)
				{
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "{FF0000}Your link was too big, Make sure your link has lower than 128 characters!\n"WHITE"Please enter the URL of the stream you want to play:", "Submit", "Back");					
				}

          		switch(PlayerInfo[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIO:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		            }
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    if(response)
		    {
		        strcpy(PlayerInfo[playerid][pGenre], inputtext, 32);
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
		    }
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    if(response)
		    {
		        PlayerInfo[playerid][pPage] = 1;
	     		PlayerInfo[playerid][pSearch] = 0;

		        strcpy(PlayerInfo[playerid][pSubgenre], inputtext, 32);
	     		ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
			}
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            PlayerInfo[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && PlayerInfo[playerid][pPage] > 1)
		        {
		            PlayerInfo[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else
		        {
			        listitem = ((PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS) + listitem;

					/*if(PlayerInfo[playerid][pSearch])
					{
					    mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, 1", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pGenre], listitem);
						mysql_tquery(radioConnectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
					}
					else
					{
						mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE genre = \"%e\" AND subgenre = \"%e\" ORDER BY name LIMIT %i, 1", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pSubgenre], listitem);
			        	mysql_tquery(radioConnectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
					}*/
					SCM(playerid, COLOR_SYNTAX, "The radio station database is currently unavailable.");
					return 1;
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pSearch])
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
			    }
			    else
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
				}
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 3)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Your search query must contain 3 characters or more.");
		            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		        }

		        PlayerInfo[playerid][pPage] = 1;
		        PlayerInfo[playerid][pSearch] = 1;

		        strcpy(PlayerInfo[playerid][pGenre], inputtext, 32);
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		}
		case DIALOG_PAWNSHOP:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pJailType] > 0 && listitem != 2)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you're in prisoned.");
				}

		        switch(listitem)
		        {
					case 0:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 150)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 150;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Free house (Low Class)')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have exchanged 150 Diamonds into a {00AA00}Low Class House ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a house ticket (Low Class House Type).", GetRPName(playerid), playerid);
					}
					case 1:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 100;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Entrance/Door Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 100 diamonds to an {00AA00}entrance/door ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for an entrance/door ticket(normal int).", GetRPName(playerid), playerid);
					}
					case 2:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 100;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Gate Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 100 diamonds to a {00AA00}gate ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a gate ticket.", GetRPName(playerid), playerid);
					}
					case 3:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 60)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 60;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Free Namechange')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 60 diamonds to a {00AA00}Free Namechange.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a free namechange.", GetRPName(playerid), playerid);
					}
					case 4:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 180)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 180;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Rare Car Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 180 diamonds to a {00AA00}rare car ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a rare car ticket.", GetRPName(playerid), playerid);
					}
				}
			}
		}

		case DIALOG_PSTASH:
		{
			new pstring[256], factionid = PlayerInfo[playerid][pFaction];
			if(!IsLawEnforcement(playerid))
			{
				return 1;
			}
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PlayerInfo[playerid][pSelected] = 1;
						format(pstring, sizeof(pstring), "Cash Available: $%s", AddCommas(FactionInfo[factionid][fsCash]));
					}
					case 1:
					{
						PlayerInfo[playerid][pSelected] = 2;
						format(pstring, sizeof(pstring), "Materials Available: %s", AddCommas(FactionInfo[factionid][fsMats]));
					}
					case 2:
					{
						PlayerInfo[playerid][pSelected] = 3;
						format(pstring, sizeof(pstring), "Pots Available: %s", AddCommas(FactionInfo[factionid][fsPot]));
					}
					case 3:
					{
						PlayerInfo[playerid][pSelected] = 4;
						format(pstring, sizeof(pstring), "Cracks Available: %s", AddCommas(FactionInfo[factionid][fsCrack]));
					}
					case 4:
					{
						PlayerInfo[playerid][pSelected] = 5;
						format(pstring, sizeof(pstring), "Meths Available: %s", AddCommas(FactionInfo[factionid][fsMeth]));
					}
					case 5:
					{
						PlayerInfo[playerid][pSelected] = 6;
						format(pstring, sizeof(pstring), "Painkillers Available: %s", AddCommas(FactionInfo[factionid][fsPainkiller]));
					}
				}
				ShowPlayerDialog(playerid, DIALOG_PSTASH2, DIALOG_STYLE_LIST, pstring, "Deposit\nWithdraw", "Select", "Back");
			}
		}
		case DIALOG_PSTASH2:
		{
			new pstring[256], factionid = PlayerInfo[playerid][pFaction];
			if(!IsLawEnforcement(playerid))
			{
				return 1;
			}
			if(response)
			{
				if(listitem == 0)
				{
					switch(PlayerInfo[playerid][pSelected])
					{
						case 1:
						{
							format(pstring, sizeof(pstring), "Type the amount of Cash you want to deposit. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
						}
						case 2:
						{
							format(pstring, sizeof(pstring), "Type the amount of Materials you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
						}
						case 3:
						{
							format(pstring, sizeof(pstring), "Type the amount of Pots you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
						}
						case 4:
						{
							format(pstring, sizeof(pstring), "Type the amount of Cracks you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
						}
						case 5:
						{
							format(pstring, sizeof(pstring), "Type the amount of Meths you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
						}
						case 6:
						{
							format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
						}
					}
					ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
				}
				if(listitem == 1)
				{
					if(PlayerInfo[playerid][pFactionRank] <= 5)
					{
						SCM(playerid, COLOR_SYNTAX, "You're not authorized to Withdraw!");
					}
					else
					{
						switch(PlayerInfo[playerid][pSelected])
						{
							case 1:
							{
								if(PlayerInfo[playerid][pFactionRank] <= 9)
								{
									SCM(playerid, COLOR_SYNTAX, "You're not authorized to Withdraw!");
								}
								else
								{
									format(pstring, sizeof(pstring), "Type the amount of Cash you want to withdraw. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
								}
							}
							case 2:
							{
								if(PlayerInfo[playerid][pFactionRank] <= 9)
								{
									SCM(playerid, COLOR_SYNTAX, "You're not authorized to Withdraw!");
								}
								else
								{
									format(pstring, sizeof(pstring), "Type the amount of Materials you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
								}
							}
							case 3:
							{
								format(pstring, sizeof(pstring), "Type the amount of Pots you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
							}
							case 4:
							{
								format(pstring, sizeof(pstring), "Type the amount of Cracks you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
							}
							case 5:
							{
								format(pstring, sizeof(pstring), "Type the amount of Meths you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
							}
							case 6:
							{
								format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
							}
						}
						ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
					}
				}
			}
			else
			{
				format(pstring, sizeof(pstring), "Item\tAmount\nCash\t$%s\nMats\t%s\nPots\t%s\nCracks\t%s\nMeths\t%s\nPainkillers\t%s", AddCommas(FactionInfo[factionid][fsCash]), AddCommas(FactionInfo[factionid][fsMats]), AddCommas(FactionInfo[factionid][fsPot]), AddCommas(FactionInfo[factionid][fsCrack]), AddCommas(FactionInfo[factionid][fsMeth]), AddCommas(FactionInfo[factionid][fsPainkiller]));
				ShowPlayerDialog(playerid, DIALOG_PSTASH, DIALOG_STYLE_LIST, "SFPD Faction Stash", pstring, "Select", "Back");
			}
		}

		case DIALOG_PSTASH_DEPOSIT:
		{
			new pstring[256], factionid = PlayerInfo[playerid][pFaction], amount;
			if(!IsLawEnforcement(playerid))
			{
				return 1;
			}
			if(response)
			{
				switch(PlayerInfo[playerid][pSelected])
				{
					case 1:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Cash you want to deposit. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Cash you want to deposit. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						GivePlayerCash(playerid, -amount);
						FactionInfo[factionid][fsCash] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET cash = %i WHERE id = %i", FactionInfo[factionid][fsCash], factionid);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cash to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted $%s cash to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted $%i cash to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 2:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Materials you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Materials you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						PlayerInfo[playerid][pMaterials] -= amount;
						FactionInfo[factionid][fsMats] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET materials = %i WHERE id = %i", FactionInfo[factionid][fsMats], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some materials to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted %s materials to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted %i materials to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 3:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Pots you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Pots you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						PlayerInfo[playerid][pPot] -= amount;
						FactionInfo[factionid][fsPot] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET pot = %i WHERE id = %i", FactionInfo[factionid][fsPot], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some pots to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted %s pots to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted %i pots to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 4:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Crack you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Cracks you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						PlayerInfo[playerid][pCrack] -= amount;
						FactionInfo[factionid][fsCrack] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET crack = %i WHERE id = %i", FactionInfo[factionid][fsCrack], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cracks to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted %s cracks to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted %i cracks to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 5:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Meth you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Meth you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						PlayerInfo[playerid][pMeth] -= amount;
						FactionInfo[factionid][fsMeth] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET meth = %i WHERE id = %i", FactionInfo[factionid][fsMeth], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some meth to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted %s meth to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted %i meth to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 6:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");
						}

				        if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to deposit. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_DEPOSIT, DIALOG_STYLE_INPUT, "Faction Stash Deposit", pstring, "Deposit", "Back");							
						}

						PlayerInfo[playerid][pPainkillers] -= amount;
						FactionInfo[factionid][fsPainkiller] += amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET painkiller = %i WHERE id = %i", FactionInfo[factionid][fsPainkiller], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some painkillers to their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have depositted %s painkillers to your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) depositted %i painkillers to their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
				format(pstring, sizeof(pstring), "Item\tAmount\nCash\t$%s\nMats\t%s\nPots\t%s\nCracks\t%s\nMeths\t%s\nPainkillers\t%s", AddCommas(FactionInfo[factionid][fsCash]), AddCommas(FactionInfo[factionid][fsMats]), AddCommas(FactionInfo[factionid][fsPot]), AddCommas(FactionInfo[factionid][fsCrack]), AddCommas(FactionInfo[factionid][fsMeth]), AddCommas(FactionInfo[factionid][fsPainkiller]));
				ShowPlayerDialog(playerid, DIALOG_PSTASH, DIALOG_STYLE_LIST, "SFPD Faction Stash", pstring, "Select", "Back");
			}
		}

		case DIALOG_BLACKMARKET:
		{
		    if(response)
		    {
		    	if(PlayerInfo[playerid][pAdminDuty])
		    	{
		    		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command as you're aduty.");
		    	}
		        switch(listitem)
		        {
					case 0:
					{
					    if(PlayerInfo[playerid][pCash] < 10000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
		               	}
		                if(PlayerInfo[playerid][pMask])
		                {
		                	return SCM(playerid, COLOR_SYNTAX, "You have a mask already, use /mask to use it.");
		                }


			            PlayerInfo[playerid][pMask] = 1;
			            GivePlayerCash(playerid, -10000);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_GREEN, "You bought $10000 for {00AA00}Mask{33CCFF}.");
					}
					case 1:
					{
					    if(PlayerInfo[playerid][pCash] < 15000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
		                }

		                if(PlayerHasWeapon(playerid, 44))
				        {
				            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}

					    GiveWeapon(playerid, 44);
			            GivePlayerCash(playerid, -15000);

						SendClientMessage(playerid, COLOR_GREEN, "You bought $15000 for {00AA00}Night Vis Goggle{33CCFF}.");
					}
					case 2:
					{
					    if(PlayerInfo[playerid][pCash] < 30000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
		                }

		                if(PlayerHasWeapon(playerid, 45))
				        {
				            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}

					    GiveWeapon(playerid, 45);
			            GivePlayerCash(playerid, -30000);

						SendClientMessage(playerid, COLOR_GREEN, "You bought $30000 for {00AA00}Thermal Goggle{33CCFF}.");
					}
					case 3:
					{
					    if(PlayerInfo[playerid][pCash] < 20000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
		                }

		                if(PlayerHasWeapon(playerid, 25))
				        {
				            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}

					    GiveWeapon(playerid, 25);
			            GivePlayerCash(playerid, -20000);

						SendClientMessage(playerid, COLOR_GREEN, "You bought $20000 for {00AA00}Shotgun{33CCFF}.");
					}
					case 4:
					{
					   	if(PlayerInfo[playerid][pCash] < 10000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
		                }
			            SetScriptArmour(playerid, 100.0);

			            GivePlayerCash(playerid, -10000);

						SendClientMessage(playerid, COLOR_GREEN, "You bought $10000 for {00AA00}Full Armor{33CCFF}.");
					}
					case 5:
					{
						if(PlayerInfo[playerid][pCash] < 500)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
						}
						if(PlayerInfo[playerid][pBakingSoda] + 5 > 20)
						{
							SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of muriatic acid.");
							return 1;
						}
						PlayerInfo[playerid][pBakingSoda] += 5;

						GivePlayerCash(playerid, -500);
						SCM(playerid, COLOR_GREEN, "You bought $500 for {00AA00}5x  Baking Soda {33CCFF}.");
					}
					case 6:
					{
						if(PlayerInfo[playerid][pCash] < 500)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to get this item.");
						}
						if(PlayerInfo[playerid][pMuriaticAcid] + 5 > 20)
						{
							SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of muriatic acid.");
							return 1;
						}
						PlayerInfo[playerid][pMuriaticAcid] += 5;

						GivePlayerCash(playerid, -500);
						SCM(playerid, COLOR_GREEN, "You bought $500 for {00AA00}5x Muriatic Acid {33CCFF}.");
					}
				}
			}
		}

		case DIALOG_PSTASH_WITHDRAW:
		{
			new pstring[256], factionid = PlayerInfo[playerid][pFaction], amount;
			if(!IsLawEnforcement(playerid))
			{
				return 1;
			}
			if(response)
			{
				if(PlayerInfo[playerid][pFactionRank] <= 9)
				{
					return SCM(playerid, COLOR_SYNTAX, "You're not authorized to Withdraw!");
				}
				switch(PlayerInfo[playerid][pSelected])
				{
					case 1:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Cash you want to withdraw. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Cash you want to withdraw. (Current: $%s)", AddCommas(FactionInfo[factionid][fsCash]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						GivePlayerCash(playerid, amount);
						FactionInfo[factionid][fsCash] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET cash = %i WHERE id = %i", FactionInfo[factionid][fsCash], factionid);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrew some cash from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew $%s cash from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew $%i cash from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 2:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Materials you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsMats])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Materials you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMats]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				        {
						    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
						}

						PlayerInfo[playerid][pMaterials] += amount;
						FactionInfo[factionid][fsMats] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET materials = %i WHERE id = %i", FactionInfo[factionid][fsMats], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withrew some materials from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew %s materials from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew %i materials from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 3:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Pots you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Pots you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPot]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				        {
						    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pots. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
						}

						PlayerInfo[playerid][pPot] += amount;
						FactionInfo[factionid][fsPot] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET pot = %i WHERE id = %i", FactionInfo[factionid][fsPot], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrew some pots from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew %s pots from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew %i pots from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 4:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Crack you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Cracks you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsCrack]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				        {
						    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i cracks. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
						}

						PlayerInfo[playerid][pCrack] += amount;
						FactionInfo[factionid][fsCrack] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET crack = %i WHERE id = %i", FactionInfo[factionid][fsCrack], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrew some cracks from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew %s cracks from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew %i cracks from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 5:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Meth you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Meths you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsMeth]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				        {
						    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meths. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
						}

						PlayerInfo[playerid][pMeth] += amount;
						FactionInfo[factionid][fsMeth] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET meth = %i WHERE id = %i", FactionInfo[factionid][fsMeth], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrew some meth from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew %s meth from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew %i meth from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case 6:
					{
						if(sscanf(inputtext, "i", amount))
						{
							format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");
						}

						if(amount > FactionInfo[factionid][fsPainkiller])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
							format(pstring, sizeof(pstring), "Type the amount of Painkillers you want to withdraw. (Current: %s)", AddCommas(FactionInfo[factionid][fsPainkiller]));
							return ShowPlayerDialog(playerid, DIALOG_PSTASH_WITHDRAW, DIALOG_STYLE_INPUT, "Faction Stash Withdraw", pstring, "Withdraw", "Back");							
						}

						if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				        {
						    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
						}

						PlayerInfo[playerid][pPainkillers] += amount;
						FactionInfo[factionid][fsPainkiller] -= amount;

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET painkiller = %i WHERE id = %i", FactionInfo[factionid][fsPainkiller], factionid);
				        mysql_tquery(connectionID, queryBuffer);

				        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				        mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdrew some painkillers from their faction stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrew %s painkillers from your faction stash.", AddCommas(amount));
						Log_Write("log_faction", "%s (uid: %i) withdrew %i painkillers from their SFPD faction stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
				format(pstring, sizeof(pstring), "Item\tAmount\nCash\t$%s\nMats\t%s\nPots\t%s\nCracks\t%s\nMeths\t%s\nPainkillers\t%s", AddCommas(FactionInfo[factionid][fsCash]), AddCommas(FactionInfo[factionid][fsMats]), AddCommas(FactionInfo[factionid][fsPot]), AddCommas(FactionInfo[factionid][fsCrack]), AddCommas(FactionInfo[factionid][fsMeth]), AddCommas(FactionInfo[factionid][fsPainkiller]));
				ShowPlayerDialog(playerid, DIALOG_PSTASH, DIALOG_STYLE_LIST, "SFPD Faction Stash", pstring, "Select", "Back");
			}
		}

		case DIALOG_GANGSTASH:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
			            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
		            }
					case 2:
					{
					    PlayerInfo[playerid][pSelected] = ITEM_MATERIALS;
					    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
					}
		            case 3:
		            {
		                PlayerInfo[playerid][pSelected] = ITEM_CASH;
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
					}
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GCLOTHES);
					}
		        }
		    }
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
	        if(PlayerInfo[playerid][pGang] == -1)
	        {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang Locker | Weapons", "Withdraw\nDeposit", "Select", "Back");
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHWEAPONS2:
		{
          	if(PlayerInfo[playerid][pGang] == -1)
	        {
		        return 1;
		    }
		    if(response)
		    {
				if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 1)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 1+ in order to withdraw weapons.");
		            }

				    switch(PlayerInfo[playerid][pSelected])
				    {
				        case GANGWEAPON_9MM:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
				            GiveWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a 9mm from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
				            GiveWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a silenced pistol from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
				            GiveWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Desert Eagle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
				            GiveWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a shotgun from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]--;
				            GiveWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a SPAS-12 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a SPAS-12 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
				            GiveWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Tec-9 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
				            GiveWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Micro Uzi from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
				            GiveWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an MP5 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
				            GiveWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an AK-47 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4]--;
				            GiveWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an M4 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an M4 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
				            GiveWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a rifle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]--;
				            GiveWeapon(playerid, 34);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sniper rifle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a sniper rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RPG:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RPG] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 35))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RPG]--;
				            GiveWeapon(playerid, 35);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rpg = weapon_rpg - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a rocket launcher from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a rocket launcher from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
					}
				}
				else if(listitem == 1)
		        {
					if(PlayerInfo[playerid][pDonator] != 0)
					{
						return SCM(playerid, COLOR_SYNTAX, "You can't deposit wepaons as a Donator");
					}
                    switch(PlayerInfo[playerid][pSelected])
				    {
				        case GANGWEAPON_9MM:
				        {
				            if(!PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
				            RemovePlayerWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a 9mm in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(!PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
				            RemovePlayerWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a silenced pistol in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(!PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
				            RemovePlayerWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Desert Eagle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(!PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
				            RemovePlayerWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a shotgun in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(!PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]++;
				            RemovePlayerWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a SPAS-12 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a SPAS-12 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(!PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
				            RemovePlayerWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Tec-9 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(!PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
				            RemovePlayerWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Micro Uzi in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(!PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
				            RemovePlayerWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an MP5 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(!PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
				            RemovePlayerWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an AK-47 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(!PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
				            RemovePlayerWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an M4 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(!PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
				            RemovePlayerWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a rifle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(!PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
				            RemovePlayerWeapon(playerid, 34);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sniper rifle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RPG:
				        {
				            if(!PlayerHasWeapon(playerid, 35))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RPG]++;
				            RemovePlayerWeapon(playerid, 35);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rpg = weapon_rpg + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a rocket launcher in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a rocket launcher in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
					}
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
			}
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: PlayerInfo[playerid][pSelected] = ITEM_WEED;
		            case 1: PlayerInfo[playerid][pSelected] = ITEM_COCAINE;
		            case 2: PlayerInfo[playerid][pSelected] = ITEM_METH;
		            case 3: PlayerInfo[playerid][pSelected] = ITEM_PAINKILLERS;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(PlayerInfo[playerid][pGangRank] < 2)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 2+ in order to withdraw drugs.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
			}
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 2)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				switch(PlayerInfo[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPot] -= amount;
						PlayerInfo[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some pot from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of pot from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCrack] -= amount;
						PlayerInfo[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some Crack from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of Crack from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMeth] -= amount;
						PlayerInfo[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some meth from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of meth from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] -= amount;
						PlayerInfo[playerid][pPainkillers] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some painkillers from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i painkillers from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMaterials] -= amount;
						PlayerInfo[playerid][pMaterials] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some materials from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i materials from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCash] -= amount;
						GivePlayerCash(playerid, amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCash], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some cash from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS)
				{
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				}
				else if(PlayerInfo[playerid][pSelected] == ITEM_CASH)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				switch(PlayerInfo[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gPot] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of pot.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPot] += amount;
						PlayerInfo[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some pot in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of pot in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of pot in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gCrack] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of Crack.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCrack] += amount;
						PlayerInfo[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some Crack in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of Crack in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of Crack in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of meth.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMeth] += amount;
						PlayerInfo[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some meth in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of meth in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i painkillers.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] += amount;
						PlayerInfo[playerid][pPainkillers] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some painkillers in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i painkillers in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i materials.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMaterials] += amount;
						PlayerInfo[playerid][pMaterials] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some materials in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i materials in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gCash] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than $%i.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCash] += amount;
						GivePlayerCash(playerid, -amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCash], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cash in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited $%i in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposited $%i in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
				if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS)
				{
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				}
				else if(PlayerInfo[playerid][pSelected] == ITEM_CASH)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 4)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 4+ in order to withdraw materials.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHCASH:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5 in order to withdraw cash.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSKINS:
		{
		    if(PlayerInfo[playerid][pGang] >= 0)
		    {
		        if(response)
		        {
					new index = PlayerInfo[playerid][pSkinSelected] + 1;

					if(index >= MAX_GANG_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
					    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
					    PlayerInfo[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_GANG_SKINS; i ++)
						{
						    if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
						        PlayerInfo[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == PlayerInfo[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
							{
						    	if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
						        	PlayerInfo[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "CXRP">> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
		        }
		        else
		        {
		            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
		            PlayerInfo[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes their clothes.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_GANGFINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang]) && (count++ == listitem))
			 	    {
                        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
						}
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
						}
			            return 1;
		            }
				}
			}
		}
		case DIALOG_GANGPOINTSHOP:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50,000 on hand to purchase this upgrade.");
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer] = 1;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugX] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugY] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][0] = 500;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][1] = 1000;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][2] = 1500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugpot = 0, drugcrack = 0, drugmeth = 0, pot_price = 500, crack_price = 1000, meth_price = 1500 WHERE id = %i", PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -500);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "CXRP"NPC drug dealer{CCFFFF}. '/gang npc' to edit your drug dealer.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						ReloadGang(PlayerInfo[playerid][pGang]);
					}
					case 1:
		            {
		                if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50,000 on hand to purchase this upgrade.");
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer] = 1;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsX] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsY] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] = 0;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0 WHERE id = %i",PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -500);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "CXRP"NPC arms dealer{CCFFFF}. '/gang npc' to edit your arms dealer.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						ReloadGang(PlayerInfo[playerid][pGang]);
					}
                    case 2:
					{
					    if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 1000)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50,000 on hand to purchase this upgrade.");
						}

						GivePlayerCash(playerid, -50000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -1000);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Gang Custom Helipad')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SCM(playerid, COLOR_AQUA, "You have spent 1000 GP & $50,000 on "CXRP"Custom Helipad{CCFFFF}. /report for an admin to set it up.");
						SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for helipad for their gang.", GetRPName(playerid), playerid);
					}
					case 3:
					{
					    switch(GangInfo[PlayerInfo[playerid][pGang]][gLevel])
					    {
					        case 1:
					        {
					            if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 4000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(PlayerInfo[playerid][pCash] < 75000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $75,000 on hand to purchase this upgrade.");
								}

								GangInfo[PlayerInfo[playerid][pGang]][gLevel] = 2;

								GiveGangPoints(PlayerInfo[playerid][pGang], -4000);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 2 WHERE id = %i", PlayerInfo[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -75000);
								ReloadGang(PlayerInfo[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 4000 GP & $75000 for gang level 2/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerInfo[playerid][pGang]), GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 4000 GP & $75000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
							}
							case 2:
					        {
					            if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 8000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(PlayerInfo[playerid][pCash] < 100000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $100,000 on hand to purchase this upgrade.");
								}

								GangInfo[PlayerInfo[playerid][pGang]][gLevel] = 3;
								GiveGangPoints(PlayerInfo[playerid][pGang], -8000);
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 3 WHERE id = %i", PlayerInfo[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -100000);
								ReloadGang(PlayerInfo[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 8000 GP & $100000 for gang level 3/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerInfo[playerid][pGang]), GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 8000 GP & $100000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
							}
						}
					}
		        }
		    }
		}
		case DIALOG_GANGARMSPRICES:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
			}
		}
		case DIALOG_GANGARMSPRICE:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}
				if(amount > 1000000)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be higher than $1,000,000.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}

				GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][PlayerInfo[playerid][pSelected]] = amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", PlayerInfo[playerid][pSelected] + 1, amount, PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				if(PlayerInfo[playerid][pSelected] == 0) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"Micro Uzi{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 1) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"Tec-9{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 2) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"MP5{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 3) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"Desert Eagle{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 5) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"Shotgun{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 6) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"Rifle{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 7) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"SD Pistol{CCFFFF} to $%s.", AddCommas(amount));
		        } else if(PlayerInfo[playerid][pSelected] == 8) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"9mm{CCFFFF} to $%s.", AddCommas(amount));
		        }
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
		}
		case DIALOG_GANGARMSDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
				}
				else if(listitem == 1)
				{
				    if(PlayerInfo[playerid][pGang] != PlayerInfo[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This arms dealer doesn't belong to your gang.");
				    }
				    if(PlayerInfo[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 5+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
				}
			}
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 800)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 800;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 28);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a micro uzi.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "CXRP"UZI{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 1:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 800)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 800;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 32);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Tec-9.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "CXRP"Tec-9{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 2:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 1000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 1000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 29);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an MP5.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "CXRP"MP5{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 3:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 1800)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 1800;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 24);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Desert Eagle.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "CXRP"Desert Eagle{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 4:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 400)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 400;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 25);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an AK-47.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "CXRP"Shotgun{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 5:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 600)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 600;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 33);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an M4.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "CXRP"Rifle{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 6:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 200)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 200;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 23);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "CXRP"SD Pistol{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 7:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 150)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 150;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 22);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "CXRP"9mm{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
				}
			}
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

		case DIALOG_GANGARMSEDIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
				}
				if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
			    }

			    GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] += amount;
			    PlayerInfo[playerid][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials], PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have deposited %i materials in your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
				}
				if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }

			    GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] -= amount;
			    PlayerInfo[playerid][pMaterials] += amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials], PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have withdrawn %i materials from your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
				}
				else if(listitem == 1)
				{
				    if(PlayerInfo[playerid][pGang] != PlayerInfo[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This drug dealer doesn't belong to your gang.");
				    }
				    if(PlayerInfo[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 5+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
				}
			}
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    PlayerInfo[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
		case DIALOG_GANGDRUGBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(PlayerInfo[playerid][pSelected])
			    {
			        case 0: // Pot
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pPot] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of pot.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "CXRP"pot{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Crack
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pCrack] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of Crack.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "CXRP"Crack{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // Meth
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pMeth] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of meth.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "CXRP"meth{CCFFFF} for $%i.", amount, cost);
					}
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
			}
		}
        case DIALOG_GANGDRUGEDIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
        case DIALOG_GANGDRUGPRICES:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
			}
		}
		case DIALOG_GANGDRUGPRICE:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}
				if(amount > 1000000)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be higher than $1,000,000.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}

				GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][PlayerInfo[playerid][pSelected]] = amount;

				if(PlayerInfo[playerid][pSelected] == 0) {
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"pot{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 1) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"crack{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 2) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "CXRP"meth{CCFFFF} to $%i.", amount);
		        }

		        mysql_tquery(connectionID, queryBuffer);
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] += amount;
						PlayerInfo[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "CXRP"pot{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] += amount;
						PlayerInfo[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "CXRP"Crack{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] += amount;
						PlayerInfo[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "CXRP"meth{CCFFFF} in your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
		}
		case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 4)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] -= amount;
						PlayerInfo[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "CXRP"pot{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] -= amount;
						PlayerInfo[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "CXRP"Crack{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] -= amount;
						PlayerInfo[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "CXRP"meth{CCFFFF} from your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
		}
		case DIALOG_FREENAMECHANGE:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(!(3 <= strlen(inputtext) <= 20))
				{
				    SCM(playerid, COLOR_SYNTAX, "Your name must contain 3 to 20 characters.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(strfind(inputtext, "_") == -1)
				{
				    SCM(playerid, COLOR_SYNTAX, "The name needs to contain at least one underscore.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
                if(!IsValidName(inputtext))
                {
				    SCM(playerid, COLOR_SYNTAX, "That name is not supported by SA-MP.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}

		        PlayerInfo[playerid][pFreeNamechange] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", inputtext);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
		    }
		    else
		    {
				return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
			}
		}
		case DIALOG_RENTAL:
		{
			if( !response ) 
			{
				for( new i = 0; i < 10; i++) 
				{
					listrent[playerid][i] = 0;
				}
				chooserentId[playerid] = -1;
				return true;
			}
			if( response )
			{
				chooserentId[playerid ] = listrent[playerid][listitem];
				ShowPlayerDialog( playerid, DIALOG_RENTTIME, DIALOG_STYLE_INPUT, "Input Time", ""WHITE"Enter the number of minutes you want to rent a vehicle for\nMinimum: "AQUA"1 "WHITE"Maximum: "AQUA"10000", "Input", "Cancel" );
			}
		}
		case DIALOG_RENTTIME:
		{
			if(!response ) {
			chooserentId[playerid] = -1;
			return true;
			}
			if(response)
			{
				new minutes = strval(inputtext), string[128], string_s[128], cost, rentid, price, engine, lights, alarm, doors, bonnet, boot, objective;
				if(minutes < 1 || minutes > 10000)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can rent a vehicle for minimum 1 minutes and maximum 10000 minutes.");
				}

				rentid = GetNearestRentId(playerid);
				price = GetRentPrice(rentid, chooserentId[playerid]);
				cost = minutes*price;

				if(PlayerInfo[playerid][pCash] < cost) return SCM(playerid, COLOR_SYNTAX, "You do not have enough money to rent this vehicle.");
				GivePlayerCash(playerid, -cost);

				rentveh[playerid] = CreateVehicle(chooserentId[playerid], RentInfo[rentid][rVehX], RentInfo[rentid][rVehY], RentInfo[rentid][rVehZ], RentInfo[rentid][rVehA], 0, 0, 3000000);
				GetVehicleParamsEx(rentveh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				PutPlayerInVehicle(playerid, rentveh[playerid], 0);
				SetVehicleParamsEx(rentveh[playerid], 1, lights, alarm, 0, bonnet, boot, objective);
				renttimer[playerid] = minutes*60;

				ShowRentTimerTD(playerid);
				format(string, sizeof(string), "%i_sec", renttimer[playerid]);
				PlayerTextDrawSetString(playerid, RENT_TIMER[playerid][3], string);
				VehicleInfo[rentveh[playerid]][vOwner] = PlayerInfo[playerid][pID];

				format(string_s, sizeof(string_s), "You rented a(n) %s for %d minutes at price of $%d.", GetVehicleNameEx(chooserentId[playerid]), minutes, cost);
				SCM(playerid, COLOR_YELLOW, string_s);
			}
		}
	}

	return 1;
}

public OnGameModeExit()
{
	for (new veh = 0; veh < 10; veh ++)
	{ 
		if(IsValidVehicle(dealershipVeh[veh]))
		{			
			DestroyVehicle(dealershipVeh[veh]);
		}
	}

	for(new i, m = GetPlayerPoolSize(); i <= m; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
	    Trash_ResetPlayer(i, 1);
	}

	KillTimer(pingTimer);
	TextDrawDestroy(WifiBox);
	TextDrawDestroy(Bar1);
	TextDrawDestroy(Bar2);
	TextDrawDestroy(Bar3);
	TextDrawDestroy(Bar4);
	TextDrawDestroy(Bar5);
	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
			SvDetachAllListenersFromStream(FactionVC[i]);
			SvDetachAllSpeakersFromStream(FactionVC[i]);
			SvDeleteStream(FactionVC[i]);
		}
	}
	for(new i = 0; i < MAX_GANGS; i ++)
	{
		if(GangInfo[i][gSetup])
	    {
			SvDetachAllListenersFromStream(GangVC[i]);
			SvDetachAllSpeakersFromStream(GangVC[i]);
			SvDeleteStream(GangVC[i]);
		}
	}

	for (new i = 0; i < sizeof(playerInfoFrameTD); i++) {
	    TextDrawDestroy(playerInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(playerInfoTD); i++) {
	    TextDrawDestroy(playerInfoTD[i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoFrameTD); i++) {
	    TextDrawDestroy(vehicleInfoFrameTD[i]);
	}

	for (new i = 0; i < sizeof(vehicleInfoTD); i++) {
	    TextDrawDestroy(vehicleInfoTD[i]);
	}

    DestroyDynamicArea(prison_rect);
	GangZoneDestroy(zone_prison);
    SaveServerInfo();

	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i))
	    {
	        DestroyObject(i);
		}
	}

	KillTimer(FlashTimer);
	mysql_close(connectionID);
	
	if(gDoubleSalary)
	{
	    gDoubleSalary = 0;
	}
	foreach(new id : Player)
	{
		SavePlayerVariables(id);
		TerminateInfo(id, 0);
	}
	return 1;
}

forward KickIgraca( playerid );
public KickIgraca( playerid )
{
    Kick( playerid );
    return 1;
}

public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	Trash_InitPlayer(playerid);
	SpawnGlitch[playerid] = false;

	if(IsPlayerHaveAutoaim(playerid) && IsPlayerMobile(playerid))
    {
        SendClientMessage( playerid, 0xfa5555AA, "You have been kicked because you have auto-aiming enabled on your phone!" );
        SendClientMessage( playerid, 0xfa5555AA, "Turn it off from the SA:MP mobile settings!" );
        SetTimerEx( "KickIgraca", 150, false, "d", playerid );
    }

	TextDrawShowForPlayer(playerid, WifiBox);
	targetID[playerid] = INVALID_PLAYER_ID;
    spectateID[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRobbingAtm] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pRobbingCP] = -1;
	PlayerInfo[playerid][pCurrentShamal] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pCurrentBus] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pWatchingWindow] = false;
    CreatePlayerTextDraws(playerid);
	Player_Fire_Enabled[playerid] = true;
	Player_Key_Sprint_Time[playerid] = 0;
	ShowingPhone[playerid] = false;
	takingselfie[playerid] = 0;

	for(new i = 0; i < MAX_PLAYERS; i++) {
    	for (new j = 0; j < MAX_VEHICLES; j++) {
			PlayerVeh[i][j] = INVALID_INFORMATION;
			VehFuel[i][j] = INVALID_INFORMATION;
			VehLocation[i][j] = "INVALID_INFORMATION";
			VehHealth[i][j] = INVALID_INFORMATION;
		}
	}

	Damaged[playerid] = 0;
	DamageAmount[playerid] = 0.0;
	DamageBone[playerid] = -1;
	strcpy(DamageBy[playerid], "N/A", MAX_PLAYER_NAME);
	DamageWep[playerid] = -1;
	strcpy(DamageTime[playerid], "N/A", 256);

	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2000, playerid);
	ChoosingNum[playerid] = 0;
	JobSkin[playerid] = -1;
    if(SvGetVersion(playerid) != SV_NULL && SvHasMicro(playerid) != SV_FALSE)
    {
		lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
        SM(playerid, -1, ""CXRP"CXRP Voice"WHITE": Press "CXRP"B"WHITE" or "CXRP"Z"WHITE" to speak.");
        SvAddKey(playerid, 0x42);
        SvAddKey(playerid, 0x5A);
    }
	God[playerid] = 0;
    IsInPrison[playerid] = 0;
	PaintballKills[playerid] = 0;
    GangZoneShowForPlayer(playerid, zone_prison, 0xFF000096);
    
//	------------------------------------------------------------------------//
	CreateVST_Player(playerid);
	CreateGROTTI_TD_PLAYER(playerid);
	//Timer TD
	timer_td[playerid][0] = CreatePlayerTextDraw(playerid, 87.000, 244.000, "__");
	PlayerTextDrawLetterSize(playerid, timer_td[playerid][0], 1.149, 2.098);
	PlayerTextDrawTextSize(playerid, timer_td[playerid][0], 66.000, -86.000);
	PlayerTextDrawAlignment(playerid, timer_td[playerid][0], 2);
	PlayerTextDrawColor(playerid, timer_td[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, timer_td[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, timer_td[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, timer_td[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, timer_td[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, timer_td[playerid][0], 150);
	PlayerTextDrawFont(playerid, timer_td[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, timer_td[playerid][0], 1);

	timer_td[playerid][1] = CreatePlayerTextDraw(playerid, 47.000, 247.000, "Time:");
	PlayerTextDrawLetterSize(playerid, timer_td[playerid][1], 0.300, 1.299);
	PlayerTextDrawTextSize(playerid, timer_td[playerid][1], -86.000, -8.000);
	PlayerTextDrawAlignment(playerid, timer_td[playerid][1], 1);
	PlayerTextDrawColor(playerid, timer_td[playerid][1], -2686721);
	PlayerTextDrawSetShadow(playerid, timer_td[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, timer_td[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, timer_td[playerid][1], 150);
	PlayerTextDrawFont(playerid, timer_td[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, timer_td[playerid][1], 1);

	timer_td[playerid][2] = CreatePlayerTextDraw(playerid, 83.000, 246.000, "1390");
	PlayerTextDrawLetterSize(playerid, timer_td[playerid][2], 0.230, 1.500);
	PlayerTextDrawAlignment(playerid, timer_td[playerid][2], 1);
	PlayerTextDrawColor(playerid, timer_td[playerid][2], -2686721);
	PlayerTextDrawSetShadow(playerid, timer_td[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, timer_td[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, timer_td[playerid][2], 150);
	PlayerTextDrawFont(playerid, timer_td[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, timer_td[playerid][2], 1);

	timer_td[playerid][3] = CreatePlayerTextDraw(playerid, 108.000, 246.500, "sec");
	PlayerTextDrawLetterSize(playerid, timer_td[playerid][3], 0.239, 1.399);
	PlayerTextDrawAlignment(playerid, timer_td[playerid][3], 1);
	PlayerTextDrawColor(playerid, timer_td[playerid][3], -2686721);
	PlayerTextDrawSetShadow(playerid, timer_td[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, timer_td[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, timer_td[playerid][3], 150);
	PlayerTextDrawFont(playerid, timer_td[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, timer_td[playerid][3], 1);

	DmgInfo[playerid][0] = CreatePlayerTextDraw(playerid, 418.000000, 280.000000, "~g~+25.0");
	PlayerTextDrawFont(playerid, DmgInfo[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, DmgInfo[playerid][0], 0.258332, 1.299999);
	PlayerTextDrawTextSize(playerid, DmgInfo[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, DmgInfo[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, DmgInfo[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, DmgInfo[playerid][0], 1);
	PlayerTextDrawColor(playerid, DmgInfo[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, DmgInfo[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, DmgInfo[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, DmgInfo[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, DmgInfo[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, DmgInfo[playerid][0], 0);

	DmgInfo[playerid][1] = CreatePlayerTextDraw(playerid, 217.000000, 215.000000, "~r~-25.0");
	PlayerTextDrawFont(playerid, DmgInfo[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, DmgInfo[playerid][1], 0.258332, 1.299999);
	PlayerTextDrawTextSize(playerid, DmgInfo[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, DmgInfo[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, DmgInfo[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, DmgInfo[playerid][1], 1);
	PlayerTextDrawColor(playerid, DmgInfo[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, DmgInfo[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, DmgInfo[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, DmgInfo[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, DmgInfo[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, DmgInfo[playerid][1], 0);


	call_number[playerid] = CreatePlayerTextDraw(playerid, 381.000000, 282.000000, "Num: ~y~23704");
	PlayerTextDrawFont(playerid, call_number[playerid], 1);
	PlayerTextDrawLetterSize(playerid, call_number[playerid], 0.270832, 1.649997);
	PlayerTextDrawTextSize(playerid, call_number[playerid], 530.500000, 126.000000);
	PlayerTextDrawSetOutline(playerid, call_number[playerid], 1);
	PlayerTextDrawSetShadow(playerid, call_number[playerid], 0);
	PlayerTextDrawAlignment(playerid, call_number[playerid], 1);
	PlayerTextDrawColor(playerid, call_number[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, call_number[playerid], 255);
	PlayerTextDrawBoxColor(playerid, call_number[playerid], 50);
	PlayerTextDrawUseBox(playerid, call_number[playerid], 0);
	PlayerTextDrawSetProportional(playerid, call_number[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, call_number[playerid], 0);


	BankTD[playerid][0] = CreatePlayerTextDraw(playerid, 323.000000, 100.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][0], 0.625000, 30.699981);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][0], 304.500000, 414.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][0], -741092353);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][0], 0);

	BankTD[playerid][1] = CreatePlayerTextDraw(playerid, 323.000000, 147.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][1], 0.616666, 1.949996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][1], 395.000000, 414.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][1], -1962934017);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][1], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][1], 0);

	BankTD[playerid][2] = CreatePlayerTextDraw(playerid, 276.000000, 107.000000, "CENTRAL BANK");
	PlayerTextDrawFont(playerid, BankTD[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][2], 0.412499, 1.850000);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][2], 436.000000, 7.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][2], 3);
	PlayerTextDrawColor(playerid, BankTD[playerid][2], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][2], 0);

	BankTD[playerid][3] = CreatePlayerTextDraw(playerid, 228.000000, 121.000000, "OF BANGLADESH");
	PlayerTextDrawFont(playerid, BankTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][3], 0.145833, 1.049999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][3], 436.000000, 7.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][3], 3);
	PlayerTextDrawColor(playerid, BankTD[playerid][3], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][3], 0);

	BankTD[playerid][4] = CreatePlayerTextDraw(playerid, 323.000000, 180.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][4], 0.616666, 2.449996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][4], 387.500000, 255.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][4], -1962934017);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][4], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][4], 0);

	BankTD[playerid][5] = CreatePlayerTextDraw(playerid, 323.000000, 209.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][5], 0.616666, 2.449996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][5], 387.500000, 255.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][5], -508116511);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][5], -16776991);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][5], 0);

	BankTD[playerid][6] = CreatePlayerTextDraw(playerid, 323.000000, 238.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][6], 0.616666, 2.449996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][6], 387.500000, 255.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][6], -508116511);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][6], -16776991);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][6], 0);

	BankTD[playerid][7] = CreatePlayerTextDraw(playerid, 323.000000, 267.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][7], 0.616666, 2.449996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][7], 387.500000, 255.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][7], -508116511);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][7], -16776991);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][7], 0);

	BankTD[playerid][8] = CreatePlayerTextDraw(playerid, 323.000000, 296.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][8], 0.616666, 2.449996);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][8], 387.500000, 255.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][8], -508116511);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][8], -16776991);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][8], 0);

	BankTD[playerid][9] = CreatePlayerTextDraw(playerid, 323.000000, 169.000000, "_");
	PlayerTextDrawFont(playerid, BankTD[playerid][9], 0);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][9], 0.616666, -0.450001);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][9], 395.000000, 414.500000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][9], -1962934017);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][9], 255);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][9], 0);

	BankTD[playerid][10] = CreatePlayerTextDraw(playerid, 323.000000, 193.000000, "Welcome!__Current_Balance:_0$");
	PlayerTextDrawFont(playerid, BankTD[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][10], 0.258332, 0.899999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][10], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][10], 0);

	BankTD[playerid][11] = CreatePlayerTextDraw(playerid, 323.000000, 215.000000, "Transfer");
	PlayerTextDrawFont(playerid, BankTD[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][11], 0.258332, 0.899999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][11], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][11], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][11], 1);

	BankTD[playerid][12] = CreatePlayerTextDraw(playerid, 323.000000, 243.000000, "Deposit");
	PlayerTextDrawFont(playerid, BankTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][12], 0.258332, 0.899999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][12], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][12], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][12], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][12], 1);

	BankTD[playerid][13] = CreatePlayerTextDraw(playerid, 324.000000, 273.000000, "Withdraw");
	PlayerTextDrawFont(playerid, BankTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][13], 0.258332, 0.899999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][13], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][13], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][13], 1);

	BankTD[playerid][14] = CreatePlayerTextDraw(playerid, 323.000000, 301.000000, "CLOSE");
	PlayerTextDrawFont(playerid, BankTD[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][14], 0.258332, 0.899999);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][14], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][14], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][14], 1);

	BankTD[playerid][15] = CreatePlayerTextDraw(playerid, 219.000000, 178.000000, "Nafiz_Rohan");
	PlayerTextDrawFont(playerid, BankTD[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid][15], 0.195832, 0.750000);
	PlayerTextDrawTextSize(playerid, BankTD[playerid][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, BankTD[playerid][15], 2);
	PlayerTextDrawColor(playerid, BankTD[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, BankTD[playerid][15], 50);
	PlayerTextDrawUseBox(playerid, BankTD[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD[playerid][15], 0);

	Card[playerid][0] = CreatePlayerTextDraw(playerid, 459.000000, 253.000000, "_");
	PlayerTextDrawFont(playerid, Card[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][0], 0.658333, 15.050002);
	PlayerTextDrawTextSize(playerid, Card[playerid][0], 315.500000, 191.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][0], 2);
	PlayerTextDrawSetShadow(playerid, Card[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][0], 2);
	PlayerTextDrawColor(playerid, Card[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][0], -121);
	PlayerTextDrawUseBox(playerid, Card[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Card[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][0], 0);

	Card[playerid][1] = CreatePlayerTextDraw(playerid, 429.000000, 288.000000, "ld_drv:bronze");
	PlayerTextDrawFont(playerid, Card[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, Card[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Card[playerid][1], 61.500000, 67.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][1], 2);
	PlayerTextDrawSetShadow(playerid, Card[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][1], 1);
	PlayerTextDrawColor(playerid, Card[playerid][1], -218);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Card[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][1], 0);

	Card[playerid][2] = CreatePlayerTextDraw(playerid, 554.000000, 270.500000, "_");
	PlayerTextDrawFont(playerid, Card[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][2], 0.600000, 13.100011);
	PlayerTextDrawTextSize(playerid, Card[playerid][2], 303.500000, 2.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][2], 2);
	PlayerTextDrawColor(playerid, Card[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][2], 1296911751);
	PlayerTextDrawUseBox(playerid, Card[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Card[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][2], 0);

	Card[playerid][3] = CreatePlayerTextDraw(playerid, 364.000000, 267.000000, "_");
	PlayerTextDrawFont(playerid, Card[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][3], 0.683332, 13.500001);
	PlayerTextDrawTextSize(playerid, Card[playerid][3], 299.000000, 1.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][3], 2);
	PlayerTextDrawColor(playerid, Card[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][3], 1296911751);
	PlayerTextDrawUseBox(playerid, Card[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Card[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][3], 0);

	Card[playerid][4] = CreatePlayerTextDraw(playerid, 459.000000, 253.000000, "IDENTIFICATION CARD");
	PlayerTextDrawFont(playerid, Card[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][4], 0.379166, 1.600000);
	PlayerTextDrawTextSize(playerid, Card[playerid][4], 300.000000, 191.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][4], 2);
	PlayerTextDrawAlignment(playerid, Card[playerid][4], 2);
	PlayerTextDrawColor(playerid, Card[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][4], 1296911751);
	PlayerTextDrawUseBox(playerid, Card[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Card[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][4], 0);

	Card[playerid][5] = CreatePlayerTextDraw(playerid, 346.000000, 272.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, Card[playerid][5], 5);
	PlayerTextDrawLetterSize(playerid, Card[playerid][5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Card[playerid][5], 99.000000, 117.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Card[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][5], 1);
	PlayerTextDrawColor(playerid, Card[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][5], -1061109760);
	PlayerTextDrawBoxColor(playerid, Card[playerid][5], 255);
	PlayerTextDrawUseBox(playerid, Card[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][5], 0);
	PlayerTextDrawSetPreviewModel(playerid, Card[playerid][5], 0);
	PlayerTextDrawSetPreviewRot(playerid, Card[playerid][5], -11.000000, 0.000000, -5.000000, 0.819998);
	PlayerTextDrawSetPreviewVehCol(playerid, Card[playerid][5], 1, 1);

	Card[playerid][6] = CreatePlayerTextDraw(playerid, 422.000000, 280.000000, "NAME   :");
	PlayerTextDrawFont(playerid, Card[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][6], 0.310000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][6], 477.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][6], 1);
	PlayerTextDrawColor(playerid, Card[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][6], 0);

	Card[playerid][7] = CreatePlayerTextDraw(playerid, 422.000000, 299.000000, "GENDER   :");
	PlayerTextDrawFont(playerid, Card[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][7], 0.250000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][7], 483.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][7], 1);
	PlayerTextDrawColor(playerid, Card[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][7], 0);

	Card[playerid][8] = CreatePlayerTextDraw(playerid, 422.000000, 319.000000, "AGE         :");
	PlayerTextDrawFont(playerid, Card[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][8], 0.250000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][8], 481.500000, 11.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][8], 1);
	PlayerTextDrawColor(playerid, Card[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][8], 0);

	Card[playerid][9] = CreatePlayerTextDraw(playerid, 421.000000, 340.000000, "DRIVING LIC  :");
	PlayerTextDrawFont(playerid, Card[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][9], 0.250000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][9], 530.500000, 52.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][9], 1);
	PlayerTextDrawColor(playerid, Card[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][9], 0);

	Card[playerid][10] = CreatePlayerTextDraw(playerid, 421.000000, 361.000000, "WEAPON LIC  :");
	PlayerTextDrawFont(playerid, Card[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, Card[playerid][10], 0.250000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][10], 543.500000, -65.500000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][10], 1);
	PlayerTextDrawColor(playerid, Card[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][10], 0);

	Card[playerid][11] = CreatePlayerTextDraw(playerid, 466.000000, 280.000000, "Nafiz_Rohan");
	PlayerTextDrawFont(playerid, Card[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, Card[playerid][11], 0.250000, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][11], 1);
	PlayerTextDrawColor(playerid, Card[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][11], 0);

	Card[playerid][12] = CreatePlayerTextDraw(playerid, 467.000000, 298.000000, "MALE");
	PlayerTextDrawFont(playerid, Card[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, Card[playerid][12], 0.250000, 1.399999);
	PlayerTextDrawTextSize(playerid, Card[playerid][12], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][12], 1);
	PlayerTextDrawAlignment(playerid, Card[playerid][12], 1);
	PlayerTextDrawColor(playerid, Card[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][12], 0);

	Card[playerid][13] = CreatePlayerTextDraw(playerid, 467.000000, 319.000000, "20");
	PlayerTextDrawFont(playerid, Card[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, Card[playerid][13], 0.250000, 1.399999);
	PlayerTextDrawTextSize(playerid, Card[playerid][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][13], 1);
	PlayerTextDrawColor(playerid, Card[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][13], 0);

	Card[playerid][14] = CreatePlayerTextDraw(playerid, 482.000000, 340.000000, "~g~YES");
	PlayerTextDrawFont(playerid, Card[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, Card[playerid][14], 0.250000, 1.399999);
	PlayerTextDrawTextSize(playerid, Card[playerid][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][14], 1);
	PlayerTextDrawColor(playerid, Card[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][14], 0);

	Card[playerid][15] = CreatePlayerTextDraw(playerid, 482.000000, 360.000000, "~r~NO");
	PlayerTextDrawFont(playerid, Card[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, Card[playerid][15], 0.250000, 1.399999);
	PlayerTextDrawTextSize(playerid, Card[playerid][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, Card[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, Card[playerid][15], 1);
	PlayerTextDrawColor(playerid, Card[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][15], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][15], 0);

	Card[playerid][16] = CreatePlayerTextDraw(playerid, 550.000000, 378.000000, "00/00/0000");
	PlayerTextDrawFont(playerid, Card[playerid][16], 3);
	PlayerTextDrawLetterSize(playerid, Card[playerid][16], 0.266665, 1.299998);
	PlayerTextDrawTextSize(playerid, Card[playerid][16], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Card[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, Card[playerid][16], 1);
	PlayerTextDrawAlignment(playerid, Card[playerid][16], 3);
	PlayerTextDrawColor(playerid, Card[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, Card[playerid][16], 255);
	PlayerTextDrawBoxColor(playerid, Card[playerid][16], 50);
	PlayerTextDrawUseBox(playerid, Card[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, Card[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, Card[playerid][16], 0);

	Streamer_ToggleIdleUpdate(playerid, true);
	CreatePlayerRegisterTD(playerid);

    SB[playerid] = 0;
    pBlind[playerid] = 0;
    Maskara[playerid] = 0;
	MaskaraID[playerid] = INVALID_PLAYER_ID;
    ShowingBounds[playerid] = 0;
	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
	PayCheckCode[playerid] = 0;

	// Default values are handled via MySQL/PhpMyAdmin. Don't assign default values here.
	PlayerInfo[playerid][pRobbingHouse] = -1;
	PlayerInfo[playerid][pToolkit] = 0;
	PlayerInfo[playerid][pRobWatch] = 0;
	PlayerInfo[playerid][pRobPhone] = 0;
	PlayerInfo[playerid][pRepairkit] = 0;
	PlayerInfo[playerid][pGasCan] = 0;
    PlayerInfo[playerid][pGraffiti] = -1;
    PlayerInfo[playerid][pChatAnim] = 0;
    PlayerInfo[playerid][pGraffitiTime] = 0;
    PlayerInfo[playerid][pGraffitiColor] = 0;
    PlayerInfo[playerid][pEditGraffiti] = -1;
	PlayerInfo[playerid][pEditGate] = -1;
	PlayerInfo[playerid][pEditmObject] = -1;
	PlayerInfo[playerid][pHurt] = 0;
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pProductChoose] = -1;
	PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDiamonds] = 0;
	PlayerInfo[playerid][pEngine] = 0;
	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pLogged] = 0;
	PlayerInfo[playerid][pKicked] = 0;
	PlayerInfo[playerid][pLoginTries] = 0;
	PlayerInfo[playerid][pSetup] = 0;
	PlayerInfo[playerid][pGender] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pCameraX] = 0;
	PlayerInfo[playerid][pFormerAdmin] = 0;
	PlayerInfo[playerid][pCameraY] = 0;
	PlayerInfo[playerid][pCameraZ] = 0;
	PlayerInfo[playerid][pPosX] = 0;
	PlayerInfo[playerid][pPosY] = 0;
	PlayerInfo[playerid][pPosZ] = 0;
	PlayerInfo[playerid][pPosA] = 0;
	PlayerInfo[playerid][pInterior] = 0;
	PlayerInfo[playerid][pWorld] = 0;
	PlayerInfo[playerid][pCash] = 10000;
	PlayerInfo[playerid][pBank] = 10000;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pAdvertWarnings] = 0;
	PlayerInfo[playerid][pEXP] = 0;
	PlayerInfo[playerid][pMinutes] = 0;
	PlayerInfo[playerid][pHours] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAdminName] = 0;
	PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pHealth] = 105.0;
	PlayerInfo[playerid][pArmor] = 0.0;
	PlayerInfo[playerid][pUpgradePoints] = 0;
	PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pComserv] = 0;
	PlayerInfo[playerid][pComservSkin] = -1;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pHospital] = 0;
	PlayerInfo[playerid][pSpawnHealth] = 50.0;
	PlayerInfo[playerid][pSpawnArmor] = 0;
	PlayerInfo[playerid][pJailType] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pNewbieMuted] = 0;
	PlayerInfo[playerid][pHelpMuted] = 0;
	PlayerInfo[playerid][pAdMuted] = 0;
	PlayerInfo[playerid][pLiveMuted] = 0;
	PlayerInfo[playerid][pGlobalMuted] = 0;
	PlayerInfo[playerid][pReportMuted] = 0;
	PlayerInfo[playerid][pReportWarns] = 0;
	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pAccent] = 0;
	PlayerInfo[playerid][pRegDate] = 0;
	PlayerInfo[playerid][pDirtyCash] = 0;
	PlayerInfo[playerid][pPhone] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pJob] = JOB_NONE;
	PlayerInfo[playerid][pSecondJob] = JOB_NONE;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pMaterials] = 0;
	PlayerInfo[playerid][pPot] = 0;
	PlayerInfo[playerid][pDrinks] = 0;
	PlayerInfo[playerid][pCrack] = 0;
	PlayerInfo[playerid][pMeth] = 0;
	PlayerInfo[playerid][pPainkillers] = 0;
	PlayerInfo[playerid][pSeeds] = 0;
	PlayerInfo[playerid][pEphedrine] = 0;
	PlayerInfo[playerid][pMuriaticAcid] = 0;
	PlayerInfo[playerid][pBakingSoda] = 0;
	PlayerInfo[playerid][pCigars] = 0;
	PlayerInfo[playerid][pWalkieTalkie] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pRentingHouse] = 0;
	PlayerInfo[playerid][pSpraycans] = 0;
	PlayerInfo[playerid][pBoombox] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pBlindfold] = 0;
	PlayerInfo[playerid][pMP3Player] = 0;
	PlayerInfo[playerid][pPhonebook] = 0;
	PlayerInfo[playerid][pFishingRod] = 0;
	PlayerInfo[playerid][pFishingBait] = 0;
	PlayerInfo[playerid][pFishWeight] = 0;
	PlayerInfo[playerid][pFishingSkill] = 0;
	PlayerInfo[playerid][pTruckerSkill] = 0;
	PlayerInfo[playerid][pWeaponSkill] = 0;
	PlayerInfo[playerid][pLawyerSkill] = 0;
	PlayerInfo[playerid][pSmugglerSkill] = 0;
	PlayerInfo[playerid][pDetectiveSkill] = 0;
	PlayerInfo[playerid][pToggleTextdraws] = 0;
	PlayerInfo[playerid][pToggleOOC] = 0;
	PlayerInfo[playerid][pTogglePhone] = 0;
	PlayerInfo[playerid][pToggleAdmin] = 0;
	PlayerInfo[playerid][pToggleHelper] = 0;
	PlayerInfo[playerid][pToggleNewbie] = 0;
	PlayerInfo[playerid][pToggleWT] = 0;
	PlayerInfo[playerid][pToggleRadio] = 0;
	PlayerInfo[playerid][pToggleVIP] = 0;
	PlayerInfo[playerid][pToggleMusic] = 0;
	PlayerInfo[playerid][pToggleFaction] = 0;
	PlayerInfo[playerid][pToggleGang] = 0;
	PlayerInfo[playerid][pToggleNews] = 0;
	PlayerInfo[playerid][pToggleGlobal] = 1;
	PlayerInfo[playerid][pToggleChat] = 1;
	PlayerInfo[playerid][pCarLicense] = 0;
	PlayerInfo[playerid][pWeaponLicense] = 0;
	PlayerInfo[playerid][pDonator] = 0;
	PlayerInfo[playerid][pVIPTime] = 0;
	PlayerInfo[playerid][pVIPCooldown] = 0;
	PlayerInfo[playerid][pWeapons] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pFactionRank] = 0;
	PlayerInfo[playerid][pGang] = 0;
	PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pContracted] = 0;
	PlayerInfo[playerid][pContractBy] = 0;
	PlayerInfo[playerid][pContractReason] = 0;
	PlayerInfo[playerid][pBombs] = 0;
	PlayerInfo[playerid][pCompletedHits] = 0;
	PlayerInfo[playerid][pFailedHits] = 0;
	PlayerInfo[playerid][pReports] = 0;
	PlayerInfo[playerid][pNewbies] = 0;
	PlayerInfo[playerid][pHelpRequests] = 0;
	PlayerInfo[playerid][pSpeedometer] = 0;
	PlayerInfo[playerid][pFactionMod] = 0;
	PlayerInfo[playerid][pGangMod] = 0;
	PlayerInfo[playerid][pMafia] = 0;
	PlayerInfo[playerid][pBanAppealer] = 0;
    PlayerInfo[playerid][pAP] = 0;
    PlayerInfo[playerid][pHM] = 0;
    PlayerInfo[playerid][pMapper] = 0;
	PlayerInfo[playerid][pPotPlanted] = 0;
	PlayerInfo[playerid][pPotTime] = 0;
	PlayerInfo[playerid][pPotGrams] = 0;
	PlayerInfo[playerid][pPotX] = 0;
	PlayerInfo[playerid][pPotY] = 0;
	PlayerInfo[playerid][pPotZ] = 0;
	PlayerInfo[playerid][pPotA] = 0;
	PlayerInfo[playerid][pInventoryUpgrade] = 0;
	PlayerInfo[playerid][pAddictUpgrade] = 0;
	PlayerInfo[playerid][pTraderUpgrade] = 0;
	PlayerInfo[playerid][pAssetUpgrade] = 0;
	PlayerInfo[playerid][pLastReport] = 0;
	PlayerInfo[playerid][pLastNewbie] = 0;
	PlayerInfo[playerid][pLastRequest] = 0;
	PlayerInfo[playerid][pLastPay] = 0;
	PlayerInfo[playerid][pLastRob] = 0;
	PlayerInfo[playerid][pBombTimer] = 0;
	PlayerInfo[playerid][pRobStep] = 0;
	PlayerInfo[playerid][pLastRepair] = 0;
	PlayerInfo[playerid][pLastBreak] = 0;
	PlayerInfo[playerid][pLastChat] = 0;
	PlayerInfo[playerid][pLastRefuel] = 0;
	PlayerInfo[playerid][pLastRam] = 0;
	PlayerInfo[playerid][pLastDrug] = 0;
	PlayerInfo[playerid][pLastHeal] = 0;
	PlayerInfo[playerid][pLastSell] = 0;
	PlayerInfo[playerid][pLastEnter] = 0;
	PlayerInfo[playerid][pLastPress] = 0;
	PlayerInfo[playerid][pLastDeath] = 0;
	PlayerInfo[playerid][pLastDesync] = 0;
	PlayerInfo[playerid][pLastGlobal] = 0;
	PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAdminDuty] = 0;
	PlayerInfo[playerid][pActiveReport] = -1;
	PlayerInfo[playerid][pHospitalTime] = 0;
	PlayerInfo[playerid][pListen] = 0;
	PlayerInfo[playerid][pPMListen] = 0;
	PlayerInfo[playerid][pJoinedEvent] = 0;
	PlayerInfo[playerid][pPaintball] = 0;
	PlayerInfo[playerid][pPaintballTeam] = -1;
	PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEventTeam] = 0;
	PlayerInfo[playerid][pAwaitingClothing] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pFreezeTimer] = -1;
	PlayerInfo[playerid][pNameChange][0] = 0;
	PlayerInfo[playerid][pHelpRequest][0] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEditType] = 0;
    PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pFurniturePerms] = -1;
	PlayerInfo[playerid][pYFoods] = 0;
	PlayerInfo[playerid][pLastYFood] = 0;
	PlayerInfo[playerid][pLastStuck] = 0;
	PlayerInfo[playerid][pLastUpdate] = 0;
	PlayerInfo[playerid][pLastLoad] = 0;
	PlayerInfo[playerid][pLastBet] = 0;
	PlayerInfo[playerid][pLastClean] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pIllegalCargo] = -1;
	PlayerInfo[playerid][pFishTime] = 0;
	PlayerInfo[playerid][pUsedBait] = 0;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleTime] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pAFK] = 0;
    PlayerInfo[playerid][pAFKTime] = 0;
	PlayerInfo[playerid][pLoopAnim] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
	PlayerInfo[playerid][pVIPColor] = 0;
    PlayerInfo[playerid][pTaxiFare] = 0;
    PlayerInfo[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pTaxiBill] = 0;
    PlayerInfo[playerid][pTaxiTime] = 0;
    PlayerInfo[playerid][pFaction] = -1;
    PlayerInfo[playerid][pFactionRank] = 0;
    PlayerInfo[playerid][pGang] = -1;
    PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDuty] = 0;
	PlayerInfo[playerid][pBackup] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSkinSelected] = -1;
    PlayerInfo[playerid][pDelivered] = 0;
    PlayerInfo[playerid][pPlantedBomb] = 0;
    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSpamTime] = 0;
    PlayerInfo[playerid][pMuted] = 0;
    PlayerInfo[playerid][pBoomboxPlaced] = 0;
    PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pZonePickups][0] = -1;
    PlayerInfo[playerid][pZonePickups][1] = -1;
    PlayerInfo[playerid][pZonePickups][2] = -1;
    PlayerInfo[playerid][pZonePickups][3] = -1;
    PlayerInfo[playerid][pZoneID] = -1;
    PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pShowTurfs] = 0;
	PlayerInfo[playerid][pShowSafeZones] = 0;
    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
    PlayerInfo[playerid][pFreeNamechange] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    PlayerInfo[playerid][pCurrentWeapon] = 0;
    PlayerInfo[playerid][pCurrentAmmo] = 0;
    PlayerInfo[playerid][pCurrentVehicle] = 0;
    PlayerInfo[playerid][pVehicleCount] = 0;
    PlayerInfo[playerid][pACWarns] = 0;
    PlayerInfo[playerid][pACTime] = 0;
    PlayerInfo[playerid][pArmorTime] = 0;
    PlayerInfo[playerid][pACFired] = 0;
    PlayerInfo[playerid][pPotObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pPickPlant] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pPickTime] = 0;
    PlayerInfo[playerid][pCookMeth] = 0;
    PlayerInfo[playerid][pCookTime] = 0;
    PlayerInfo[playerid][pCookGrams] = 0;
    PlayerInfo[playerid][pDrugsUsed] = 0;
    PlayerInfo[playerid][pDrugsTime] = 0;
    PlayerInfo[playerid][pBandana] = 0;
	PlayerInfo[playerid][pCapturingPoint] = -1;
	PlayerInfo[playerid][pCaptureTime] = 0;
	PlayerInfo[playerid][pWatchingIntro] = 0;
	PlayerInfo[playerid][pJetpack] = 0;
    PlayerInfo[playerid][pWatchOn] = 0;
    PlayerInfo[playerid][pGPSOn] = 0;
    PlayerInfo[playerid][pTextFrom] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pMechanicCall] = 0;
	PlayerInfo[playerid][pTaxiCall] = 0;
    PlayerInfo[playerid][pEmergencyCall] = 0;
	PlayerInfo[playerid][pClip] = 0;
	PlayerInfo[playerid][pReloading] = 0;
    PlayerInfo[playerid][pFindTime] = 0;
    PlayerInfo[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pLootTime] = 0;
	PlayerInfo[playerid][pRemoveFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pToggleWhisper] = 0;
	PlayerInfo[playerid][pRareTime] = 0;
	PlayerInfo[playerid][pVipTimes] = 0;
	PlayerInfo[playerid][pBL] = 0;
	PlayerInfo[playerid][pBackpack] = 0;
	PlayerInfo[playerid][bpWearing] = 0;
	PlayerInfo[playerid][bpCash] = 0;
	PlayerInfo[playerid][bpMaterials] = 0;
	PlayerInfo[playerid][bpPot] = 0;
	PlayerInfo[playerid][bpCrack] = 0;
	PlayerInfo[playerid][bpMeth] = 0;
	PlayerInfo[playerid][bpPainkillers] = 0;
	PlayerInfo[playerid][bpWeapons] = 0;
	PlayerInfo[playerid][pMarriedTo] = -1;
	PlayerInfo[playerid][pHunger] = 100;
	PlayerInfo[playerid][pHungerTimer] = 0;
	PlayerInfo[playerid][pThirst] = 100;
	PlayerInfo[playerid][pThirstTimer] = 0;
	PlayerInfo[playerid][pRingTimer] = -1;
	PlayerInfo[playerid][pLastSign] = -1;
	PlayerInfo[playerid][pLoadingFood] = 0;
	PlayerInfo[playerid][pFoodLoaded] = 0;
	PlayerInfo[playerid][pFoodLoadVeh] = 0;
	PlayerInfo[playerid][pTurfOffered] = -1;
	PlayerInfo[playerid][pTurfOfferedId] = -1;
	PlayerInfo[playerid][pTurfAmount] = 0;

    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}

	//NameTagEnabled[playerid] = true;
	//Nametags[playerid] = CreateDynamic3DTextLabel("Loading nametag...", 0xFFFFFFFF, 0.0, 0.0, 0.1, NT_DISTANCE, .attachedplayer = playerid, .testlos = 1);
	
	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
	zone_prison = GangZoneCreateEx(1891.8926, 396.2204, 1750.1245, 508.9777);
	prison_rect = CreateDynamicRectangle(1891.8926, 396.2204, 1750.1245, 508.9777);
 //===========meatchopper job==========
	meatjob[playerid] = 0;
	onmeat[playerid] = 0;
	meatstartjob[playerid] = 0;
	prinesmeat[playerid] = 0;
	countmeat[playerid] = 0;
	prinesmeatEx[playerid] = 0;
	countmeatEx[playerid] = 0;
	ExtraMeatall[playerid] = 0;

	inharvesterjob[playerid] = 0;
	onplant[playerid] = 0;
	startplant[playerid] = 0;
	prinesplant[playerid] = 0;
	countplant[playerid] = 0;
	prinesplantEx[playerid] = 0;
	countplantEx[playerid] = 0;

	inlumberjob[playerid] = 0;
	onwood[playerid] = 0;
	startwood[playerid] = 0;
	prineswood[playerid] = 0;
	countwood[playerid] = 0;
	prineswoodEx[playerid] = 0;
	countwoodEx[playerid] = 0;
	ExtraWoods[playerid] = 0;

	

	ModernPlayerText[playerid][0] = CreatePlayerTextDraw(playerid, 329.000000, 167.000000, "Payday~n~_");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][0], 2);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][0], 0.633333, 2.949999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][0], 400.000000, 797.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][0], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][0], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][0], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][0], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][0], 85);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][0], 0);

    ModernPlayerText[playerid][1] = CreatePlayerTextDraw(playerid, 328.000000, 199.000000, "You recieved $500.");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][1], 0.245833, 1.599999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][1], 400.000000, 557.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][1], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][1], -1);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][1], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][1], 50);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][1], 0);

	PublicTD2[playerid] = CreatePlayerTextDraw(playerid, 322.000000, 355.000000, "~w~Status: ~r~Registered~n~~w~Peak Players: 62~n~Online Players: 23");
    PlayerTextDrawFont(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawLetterSize(playerid, PublicTD2[playerid], 0.237499, 1.299999);
    PlayerTextDrawTextSize(playerid, PublicTD2[playerid], 155.000000, 113.000000);
    PlayerTextDrawSetOutline(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetShadow(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawAlignment(playerid, PublicTD2[playerid], 2);
    PlayerTextDrawColor(playerid, PublicTD2[playerid], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, PublicTD2[playerid], 255);
    PlayerTextDrawBoxColor(playerid, PublicTD2[playerid], 94);
    PlayerTextDrawUseBox(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawSetProportional(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, PublicTD2[playerid], 0);

    HungerTD[playerid] = CreatePlayerTextDraw(playerid, 620.000000, 420.000000, "_");
    PlayerTextDrawFont(playerid, HungerTD[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid], 0.229166, 1.450000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid], 400.000000, 267.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid], 3);
    PlayerTextDrawColor(playerid, HungerTD[playerid], -1378294017);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid], 100);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid], 0);

	// GPS
	PlayerInfo[playerid][pText][0] = CreatePlayerTextDraw(playerid, 54.817008, 425.833496, "San Fierro");
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][0], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][0], 0.229166, 1.450000);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][0], 0);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][0], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][0], 100);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][0], 50);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pText][0], 0);

	PlayerInfo[playerid][pText][1] = CreatePlayerTextDraw(playerid, 21.551994, 430.083251, "S"); // GPS
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][1], 0.229166, 1.450000);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][1], 0);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][1], 2);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][1], -2686721);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][1], 100);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][1], 50);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pText][1], 0);

    PlayerInfo[playerid][pText][2] = CreatePlayerTextDraw(playerid, 5.645705, 425.916625, "I");
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][2], 2);
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][2], 0.287499, 2.649996);
    PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][2], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][2], 0);
    PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][2], 1);
    PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][2], -16776961);
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][2], 100);
    PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][2], 50);
    PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][2], 0);
    PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][2], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pText][2], 0);

    PlayerInfo[playerid][pText][3] = CreatePlayerTextDraw(playerid, 35.708663, 425.333221, "I");
    PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][3], 2);
    PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][3], 0.287499, 2.649996);
    PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][3], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][3], 0);
    PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][3], 2);
    PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][3], -16776961);
    PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][3], 100);
    PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][3], 50);
    PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][3], 0);
    PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][3], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pText][3], 0);
	// End

	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);

	InjuredLabel[playerid] = CreateDynamic3DTextLabel("", COLOR_DOCTOR, 0.0, 0.0, -0.3, 10, .attachedplayer = playerid, .testlos = 1);

	Settings[gConnections]++;
    SaveServerInfo();
    	// HP & armor
 	PlayerInfo[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][4], 1);

	PlayerInfo[playerid][pText][5] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][5], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][5], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][5], 1);

	Ad_TD[0] = TextDrawCreate(316.000, 432.000, "Advertisement: Selling diamonds in 30k for 384 pices contact - (937402)");
	TextDrawLetterSize(Ad_TD[0], 0.24, 1.500);
	TextDrawAlignment(Ad_TD[0], 2);
	TextDrawColor(Ad_TD[0], -1);
	TextDrawUseBox(Ad_TD[0], 1);
	TextDrawBoxColor(Ad_TD[0], 13554175);
	TextDrawSetShadow(Ad_TD[0], 0);
	TextDrawSetOutline(Ad_TD[0], 0);
	TextDrawBackgroundColor(Ad_TD[0], 255);
	TextDrawFont(Ad_TD[0], 1);
	TextDrawSetProportional(Ad_TD[0], 1);
	CreateRentTimer(playerid);
	CreateSpeedoTD(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(HasTrash[playerid]) Trash_ResetPlayer(playerid);
	//if(IsValidDynamic3DTextLabel(Nametags[playerid])) DestroyDynamic3DTextLabel(Nametags[playerid]);

	lasthit[playerid] = -1;
	PlayerInfo[playerid][pConnectTime] = 0;
	PingLevel[playerid] = PING_LEVEL_UPDATE;
	if(GetPVarInt(playerid,"roped") == 1)
	{
	    for(new destr=0;destr<=Rp_ropelength;destr++)
		{
			if(IsValidObject(ropes[playerid][destr]))
		    	DestroyObject(ropes[playerid][destr]);
		}
	}
	PlayerInfo[playerid][pCurrentShamal] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pCurrentBus] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pWatchingWindow] = false;
	BustAim::ResetPlayerProfile(playerid);
	new prev = GetPreviousPlayer(playerid);
	PlayerTextDrawDestroy(playerid, DmgInfo[playerid][0]);
	PlayerTextDrawDestroy(playerid, DmgInfo[playerid][1]);

    if (prev == INVALID_PLAYER_ID) {
	    foreach (new i : Player) {
			if (spectateID[i] == playerid) {
				StopSpectate(i);
			}
		}
	}
	else {
	    foreach (new i : Player) {
			if (spectateID[i] == playerid) {
				StartSpectate(i, prev);
			}
		}
	}

   	Iter_Remove(SpectatePlayers, playerid);
	SpecialBat[playerid] = false;
	Player_Fire_Enabled[playerid] = false;
	Player_Key_Sprint_Time[playerid] = 0;
	takingselfie[playerid] = 0;
	ChoosingNum[playerid] = 0;
	JobSkin[playerid] = -1;
	ShowingPhone[playerid] = false;
	pGloves[playerid] = false;
	KillTimer(PoisonTimer[playerid]);
	PoisonMsg[playerid] = 0;
	Poisonedby[playerid] = INVALID_PLAYER_ID;
	HeadShotSystem[playerid] = false;
	GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	if(JobVeh[playerid] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(JobVeh[playerid]);
		JobVeh[playerid] = INVALID_VEHICLE_ID;
	}
    if(lstream[playerid])
    {
        SvDeleteStream(lstream[playerid]);
        lstream[playerid] = SV_NULL;
    }
	God[playerid] = 0;
    IsInPrison[playerid] = 0;
	PaintballKills[playerid] = 0;
 	TerminateInfo(playerid, reason);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerInfo[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!PlayerInfo[playerid][pLogged])
	{
	    ClearChat(playerid);
    	for(new i = 0; i < 5; i ++)
		{
		    SCM(playerid, -1, " ");
		}

		TogglePlayerSpectating(playerid, true);
		SetPlayerColor(playerid, 0xFFFFFF00);

  		SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
	}

	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(PlayerInfo[playerid][pKicked]) return 0;

	Iter_Add(SpectatePlayers, playerid);
	PlayerTextDrawShow(playerid, HungerTD[playerid]);

	foreach (new i : Player) {
		if (spectateID[i] == playerid) {
			StartSpectate(i, playerid);
		}
	}

	if(ShowingBounds[playerid])
	{
		ShowTurfsOnMap(playerid, false);
		ShowPointsOnMap(playerid, true);
	}
	else
	{
		ShowPointsOnMap(playerid, false);
	}

	if(PlayerInfo[playerid][pSetup])
	{
	    if(PlayerInfo[playerid][pTutorial])
		{
	    	KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	    	PlayerInfo[playerid][pTutorial] = 0;
		}
		for(new i = 17; i < 23; i ++)
		{
			TextDrawShowForPlayer(playerid, LoginGlobal[i]);
		}
		new dstring[128];
		format(dstring, sizeof(dstring), "Hey %s,\nYou are now fully ready to play in our server.\nJust Press 'OK' and start your roleplay journey with us.", GetPlayerNameEx(playerid));

		ShowPlayerDialog(playerid, DIALOG_TEXT, DIALOG_STYLE_MSGBOX, "Welcome to "CXRP"CyberX", dstring, "OK", "");
		new Float:a;
		GetPlayerFacingAngle(playerid, a);
		TeleportToCoords(playerid, 1456.410888, -1721.856567, -24.590217, a, 0, 0, false, false);
		InterpolateCameraPos(playerid, 1761.307739, -1277.859741, 13.150021, 1799.497802, -1293.572875, 130.005111, 25000);
		InterpolateCameraLookAt(playerid, 1765.758666, -1280.125122, 12.909461, 1796.284057, -1289.760864, 129.630432, 25000);
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);
	    if(PlayerInfo[playerid][pJailType] == 2)
	    {
	        SM(playerid, COLOR_LIGHTRED, "** You were placed in admin prison by %s, reason: %s", PlayerInfo[playerid][pPrisonedBy], PlayerInfo[playerid][pPrisonReason]);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "** You haven't completed your jail sentence yet.");
		}
	}
	else if(PlayerInfo[playerid][pComserv] > 0)
	{
	    PlayerInfo[playerid][pInjured] = 0;
	    PlayerInfo[playerid][pHospital] = 0;
		TeleportToCoords(playerid, 1482.4253,-1717.5935,14.0469, 9.8095, 0, 0, true, false);
		GameTextForPlayer(playerid, "~w~Good Luck~n~~r~Cleaning!", 5000, 3);
	}
	else if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    SetPlayerInPaintball(playerid, PlayerInfo[playerid][pPaintball]);
	}
	else
	{
	    PlayerInfo[playerid][pJoinedEvent] = 0;

	    if(PlayerInfo[playerid][pInjured] == 1)
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetScriptArmour(playerid, 0.0);
            ClearAnimations(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0, 1);
			new count;
			foreach(new i : Player)
			{
				if(IsMedic(i) && PlayerInfo[i][pDuty] == 1)
				{
					count++;
				}
			}
			/*if(count < 1)
			{
				SCM(playerid, COLOR_SYNTAX, "You have given up and accepted your fate.");
	    		SetPlayerHealth(playerid, 0.0);
			}*/

			Dyuze(playerid, "Wounded", "/accept death or /call 911", 5000);
	        SCM(playerid, COLOR_DOCTOR, "You are wounded and losing blood. /call 911 for medical attention.");
	        SCM(playerid, COLOR_DOCTOR, "If you wish to accept your death and go to hospital use /accept death.");

			new string[128];
			format(string, sizeof(string), "(( Injured player\n/carry to carry ))");
			UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, string);
			new Float:x, Float:y, Float:z, Float:a;
			GetPlayerFacingAngle(playerid, a);
			GetPlayerPos(playerid, x, y ,z);
			TeleportToCoords(playerid, x, y, z, a, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false); 

            ClearAnimations(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0, 1);
			Maskara[playerid] = 0;
			MaskaraID[playerid] = INVALID_PLAYER_ID;
			SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
			
	        PlayerInfo[playerid][pDeathCooldown] = 120;
			if(PlayerInfo[playerid][bpWearing] == 1)
			{
			    PlayerInfo[playerid][bpWearing] = 0;
			}
			if(PlayerInfo[playerid][pRobbingBiz] != -1)
			{
   				PlayerInfo[playerid][pLootTime] = 0;
			    SCM(playerid, COLOR_WHITE, "You're injured! Robbery has been finished.");
				SCM(playerid, COLOR_WHITE, "But you can still claim the money from the checkpoint, if you get saved by an EMS.");
			}
			if(PlayerInfo[playerid][pRobbingHouse] != -1)
			{
   				PlayerInfo[playerid][pLootTime] = 0;
			    SCM(playerid, COLOR_WHITE, "You're injured! Robbery has been finished.");
				SCM(playerid, COLOR_WHITE, "But you can still claim the money from the checkpoint, if you get saved by an EMS.");
			}
			if(PlayerInfo[playerid][pRobbingAtm] != INVALID_OBJECT_ID && IsValidDynamicObject(PlayerInfo[playerid][pRobbingAtm]) && ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjRob] == 1)
			{
				KillTimer(PlayerInfo[playerid][pRobbingTimer]);
			    SCM(playerid, COLOR_WHITE, "You're injured! Robbery has been finished.");
				FinishRobAtm(playerid, 0);
			}
		}
	    else if(PlayerInfo[playerid][pHospital])
	    {
			PlayerInfo[playerid][pBandana] = 0;
			PlayerInfo[playerid][pInjured] = 0;
     	   	SetPlayerInHospital(playerid);

			ResetPlayerWeaponsEx(playerid);
	    }
		else
		{
			SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);
			SpawnGlitch[playerid] = true;
		}

		if(!PlayerInfo[playerid][pHospital])
		{
		    if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
			}

			TeleportToCoords(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld], true, false);
			SetPlayerWeapons(playerid);
		}
	}
	if(PlayerInfo[playerid][pComserv] > 0)
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pComservSkin]);
	}
	else
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);

	return 1;
}

forward PoisonUpdate(playerid);
public PoisonUpdate(playerid)
{
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	SetPlayerHealth(playerid, hp - 5.0);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(GetPVarInt(playerid,"roped") == 1)
	{
	    for(new destr2=0;destr2<=Rp_ropelength;destr2++)
		{
			if(IsValidObject(ropes[playerid][destr2]))
		    	DestroyObject(ropes[playerid][destr2]);
		}
		SetPVarInt(playerid,"roped",0);
		DisablePlayerCheckpoint(playerid);
	}
	if(gettime() - PlayerInfo[playerid][pLastDeath] < 2)
	{
	    return 1;
	}
	if(PlayerInfo[playerid][pLogged])
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		new Float:cx, Float:cy, Float:cz;
		GetPlayerCameraPos(playerid, cx, cy, cz);

		cz += !GetPlayerInterior(playerid) ? 5.0 : 0.5;

		foreach (new i : Player) {
			if (spectateID[i] == playerid) {
				SetPlayerCameraPos(i, cx, cy, cz);
				SetPlayerCameraLookAt(i, x, y, z);
			}
		}

		Iter_Remove(SpectatePlayers, playerid);

		if(PlayerInfo[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[i][pJoinedEvent])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
		else if(PlayerInfo[playerid][pPaintball] > 0 && !IsPlayerNPC(playerid))
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
					}
					else
					{
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
                        SendDeathMessageToPlayer(i, killerid, playerid, reason);
                        PaintballKills[killerid]++;
					}
				}
			}
		}
		else if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( You lost your duel against %s! ))", GetRPName(PlayerInfo[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( You won the duel against %s! ))", GetRPName(playerid));
				SAM(COLOR_LIGHTRED, "AdmCmd: %s has won their duel against %s.", GetRPName(killerid), GetRPName(playerid));
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID || Poisonedby[playerid] != INVALID_PLAYER_ID)
			{
			    HandleContract(playerid, (Poisonedby[playerid] != INVALID_PLAYER_ID) ? (Poisonedby[playerid]) : (killerid));
			}

		    if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pJailType] == 0)
		    {
			    if(PlayerInfo[playerid][pInjured] == 0)
				{
		    		if(reason == WEAPON_DROWN)
					{
					    SetPlayerHealth(playerid, 255.0);
        				ClearAnimations(playerid, 1);
						PlayerInfo[playerid][pInjured] = 0;
						PlayerInfo[playerid][pBandana] = 0;
			     	   	SetPlayerInHospital(playerid);

						ResetPlayerWeaponsEx(playerid);
					}
					else
					{
					    ResetPlayer(playerid);
					    PlayerInfo[playerid][pInjured] = 1;
						foreach(new i : Player)
						{
						    if(GetFactionType(i) == FACTION_MEDIC)
						    {
						    	SM(i, COLOR_DISPATCH, "Beacon %s (%i) is in need of immediate medical assistance.", GetRPName(playerid), playerid);
							}
						}
					}
				}
				else
				{
					Dyuze(playerid, "Wasted", "You died.");
					PlayerInfo[playerid][pInjured] = 0;
					PlayerInfo[playerid][pBandana] = 0;
		     	   	SetPlayerInHospital(playerid);

					ResetPlayerWeaponsEx(playerid);
					if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SM(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has bled out.", GetRPName(playerid));
                        PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}
				}
			}
			else
			{
			    PlayerInfo[playerid][pHealth] = 32767.0;
			}

			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] was helibladed by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}
	#if defined DISCORD
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty])
		{
			DCC_SendText(9, killerid, "", "1118613761222266930", playerid, reason);
		}
	#endif
	if(killerid != INVALID_PLAYER_ID)
	{
	    Settings[gTotalKills]++;
	}
//==================================//=========================================//
	meatjob[playerid] = 0;
	onmeat[playerid] = 0;
	meatstartjob[playerid] = 0;
	prinesmeat[playerid] = 0;
	countmeat[playerid] = 0;
	prinesmeatEx[playerid] = 0;
	countmeatEx[playerid] = 0;
	ExtraMeatall[playerid] = 0;

	inharvesterjob[playerid] = 0;
	onplant[playerid] = 0;
	startplant[playerid] = 0;

	inlumberjob[playerid] = 0;
	onwood[playerid] = 0;
	startwood[playerid] = 0;
	prineswood[playerid] = 0;
	countwood[playerid] = 0;
	prineswoodEx[playerid] = 0;
	countwoodEx[playerid] = 0;
	ExtraWoods[playerid] = 0;
//==================================//=========================================//

	Settings[gTotalDeaths]++;
	SaveServerInfo();
	PlayerInfo[playerid][pLastDeath] = gettime();

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pCP] == CHECKPOINT_MAFIA && TruckMafia[vehicleid])
	{
		PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		DisablePlayerCheckpoint(playerid);
		SCM(playerid, COLOR_RED, "You're not inside your shipment truck, checkpoint is gone. Enter the truck to get checkpoint again.");
	}
    if(SB[playerid] != 0)
	{
	    if(SB[playerid] == 2)
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
        {
    	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
		}
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
		{
			RemovePlayerAttachedObject(playerid, 9);
		}
		SB[playerid] = 0;
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(IsPlayerNPC(playerid)) return 1;
	for(new zoneid = 0; zoneid < MAX_ZONES; zoneid ++)
	{
		if(SafeZone[zoneid][sExists] && areaid == SafeZone[zoneid][sArea])
		{
			Safe[playerid] = 0;
		}
	}
	if(areaid == prison_rect && IsInPrison[playerid] == 1)
	{
		IsInPrison[playerid] = 0;
	}

	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(IsPlayerNPC(playerid)) return 1;
	for(new i = 0; i < MAX_TRUCKING_SPOTS; i++)
	{
		if(areaid == TruckDepots[ i ][ dynamic_area ])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid != 0 && IsTruckingVehicle( vehicleid) )
			{
				if(PlayerInfo[playerid][pJob] != JOB_CARGO) return SCM(playerid, COLOR_REALRED, "You must be employed as trucker to do deliveries."); 

				for(new j = 0; j < MAX_DELIVERIES; j++)
				{
					if( PlayerDeliveries[playerid][ j ][ player_del_taken ] == 1 )
					{
						if( PlayerDeliveries[playerid][ j ][ player_del_to ] == i)
						{
							new del = PlayerDeliveries[playerid][ j ][ player_del_id ];
							new depot = PlayerDeliveries[playerid][ j ][ player_del_from ];
							if(PlayerDeliveries[playerid][ j ][ player_del_vehicle ] != vehicleid)
							{
								ResetPlayerDelivery(playerid, j);
								Deliveries[ depot ][ del ][ delivery_type ] = DELIVERY_AVAILABLE;
							}
							else
							{
								new cash = Deliveries[ depot ][ del ][ delivery_cash ];
								Deliveries[ depot ][ del ][ delivery_type ] = DELIVERY_DONE;
								SM(playerid, COLOR_LIGHTGREEN, "You made a delivery of %s and earned $%d.", Deliveries[ depot ][ del ][ delivery_name ], cash);
								GivePlayerCash( playerid, cash );
								ResetPlayerDelivery(playerid, j);
								//BussinesJobMoney( JOB_TRUCKER, 50 );
							}
						}
					}
				}
				SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
				ChosenDepot[playerid] = i;
				new count = 0;
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Item\tLocation\tCash\tWeight" );
				for(new j = 0; j < MAX_DELIVERIES; j++)
				{
					if(Deliveries[ i ][ j ][ delivery_type ] == DELIVERY_AVAILABLE)
					{
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s\n%s\t%s\t$%d\t%d", DialogStrgEx, Deliveries[ i ][ j ][ delivery_name ], TruckDepots[ Deliveries[ i ][ j ][ delivery_depot ] ][ dName ], Deliveries[ i ][ j ][ delivery_cash ], Deliveries[ i ][ j ][ delivery_weight ] );
						PlayerDeliveryList[playerid][count] = j;
						count++;
					}
				}
				new header[48];
				format(header, sizeof(header), "Current Weight: %d | Vehicle's Limit: %d", GetPlayerCargoWeight(playerid), GetTruckWeight(vehicleid));
				if(count > 0) ShowPlayerDialog( playerid, DIALOG_TRUCKING, DIALOG_STYLE_TABLIST_HEADERS, header, DialogStrgEx, "Select", "Close" );
				else SCM(playerid, COLOR_REALRED, "No deliveries available right now.");
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return 1;
			}
		}
	}
	for(new zoneid = 0; zoneid < MAX_ZONES; zoneid ++)
	{
		if(SafeZone[zoneid][sExists] && areaid == SafeZone[zoneid][sArea] && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		{
			Safe[playerid] = 1;
		}
	}
   	if(areaid == prison_rect && IsInPrison[playerid] == 0 && !IsLawEnforcement(playerid))
	{
	    IsInPrison[playerid] = 1;
		SCM(playerid, COLOR_REALRED, "Note: You're currently trespassing inside The Alcatraz Prison area, watch out for the cops!");
		foreach(new i : Player)
		{
			if(IsLawEnforcement(i))
			{
				SM(i, COLOR_YELLOW, "All Units: %s currently attempting to trespass inside The Alcatraz Prison area!", GetRPName(playerid));
			}
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(TruckMafia[vehicleid] && !ispassenger && (TruckLoads[vehicleid][0] != 0 || TruckLoads[vehicleid][1] != 0 || TruckLoads[vehicleid][2] != 0 || TruckLoads[vehicleid][3] != 0 || TruckLoads[vehicleid][4] != 0 || TruckLoads[vehicleid][5] != 0))
	{
		if(PlayerInfo[playerid][pGang] == -1 && !IsLawEnforcement(playerid) && PlayerInfo[playerid][pMafia] == 0)
		{
			SCM(playerid, COLOR_WHITE, "You can't enter Mafia Shipment vehicles");
			ClearAnimations(playerid);
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
				RemovePlayerFromVehicle(playerid);
		}
		else
		{
			if(IsLawEnforcement(playerid))
			{
				SCM(playerid, COLOR_RED, "You've entered a Mafia Illegal Gun Shipment Truck. Impound this immediately!");
			}
			else
			{
				new gang = PlayerInfo[playerid][pGang];
				SetPlayerCheckpoint(playerid, gangLoc[gang][0], gangLoc[gang][1], gangLoc[gang][2], 6.0);
				PlayerInfo[playerid][pCP] = CHECKPOINT_MAFIA;
				SCM(playerid, COLOR_ORANGE, "You've entered a Mafia Shipment Vehicle, a checkpoint has been delivered to your Gang HQ");
			}
		}

	}
	if(GetVehicleModel(vehicleid) == 497 && ispassenger)
	{
		SetPVarInt(playerid,"chop_id",GetPlayerVehicleID(playerid));
		SetPVarInt(playerid,"roped",0);
	}
	else SetPVarInt(playerid,"chop_id",0);

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
			Float:a;
	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
	    TeleportToCoords(playerid, x, y, z + 0.5, a, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false);
	    ClearAnimations(playerid);
	}
	if((!ispassenger) && (PlayerInfo[playerid][pCuffed] || PlayerInfo[playerid][pTied] || PlayerInfo[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
			Float:a;
	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
	    TeleportToCoords(playerid, x, y, z + 0.5, a, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, false);
	    ClearAnimations(playerid);
	}
	if(!ispassenger)
	{
	    if(PlayerInfo[playerid][pLevel] <= 1)
	    {
	    	if(IsAPlane(vehicleid) || IsAHelicopter(vehicleid))
			{
			    SCM(playerid, COLOR_SYNTAX, "You cannot fly this as a level 1 player.");
    			ClearAnimations(playerid);
			}
		}
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        ClearAnimations(playerid);
	    }
		if((MafiaVeh[0] <= vehicleid <= MafiaVeh[9]) && !PlayerInfo[playerid][pMafia])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mafia.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vDonator] != 0 && VehicleInfo[vehicleid][vDonator] > PlayerInfo[playerid][pDonator])
	    {
		    SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as your donator rank is too low.");
		    ClearAnimations(playerid);
	    }
     	if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
		    ClearAnimations(playerid);
		}
		if(VehicleInfo[vehicleid][vMafia] && !IsMafia(playerid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your Organisation.");
		    ClearAnimations(playerid);
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
    if(GetPVarInt(playerid,"roped") == 1 && IsTactical(playerid))
    {
        SetPVarInt(playerid,"roped",0);
        SetPVarInt(playerid,"chop_id",0);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);
        DisablePlayerCheckpoint(playerid);
        for(new destr4=0;destr4<=Rp_ropelength;destr4++)
		{
			if(IsValidObject(ropes[playerid][destr4]))
		    	DestroyObject(ropes[playerid][destr4]);
		}
	}
	switch(PlayerInfo[playerid][pCP])
	{
	    case CHECKPOINT_YFOOD:
	    {
			new tip = 50 + random(10);
			new amount = PizzaPay[playerid];

            if(gettime() - PlayerInfo[playerid][pLastYFood] < 15 && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport yFood Delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastYFood]);
				}
				else
				{
				    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport yFood runs", GetRPName(playerid), SERVER_BOT);
				    KickPlayer(playerid);
				}
		    }

		    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    amount = amount*2;
			    SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
			}
			AddToTaxVault(floatround((amount*Tax_Pay)));
			amount = floatround((amount*Payment));
			GivePlayerCash(playerid, amount);
			GivePlayerCash(playerid, tip);
			

			PlayerInfo[playerid][pYFoods] = 0;
			PlayerInfo[playerid][pYFoodTime] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			pizzatime = 0;
			pizzatimer[playerid] = 0;
			PizzaPay[playerid] = 0;
			PlayerInfo[playerid][pFoodLoadVeh] = 0;
			PlayerInfo[playerid][pFoodLoaded] = 0;
			HideTimerTD(playerid);

			SM(playerid, COLOR_AQUA, "You received $%s. You also received a $%i tip.", AddCommas(amount), tip);
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_TEST:
	    {
	        PlayerInfo[playerid][pTestCP]++;

	        if(PlayerInfo[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[8]))
	            {
					SCM(playerid, COLOR_LIGHTRED, "** You failed the test as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

				    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		            PlayerInfo[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(PlayerInfo[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
					Dyuze(playerid, "Notice", "Failed.");
			        SCM(playerid, COLOR_LIGHTRED, "** You brought back the vehicle damaged and therefore failed your test.");
			    }
			    else
			    {
                   	Dyuze(playerid, "Notice", "Passed.");
			        SCM(playerid, COLOR_AQUA, "You successfully passed your drivers test and received your license!");

			        GivePlayerCash(playerid, -100);
					AddToTaxVault(100);
			        PlayerInfo[playerid][pCarLicense] = 1;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

			    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	            PlayerInfo[playerid][pDrivingTest] = 0;
	        }
	    }
	    case CHECKPOINT_MINING:
	    {
			PlayAnimation( playerid, "MISC", "bitchslap", 4.0, 1, 0, 0, 0, 0 );
			PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );
			if( IsPlayerAttachedObjectSlotUsed( playerid, 5 ) ) RemovePlayerAttachedObject( playerid, 5 );
			SetPlayerAttachedObject( playerid, 5, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000 );
			PlayerInfo[playerid][pMiningTime] = 6;
		}
	    case CHECKPOINT_MEATPACKAGER:
	    {
	        new cost;

	        if(PlayerInfo[playerid][pPackagingMeat] == 1)
			{
	            cost = 100 + random(200);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 2)
			{
			    cost = 300 + random(200);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 3) // Musgravite
			{
			    cost = 500 + random(200);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 4) // Gold
			{
			    cost = 800 + random(200);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 5) // Diamond
			{
			    cost = 1000 + random(200);
			}
			GivePlayerCash(playerid, floatround(cost*Payment));
			AddToTaxVault(floatround(cost*Tax_Pay));
			
			SM(playerid, COLOR_AQUA, "You have earned $%i on your paycheck for your packaging meat.", floatround(cost*Payment));
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			PlayerInfo[playerid][pPackagingMeat] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        if((PlayerInfo[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.1177, -2257.4858, 14.5691)))
			{
			    if((gAnticheat) && gettime() - PlayerInfo[playerid][pSmuggleTime] < 20 && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
			    {
			        PlayerInfo[playerid][pACWarns]++;

			        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pSmuggleTime]);
					}
					else
					{
					    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport Matrun", GetRPName(playerid), SERVER_BOT);
					    KickPlayer(playerid);
					}
			    }

				if(PlayerInfo[playerid][pSmuggleMats] == 1)
				{
			        AddPointMoney(POINT_MATFACTORY1, 50);
			        PlayerInfo[playerid][pMaterials] += 100;
					SM(playerid, COLOR_AQUA, "You have dropped off your load and collected %i materials from the depot.", (PlayerInfo[playerid][pSmuggleMats] == 2) ? (350) : (100));
			    }
				
		    	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
				RemovePlayerAttachedObject(playerid, 9);
				ClearAnimations(playerid, 1);
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
				SavePlayerVariables(playerid);
		    	PlayerInfo[playerid][pSmuggleMats] = 0;
		    	DisablePlayerCheckpoint(playerid);
				

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 1000 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 100);

			amount += Random(500, 900);

			if(gDoubleSalary)
			{
			    amount = amount * 2;
			    SCM(playerid, COLOR_GREEN, "You have receive 2x of the salary.");
			}

			switch(PlayerInfo[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2456.8813, -124.2676, 26.0178))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore seeds.");
					}

					gSeedsStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%s for your delivery of marijuana seeds.", AddCommas(amount));
				}
				case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2730.3025, 76.1849, 4.3359))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gCrackStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The crack house does not need anymore Crack.");
					}

					gCrackStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%s for your delivery of Crack.", AddCommas(amount));
				}
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2456.8813, -124.2676, 26.0178))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gEphedrineStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore ephedrine.");
					}

					gEphedrineStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%s for your delivery of raw ephedrine.", AddCommas(amount));
				}
			}

			if((gAnticheat) && gettime() - PlayerInfo[playerid][pSmuggleTime] < 30 && PlayerInfo[playerid][pAdmin] == 0)
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pSmuggleTime]);
				}
				else if(!PlayerInfo[playerid][pKicked])
				{
				    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport drug smuggling", GetRPName(playerid), SERVER_BOT);
				    KickPlayer(playerid);
				}
		    }
		    else
		    {
		        if(PlayerInfo[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(PlayerInfo[playerid][pGang], 1);
				}
			}

			PlayerInfo[playerid][pSmuggleDrugs] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
			IncreaseJobSkill(playerid, JOB_DRUGDEALER);
	    }
	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			TeleportToCoords(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntX], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntY], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntZ], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntA], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hInterior], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hWorld], true, false);
			SetCameraBehindPlayer(playerid);

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && PlayerInfo[playerid][pRobCash] > 0)
	        {
				if(PlayerInfo[playerid][pGang] >= 0)
				{
					GiveGangPoints(PlayerInfo[playerid][pGang], 200);
				}
				RobberyInfo[rStolen] += PlayerInfo[playerid][pRobCash];
				Settings[gVault] -= PlayerInfo[playerid][pRobCash];
				SaveServerInfo();
        		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

				SM(playerid, COLOR_AQUA, "You have earned $%s dirty cash for successfully completing the bank robbery.", AddCommas(PlayerInfo[playerid][pRobCash]));
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBankRobbery(playerid);
				RemovePlayerAttachedObject(playerid, 8);
				RemovePlayerAttachedObject(playerid, 9);
			}

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_ROBBERYBIZ:
	    {
			new businessid = PlayerInfo[playerid][pRobbingBiz];

			if(PlayerInfo[playerid][pGang] >= 0)
			{
				GiveGangPoints(PlayerInfo[playerid][pGang], 50);
			}

			BusinessInfo[businessid][bCash] -= PlayerInfo[playerid][pRobCash];
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%s dirty cash for successfully completing the business robbery.", AddCommas(PlayerInfo[playerid][pRobCash]));

			BusinessInfo[businessid][bRobbed] = 3;
			BusinessInfo[businessid][bRobbing] = 0;
			ReloadBusiness(businessid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pRobCash] = 0;
			PlayerInfo[playerid][pRobbingBiz] = -1;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			RemovePlayerAttachedObject(playerid, 8);
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
   	    case CHECKPOINT_ROBBERYHOUSE:
	    {
			new houseid = PlayerInfo[playerid][pRobbingHouse];

			if(PlayerInfo[playerid][pGang] >= 0)
			{
				GiveGangPoints(PlayerInfo[playerid][pGang], 50);
			}
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
			HouseInfo[houseid][hCash] -= PlayerInfo[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%s dirty cash for successfully completing the house robbery.", AddCommas(PlayerInfo[playerid][pRobCash]));

			HouseInfo[houseid][hRobbed] = 3;
			HouseInfo[houseid][hRobbing] = 0;
			ReloadHouse(houseid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pRobCash] = 0;
			PlayerInfo[playerid][pRobbingHouse] = -1;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			RemovePlayerAttachedObject(playerid, 8);
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
		case CHECKPOINT_LOADTRUCK:
		{
			ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery Supplies\nClothing Items\nFood & Drinks\nBeverages\nLegal Weapon Parts\nPaper Bundles\nBoxing Supplies\nIllegal Drugs", "Load", "Cancel");
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
		}

		case CHECKPOINT_TRUCKER:
		{
			new businessid, products, amount;
			businessid = GetNearbyBusiness(playerid, 7.0);

			if(!PlayerHasJob(playerid, JOB_TRUCKER))
			{
				return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a trucker.");
			}
			if(PlayerInfo[playerid][pShipment] == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "Your truck doesn't have any load with it.");
			}
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 499)
			{
				return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville or a Benson.");
			}
			if(businessid == -1)
			{
				return SCM(playerid, COLOR_SYNTAX, "You are not close to any business.");
			}
			if(gettime() - PlayerInfo[playerid][pLastLoad] < 20 && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
			{
				PlayerInfo[playerid][pACWarns]++;

				if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
					SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastLoad]);
				}
				else
				{
					SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport Delivering", GetRPName(playerid), SERVER_BOT);
					KickPlayer(playerid);
				}
			}
			products = (GetJobLevel(playerid, JOB_TRUCKER) * 5) + 10;

			if(PlayerInfo[playerid][pShipment] == LOADTYPE_STORE)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 750;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_CLOTHES)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 700;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_RESTAURANT)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 650;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_BARCLUB)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 600;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_GUNSHOP)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 750;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_GYM)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 600;
			}
			else if(PlayerInfo[playerid][pShipment] == LOADTYPE_AGENCY)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 250) + 600;
			}

			if(PlayerInfo[playerid][pIllegalCargo] == LOADTYPE_ILLEGAL)
			{
				amount = (GetJobLevel(playerid, JOB_TRUCKER) * 100) + Random(500, 1000);
			}

			if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
				amount = amount*2;
				SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
			}
			SM(playerid, COLOR_AQUA, "** You have earned "CXRP"$%i{33CCFF} on your paycheck for delivering %i products.", amount, products);
			GivePlayerCash(playerid, amount);

			BusinessInfo[businessid][bProducts] += products;
			PlayerInfo[playerid][pShipment] = -1;
			PlayerInfo[playerid][pIllegalCargo] = -1;
			IncreaseJobSkill(playerid, JOB_TRUCKER);
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i, cash = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case CHECKPOINT_MAFIA:
		{
			new gang = PlayerInfo[playerid][pGang], veh = GetPlayerVehicleID(playerid);
			if(TruckMafia[veh] && (TruckLoads[veh][0] != 0 || TruckLoads[veh][1] != 0 || TruckLoads[veh][2] != 0 || TruckLoads[veh][3] != 0 || TruckLoads[veh][4] != 0 || TruckLoads[veh][5] != 0))
			{
				SendGangMessage(gang, COLOR_GREEN, "{%06x}%s %s successfully delivered a Mafia Shipment.", GangInfo[gang][gColor] >>> 8, GangRanks[gang][PlayerInfo[playerid][pGangRank]], GetRPName(playerid));
				SendGangMessage(gang, COLOR_GREEN, "{%06x}Your gang received %i Snipers, %i Spas-12s, %i Ak-47s, %i Deagles, %i MP5s & %i RPGs", GangInfo[gang][gColor] >>> 8, TruckLoads[veh][0], TruckLoads[veh][1], TruckLoads[veh][2], TruckLoads[veh][3], TruckLoads[veh][4], TruckLoads[veh][5]);
				new string2[256];
				format(string2, sizeof(string2), "%s from %s has successfully delivered a Shipment Truck (ID: %i) to their HQ", GetRPName(playerid), GangInfo[gang][gName], veh);
				SendMafiaMessage(COLOR_GREEN, string2);
				if(TruckLoads[veh][0] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_SNIPER] += TruckLoads[veh][0];
					TruckLoads[veh][0] = 0;
				}
				if(TruckLoads[veh][1] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_SPAS12] += TruckLoads[veh][1];
					TruckLoads[veh][1] = 0;
				}
				if(TruckLoads[veh][2] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_AK47] += TruckLoads[veh][2];
					TruckLoads[veh][2] = 0;
				}
				if(TruckLoads[veh][3] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_DEAGLE] += TruckLoads[veh][3];
					TruckLoads[veh][3] = 0;
				}
				if(TruckLoads[veh][4] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_MP5] += TruckLoads[veh][4];
					TruckLoads[veh][4] = 0;
				}
				if(TruckLoads[veh][5] != 0)
				{
					GangInfo[gang][gWeapons][GANGWEAPON_RPG] += TruckLoads[veh][5];
					TruckLoads[veh][5] = 0;
				}
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = %i, weapon_spas12 = %i, weapon_ak47 = %i, weapon_deagle = %i, weapon_mp5 = %i, weapon_rpg = %i WHERE id = %i", GangInfo[gang][gWeapons][GANGWEAPON_SNIPER], GangInfo[gang][gWeapons][GANGWEAPON_SPAS12], GangInfo[gang][gWeapons][GANGWEAPON_AK47], GangInfo[gang][gWeapons][GANGWEAPON_DEAGLE], GangInfo[gang][gWeapons][GANGWEAPON_MP5], GangInfo[gang][gWeapons][GANGWEAPON_RPG], gang);
				mysql_tquery(connectionID, queryBuffer);
				ResetTruckLoad(veh);
				TruckMafia[veh] = false;
				if(TruckSpawned > 0)
					TruckSpawned--;
				else
					TruckSpawned = 0;				
			}
	        PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
			DestroyVehicle(veh);
		}
		case CHECKPOINT_CARJACK:
		{
			new vehicleid = GetPVarInt(playerid, "CarJack");
			if(GetPlayerVehicleID(playerid) != vehicleid)
			{
				SCM(playerid, COLOR_GREY, "This is not the car you started jacking on! Jacking failed.");
		        DisablePlayerCheckpoint(playerid);
				DeletePVar(playerid, "CarJack");
				PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
				SetVehicleToRespawn(vehicleid);
				return 1;
			}
			SCM(playerid, COLOR_GREY, "You've successfully jacked and dropped the vehicle to the crane!");
		    GivePlayerCash(playerid, Random(1000, 1800));
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET jacked = %i WHERE id = %i", gettime() + 43200, VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			PlayerInfo[playerid][pCarJackCooldown] = 1800;
			DespawnVehicle(vehicleid);
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid, "CarJack");
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			SavePlayerVariables(playerid);
		}
		case CHECKPOINT_BUS:
		{
			PlayerInfo[playerid][pBusCP]++;
			if(PlayerInfo[playerid][pBusCP] < sizeof(bus_cps))
	        {
	            if(GetPlayerVehicleID(playerid) != JobVeh[playerid])
	            {
					SCM(playerid, COLOR_LIGHTRED, "** You failed to do the job as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);

				    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, bus_cps[PlayerInfo[playerid][pBusCP]][0], bus_cps[PlayerInfo[playerid][pBusCP]][1], bus_cps[PlayerInfo[playerid][pBusCP]][2], 3.0);
				}
			}
			else 
			{
				new cash = random(2500) + 200;
				new cashh = floatround(cash * Payment);
				new taxx = floatround(cash * Tax_Pay);
				GivePlayerCash(playerid, cashh);
				AddToTaxVault(taxx);
				SM(playerid, COLOR_AQUA, "You paid "CXRP"$%i "AQUA"on this job and 20 parcent deducted as tax. You got "CXRP"$%i"AQUA".", cash, cashh);
				if(JobVeh[playerid] != INVALID_VEHICLE_ID)
				{
					DestroyVehicle(JobVeh[playerid]);
					JobVeh[playerid] = INVALID_VEHICLE_ID;
				}
				PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			}
		}
	    default:
	    {
			if(PlayerInfo[playerid][pRobbingAtm] == INVALID_OBJECT_ID)
			{
				PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
			}
	    }
	}

	if(startplant[playerid] == 1)
	{
	    new string[256];
	    DisablePlayerCheckpoint(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.0, 1, 0, 0, 0, 5000, 1);
		startplant[playerid] = 0;
	    RemovePlayerAttachedObject(playerid, 1);
	    SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
		prinesplantEx[playerid] = 30 + random(20);
        countplantEx[playerid] = countplantEx[playerid] + prinesplantEx[playerid];
	    format(string, 256, "You brought {9ACD32}%d{FFFFFF} lb(s) marijuana plant.", prinesplantEx[playerid]);
		SendClientMessage(playerid, -1, string);
	  	skladplants += prinesplant[playerid];
	    prinesplantEx[playerid] = 0;
	    format(string, 256, "{FFFF00}Marijuana: {FFFFFF}%d", countplantEx[playerid]);
	    SendClientMessage(playerid, -1, string);
		return 1;
    }

    if(startwood[playerid] == 1)
	{
	    new string[256];
	    DisablePlayerCheckpoint(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 1, 0);
		startwood[playerid] = 0;
	    RemovePlayerAttachedObject(playerid, 4);
	    SetPlayerAttachedObject(playerid, 3, 341, 6, -0.02604, -0.00600, -0.00701, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
        if(ExtraWoods[playerid] == 1)
	    {
		    prineswoodEx[playerid] = 220 + random(300);
        	countwoodEx[playerid] = countwoodEx[playerid] + prineswoodEx[playerid];
	    	format(string, 256, "You brought {9ACD32}%d{FFFFFF} lb(s) quality wood.", prineswoodEx[playerid]);
		    SendClientMessage(playerid, -1, string);
	  		format(string, 256, "+%d", prineswoodEx[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladwoods += prineswood[playerid];
	    	prineswoodEx[playerid] = 0;
	    }
	    else
	    {
	    	prineswood[playerid] = 180 + random(250);
        	countwood[playerid] = countwood[playerid] + prineswood[playerid];
        	format(string, 256, "You brought {FFA500}%d{FFFFFF} lb(s) average wood", prineswood[playerid]);
	    	SendClientMessage(playerid, -1, string);
	  		format(string, 256, "+%d", prineswood[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladwoods += prineswood[playerid];
	    	prineswood[playerid] = 0;
	    }
	    format(string, 256, "{FFA500}Average: {FFFFFF}%d || {FFFF00}Quality: {FFFFFF}%d", countwood[playerid], countwoodEx[playerid]);
	    SendClientMessage(playerid, -1, string);
		return 1;
	}

	if(meatstartjob[playerid] == 1)
	{
	    new string[256];
	    DisablePlayerCheckpoint(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		meatstartjob[playerid] = 0;
	    RemovePlayerAttachedObject(playerid, 4);
	    SetPlayerAttachedObject(playerid, 3, 19583, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
        if(ExtraMeatall[playerid] == 1)
	    {
		    prinesmeatEx[playerid] = 200 + random(250);
        	countmeatEx[playerid] = countmeatEx[playerid] + prinesmeatEx[playerid];
	    	format(string, 256, "You brought {9ACD32}%d{FFFFFF} kg(s) big meat.", prinesmeatEx[playerid]);
		    SendClientMessage(playerid, -1, string);
		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 1, 0);
	  		format(string, 256, "+%d", prinesmeatEx[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladmeatall += prinesmeat[playerid];
	    	prinesmeatEx[playerid] = 0;
	    }
	    else
	    {
	    	prinesmeat[playerid] = 150 + random(200);
        	countmeat[playerid] = countmeat[playerid] + prinesmeat[playerid];
        	format(string, 256, "You brought {FFA500}%d{FFFFFF} kg(s) average meat.", prinesmeat[playerid]);
	    	SendClientMessage(playerid, -1, string);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 1, 0);
	  		format(string, 256, "+%d", prinesmeat[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladmeatall += prinesmeat[playerid];
	    	prinesmeat[playerid] = 0;
	    }
	    format(string, 256, "{FFA500}Average: {FFFFFF}%d kg(s)|| {FFFF00}Big: {FFFFFF}%d kg(s)", countmeat[playerid], countmeatEx[playerid]);
	    SendClientMessage(playerid, -1, string);
		return 1;
	}

	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(gParachutes[0] <= pickupid <= gParachutes[2]) {
	    GiveWeapon(playerid, 46);
	}
	return 1;
}

forward HideGivenDmg(playerid);
public HideGivenDmg(playerid)
{
	PlayerTextDrawHide(playerid, DmgInfo[playerid][0]);
	return 1;
}

forward HideTakenDmg(playerid);
public HideTakenDmg(playerid)
{
	PlayerTextDrawHide(playerid, DmgInfo[playerid][1]);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(playerid) && IsPlayerConnected(issuerid))
		{
			if(!PlayerInfo[issuerid][pJoinedEvent] && gettime() > PlayerInfo[issuerid][pACTime] && PlayerInfo[issuerid][pPaintball] == 0 && PlayerInfo[issuerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[issuerid][pAdminDuty])
			{
				if(weaponid == 49)
				{
					SAM(COLOR_YELLOW, "AdmWarning: %s [%i] is trying to kill/VDM %s [%i] using vehicle!.", GetPlayerNameEx(issuerid), issuerid, GetPlayerNameEx(playerid), playerid);
					Log_Write("log_cheat", "%s (uid: %i) tried to kill/VDM %s using Vehicle", GetPlayerNameEx(issuerid), PlayerInfo[issuerid][pID], GetPlayerNameEx(playerid));
					PlayerInfo[issuerid][pACTime] = gettime() + 2;

					if(PlayerInfo[issuerid][pLevel] == 1)
					{
						if(PlayerInfo[playerid][pHealth] != 100)
						{
							PlayerInfo[playerid][pHealth] += amount;
							SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
						}
					}
				}
				if(PlayerInfo[issuerid][pLevel] == 1)
				{
					if(PlayerInfo[playerid][pHealth] != 100)
					{
						PlayerInfo[playerid][pHealth] += amount;
						SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
					}
					return 0;
				}
				
				#if defined DISCORD
					if(weaponid != 0 || weaponid != 9 || weaponid != 28 || weaponid != 29 || weaponid != 32 || weaponid != 38 || weaponid != 42)
					{
						new DCC_Embed:embed = DCC_CreateEmbed();
						new convert[256];
						format(convert, sizeof(convert), "%s -> %s", GetPlayerNameEx(issuerid), GetPlayerNameEx(playerid));
						DCC_SetEmbedTitle(embed, convert);
						DCC_AddEmbedField(embed, "Weapon", GetWeaponNameEx(weaponid));
						format(convert, sizeof(convert), "%0.1f", amount);
						DCC_AddEmbedField(embed, "Amount", convert);
						DCC_AddEmbedField(embed, "Body Part", GetBoneName(bodypart));

						new Float:x, Float:y, Float:z, pos[128];
						GetPlayerPos(playerid, x, y, z);
						format(pos, sizeof(pos), "%f, %f, %f - V: %i - Int: %i", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						DCC_AddEmbedField(embed, "Victim's Pos", pos);

						GetPlayerPos(issuerid, x, y, z);
						format(pos, sizeof(pos), "%f, %f, %f - V: %i - Int: %i", x, y, z, GetPlayerVirtualWorld(issuerid), GetPlayerInterior(issuerid));
						DCC_AddEmbedField(embed, "Damager's Pos", pos);

						new timestamp[256], date[6];
						getdate(date[0], date[1], date[2]);
						gettime(date[3], date[4], date[5]);
						format(timestamp, sizeof(timestamp), "%i-%02d-%02dT%02d:%02d:%02d.000Z", date[0], date[1], date[2], date[3], date[4], date[5]);
						DCC_SetEmbedTimestamp(embed, timestamp);
						DCC_SendChannelEmbedMessage(DCC_FindChannelById("1147038470922063923"), embed);
					}
				#endif
			}
			new string[256];
			HideGivenDmg(issuerid);
			format(string, sizeof(string), "~g~+%0.1f", amount);
			PlayerTextDrawSetString(issuerid, DmgInfo[issuerid][0], string);
			PlayerTextDrawShow(issuerid, DmgInfo[issuerid][0]);
			SetTimerEx("HideGivenDmg", 3000, false, "i", issuerid);

			HideTakenDmg(playerid);
			format(string, sizeof(string), "~r~-%0.1f", amount);
			PlayerTextDrawSetString(playerid, DmgInfo[playerid][1], string);
			PlayerTextDrawShow(playerid, DmgInfo[playerid][1]);
			SetTimerEx("HideTakenDmg", 3000, false, "i", playerid);
			
			if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[issuerid][pAdminDuty])
			{
				Damaged[playerid] = 1;
				new date[6];
				getdate(date[0], date[1], date[2]);
				//       yr        mo       dt
				gettime(date[3], date[4], date[5]);
				//       hr       min      sec
				DamageAmount[playerid] = amount;
				DamageBone[playerid] = bodypart;
				strcpy(DamageBy[playerid], GetPlayerNameEx(issuerid), MAX_PLAYER_NAME);
				DamageWep[playerid] = weaponid;
				format(DamageTime[playerid], 256, "%02d/%02d/%i %02d:%02d:%02d", date[2], date[1], date[0], date[3], date[4], date[5]);
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(damagedid != INVALID_PLAYER_ID)
	{
	    /*Weapon Damage Sync*/
		if(weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 || weaponid == 33 || weaponid == 34 || weaponid == 38)
  		{
   			new tmp; tmp=random(48);
			switch(tmp)
			{
 				case 0:  { ApplyAnimation(damagedid,"PED","DAM_armL_frmBK",4.0,0,0,0,1,1); }
		 		case 3:  { ApplyAnimation(damagedid,"PED","DAM_armR_frmBK",4.0,0,0,0,1,1); }
		 		case 6:  { ApplyAnimation(damagedid,"PED","DAM_LegL_frmBK",4.0,0,0,0,1,1); }
		 		case 9:  { ApplyAnimation(damagedid,"PED","DAM_LegR_frmBK",4.0,0,0,0,1,1); }
		 		case 12: { ApplyAnimation(damagedid,"PED","DAM_stomach_frmBK",4.0,0,0,0,1,1); }
		 		case 15: { ApplyAnimation(damagedid,"PED","DAM_stomach_frmRT",4.0,0,0,0,1,1); }
		 		case 18: { ApplyAnimation(damagedid,"PED","DAM_armL_frmFT",4.0,0,0,0,1,1); }
		 		case 21: { ApplyAnimation(damagedid,"PED","DAM_armL_frmLT",4.0,0,0,0,1,1); }
		 		case 24: { ApplyAnimation(damagedid,"PED","DAM_LegL_frmFT",4.0,0,0,0,1,1); }
		 		case 27: { ApplyAnimation(damagedid,"PED","DAM_LegR_frmFT",4.0,0,0,0,1,1); }
		 		case 30: { ApplyAnimation(damagedid,"PED","DAM_LegL_frmLT",4.0,0,0,0,1,1); }
		 		case 33: { ApplyAnimation(damagedid,"PED","DAM_LegR_frmRT",4.0,0,0,0,1,1); }
		 		case 36: { ApplyAnimation(damagedid,"PED","DAM_stomach_frmFT",4.0,0,0,0,1,1); }
		 		case 39: { ApplyAnimation(damagedid,"PED","DAM_armR_frmFT",4.0,0,0,0,1,1); }
		 		case 42: { ApplyAnimation(damagedid,"PED","DAM_armR_frmRT",4.0,0,0,0,1,1); }
		 		case 45: { ApplyAnimation(damagedid,"PED","DAM_stomach_frmLT",4.0,0,0,0,1,1); }
			}
		}
	    /*Hit Calculates*/
		new Float:armour; GetPlayerArmour(damagedid,armour);
		if(armour < 1)
		{
			new Float:health; GetPlayerHealth(damagedid, health);
			SetPlayerHealth(damagedid,health-amount);
			PlayerInfo[damagedid][pHealth] -= amount;
			lasthit[damagedid] = playerid;
		}
		else if(armour > 0)
		{
		    if(armour < amount)
		    {
		        new Float:health; GetPlayerHealth(damagedid, health);
		        new Float:value = amount-armour;
				SetScriptArmour(damagedid,0);
				SetPlayerHealth(damagedid,health-value);
				PlayerInfo[damagedid][pHealth] -= amount;
				lasthit[damagedid] = playerid;
			}
			else if(armour > amount)
		    {
				SetScriptArmour(damagedid,armour-amount);
				lasthit[damagedid] = playerid;
			}
		}
	}
	if(playerid != INVALID_PLAYER_ID && damagedid != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(playerid))
		{
			if(weaponid == 5)
			{
				new Float:armor;
				GetPlayerArmour(damagedid, armor);
				if(armor > 0.0)
				{
					SetScriptArmour(damagedid, (PlayerInfo[damagedid][pArmor] - 20.0 < 0.0) ? (0.0) : (PlayerInfo[damagedid][pArmor] - 20.0));
				}
				else
				{
					GivePlayerHealth(damagedid, -20.0);
				}
			}
			if(weaponid == 5 && SpecialBat[playerid] == true)
			{
				new Float:hp, Float:x, Float:y, Float:z;
				GetPlayerPos(damagedid, x, y, z);
				GetPlayerHealth(playerid, hp);
				CreateExplosion(x, y, z, 0, 10.0);
				SetPlayerHealth(playerid, hp);
			}
			if(HeadShotSystem[playerid] == true && GetFactionType(playerid) == FACTION_HITMAN && PlayerInfo[damagedid][pContracted] > 0 && bodypart == 9 && GetPlayerState(damagedid) != PLAYER_STATE_WASTED)
			{
				SCM(damagedid, SERVER_COLOR, "You have been struck a bullet to the head by a hitman.");
				SM(playerid, SERVER_COLOR, "You have struck %s in the head with a bullet.", GetRPName(damagedid));
				SetPlayerHealth(damagedid, 0.0);
				PlayerInfo[damagedid][pHealth] = 0.0;
				HeadShotSystem[playerid] = false;
			    HandleContract(damagedid, playerid);
				return 0;
			}

			if(PoisonDart[playerid] == true && GetFactionType(playerid) == FACTION_HITMAN && PlayerInfo[damagedid][pContracted] > 0 && GetPlayerState(damagedid) != PLAYER_STATE_WASTED)
			{
				SM(playerid, SERVER_COLOR, "You have poisoned %s with your Poison Dart.", GetRPName(damagedid));
				SCM(damagedid, SERVER_COLOR, "You have been poisoned by a Hitman, get stoned to cure it.");
				PoisonDart[playerid] = false;
				Poisonedby[damagedid] = playerid;
				PoisonTimer[damagedid] = SetTimerEx("PoisonUpdate", 1000, true, "i", damagedid);
				return 0;
			}

			if(!PlayerInfo[damagedid][pJoinedEvent] && PlayerInfo[damagedid][pPaintball] == 0 && PlayerInfo[damagedid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[damagedid][pAdminDuty] && !PlayerInfo[playerid][pAdminDuty])
			{
				Damaged[damagedid] = 1;
				new date[6];
				getdate(date[0], date[1], date[2]);
				//       yr        mo       dt
				gettime(date[3], date[4], date[5]);
				//       hr       min      sec
				DamageAmount[damagedid] = amount;
				DamageBone[damagedid] = bodypart;
				strcpy(DamageBy[damagedid], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
				DamageWep[damagedid] = weaponid;
				format(DamageTime[damagedid], 256, "%02d/%02d/%i %02d:%02d:%02d", date[2], date[1], date[0], date[3], date[4], date[5]);
			}
		    if(weaponid == 4 && PlayerHasWeapon(playerid, 4) && IsPlayerInRangeOfPlayer(damagedid, playerid, 20.0) && amount > 100.0)
		    {
		        SetPlayerHealth(damagedid, 0.0);
				PlayerInfo[damagedid][pHealth] = 0.0;
		        HandleContract(damagedid, playerid);
		    }
		}
	}
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Heist started", 5000, 1);
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

				if(!Maskara[playerid]) {
					PlayerInfo[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
					SCM(playerid, COLOR_REALRED, "You did not have a mask on and you got 6 stars from the government");
				}

				PlayerInfo[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SM(i, COLOR_ROYALBLUE, "HQ: A robbery is occurring at the Mulholland Bank. There are %i confirmed robbers.", GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": A bank robbery is currently taking place at the Mulholland Bank!");

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2335, -998.6115, 671.0032, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2344, -1002.5356, 671.0032, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 1674.2708, -998.4954, 671.0032, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 1674.2708, -994.5173, 671.0032, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
		SetTimerEx("FinishRob", 600000, false, "i", playerid);
		SetTimer("NotifRob", 570000, false);
		#if defined DISCORD
			DCC_SendText(10, RobberyInfo[rRobbers][0], "", "1118613863043182592", INVALID_PLAYER_ID, -1);
		#endif
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(IsPlayerNPC(playerid)) return 1;
	#if defined DISCORD
		if(hittype == BULLET_HIT_TYPE_VEHICLE)
		{
			if(IsValidVehicle(hitid))
			{
				if(weaponid != 0 || weaponid != 9 || weaponid != 28 || weaponid != 29 || weaponid != 32 || weaponid != 38 || weaponid != 42)
				{
					new DCC_Embed:embed = DCC_CreateEmbed();
					new convert[256];
					format(convert, sizeof(convert), "%s -> Vehicle: %s", GetPlayerNameEx(playerid), GetVehicleName(hitid));
					DCC_SetEmbedTitle(embed, convert);
					DCC_AddEmbedField(embed, "Weapon", GetWeaponNameEx(weaponid));
					new owner[128];
					if(VehicleInfo[hitid][vFactionType] != FACTION_NONE)
						format(owner, sizeof(owner), "%s", factionTypes[VehicleInfo[hitid][vFactionType]]);
					else if(VehicleInfo[hitid][vOwnerID] != 0)
						format(owner, sizeof(owner), "%s", VehicleInfo[hitid][vOwner]);
					else if(VehicleInfo[hitid][vGang] != -1)
						format(owner, sizeof(owner), "%s", GangInfo[VehicleInfo[hitid][vGang]][gName]);

					DCC_AddEmbedField(embed, "Vehicle Owner:", owner);

					new Float:x, Float:y, Float:z, pos[128];
					GetVehiclePos(hitid, x, y, z);
					format(pos, sizeof(pos), "%f, %f, %f - V: %i - Int: %i", x, y, z, GetVehicleVirtualWorld(hitid), GetPlayerInterior(playerid));
					DCC_AddEmbedField(embed, "Vehicle's Pos", pos);

					GetPlayerPos(playerid, x, y, z);
					format(pos, sizeof(pos), "%f, %f, %f - V: %i - Int: %i", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					DCC_AddEmbedField(embed, "Damager's Pos", pos);

					new timestamp[256], date[6];
					getdate(date[0], date[1], date[2]);
					gettime(date[3], date[4], date[5]);
					format(timestamp, sizeof(timestamp), "%i-%02d-%02dT%02d:%02d:%02d.000Z", date[0], date[1], date[2], date[3], date[4], date[5]);
					DCC_SetEmbedTimestamp(embed, timestamp);
					DCC_SendChannelEmbedMessage(DCC_FindChannelById("1147038470922063923"), embed);
				}
			}
		}
	#endif
	if(IsPlayerDrivebying(playerid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER))
	{
		if(gAnticheat && gettime() > PlayerInfo[playerid][pACTime] && !PlayerInfo[playerid][pKicked] && PlayerInfo[playerid][pAdminDuty] == 0)
		{
			SAM(COLOR_YELLOW, "AdmWarning: %s [%i] is currently doing Drive-By as a %s!.", GetPlayerNameEx(playerid), playerid, (GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) ? ("Passenger") : ("Driver"));
			Log_Write("log_cheat", "%s (uid: %i) did Drive-By as a %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], (GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) ? ("Passenger") : ("Driver"));
			PlayerInfo[playerid][pACTime] = gettime() + 2;
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if(weaponid == 35 && PlayerHasWeapon(playerid, 35))
		{
			if(PlayerInfo[playerid][pRPGAmmo] > 0)
			{
				PlayerInfo[playerid][pRPGAmmo]--;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rpgammo=%i WHERE uid = %i", PlayerInfo[playerid][pRPGAmmo], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		if(GetPVarInt(hitid, "Frozen") == 1)
		{
			return 0;
		}
		if(PlayerInfo[hitid][pSurgery] || PlayerInfo[hitid][pOnSurgery])
		{
			return 0;
		}
		if(Safe[playerid])
		{
		    GameTextForPlayer(playerid, "~r~You're inside a ~g~Safe Zone!", 2000, 3);
			return 0;
		}
		if(Safe[hitid])
		{
			GameTextForPlayer(playerid, "~r~You're inside a ~g~Safe Zone!", 2000, 3);
			return 0;
		}

		if((1 <= EventInfo[eType] <= 2) && PlayerInfo[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	GameTextForPlayer(playerid, "~r~Don't shoot until the event starts!", 2000, 3);
			    return 0;
			}
			else if(EventInfo[eType] == 2 && PlayerInfo[hitid][pEventTeam] == PlayerInfo[playerid][pEventTeam] && !EventInfo[eFriendlyFire])
			{
	            GameTextForPlayer(playerid, "~r~Do not teamkill!", 2000, 3);
			    return 0;
			}
		}
		if(PlayerInfo[playerid][pPaintball] == 2 && PlayerInfo[hitid][pPaintballTeam] == PlayerInfo[playerid][pPaintballTeam])
		{
            GameTextForPlayer(playerid, "~r~Do not teamkill!", 2000, 3);
		    return 0;
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
		    GameTextForPlayer(playerid, "~r~Don't shoot at newbies!", 2000, 3);
		    return 0;
		}
	}

    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(PlayerInfo[playerid][pClip] > 0)
		{
		    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    PlayerInfo[playerid][pClip]--;
		}
	}

	if((gAnticheat) && !PlayerHasWeapon(playerid, weaponid, true) && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked] && gettime() > PlayerInfo[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
		KickPlayer(playerid);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!PlayerInfo[hitid][pJoinedEvent] && !PlayerInfo[hitid][pPaintball] && PlayerInfo[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, PlayerInfo[hitid][pArmor]);
		}
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(PlayerInfo[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			PlayerInfo[playerid][pACFired]++;
			}

		    if(!PlayerInfo[playerid][pReloading] && PlayerInfo[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    		    {
					SAM(COLOR_YELLOW, "AdmWarning: %s was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid));
					Log_Write("log_cheat", "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
					KickPlayer(playerid);
				}
			}

			PlayerInfo[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}
	new issuerid, weapon;
	issuerid = playerid;
	playerid = hitid;
	weapon = weaponid;
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if((22 <= weapon <= 36) && !PlayerHasWeapon(issuerid, weapon, true) && PlayerInfo[issuerid][pAdminDuty] == 0 && !PlayerInfo[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));

			SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(issuerid), SERVER_BOT, string);
			KickPlayer(playerid);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && PlayerInfo[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT))
		{
			if(PlayerInfo[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(PlayerInfo[playerid][pSurgery])
			{
				SCM(issuerid, COLOR_SYNTAX, "You can't taze an injured person!");
				return 0;
			}
			if(IsPlayerNPC(playerid))
			{
				SCM(issuerid, COLOR_SYNTAX, "You can't taze an NPC");
				return 0;
			}
			if(PlayerInfo[playerid][pTazedTime] || PlayerInfo[playerid][pRes])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been tazed or restrained.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze that player. They are too far from you.");
			    return 0;
			}
			if(PlayerInfo[playerid][pHurt] - 30 > 0)
			{
			    SCM(issuerid, COLOR_SYNTAX, "Player is too hurt. Therefore, tazing them is not allowed.");
				return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
			    return 0;
			}

			PlayerInfo[playerid][pTazedTime] = 10;
			Freeze(playerid);
			
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			Dyuze(playerid, "Notice", "Tazed.");

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their tazer full of electricity at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been "CXRP"stunned{CCFFFF} with electricity by %s's tazer.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}
		if(PlayerInfo[playerid][pLevel] == 1)
		{
			return 0;
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
		    return 0;
		}
		if(PlayerInfo[issuerid][pFreezeTimer] != -1)
		{
		    PlayerInfo[issuerid][pFreezeTimer] = -1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 150.0, 1061.71, -74.64, 1003.85) && !IsLawEnforcement(issuerid))
		{
		    GameTextForPlayer(issuerid, "~r~Shooting ~w~inside the ~g~Casino ~w~is ~r~prohibited.", 5000, 3);
			ClearAnimations(issuerid, 1);
			SetPlayerArmedWeapon(issuerid, 0);
		    return 0;
  		}
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[issuerid][pAdminDuty])
		{
			PlayerInfo[playerid][pHurt] = 10;
		}
		if(PlayerInfo[playerid][pTazer] == 1)
		{
			PlayerInfo[playerid][pTazer] = 0;
			SetPlayerWeapons(playerid);

			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
			}
			SCM(playerid, COLOR_WHITE, "You're hurt, you can't use tazer now.");
		}
	}
	return 1;
}

public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	if(IsPlayerNPC(playerid)) return 1;
	switch(extraid)
	{
   	    case MODEL_SELECTION_CLOTHES:
	    {
			if(response)
			{
				new businessid = GetInsideBusiness(playerid);
				if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
					new price = BusinessInfo[businessid][bPrices][0];
					if(BusinessInfo[businessid][bProducts] <= 0)
					{
						return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
					}
					if(PlayerInfo[playerid][pDonator] == 0 && PlayerInfo[playerid][pCash] < price && !IsBusinessOwner(playerid, businessid))
					{
						return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
					}
					if((PlayerInfo[playerid][pDonator] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_ARMY) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
						return SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
					}
					if(PlayerInfo[playerid][pDonator] == 0)
					{
						if(IsBusinessOwner(playerid, businessid))
						{
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a new set of clothes from their business.", GetRPName(playerid));
							SCM(playerid, COLOR_WHITE, "You've changed your clothes for free from your own business.");
						}
						else
						{
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), AddCommas(price));
							SM(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
							GivePlayerCash(playerid, -price);
							BusinessInfo[businessid][bCash] += price;
						}
						BusinessInfo[businessid][bProducts]--;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
						mysql_tquery(connectionID, queryBuffer);
					}
					else
					{
						SCM(playerid, COLOR_VIP, "VIP Perk: You changed your clothes free of charge.");
					}
					SetScriptSkin(playerid, modelid);
				}
			}
	    }

   	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid), count;

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
				    {
				    	if(!ClothingInfo[playerid][i][cExists])
			      		{
							count++;
						}
					}
					if(count == 0)
					{
						SCM(playerid, COLOR_SYNTAX, "You have no more clothing slots available. Therefore you can't buy this.");
					}
					else
					{
						BuyClothing(playerid, listitem + PlayerInfo[playerid][pClothingIndex]);
					}
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
	    }
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(IsPlayerNPC(playerid)) return 1;
	// Finally... an end to that ANNOYING spectate bug!

	foreach (new i : Player) {
		if (spectateID[i] == playerid) {
			SetPlayerInterior(i, newinteriorid);
  		}
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	return 1;
}



public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][pKicked]) return 0;
	if(!PlayerInfo[playerid][pLogged]) return 1;

	if(GetPVarInt(playerid, "RobbingATM") == 1 && !IsPlayerInRangeOfPoint(playerid, 4.5, ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjPos][0], ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjPos][1], ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjPos][2]))
	{
		SCM(playerid, COLOR_WHITE, "You've moved away from your robbing position! Robbery has been stopped");
		FinishRobAtm(playerid, 0);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleParams(vehicleid, VEHICLE_ENGINE) && vehicleEng[vehicleid] == false)
		{
			SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
			vehicleEng[vehicleid] = false;
			SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has hacked the vehicle engine of %s.", GetPlayerNameEx(playerid), playerid, GetVehicleName(vehicleid));
			Log_Write("log_cheat", "%s (uid: %i) has hacked the vehicle engine of %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid));
		}
	}


	for(new zoneid = 0; zoneid < MAX_ZONES; zoneid ++)
	{
		if(SafeZone[zoneid][sExists] && !IsPlayerInDynamicArea(playerid, SafeZone[zoneid][sArea]) && GetPlayerVirtualWorld(playerid) != 0 && GetPlayerInterior(playerid) != 0)
		{
			Safe[playerid] = 0;
		}
		else if(SafeZone[zoneid][sExists] && IsPlayerInDynamicArea(playerid, SafeZone[zoneid][sArea]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		{
			Safe[playerid] = 1;
		}
	}

	if(SB[playerid] != 0 && (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetPlayerState(playerid) != PLAYER_STATE_PASSENGER))
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
		{
			RemovePlayerAttachedObject(playerid, 9);
		}
		SB[playerid] = 0;
	}

	new worldid = GetPlayerVirtualWorld(playerid);
	if (playerVirtualWorld[playerid] != worldid)
	{
        playerVirtualWorld[playerid] = worldid;

		foreach (new i : Player) {
			if (spectateID[i] == playerid) {
				SetPlayerVirtualWorld(i, worldid);
	  		}
		}
	}

	foreach (new i : Player) {
	    if (spectateID[i] == playerid) {
			UpdatePlayerInfo(i, playerid);

			if (spectateType[i] == SPECTATE_TYPE_VEHICLE) {
				UpdateVehicleInfo(i, GetPlayerVehicleID(playerid));
			}
		}
	}

	if(MenuStore_IsOpen(playerid))
	{
		CurrItem[playerid] = MenuStore_GetTotalItemsInCart(playerid);
	}

	if(PlayerInfo[playerid][pTazer] && GetScriptWeapon(playerid) != 23)
	{
	    SetPlayerArmedWeapon(playerid, 23);
	}

	if(HeadShotSystem[playerid] && GetScriptWeapon(playerid) != 34)
	{
		SetPlayerArmedWeapon(playerid, 34);
	}

	if(HeadShotSystem[playerid] && !PlayerHasWeapon(playerid, 34))
	{
		HeadShotSystem[playerid] = false;
	}

	if(Safe[playerid] && GetScriptWeapon(playerid) > 0 && !PlayerInfo[playerid][pDuty] && !PlayerInfo[playerid][pTazer] && GetScriptWeapon(playerid) != 23)
	{
		GameTextForPlayer(playerid, "~r~You're inside a ~g~Safe ~r~Zone!", 2000, 3);
		SetPlayerArmedWeapon(playerid, 0);
	}

	if(GetPVarInt(playerid, "Frozen") == 1)
	{
	    Freeze(playerid);
	}
	if(startplant[playerid] == 1)
	{
		ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.0, 1, 0, 0, 0, 5000, 1);
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pInjured])
    {
		if(GetPlayerAnimationIndex(playerid))
		{
			new animlib[32];
			new animname[32];
			GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
			if((strcmp(animlib, "SWEET", true) != 0) && (strcmp(animname, "Sweet_injuredloop", true) != 0))
			{
				ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);
			}
		}
	}

	if(PlayerInfo[playerid][pAdminDuty] && God[playerid] == 1)
	{
		SetPlayerHealth(playerid, 100000.0);
		SetPlayerArmour(playerid, 100000.0);
	}

	static id;
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if(IsASportsCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		
		new
			Float:H;

		GetVehicleHealth(vehicleid,H);

		
		PlayerTextDrawSetString(playerid, SpeedoTD[playerid][23], "KM/H");
		new string[64];
		format(string, sizeof(string), "%i", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, SpeedoTD[playerid][22], string);

		if(VehicleHasEngine(vehicleid))
		{
			format(string, sizeof(string), "%s", GetVehicleName(vehicleid));
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][12], string);
			format(string, sizeof(string), "%i", vehicleFuel[vehicleid]);
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][11], string);
			new vehiclehealth[24];
			format(vehiclehealth, sizeof(vehiclehealth), "%.0f", H-250.0);
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][10], vehiclehealth);
			format(string, sizeof(string), "%s",(GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("~g~Yes") : ("~RED~No"));
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][20], string);
			format(string, sizeof(string), "%s",(GetVehicleParams(vehicleid, VEHICLE_ENGINE)) ? ("~g~ON") : ("~r~OFF"));
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][21], string);
			format(string, sizeof(string), "%s",(GetVehicleParams(vehicleid, VEHICLE_LIGHTS)) ? ("~g~ON") : ("~r~OFF"));
			PlayerTextDrawSetString(playerid, SpeedoTD[playerid][15], string);
			
		}
		
		static Float:valor;
		valor = GetVehicleSpeed(vehicleid);
		if(valor < 150.0)
		{
			PlayerTextDrawBoxColor(playerid, SpeedoTD[playerid][24], 0x00FF00FF);
			PlayerTextDrawTextSize(playerid, SpeedoTD[playerid][24],(290.0 + ((46.0 * ++valor) / 142)), 0.0);
		}
		else
		{
			PlayerTextDrawBoxColor(playerid,SpeedoTD[playerid][24], 0xFF0000AA);
			PlayerTextDrawTextSize(playerid, SpeedoTD[playerid][24],(292.0 + ((46.0 * ++valor) / 145)), 0.0);
		}
		PlayerTextDrawShow(playerid,SpeedoTD[playerid][24]);
	}
	if(IsAEdmCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new speed[24];
		format(speed,sizeof(speed), "%i", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, SpeedoMeter_2[playerid][4], speed);
		new fuel[15];
		format(fuel, sizeof(fuel), "Fuel:_%iL", vehicleFuel[vehicleid]);
		PlayerTextDrawSetString(playerid, SpeedoMeter_2[playerid][0], fuel);
		if(GetVehicleParams(vehicleid, VEHICLE_DOORS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][1], 0xe4a12aff);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][1]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][1], 0xFFFFFFFF);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][1]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][3], 0xe4a12aff);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][3]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][3], 0xFFFFFFFF);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][3]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][2], 0xe4a12aff);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][2]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_2[playerid][2], 0xFFFFFFFF);
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][2]);
		}
	}
	if(IsAFourSeater(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new Float:H;
		GetVehicleHealth(vehicleid, H);
		new speed[24];
		format(speed, sizeof(speed), "%i", GetVehicleSpeedMPH(vehicleid));
		PlayerTextDrawSetString(playerid, SpeedoMeter_3[playerid][6], speed);
		new vehiclehealth[24];
		format(vehiclehealth, sizeof(vehiclehealth), "%.0f", H-250.0);
		PlayerTextDrawSetString(playerid, SpeedoMeter_3[playerid][5], vehiclehealth);
		new fuel[15];
		format(fuel, sizeof(fuel), "%i", vehicleFuel[vehicleid]);
		PlayerTextDrawSetString(playerid, SpeedoMeter_3[playerid][8], fuel);
		new speedex[24];
		format(speedex, sizeof(speedex), "%i KM/H", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, SpeedoMeter_3[playerid][7], speedex);
		if(GetVehicleParams(vehicleid, VEHICLE_DOORS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][15], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][15]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][15], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][15]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][11], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][11]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][11], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][11]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][10], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][10]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_3[playerid][10], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][10]);
		}
	}
	if(IsAUniqueCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new speed[24];
		format(speed, sizeof(speed), "%i", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, SpeedoMeter_1[playerid][0], speed);
		new fuel[15];
		format(fuel, sizeof(fuel), "%iL", vehicleFuel[vehicleid]);
		PlayerTextDrawSetString(playerid, SpeedoMeter_1[playerid][4], fuel);
		if(GetVehicleParams(vehicleid, VEHICLE_DOORS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][2], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][2]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][2], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][2]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][3], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][3]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][3], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][3]);
		}
		if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][1], 0x00FF00FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][1]);
		}
		else
		{
			PlayerTextDrawColor(playerid, SpeedoMeter_1[playerid][1], 0xFF0000FF);
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][1]);
		}
	}
	if((!IsAUniqueCar(vehicleid) && !IsAFourSeater(vehicleid) && !IsAEdmCar(vehicleid) && !IsASportsCar(vehicleid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Making sure the player is in a vehicle as driver
	{
		new Float:H;
		GetVehicleHealth(vehicleid, H);
		new speed[24];
		format(speed, sizeof(speed), "%i", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, cWspeedo[playerid][2], speed);
		new vehiclehealth[24];
		format(vehiclehealth, sizeof(vehiclehealth), "%.0f", H-250.0);
		PlayerTextDrawSetString(playerid, cWspeedo[playerid][7], vehiclehealth);
		PlayerTextDrawSetString(playerid, cWspeedo[playerid][4], "KM/H");
		new fuel[15];
		format(fuel, sizeof(fuel), "%i", vehicleFuel[vehicleid]);
		PlayerTextDrawSetString(playerid, cWspeedo[playerid][5], fuel);
		
	}
	if ((id = Speed_Nearest(playerid)) != -1 && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleOwner(playerid, vehicleid) && IsEngineVehicle(vehicleid) && !PlayerInfo[playerid][pSpeedTime] && !PlayerInfo[playerid][pDuty])
	{
	    if (!IsACruiser(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid) && !IsAHelicopter(vehicleid))
	    {
	 		new price = 500 + floatround(GetVehicleSpeed(GetPlayerVehicleID(playerid)) - SpeedData[id][speedLimit]);
			new str[500];
	   		format(str, sizeof(str), "Speeding (%.0f/%.0f kmh)", GetVehicleSpeed(GetPlayerVehicleID(playerid)), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));
    		format(str, sizeof(str), "You have received a $%s speeding ticket.", AddCommas(price));
     		Dyuze(playerid, "Notice", str);
			VehicleInfo[vehicleid][vTickets] += price;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			PlayerInfo[playerid][pSpeedTime] = 5;
		}
	}
	new keys, ud, lr, string[128];
	GetPlayerKeys(playerid, keys, ud, lr);
	if(PlayerInfo[playerid][pHospital] && GetPlayerAnimationIndex(playerid) != 385) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
	if(GetPlayerMoney(playerid) != PlayerInfo[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
	}
	if(GetPlayerScore(playerid) != PlayerInfo[playerid][pLevel])
	{
	    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	}
	if(GetPlayerWeapon(playerid) > 1 && PlayerInfo[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 1)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}
	if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:vx,
	        Float:vy,
	        Float:vz,
	        Float:cx,
	        Float:cy,
	        Float:cz;

	    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
		        {
		            gFireHealth[i] = gFireHealth[i] - 1.0;

		            if(gFireHealth[i] <= 0.0)
		            {
		                PlayerInfo[playerid][pTotalFires]++;
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);
			            GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

			            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
						DestroyDynamicObject(gFireObjects[i]);

						gFireObjects[i] = INVALID_OBJECT_ID;
						gFireHealth[i] = 0.0;
					}
		        }
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
		{
		    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
		    GetPlayerCameraPos(playerid, cx, cy, cz);

		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 15.0))
		        {
		            GetDynamicObjectPos(gFireObjects[i], x, y, z);

					if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 15.0)
	   				{
	   				    gFireHealth[i] = gFireHealth[i] - 2.0;

	   				    if(gFireHealth[i] <= 0.0)
		            	{
		   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
		   			    	GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
					}
			  	}
		    }
		}

		if(!IsFireActive())
		{
		    new amount = 500;
		    foreach(new i : Player)
		    {
		        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
		        {
					amount *= (PlayerInfo[i][pFactionRank] + 1);
		            if(PlayerInfo[i][pLaborUpgrade] > 0)
					{
						amount += percent(amount, PlayerInfo[i][pLaborUpgrade]);
					}
					if(gDoubleSalary)
					{
					    amount = amount*2;
					    SCM(i, COLOR_GREEN, "You have earned 2x of the salary.");
					}
		            SM(i, COLOR_AQUA, "Well done! You helped put out the fire and received $%i on your paycheck.", amount);
					GivePlayerCash(i, amount);
		        }
			}
			gFires = 0;
		}
	}

	if(PlayerInfo[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    PlayerInfo[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    PlayerInfo[playerid][pACAmmo] = PlayerInfo[playerid][pCurrentAmmo];
	    PlayerInfo[playerid][pACFired] = 0;
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && PlayerInfo[playerid][pAdminDuty] == 0)
		{
			if(PlayerInfo[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, PlayerInfo[playerid][pCurrentWeapon], true) && !PlayerInfo[playerid][pKicked])
			{
			    PlayerInfo[playerid][pACWarns]++;

			    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a desynced %s.", GetPlayerNameEx(playerid), playerid, GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));

					SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
					KickPlayer(playerid);
				}
			}
		}
	}

	if(PlayerInfo[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(PlayerInfo[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        PlayerInfo[playerid][pClip] -= PlayerInfo[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(PlayerInfo[playerid][pClip] < 0)
      		{
       			PlayerInfo[playerid][pClip] = 0;
			}
		}

	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
	}

	if(onwood[playerid] == 1 && startwood[playerid] == 0 && !IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, -1931.063354,-2360.959228,30.820381)
		|| IsPlayerInRangeOfPoint(playerid, 1, -1914.466308,-2369.007685,29.804220)
		|| IsPlayerInRangeOfPoint(playerid, 1, -1903.706787,-2361.488769,31.170394))
		{
		    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw", 4.1, 1, 1, 1, 0, 0);
		    SendClientMessage(playerid, -1, "You started to produce wood..");
		    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw", 4.1, 1, 1, 1, 0, 0);
	        startwood[playerid] = 1;
			Freeze(playerid);
			SetTimerEx("TimerGiveLumber", 10000, false, "i", playerid);
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1, -1934.799438,-2243.597412,65.483177)
		|| IsPlayerInRangeOfPoint(playerid, 1, -1917.573364,-2251.707519,65.804397))
		{
		    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw", 4.1, 1, 1, 1, 0, 0);
		    SendClientMessage(playerid, -1, "You started to produce wood..");
		    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw", 4.1, 1, 1, 1, 0, 0);
	        startwood[playerid] = 1;
			Freeze(playerid);
			SetTimerEx("TimerGiveLumberEx", 10000, false, "i", playerid);
		    return 1;
		}
	}
	if(onplant[playerid] && !startplant[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, -989.6240, -1681.1686, 76.3672))
		{
			ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 5000, 1);
			GameTextForPlayer(playerid,"~w~Harvesting..", 10000,6);
			ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 5000, 1);
			Freeze(playerid);
 			startplant[playerid] = true;
			SetTimerEx("TimerGiveHarvesterEx", 10000, false, "i", playerid);
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerInfo[playerid][pReloading] = 1;
		}

	    PlayerInfo[playerid][pACFired] = 0;
	}

	if(PlayerInfo[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerInfo[playerid][pReloading] = 0;
	}
	if(PlayerInfo[playerid][pCurrentVehicle] != vehicleid)
	{
	    PlayerInfo[playerid][pCurrentVehicle] = vehicleid;
	    PlayerInfo[playerid][pVehicleCount]++;

	    if((gAnticheat) && (!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && PlayerInfo[playerid][pVehicleCount] >= 4 && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Vehicle Warp", GetRPName(playerid), SERVER_BOT);
	        KickPlayer(playerid);

	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	if(!PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][4], string);
			PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][5], string);
	}
	PlayerInfo[playerid][pLastUpdate] = gettime();

	return 1;
}

forward syncanim(playerid);
public syncanim(playerid)
{
	if(GetPVarInt(playerid,"roped") == 0) return 0;
	SetTimerEx("syncanim",250,0,"i",playerid);
	ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
	if(sirenInfo[vehicleid][useAttach])
	{
		DestroyObject(sirenInfo[vehicleid][attachObject]);
		sirenInfo[vehicleid][attachObject] = INVALID_OBJECT_ID;
		sirenInfo[vehicleid][useAttach] = false;
	}
	if(GetVehicleModel(vehicleid) == 497)
	{
	    for(new shg=0;shg<=MAX_PLAYERS;shg++)
	    {
	        if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
	        {
	            DisablePlayerCheckpoint(shg);
	            SetPVarInt(shg,"roped",0);
	            DisablePlayerCheckpoint(shg);
	            ClearAnimations(shg);
	            TogglePlayerControllable(shg,1);
	            for(new destr3=0;destr3<=Rp_ropelength;destr3++)
				{
					if(IsValidObject(ropes[shg][destr3]))
				    	DestroyObject(ropes[shg][destr3]);
				}
			}
		}
	}
	if(GetVehicleModel(vehicleid) == 519)
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pCurrentShamal] == vehicleid)
			{
				if(PlayerInfo[i][pWatchingWindow] == true)
				{
					TogglePlayerSpectating(i, false);
					PlayerInfo[i][pWatchingWindow] = false;
				}
				TeleportToVehicle(i, vehicleid);
				SetCameraBehindPlayer(i);
				SavePlayerVariables(i);
				SetPlayerHealth(i, 0.0);
				CreateExplosionForPlayer(i, 2.4015, 29.2775, 1199.593, 2, 13.4);
				PlayerInfo[i][pCurrentShamal] = INVALID_VEHICLE_ID;
				SCM(i, COLOR_WHITE, "This shamal just had an accident, you've been thrown out & injured!");
			}
		}
		if (sExplode[vehicleid-1] != -1)
		{
			KillTimer(sExplode[vehicleid-1]);
		}
		sExplode[vehicleid-1] = SetTimerEx("ExplodeShamal", 700, 0, "d", vehicleid);
		tCount[vehicleid-1] = true;
	}
	if(GetVehicleModel(vehicleid) == 431 || GetVehicleModel(vehicleid) == 437)
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pCurrentBus] == vehicleid)
			{
				if(PlayerInfo[i][pWatchingWindow] == true)
				{
					TogglePlayerSpectating(i, false);
					PlayerInfo[i][pWatchingWindow] = false;
				}
				TeleportToVehicle(i, vehicleid);
				SetCameraBehindPlayer(i);
				SavePlayerVariables(i);
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				SetPlayerHealth(i, 0.0);
				CreateExplosionForPlayer(i, x, y, z, 2, 13.4);
				PlayerInfo[i][pCurrentBus] = INVALID_VEHICLE_ID;
				SCM(i, COLOR_WHITE, "This bus just had an accident, you've been thrown out & injured!");
			}
		}
		if (bExplode[vehicleid-1] != -1)
		{
			KillTimer(bExplode[vehicleid-1]);
		}
		bExplode[vehicleid-1] = SetTimerEx("ExplodeBus", 700, 0, "d", vehicleid);
		bCount[vehicleid-1] = true;
	}
	return 1;
}


public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

IsPlayerInInvalidNosVehicle(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	#define MAX_INVALID_NOS_VEHICLES 52
	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
 	if(IsPlayerInAnyVehicle(playerid))
  	{
   		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
     	{
      		if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
       	}
   	}
   	return false;
}



public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if((gAnticheat) && !GetPlayerInterior(playerid) && PlayerInfo[playerid][pAdminDuty] == 0 && !PlayerInfo[playerid][pKicked])
	{
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Illegal Modding", GetRPName(playerid), SERVER_BOT);
	    KickPlayer(playerid);
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    switch(componentid)
	{
	    case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(vehicleid, componentid);
	}
	if(!IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);

	return 1;
}

public ExplodeShamal(vehicleid)
{
	KillTimer(sExplode[vehicleid-1]);
	if (tCount[vehicleid-1])
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (PlayerInfo[i][pCurrentShamal] == vehicleid)
			{
				CreateExplosionForPlayer(i, 2.4015, 29.2775, 1199.593, 2, 13.4);
			}
		}
		sExplode[vehicleid-1] = SetTimerEx("ExplodeShamal", random(1300) + 100, 0, "d", vehicleid);
	}
	else
	{
		sExplode[vehicleid-1] = -1;
	}
}

public ExplodeBus(vehicleid)
{
	KillTimer(bExplode[vehicleid-1]);
	if (bCount[vehicleid-1])
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (PlayerInfo[i][pCurrentBus] == vehicleid)
			{
				new
				Float:x,
				Float:y,
				Float:z;

				GetPlayerPos(i, x, y, z);

				CreateExplosionForPlayer(i, x, y, z, 0, 20.0);
			}
		}
		bExplode[vehicleid-1] = SetTimerEx("ExplodeBus", random(1300) + 100, 0, "d", vehicleid);
	}
	else
	{
		bExplode[vehicleid-1] = -1;
	}
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid == 408)
	{
		LoadedTrash[vehicleid] = 0;
	}
	bCount[vehicleid-1] = false;
	tCount[vehicleid-1] = false;
	if(sirenInfo[vehicleid][useAttach])
	{
		DestroyObject(sirenInfo[vehicleid][attachObject]);
		sirenInfo[vehicleid][attachObject] = INVALID_OBJECT_ID;
		sirenInfo[vehicleid][useAttach] = false;
	}
	VehicleTire[vehicleid][0]=0;
	VehicleTire[vehicleid][1]=0;
	VehicleTire[vehicleid][2]=0;
	VehicleTire[vehicleid][3]=0;
	// ReloadVehicleNeon(vehicleid);
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}
	ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
	vehicleStream[vehicleid][0] = 0;
	LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
	SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pKicked])
	{
		if(PlayerInfo[playerid][pHospital])
	    {
	        SCM(playerid, COLOR_LIGHTRED, "** You are currently in the hospital. Chatting is disabled.");
	        return 0;
		}
		if(PlayerInfo[playerid][pMuted])
		{
		    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Chatting is disabled.");
	        return 0;
		}
		if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdminDuty] == 0)
		{
		    PlayerInfo[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected spamming.");
		    return 0;
		}
		if((gAnticheat) && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SAM(COLOR_YELLOW, string, 2);
        	if(++PlayerInfo[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SAM(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Server Advertisement", GetRPName(playerid), SERVER_BOT);
				KickPlayer(playerid);
        	}
			return 0;
		}
		if(CheckValidText(text))
		{
			SCM(playerid, COLOR_REALRED, "You can't use \"|\" or \"{\" or \"}\" in chat!");
			return 0;
		}
     	if(Maskara[playerid])
    	{
        	new string[256]; // String of GOD
        	//new tString = text;
        	format(string, sizeof(string), "Stranger #%i: %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
        	return 0;
    	}
    	if(GetPlayerState(playerid) == 1 && PlayerInfo[playerid][pChatAnim])
		{
			new lengthTime = strlen(text);
			new animTime = lengthTime*200;

			ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, animTime);
		}
	    if(PlayerInfo[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(PlayerInfo[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2)
           	     	{
    	            	SM(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetRPName(playerid), text);
					}
					else
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(PlayerInfo[playerid][pCallLine] != playerid && PlayerInfo[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
			            SM(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "(cellphone) %s: %s", GetRPName(playerid), text);
						format(string, sizeof(string), "(cellphone) %s: %s", GetRPName(playerid), text);
						SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					}
					else
					{
			            SM(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "(%s Accent) (cellphone) %s: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
					    format(string, sizeof(string), "(%s Accent) (cellphone) %s: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
						SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					}
		        }

				if(PlayerInfo[playerid][pCallLine] == playerid)
				{
				    switch(PlayerInfo[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "police", true))
					        {
					            SCM(playerid, COLOR_DISPATCH, "This is the San Fierro Police Department. What is your emergency?");
					        	PlayerInfo[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "medic", true))
					        {
					            SCM(playerid, COLOR_DISPATCH, "This is the San Fierro Fire & Medical Department. What is your emergency?");
					        	PlayerInfo[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SCM(playerid, COLOR_DISPATCH, "Sorry? I don't know what you mean... Enter 'police' or 'medic'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
									if(GetPlayerInterior(playerid) > 0)
									{
										SCM(i, COLOR_GREY2, "Location: Interior");
									}
									else
									{
										SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
									}
									SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(PlayerInfo[playerid][pEmergency], text, 128);

                            PlayerInfo[playerid][pEmergencyCall] = 120;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_POLICE;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_FEDERAL;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_ARMY;

						    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SM(i, COLOR_DOCTOR, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
									if(GetPlayerInterior(playerid) > 0)
									{
										SCM(i, COLOR_GREY2, "Location: Interior");
									}
									else
									{
										SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
									}
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(PlayerInfo[playerid][pEmergency], text, 128);

						    PlayerInfo[playerid][pEmergencyCall] = 120;
						    PlayerInfo[playerid][pEmergencyType] = FACTION_MEDIC;

						    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(IsNews(i))
						        {
						            SM(i, SERVER_COLOR, "News Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
						            SM(i, COLOR_GREY2, "Message: %s", text);
						        }
						    }

						    SCM(playerid, SERVER_COLOR, "News Team: Thank you. We will get back to you shortly!");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SM(i, SERVER_COLOR, "Taxi Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pNumber]);
									if(GetPlayerInterior(playerid) > 0)
									{
										SCM(i, COLOR_GREY2, "Location: Interior");
									}
									else
									{
										SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
									}
						            SM(i, COLOR_WHITE, "** Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }

							PlayerInfo[playerid][pTaxiCall] = 60;
						    SCM(playerid, COLOR_DISPATCH, "Thank you. We will alert all taxi drivers on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!PlayerInfo[i][pToggleNews])
					{
						if(IsNews(playerid))
  					  	{
		    			    SM(i, 0x489348FF, "Live Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
    						SM(i, 0x489348FF, "Live Guest %s: %s", GetRPName(playerid), text);
						}
					}
				}

				//SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
			else
			{
			    if(PlayerInfo[playerid][pHelper] > 0 && PlayerInfo[playerid][pAcceptedHelp])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(IsPlayerInAnyVehicle(playerid) && CarWindows[GetPlayerVehicleID(playerid)])
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			            {
        			        if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
        			        {
        						SM(i, COLOR_GREY1, "(windows) %s says: %s", GetRPName(playerid), text);
        					}
        					else
        					{
        					    SM(i, COLOR_GREY1, "(windows) (%s Accent) %s says: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
        					}
			            }
			        }
			    }
			    else
			    {
				    if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
						format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
					}
					else
					{
					    format(string, sizeof(string), "(%s Accent) %s says: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
					}

					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     				SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
				}
			}
		}
	}
    PlayerInfo[playerid][pAFKPos][0] = 0.0;
    PlayerInfo[playerid][pAFKPos][1] = 0.0;
    PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][pKicked]) return 0;

	if(Reconnecting[playerid] == true)
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands as you're being relogged from the server.");
	    return 0;
	}

	if(!PlayerInfo[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(PlayerInfo[playerid][pMuted])
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Commands are disabled.");
        return 0;
	}
	if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
	{
	    PlayerInfo[playerid][pMuted] = 10;
	    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected flooding.");
	    return 0;
	}
	if((gAnticheat) && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SAM(COLOR_YELLOW, string, 2);
        PlayerInfo[playerid][pAdvertWarnings] ++;
		return 0;
	}
	if(CheckValidText(params))
	{
		SCM(playerid, COLOR_REALRED, "You can't use \"|\" or \"{\" or \"}\" in chat!");
		return 0;
	}

	PlayerInfo[playerid][pAFKPos][0] = 0.0;
    PlayerInfo[playerid][pAFKPos][1] = 0.0;
    PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 1;
}

forward GagoKaba(playerid);
public GagoKaba(playerid)
{
	for(new i = 0; i < 4; i ++)
	{
		TextDrawHideForPlayer(playerid, UnknownTD[i]);
	}
    return 1;
}

forward ANNHIDE(playerid);
public ANNHIDE(playerid)
{
	for(new i = 0; i < 3; i ++)
	{
		TextDrawHideForPlayer(playerid, ANN[i]);
	}
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(result == -1)
	{
		for(new i = 0; i < 4; i ++)
		{
			TextDrawShowForPlayer(playerid, UnknownTD[i]);
		}
	  	SetTimerEx("GagoKaba", 5000, false, "i", playerid);
	 	PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	}
	else {
		printf("[cmd] %s [%i]: /%s %s", GetRPName(playerid), playerid, cmd, params);
	}
	return 1;
}



forward DestroyEffectObject(objectid, objectid2);
public DestroyEffectObject(objectid, objectid2)
{
	DestroyObject(objectid);
	if(objectid2 != -1) DestroyObject(objectid2);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(IsPlayerNPC(playerid)) return 1;
	if((newkeys & KEY_NO) && HasTrash[playerid])
	{
		Trash_ResetPlayer(playerid);
		SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}Trash bag removed.");
	}
    if(PRESSED(KEY_SPRINT))
    {
        if((gAnticheat) && GetTickCount() - LastPressTime[playerid] < MINIMUM_PRESS_TIME && gettime() > PlayerInfo[playerid][pACTime] && !PlayerInfo[playerid][pKicked] && PlayerInfo[playerid][pAdminDuty] == 0)
        {
            SprintPressCounter[playerid]++;
            if(SprintPressCounter[playerid] == EXCESSIVE_PRESS_COUNT)
            {
				PlayerInfo[playerid][pACWarns]++;
				PlayerInfo[playerid][pACTime] = gettime() + 2;

				if(PlayerInfo[playerid][pACWarns] > 2)
		    	{
					PlayerInfo[playerid][pACWarns] = 0;
	    	    	SAM(COLOR_YELLOW, "AdmWarning: %s [%i] is using Sprintbind/hook.", GetPlayerNameEx(playerid), playerid);
	        		Log_Write("log_cheat", "%s (uid: %i) has possibly used Sprintbind/hook", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
            	}
			}
        }
        else SprintPressCounter[playerid] = 0;

        LastPressTime[playerid] = GetTickCount();
    }

	if(GetPVarInt(playerid, "debug") == 1)
	{
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && IsPlayerAdmin(i))
			{
				SM(i, COLOR_WHITE, "%s - %i - %i - %i", GetPlayerNameEx(playerid), playerid, newkeys, oldkeys);
			}
		}
	}
	if((newkeys & KEY_YES) && GetClosestCar(playerid, .fRange=5.0) != -1 && PlayerInfo[playerid][pCurrentShamal] == INVALID_VEHICLE_ID && GetVehicleModel(GetClosestCar(playerid, .fRange=5.0)) == 519 && PlayerUseAnims(playerid))
	{
		if(VehicleInfo[GetClosestCar(playerid, .fRange=5.0)][vLocked])
		{
			SCM(playerid, COLOR_SYNTAX, "This shamal is locked");
		}
		else
		{
			SavePlayerVariables(playerid);
			PlayerInfo[playerid][pCurrentShamal] = GetClosestCar(playerid, .fRange=5.0);
			SendProximityMessage(playerid, 30.0, 0x0080ffff, "**{C2A2DA} %s has entered the Shamal as a passenger.", GetRPName(playerid));
			TeleportToCoords(playerid, 3.839, 22.977, 1199.601, 90.0, 1, GetClosestCar(playerid, .fRange=5.0), false, false);
			SetCameraBehindPlayer(playerid);
		}
	}
	
	if((newkeys & KEY_YES) && !PlayerInfo[playerid][pWatchingWindow] && GetClosestCar(playerid, .fRange=5.0) == -1 && PlayerInfo[playerid][pCurrentShamal] != INVALID_VEHICLE_ID && PlayerUseAnims(playerid))
	{
		SendProximityMessage(playerid, 30.0, 0x0080ffff, "**{C2A2DA} %s has exited the Shamal", GetRPName(playerid));
		TeleportToVehicle(playerid, PlayerInfo[playerid][pCurrentShamal]);
		SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pCurrentShamal] = INVALID_VEHICLE_ID;
		SavePlayerVariables(playerid);
		PlayerInfo[playerid][pWatchingWindow] = false;
	}
	if((newkeys & KEY_YES) && GetClosestCar(playerid, .fRange=8.0) != -1 && PlayerInfo[playerid][pCurrentBus] == INVALID_VEHICLE_ID && (GetVehicleModel(GetClosestCar(playerid, .fRange=5.0)) == 431 || GetVehicleModel(GetClosestCar(playerid, .fRange=5.0)) == 437) && PlayerUseAnims(playerid))
	{
		if(VehicleInfo[GetClosestCar(playerid, .fRange=8.0)][vLocked])
		{
			SCM(playerid, COLOR_SYNTAX, "This bus is locked");
		}
		else
		{
			SavePlayerVariables(playerid);
			PlayerInfo[playerid][pCurrentBus] = GetClosestCar(playerid, .fRange=8.0);
			SendProximityMessage(playerid, 30.0, 0x0080ffff, "**{C2A2DA} %s has entered the Bus as a passenger.", GetRPName(playerid));
			TeleportToCoords(playerid, 2022.0273, 2235.2402, 2103.9536, 0.0, 1, GetClosestCar(playerid, .fRange=8.0), true, false);
			SetCameraBehindPlayer(playerid);
            SetPlayerTime(playerid, 00,00);
			new Float:bX, Float:bY, Float:bZ;
			GetPlayerPos(playerid, bX, bY, bZ);
			PlayerPlaySound(playerid, 1147, bX, bY, bZ);
		}
	}
	if((newkeys & KEY_YES) && !PlayerInfo[playerid][pWatchingWindow] && GetClosestCar(playerid, .fRange=5.0) == -1 && PlayerInfo[playerid][pCurrentBus] != INVALID_VEHICLE_ID && PlayerUseAnims(playerid))
	{
		SendProximityMessage(playerid, 30.0, 0x0080ffff, "**{C2A2DA} %s has exited the Bus", GetRPName(playerid));
		TeleportToVehicle(playerid, PlayerInfo[playerid][pCurrentBus]);
		SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pCurrentBus] = INVALID_VEHICLE_ID;
		SavePlayerVariables(playerid);
		PlayerInfo[playerid][pWatchingWindow] = false;
	}
	if(IsTactical(playerid) && GetPVarInt(playerid,"roped") == 0 && GetPlayerVehicleSeat(playerid) != 0 && IsPlayerInAnyVehicle(playerid) && newkeys & KEY_YES)
	{
		GetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][2]);
		MapAndreas_FindZ_For2DCoord(pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][3]);		
		pl_pos[playerid][4] = floatsub(pl_pos[playerid][2],pl_pos[playerid][3]);
		if(pl_pos[playerid][4] >= Rp_ropelength) return SendClientMessage(playerid,0xAA3333AA,"You are too scared to slide from this height");
		if(pl_pos[playerid][4] <= 2) return RemovePlayerFromVehicle(playerid);
		SetPVarInt(playerid,"roped",1);
		SetPlayerCheckpoint(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][3],12),20);
		SetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][2],2));
		SetPlayerVelocity(playerid,0,0,0);
		for(new rep=0;rep!=10;rep++) ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
		for(new cre=0;cre<=pl_pos[playerid][4];cre++)
		{
		    ropes[playerid][cre] = CreateObject(3004,pl_pos[playerid][0],pl_pos[playerid][1],floatadd(pl_pos[playerid][3],cre),87.640026855469,342.13500976563, 350.07507324219);
		}
		SetTimerEx("syncanim",250,0,"i",playerid);
	}
	if(Player_Fire_Enabled[playerid])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				new vehicle_modelid = GetVehicleModel(vehicleid);
				if(FIRE_INFO[vehicle_modelid - 400][fire_VALID])
				{
					if(PRESSED(KEY_SPRINT))
					{
						Player_Key_Sprint_Time[playerid] = gettime();
					}
					else if(RELEASED(KEY_SPRINT))
					{
						if(gettime() - Player_Key_Sprint_Time[playerid] > 2)
						{	
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
							
							new effect_object = CreateObject(18695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), effect_object2 = -1;
							AttachObjectToVehicle
							(
								effect_object, vehicleid, 
								FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_X], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Y], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Z],
								FIRE_INFO[vehicle_modelid - 400][fire_ROT_X], FIRE_INFO[vehicle_modelid - 400][fire_ROT_Y], FIRE_INFO[vehicle_modelid - 400][fire_ROT_Z]
							);
							
							if(FIRE_INFO[vehicle_modelid - 400][fire_MIRROR])
							{
								effect_object2 = CreateObject(18695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
								AttachObjectToVehicle
								(
									effect_object2, vehicleid, 
									-FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_X], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Y], FIRE_INFO[vehicle_modelid - 400][fire_OFFSET_Z],
									FIRE_INFO[vehicle_modelid - 400][fire_ROT_X], -FIRE_INFO[vehicle_modelid - 400][fire_ROT_Y], -FIRE_INFO[vehicle_modelid - 400][fire_ROT_Z]
								);
							}
							
							SetTimerEx("DestroyEffectObject", 100, false, "ii", effect_object, effect_object2);
						}
					}
				}
			}
		}
	}
    if(takingselfie[playerid] == 1)
    {
        if(PRESSED(KEY_YES))
        {
            GetPlayerPos(playerid,slX[playerid],slY[playerid],slZ[playerid]);
            static Float: n1X, Float: n1Y;
            if(Degree[playerid] >= 360) Degree[playerid] = 0;
            Degree[playerid] += Speed;
            n1X = slX[playerid] + Radius * floatcos(Degree[playerid], degrees);
            n1Y = slY[playerid] + Radius * floatsin(Degree[playerid], degrees);
            SetPlayerCameraPos(playerid, n1X, n1Y, slZ[playerid] + Height);
            SetPlayerCameraLookAt(playerid, slX[playerid], slY[playerid], slZ[playerid]+1);
            SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
        }
        if(PRESSED(KEY_NO))
        {
            GetPlayerPos(playerid,slX[playerid],slY[playerid],slZ[playerid]);
            static Float: n1X, Float: n1Y;
            if(Degree[playerid] >= 360) Degree[playerid] = 0;
            Degree[playerid] -= Speed;
            n1X = slX[playerid] + Radius * floatcos(Degree[playerid], degrees);
            n1Y = slY[playerid] + Radius * floatsin(Degree[playerid], degrees);
            SetPlayerCameraPos(playerid, n1X, n1Y, slZ[playerid] + Height);
            SetPlayerCameraLookAt(playerid, slX[playerid], slY[playerid], slZ[playerid]+1);
            SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
        }
    }
	if((newkeys == KEY_YES) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		for(new i = 0; i < sizeof(pns_label); i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.5, pns_label[i][PosX], pns_label[i][PosY], pns_label[i][PosZ]))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
				{
					return SCM(playerid, COLOR_RED, "First turn off your engine.");
				}
				if(PlayerInfo[playerid][pCash] < GetVehicleRepairPrice(vehicleid)) return SM(playerid, COLOR_RED, "You do not have enough money to repair your vehicle. ($%i)", GetVehicleRepairPrice(vehicleid));
				SetVehiclePos(vehicleid, pns_label[i][Pos_X], pns_label[i][Pos_Y], pns_label[i][Pos_Z]);
				SetTimerEx("AfterSpray", 5000, false, "iii", playerid, i, GetVehicleRepairPrice(vehicleid));
				TogglePlayerControllable(playerid,0);
			}
		}
	}
	if((newkeys == KEY_CROUCH) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    new cashhy=500;
		if(PlayerInfo[playerid][pCash] < cashhy)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay for the toll");
		}
	 	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
		{
			if(Border11 == 1) { SCM(playerid, COLOR_GREY, "** Contact a developer"); return 1; }
	   		DestroyDynamicObject( Border1 );
	 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
	 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border11 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
		{
			if(Border00 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border0 );
	 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
	 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border00 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
	    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
		{
			if(Border99 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border9 );
	 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
	 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border99 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
		{
			if(Border88 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border8 );
	 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
	 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border88 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
	    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
		{
			if(Border77 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border7 );
	 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
	 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border77 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
		{
			if(Border66 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border6 );
	 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
	 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border66 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
		{
			if(Border55 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border5 );
	 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
	 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border55 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
		{
			if(Border33 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border3 );
	 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
	 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border33 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
		{
			if(Border22 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border2 );
	 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
	 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border22 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
		{
			if(Border44 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
	   		DestroyDynamicObject( Border4 );
	 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
	 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
			Border44 = 1;
			GivePlayerCash(playerid, -cashhy);
			if(TruckMafia[GetPlayerVehicleID(playerid)])
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i) && IsLawEnforcement(i))
					{
						SM(i, COLOR_ORANGE, "%s has just spotted at %s driving an Illegal Shipment Truck!", GetRPName(playerid), GetPlayerZoneName(playerid));
					}
				}
			}
		}
	}
    if(newkeys == KEY_NO)
	{
	    if(onmeat[playerid] == 1 && meatstartjob[playerid] == 0 && !IsPlayerInAnyVehicle(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 1, -20.4854, 1574.7264, 12.7500)
			|| IsPlayerInRangeOfPoint(playerid, 1, -16.1826, 1575.7219, 12.7500)
			|| IsPlayerInRangeOfPoint(playerid, 1, -9.6513, 1574.4042, 12.7500)
			|| IsPlayerInRangeOfPoint(playerid, 1, -3.8314, 1573.5138, 12.7500))
			{
			    Freeze(playerid);
			    
			    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
				GameTextForPlayer(playerid,"~w~Chopping..",10000,6);
				ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
			    meatstartjob[playerid] = 1;
				SetTimerEx("TimerGiveMeat", 10000, false, "i", playerid);
			    return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 1, 0.9510,1571.9641,19.6841)
			|| IsPlayerInRangeOfPoint(playerid, 1, -0.3898,1564.7903,19.6841)
			|| IsPlayerInRangeOfPoint(playerid, 1, -1.7840,1557.8475,19.6841)
			|| IsPlayerInRangeOfPoint(playerid, 1, -3.0651,1551.0083,19.6841))
			{
   			    Freeze(playerid);

			    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
		        GameTextForPlayer(playerid,"~w~Chopping..",20000,6);
		        ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
			    meatstartjob[playerid] = 1;
				SetTimerEx("TimerGiveMeatEx", 20000, false, "i", playerid);
			    return 1;
			}
		}
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			for(new i = 0; i < MAX_RENTS; i ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, RentInfo[i][rPosX], RentInfo[i][rPosY], RentInfo[i][rPosZ]))
				{
					if(!RentInfo[i][rSetup])
					{
						return SCM(playerid, COLOR_SYNTAX, "This vehicle rent station not fully setup yet. You can't use this right now. Tell a admin to setup it.");
					}
					if(rentveh[playerid])
					{
						return SM(playerid, COLOR_SYNTAX, "You already have a rented car. Cancel the rent or wait %d sec.", renttimer[playerid]);
					}
					new header[512];
					strdel( header, 0, sizeof( header ) );
					format(header, sizeof(header), "Name\t\tPrice");
					new count = 0;
					if(RentInfo[i][rType] == RENT_TYPE_BIKE)
					{
						for(new j = 0; j < 9; j ++)
						{
							format(header, sizeof(header), "%s\n%s\t\t%d\n", header, GetVehicleNameEx(RentInfo[i][v_model][j]), RentInfo[i][v_price][j]);
							listrent[playerid][count] = RentInfo[i][v_model][j];
							count++;
						}
						ShowPlayerDialog(playerid, DIALOG_RENTAL, DIALOG_STYLE_TABLIST_HEADERS, "Rent Vehicles", header, "SELECT", "CANCEL");
					}
					if(RentInfo[i][rType] == RENT_TYPE_CAR)
					{
						for(new j = 0; j < 10; j ++)
						{
							format(header, sizeof(header), "%s\n%s\t\t%d\n", header, GetVehicleNameEx(RentInfo[i][v_model][j]), RentInfo[i][v_price][j]);
							listrent[playerid][count] = RentInfo[i][v_model][j];
							count++;
						}
						ShowPlayerDialog(playerid, DIALOG_RENTAL, DIALOG_STYLE_TABLIST_HEADERS, "Rent Vehicles", header, "SELECT", "CANCEL");
					}
					if(RentInfo[i][rType] == RENT_TYPE_BOAT)
					{
						for(new j = 0; j < 7; j ++)
						{
							format(header, sizeof(header), "%s\n%s\t\t%d\n", header, GetVehicleNameEx(RentInfo[i][v_model][j]), RentInfo[i][v_price][j]);
							listrent[playerid][count] = RentInfo[i][v_model][j];
							count++;
						}
						ShowPlayerDialog(playerid,DIALOG_RENTAL, DIALOG_STYLE_TABLIST_HEADERS, "Rent Vehicles", header, "SELECT", "CANCEL");
					}
					return 1;
				}
			}
		}
	}

	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty])
	{
	    if(!PlayerInfo[playerid][pJoinedEvent] && GetPlayerWeapon(playerid) != 0)
		{
			if(PRESSED(KEY_FIRE))
			{
				ptsLastFiredWeapon[playerid] = gettime();
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 0.5)
				{
					pCBugging[playerid] = true;
					ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 1, 1, 1, 1, 0, 1);
					Freeze(playerid);
					
					SCM(playerid, COLOR_RED, "To avoid extra advantage, we've disabled C-Bug in public place and enabled only for Events and Paintball");
					KillTimer(ptmCBugFreezeOver[playerid]);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	    if(PlayerInfo[playerid][pJoinedEvent] && !EventInfo[eCS] && !PlayerInfo[playerid][pAdminDuty] && GetPlayerWeapon(playerid) != 0)
		{
			if(PRESSED(KEY_FIRE))
			{
				ptsLastFiredWeapon[playerid] = gettime();
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 0.5)
				{
					pCBugging[playerid] = true;
					Freeze(playerid);
					
					ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 1, 0, 0, 0, 1000);
				    SCM(playerid, COLOR_RED, "To avoid extra advantage, we've disabled C-Bug in public place and enabled only for Events and Paintball");
					KillTimer(ptmCBugFreezeOver[playerid]);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	}

	if(newkeys & KEY_SPRINT)
	{
	    if(PlayerInfo[playerid][pLoopAnim])
	    {
	        PlayerInfo[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
	}
 	if((gettime() - PlayerInfo[playerid][pLastPress]) >= 1)
	{
		if((newkeys & KEY_NO) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && IsLawEnforcement(playerid) && !PlayerInfo[playerid][pTazer] && onmeat[playerid] == 0 && !PollOn)
		{
			if(PlayerInfo[playerid][pHurt] == 0 && PlayerInfo[playerid][pDuty] && PlayerUseAnims(playerid) != 0)
			{
			  	callcmd::tazer(playerid, "\1");
				// callcmd::shout(playerid, "This is Law Enforcement Officer! Put your hands in the air now! (( /hu ))");
				PlayerInfo[playerid][pLastPress] = gettime();
			}
		}
		else if((newkeys & KEY_NO) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && IsLawEnforcement(playerid) && PlayerInfo[playerid][pTazer] && onmeat[playerid] == 0 && !PollOn)
		{
			if(PlayerInfo[playerid][pHurt] == 0 && PlayerInfo[playerid][pDuty] && PlayerUseAnims(playerid) != 0)
			{
			  	callcmd::tazer(playerid, "\1");
				PlayerInfo[playerid][pLastPress] = gettime();
			}
		}
		else if(newkeys & KEY_YES)
		{
			if(!EnterCheck(playerid)) ExitCheck(playerid);

			new id = Gate_Nearest(playerid);
			if (id != -1)
			{
				if(PlayerInfo[playerid][pHurt] - 05 > 0)
					return SM(playerid, COLOR_GREY, "You are too hurt to operate/enter anything. Please wait %i seconds before trying again.", (PlayerInfo[playerid][pHurt] - 05));

				if (strlen(GateData[id][gatePass]))
				{
					ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
				}
				else
				{
					if (GateData[id][gateFaction] != -1 && PlayerInfo[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
						return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

					Gate_Operate(id);
                    switch (GateData[id][gateOpened])
					{
	    				case 0:
						{
						    //Dyuze(playerid, "Notice", "You have closed the gate/door!");
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to close the gate/door.", GetRPName(playerid));
						}
		                case 1:
						{
						    //Dyuze(playerid, "Notice", "You have opened the gate/door!");
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to open the gate/door.", GetRPName(playerid));
						}
					}
				}
			}
			PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
		else if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
		  	callcmd::engine(playerid, "\1");
			PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
   	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
			PollY++;
			PollVoted[playerid] = 1;
			SCM(playerid, COLOR_SYNTAX, "You have voted Yes.");
		}
	    if(newkeys == KEY_NO)
	    {
			PollN++;
			PollVoted[playerid] = 1;
			SCM(playerid, SERVER_COLOR, "** "WHITE" You have voted No.");
	    }
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetVehicleModel(vehicleid) == 408)
	    {
		    if(LoadedTrash[vehicleid] > 0) {
		        new string[128];
		        format(string, sizeof(string), "TRASHMASTER JOB: {FFFFFF}This vehicle has {F39C12}%d {FFFFFF}trash bags which is worth {2ECC71}$%d.", LoadedTrash[vehicleid], LoadedTrash[vehicleid] * TRASH_BAG_VALUE);
				SendClientMessage(playerid, 0x2ECC71FF, string);
				SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}You can sell your trash bags to recycling factories marked by a truck icon.");

				for(new i; i < sizeof(FactoryData); i++)
				{
				    FactoryIcons[playerid][i] = CreateDynamicMapIcon(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 51, 0, _, _, playerid, 8000.0, MAPICON_GLOBAL);
					TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 1);
				}
		    }else{
		        SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}You can collect trash and sell them at recycling factories.");
		        SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}Find trash cans/dumpsters and use /pickup.");
		    }

			Trash_ShowCapacity(playerid);
		}
		
		SetPVarInt(playerid, "LastVehicleID", vehicleid);
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
		        FactoryIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		}
		
		PlayerTextDrawHide(playerid, CapacityText[playerid]);
		HidePlayerProgressBar(playerid, CapacityBar[playerid]);
	}
	
	Trash_ResetPlayer(playerid);

    if(PlayerInfo[playerid][pKicked]) return 0;
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		if(PlayerInfo[playerid][pCurrentBus] == INVALID_VEHICLE_ID && (GetVehicleModel(vehicleid) == 431 || GetVehicleModel(vehicleid) == 437))
		{
			SavePlayerVariables(playerid);
			PlayerInfo[playerid][pCurrentBus] = vehicleid;
			SendProximityMessage(playerid, 30.0, 0x0080ffff, "**{C2A2DA} %s has entered the Bus as a passenger.", GetRPName(playerid));
			TeleportToCoords(playerid, 2022.0273, 2235.2402, 2103.9536, 0.0, 1, vehicleid, true, false);
			SetCameraBehindPlayer(playerid);
            SetPlayerTime(playerid, 00,00);
			new Float:bX, Float:bY, Float:bZ;
			GetPlayerPos(playerid, bX, bY, bZ);
			PlayerPlaySound(playerid, 1147, bX, bY, bZ);
		}
	}

	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) {
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach (new i : Player) {
			if (spectateID[i] == playerid) {
    			PlayerSpectateVehicle(i, vehicleid, SPECTATE_MODE_NORMAL);

				ShowVehicleInfo(i, vehicleid);
    			spectateType[i] = SPECTATE_TYPE_VEHICLE;
			}
		}
	}
	else if (newstate == PLAYER_STATE_ONFOOT) {
	    foreach (new i : Player) {
			if (spectateID[i] == playerid) {
    			PlayerSpectatePlayer(i, playerid, SPECTATE_MODE_NORMAL);

				HideVehicleInfo(i);
    			spectateType[i] = SPECTATE_TYPE_PLAYER;
			}
		}
	}
	else if (newstate == PLAYER_STATE_SPECTATING) {
        new prev = GetPreviousPlayer(playerid);

        if (prev == INVALID_PLAYER_ID) {
		    foreach (new i : Player) {
				if (spectateID[i] == playerid) {
					StopSpectate(i);
				}
			}
		}
		else {
		    foreach (new i : Player) {
				if (spectateID[i] == playerid) {
					StartSpectate(i, prev);
				}
			}
		}

    	Iter_Remove(SpectatePlayers, playerid);
	}

	if((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && (inharvesterjob[playerid] || inlumberjob[playerid] || meatjob[playerid]))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't enter a vehicle while in side job.");
	    RemovePlayerFromVehicle(playerid);
	    return 1;
	}
	if(startplant[playerid] == 1)
	{
		ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	}

	if(PlayerInfo[playerid][pDraggedBy] == INVALID_PLAYER_ID && PlayerInfo[playerid][pInjured] && newstate != PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
		if(GetPlayerAnimationIndex(playerid))
		{
			new animlib[32];
			new animname[32];
			GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
			if((strcmp(animlib, "SWEET", true) != 0) && (strcmp(animname, "Sweet_injuredloop", true) != 0))
			{
	    		RemovePlayerFromVehicle(playerid);
	    		ClearAnimations(playerid);
		   		ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0, 1);
			}
		}
		return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsASportsCar(vehicleid) && newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < 25; i++) {
			PlayerTextDrawShow(playerid, SpeedoTD[playerid][i]);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
        for(new i = 0; i < 25; i++) {
			PlayerTextDrawHide(playerid, SpeedoTD[playerid][i]);
		}
	}
	
	if(IsAEdmCar(vehicleid) && newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < 5; i++) {
			PlayerTextDrawShow(playerid, SpeedoMeter_2[playerid][i]);
		}
		for(new i = 0; i < 25; i++) {
			TextDrawShowForPlayer(playerid, SpeedoMeter_2G[i]);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
       	for(new i = 0; i < 5; i++) {
			PlayerTextDrawHide(playerid, SpeedoMeter_2[playerid][i]);
		}
		for(new i = 0; i < 25; i++) {
			TextDrawHideForPlayer(playerid, SpeedoMeter_2G[i]);
		}
	}

	if(IsAFourSeater(vehicleid) && newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < 16; i++) {
			PlayerTextDrawShow(playerid, SpeedoMeter_3[playerid][i]);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
        for(new i = 0; i < 16; i++) {
			PlayerTextDrawHide(playerid, SpeedoMeter_3[playerid][i]);
		}
	}
   	if((!IsAUniqueCar(vehicleid) && !IsAFourSeater(vehicleid) && !IsAEdmCar(vehicleid) && !IsASportsCar(vehicleid)) && newstate == PLAYER_STATE_DRIVER)
	{
     	new vstr[30];
		format(vstr, sizeof(vstr), "%s", GetVehicleName(vehicleid));
		PlayerTextDrawSetString(playerid, cWspeedo[playerid][3], vstr);
	    PlayerTextDrawSetPreviewModel(playerid, cWspeedo[playerid][1], GetVehicleModel(vehicleid));
		PlayerTextDrawShow(playerid, cWspeedo[playerid][1]);
		for(new i = 0; i < 9; i++) {
			PlayerTextDrawShow(playerid, cWspeedo[playerid][i]);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
        for(new i = 0; i < 9; i++) {
			PlayerTextDrawHide(playerid, cWspeedo[playerid][i]);
		}
	}

	

	if(IsAUniqueCar(vehicleid) && newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < 5; i++) {
			PlayerTextDrawShow(playerid, SpeedoMeter_1[playerid][i]);
		}
		for(new i = 0; i < 22; i++) {
			TextDrawShowForPlayer(playerid, SpeedMeter_1G[i]);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
       	for(new i = 0; i < 5; i++) {
			PlayerTextDrawHide(playerid, SpeedoMeter_1[playerid][i]);
		}
		for(new i = 0; i < 22; i++) {
			TextDrawHideForPlayer(playerid, SpeedMeter_1G[i]);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER) {
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	} else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((MafiaVeh[0] <= vehicleid <= MafiaVeh[9]) && !PlayerInfo[playerid][pMafia])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mafia.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }

	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if(VehicleInfo[vehicleid][vMafia] == 1 && !IsMafia(playerid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your Organisation.");
		    RemovePlayerFromVehicle(playerid);
	        return 1;
		}

		

	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
			vehicleEng[vehicleid] = true;
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[8])
		    {
		        PlayerInfo[playerid][pCP] = CHECKPOINT_TEST;
		        PlayerInfo[playerid][pTestVehicle] = vehicleid;
		        PlayerInfo[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
				vehicleEng[vehicleid] = true;
				SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				SCM(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
		    }
		    else
		    {
                //SCM(playerid, COLOR_YELLOW, "You can toggle the vehicle engine by pressing 'N' or typing /engine.");
			}
	    }
		
	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SM(playerid, COLOR_AQUA, "This vehicle has $%i in unpaid tickets. You can pay your tickets using /paytickets.", VehicleInfo[vehicleid][vTickets]);
	    }
		SetPlayerArmedWeapon(playerid, 0);
	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~b~Out of fuel", 5000, 3);
	    }
		if(VehicleHasEngine(vehicleid) && !GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			SCM(playerid, COLOR_WHITE, "Vehicle engine is currently "RED"turned off"WHITE", You can turn it on by using /engine or press 'N'.");
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(PlayerInfo[playerid][pDrivingTest])
	    {
         	PlayerInfo[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);
         	SCM(playerid, COLOR_LIGHTRED, "** You have exited the vehicle and therefore failed the test.");
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && PlayerInfo[driverid][pTaxiFare] > 0 && PlayerInfo[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(PlayerInfo[playerid][pCash] < PlayerInfo[driverid][pTaxiFare])
		    {
		        SCM(playerid, COLOR_SYNTAX, "You can't afford to pay the fare. Therefore you can't ride this taxi.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			PlayerInfo[driverid][pTaxiPassenger] = playerid;
			PlayerInfo[driverid][pTaxiBill] = PlayerInfo[driverid][pTaxiFare];
			PlayerInfo[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s enters %s's taxi cab.", GetRPName(playerid), GetRPName(driverid));
			SM(playerid, COLOR_YELLOW, "You will be charged the fare price of "CXRP"$%i{CCFFFF} every 15 seconds during your ride.", PlayerInfo[driverid][pTaxiFare]);
			SM(driverid, COLOR_AQUA, "*%s has entered your taxi. You will earn $%i every 15 seconds during the ride.", GetRPName(playerid), PlayerInfo[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 28, 29, 32:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{

		if(!isnull(vehicleStream[vehicleid]) && PlayerInfo[playerid][pStreamType] == MUSIC_NONE && !PlayerInfo[playerid][pToggleMusic])
  		{
  		    PlayerInfo[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SCM(playerid, COLOR_WHITE, "** You are now tuned in to this vehicle's radio. /stopmusic to stop listening.");
	    }
	}

	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{

		if(PlayerInfo[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	if(response == EDIT_RESPONSE_FINAL)
	{
		if(PlayerInfo[playerid][pEditType] == EDIT_CLOTHING)
		{
		    new clothingid = PlayerInfo[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

				PlayerInfo[playerid][pEditType] = -1;
		        SM(playerid, COLOR_SYNTAX, "Changes saved.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
			PlayerInfo[playerid][pEditType] = -1;
		}
	}
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerInfo[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerInfo[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerInfo[playerid][pEditGraffiti]);
		}
		else if (PlayerInfo[playerid][pEditGate] != -1 && GateData[PlayerInfo[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerInfo[playerid][pEditType])
	        {
	            case EDIT_GATE_POS:
	            {
	                new id = PlayerInfo[playerid][pEditGate];

	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the position of gate ID: %d.", id);
				}
				case EDIT_GATE_MOVE:
	            {
	                new id = PlayerInfo[playerid][pEditGate];

	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the moving position of gate ID: %d.", id);
				}
			}
		}
	}
	switch(PlayerInfo[playerid][pEditType])
	{
		case EDIT_OBJECT_PREVIEW:
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				if (PlayerInfo[playerid][pEditmObject] != -1 && ObjectData[PlayerInfo[playerid][pEditmObject]][mobjExists])
				{
					new id = PlayerInfo[playerid][pEditmObject];
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][0] = x;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][1] = y;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][2] = z;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][3] = rx;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][4] = ry;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][5] = rz;

					DestroyDynamicObject(ObjectData[id][mobjObject]);
					ObjectData[id][mobjObject] = CreateDynamicObject(ObjectData[id][mobjModel], ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], ObjectData[id][mobjPos][3], ObjectData[id][mobjPos][4], ObjectData[id][mobjPos][5], ObjectData[id][mobjWorld], ObjectData[id][mobjInterior]);

					Object_Save(id);
					SM(playerid, COLOR_WHITE, "You have edited the position of object ID: %d.", id);
					if(ObjectData[id][mobjExists] && (ObjectData[id][mobjModel] == 19324 || ObjectData[id][mobjModel] == 2942))
					{
						CreateDynamic3DTextLabel("ATM Machine\n"CXRP"(( Type '/atmhelp' to withdraw cash. ))", COLOR_GREY, ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2] + 0.4, 10.0, .worldid=ObjectData[id][mobjWorld], .interiorid=ObjectData[id][mobjInterior]);
					}
				}
			}
		}
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
				PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(PlayerInfo[playerid][pCash] < furnitureArray[PlayerInfo[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, \"%e\", %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[PlayerInfo[playerid][pSelected]][fModel], furnitureArray[PlayerInfo[playerid][pSelected]][fName], furnitureArray[PlayerInfo[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[PlayerInfo[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_SYNTAX, "Changes saved.");
				}

		        ReloadFurniture(objectid, HouseInfo[PlayerInfo[playerid][pFurnitureHouse]][hLabels]);
			}
		}
	}
	return 1;
}

forward LastAlertPayCheck(playerid);
public LastAlertPayCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	//GameTextForPlayer(playerid, "~w~Type /signcheck", 2500, 1);
		Dyuze(playerid, "Payday", "Type /signcheck to get your paycheck.");
    	SCM(playerid, COLOR_WHITE, "You have one minute left before your paycheck code expires. Please type /signcheck to get your paycheck.");
        SetTimerEx("DestroyCheck", 63000, false, "i", playerid);
	}
}

forward DestroyCheck(playerid);
public DestroyCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	PayCheckCode[playerid] = 0;
    	SCM(playerid, COLOR_WHITE, "Your paycheck code expired. Please remember to use /signcheck next time.");
	}
}

CMD:taxhelp(playerid, params[])
{
	SM(playerid, COLOR_SYNTAX, "The tax is currently set to {CCFFFF}%i percent", Settings[gTax]);
	return 1;
}

CMD:poll(playerid, params[])
{
	new string[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
		return NotAuth(playerid);
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(sscanf(params, "s[128]", params))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /poll [question]");

	if(strlen(params) > 128)
		return SCM(playerid, COLOR_SYNTAX, "Maximum characters limit is 128.");

	if(PollOn)
		return SCM(playerid, COLOR_SYNTAX, "There is already an poll started.");

	format(string, sizeof(string), "** Question:"WHITE" %s {FF6347}**", params);
	SCMA(COLOR_LIGHTRED, string);

	SCMA(COLOR_LIGHTRED, "** Press "WHITE"Y{FF6347} to vote "WHITE"Yes{FF6347}, Press "WHITE"N{FF6347} to vote "WHITE"No{FF6347}. **");
	SCMA(COLOR_LIGHTRED, "** Poll ending in "WHITE"30{FF6347} Seconds. **");

	PollOn = 1;
	PollN = 0;
	foreach(new i: Player)
	{
		PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}

CMD:bf(playerid, params[]) return callcmd::blindfold(playerid, params);

CMD:blindfold(playerid,params[])
{
    new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /blindfold [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pBlindfold] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any blindfolds left.");
	}
	if(!IsPlayerConnected(targetid) && !IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Invalid player specified.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(!PlayerInfo[targetid][pTied] && !PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player must be either cuffed or tied.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold yourself.");
	}
	if(pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already blindfolded. /unblindfold to free them.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold a helper who is assisting someone.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold an on duty administrator.");
	}

    HideGPSTextdraw(targetid);
	PlayerInfo[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Blindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s blindfold %s with a bandana.", GetRPName(playerid), GetRPName(targetid));
	TextDrawShowForPlayer(targetid, Blind);
	pBlind[targetid] = 1;
    return 1;
}

CMD:unbf(playerid, params[]) return callcmd::unblindfold(playerid, params);

CMD:unblindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unblindfold [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}

	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerUseAnimsEx(playerid) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't unblindfold yourself now.");
	}
	if(!pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not blindfold.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to unblindfold them.");
	}

	GameTextForPlayer(targetid, "~g~Unblindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unblindfoild the bandana from %s.", GetRPName(playerid), GetRPName(targetid));
    ShowGPSTextdraw(targetid);
    TextDrawHideForPlayer(targetid, Blind);
	pBlind[targetid] = 0;
	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tie [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(PlayerInfo[playerid][pRope] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any ropes left.");
	}
	if(!IsPlayerConnected(targetid) && !IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Invalid player specified.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(GetPlayerSpecialAction(targetid) != SPECIAL_ACTION_DUCK && GetPlayerAnimationIndex(targetid) != 1437)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player either must be couched, hands up.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie yourself.");
	}
	if(PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already tied. /untie to free them.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie a helper who is assisting someone.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie an on duty administrator.");
	}

	PlayerInfo[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	Freeze(targetid);
	
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ties %s with a rope.", GetRPName(playerid), GetRPName(targetid));

	Freeze(targetid);
	
	PlayerInfo[targetid][pTied] = 1;
	if(Maskara[targetid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "That player is wearing a mask. Use /unmask to remove their mask.");
	}
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /untie [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't untie yourself.");
	}
	if(!PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to untie them.");
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unties the rope from %s.", GetRPName(playerid), GetRPName(targetid));

 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	Unfreeze(targetid);
    
	PlayerInfo[targetid][pTied] = 0;
	return 1;
}

CMD:signcheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SCM(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

	if(PlayerInfo[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "You can't use /signcheck while on admin duty");

	if(PlayerInfo[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}

 	new string[128];
	format(string, sizeof(string), "Check code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
	ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /b [local OOC]");
	}
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "(( Stranger #%i: %s ))", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}



CMD:robatm(playerid, params[])
{
	if(PlayerInfo[playerid][pRobbingAtm] != INVALID_OBJECT_ID)
	{
		return SCM(playerid, COLOR_GREY, "You're already robbing an ATM!");
	}
	new id = Atm_Nearest(playerid);
	if(id == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You're not near any ATM Machines");
	}
	if(ObjectData[id][mobjRob] == 1)
	{
		return SCM(playerid, COLOR_GREY, "This ATM is already being robbed, you can't rob it again!");
	}
	if(ObjectData[id][mobjRob] == 2)
	{
		return SCM(playerid, COLOR_GREY, "This ATM was just robbed few minutes ago, it's now on cooldown");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You need to be level 2 in order to rob the ATM Machine.");
	}
	if(PlayerInfo[playerid][pMaterials] < 80)
	{
		return SCM(playerid, COLOR_GREY, "You need at least 80 materials to craft a C4 to blowup the ATM Machine!");
	}
	if(PlayerInfo[playerid][pToolkit] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 1 toolkit to start the robbery!");
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business while on-duty.");
	}
	new count=0;
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the ATM Machine.");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]);
    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.5, 0, 0, 0, 0, 15000);

	PlayerInfo[playerid][pBombObject] = CreateDynamicObject(19602, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crafts a C4 using some materials and starts planting it.", GetRPName(playerid));
	GameTextForPlayer(playerid,"~y~C4 Bomb Planted. MOVE FAR!~n~~r~Explodes in 30 seconds", 1000, 3);
	PlayerInfo[playerid][pBombTimer] = 30;
	ObjectData[id][mobjRob] = 1;
	PlayerInfo[playerid][pRobbingAtm] = id;

	PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] - 80;
	PlayerInfo[playerid][pToolkit]--;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toolkit = %i, materials = materials - 80 WHERE uid = %i", PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i) || IsNews(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: An ATM Machine robbery is occurring at %s. All units respond immediately.", GetZoneName(x, y, z));
			SetPlayerCheckpoint(i, x, y, z, 3.0);
		}
	}
	SetTimerEx("AtmRobTimer", 30000, false, "i", playerid);
	return 1;
}

forward AtmRobTimer(playerid);
public AtmRobTimer(playerid)
{
	PlayerInfo[playerid][pBombTimer] = 0;
	CreateExplosion(PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ], 11, 15.0);
    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;

	SCM(playerid, COLOR_WHITE, "Your planted bomb blew up and broke the ATM Machine!");

	new id = PlayerInfo[playerid][pRobbingAtm];

	new Float:atm_x = ObjectData[id][mobjPos][0];
	new Float:atm_y = ObjectData[id][mobjPos][1];
	new Float:atm_z = ObjectData[id][mobjPos][2];

	PlayerInfo[playerid][pRobbingCP] = CreateDynamicCP(atm_x, atm_y, atm_z, 4.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);

	SCM(playerid, COLOR_WHITE, "Head to the checkpoint to start collecting your CASH!");
	SetTimerEx("AtmCooldown", 1200000, false, "i", PlayerInfo[playerid][pRobbingAtm]);
	return 1;
}

CMD:robbiz(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), count;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a business that you can rob.");
	}
	if(IsBusinessOwner(playerid, businessid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob your business.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You need to be level 2 in order to rob the business.");
	}
	if(gCanRob > 0)
	{
	    new string[256];
		if(gCanRob < 60)
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i seconds to rob again.", gCanRob);
		else
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i minutes to rob again.", floatround(gCanRob/60));
		return SCM(playerid, COLOR_GREY2, string);
	}
	if(PlayerInfo[playerid][pMaterials] < 50)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 50 materials to start the robbery!");
	}
	if(PlayerInfo[playerid][pToolkit] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 1 toolkit to start the robbery!");
	}
	if(PlayerInfo[playerid][pRobbingBiz] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a business.");
	}
	if(BusinessInfo[businessid][bRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business. Robbery has already started.");
	}
	if(BusinessInfo[businessid][bRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This business can be robbed again in %i hours. You can't rob it now.", BusinessInfo[businessid][bRobbed]);
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business while on-duty.");
	}

	if(BusinessInfo[businessid][bCash] < 50)
	{
	    return SCM(playerid, COLOR_GREY2, "This business has less than 50$ inside its vault, you can't rob this business.");
	}
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the business.");
	}

	BusinessInfo[businessid][bRobbing] = 1;
	Freeze(playerid);
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
	GameTextForPlayer(playerid,"~w~Crafting thelemite..",8000,4);
	SetTimerEx("RobTimerEx", 8000, false, "ii", playerid, businessid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts crafting a Thelemite.", GetRPName(playerid));
	return 1;
}

forward RobTimerEx(playerid, businessid);
public RobTimerEx(playerid, businessid)
{
	Unfreeze(playerid);
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i) || IsNews(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at %s. All units respond immediately.", GetZoneName(BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ]));
			SetPlayerCheckpoint(i, BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ], 3.0);
		}
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	PlayerInfo[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Looting house vault...", 5000, 3);
    SetPlayerAttachedObject(playerid, 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crafts a thelemite using materials to break the vault.", GetRPName(playerid));

	PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] - 50; 
	PlayerInfo[playerid][pToolkit]--;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toolkit = %i, materials = materials - 50 WHERE uid = %i", PlayerInfo[playerid][pToolkit], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);	

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s points his gun at the clerk and attempts to rob the business shop.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes.");
	PlayerInfo[playerid][pRobbingBiz] = businessid;
	gCanRob = 20*60;
	SetTimerEx("FinishRob", 300000, false, "i", playerid);
	#if defined DISCORD
		DCC_SendText(11, playerid, "", "1118615728229199893", businessid, -1);
	#endif
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(success)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE ip = \"%s\" ORDER BY adminlevel DESC", ip);
		mysql_tquery(connectionID, queryBuffer, "RconIPTrace", "ss", ip, password);
	}
	else
	{
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] == 7)
			{
				SM(i, COLOR_RED, "Someone from IP "ORANGE"%s{AA3333} tried to login RCON using password "ORANGE"%s", ip, password);
			}
		}
	}
	return 1;
}

forward RconIPTrace(ip[], password[]);
public RconIPTrace(ip[], password[])
{
	new string[256];
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		format(string, sizeof(string), "Someone from %s%s{AA3333} successfully logged in RCON using password %s%s", ORANGE, ip, ORANGE, password);
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] == 7)
			{
				SCM(i, COLOR_RED, string);
			}
		}
	}
	else
	{
		new uid;
		cache_get_row_count(rows);
		for(new i = 0; i < rows; i ++)
		{
		    cache_get_value_name_int(i, "uid", uid);
			foreach(new id : Player)
			{
				if(IsPlayerConnected(id) && PlayerInfo[id][pID] == uid)
				{
					if(PlayerInfo[id][pAdmin] < 6)
					{
						KickPlayer(id);
					}
				}
			}
		}
	}
	return 1;
}

CMD:robhouse(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), count;
	if(houseid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a house that you can rob.");
	}
	if(IsHouseOwner(playerid, houseid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob the your house.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You need to be level 2+ in order to rob a house.");
	}
	if(gCanRob > 0)
	{
	    new string[256];
		if(gCanRob < 60)
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i seconds to rob again.", gCanRob);
		else
	    	format(string, sizeof(string), "Robbery cooldown is active. You have to wait %i minutes to rob again.", floatround(gCanRob/60));
		return SCM(playerid, COLOR_GREY2, string);
	}
	if(PlayerInfo[playerid][pRobbingHouse] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a house.");
	}
	if(HouseInfo[houseid][hRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house. Robbery has already started.");
	}
	if(HouseInfo[houseid][hRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This house can be robbed again in %i hours. You can't rob it now.", HouseInfo[houseid][hRobbed]);
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house while on-duty.");
	}

	if(HouseInfo[houseid][hCash] < 50)
	{
    	return SCM(playerid, COLOR_GREY2, "This house has less than 50$ Cash inside its locker, you can't rob this house.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the house.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i) || IsNews(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at %s. All units respond immediately.", GetZoneName(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]));
			SetPlayerCheckpoint(i, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ], 3.0);
		}
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	PlayerInfo[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Looting house vault...", 5000, 3);
    SetPlayerAttachedObject(playerid, 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s attempts to rob the house.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes.");
	PlayerInfo[playerid][pRobbingHouse] = houseid;
	HouseInfo[houseid][hRobbing] = 1;
	gCanRob = 20*60;
	SetTimerEx("FinishRob", 300000, false, "i", playerid);
	#if defined DISCORD
		DCC_SendText(12, playerid, "", "1118615834764509294", houseid, -1);
	#endif
	return 1;
}

forward NotifRob();
public NotifRob()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && IsPlayerInBankRobbery(i))
		{
			SCM(i, COLOR_RED, "Bank vault will be closed after 30seconds!");
		}
	}
	return 1;
}

forward FinishRobAtm(playerid, real);
public FinishRobAtm(playerid, real)
{
	SetPVarInt(playerid, "RobbingATM", 0);
	if(real == 1)
	{
		SCM(playerid, COLOR_WHITE, "You've successfully finished robbing this ATM Machine!");
	}

	SavePlayerVariables(playerid);

	SM(playerid, COLOR_AQUA, "You have earned $%s dirty cash for successfully completing the ATM Machine robbery.", AddCommas(PlayerInfo[playerid][pRobCash]));
	PlayerInfo[playerid][pRobCash] = 0;
	KillTimer(PlayerInfo[playerid][pRobbingTimer]);
	ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjRob] = 2;
	new id = PlayerInfo[playerid][pRobbingAtm];
	PlayerInfo[playerid][pRobbingAtm] = INVALID_OBJECT_ID;
	RemovePlayerAttachedObject(playerid, 8);
	if(IsValidDynamicCP(PlayerInfo[playerid][pRobbingCP]))
	{
		DestroyDynamicCP(PlayerInfo[playerid][pRobbingCP]);
	}
	DeletePVar(playerid, "RobbingATM");
	DisablePlayerCheckpoint(playerid);
	SetTimerEx("AtmCooldown", 300000, false, "i", id);
	return 1;
}

forward AtmCooldown(id);
public AtmCooldown(id)
{
	ObjectData[id][mobjRob] = 0;
	return 1;
}

forward FinishRob(playerid);
public FinishRob(playerid)
{
	if(PlayerInfo[playerid][pRobbingHouse] != -1)
	{
		new houseid = PlayerInfo[playerid][pRobbingHouse];

		if(PlayerInfo[playerid][pGang] >= 0)
		{
			GiveGangPoints(PlayerInfo[playerid][pGang], 50);
		}

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		HouseInfo[houseid][hCash] -= PlayerInfo[playerid][pRobCash];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SCM(playerid, COLOR_WHITE, "5 minutes has passed, therefore you can no longer rob this house.");
		SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the house robbery.", PlayerInfo[playerid][pRobCash]);

		HouseInfo[houseid][hRobbed] = 3;
		HouseInfo[houseid][hRobbing] = 0;
		ReloadHouse(houseid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRobCash] = 0;
		PlayerInfo[playerid][pRobbingHouse] = -1;
		PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		RemovePlayerAttachedObject(playerid, 8);
		DisablePlayerCheckpoint(playerid);
		SavePlayerVariables(playerid);
	}
	if(PlayerInfo[playerid][pRobbingBiz] != -1)
	{
		new businessid = PlayerInfo[playerid][pRobbingBiz];

		if(PlayerInfo[playerid][pGang] >= 0)
		{
			GiveGangPoints(PlayerInfo[playerid][pGang], 50);
		}

		BusinessInfo[businessid][bCash] -= PlayerInfo[playerid][pRobCash];
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SCM(playerid, COLOR_WHITE, "5 minutes has passed, therefore you can no longer rob this business.");
		SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the business robbery.", PlayerInfo[playerid][pRobCash]);

		BusinessInfo[businessid][bRobbed] = 3;
		BusinessInfo[businessid][bRobbing] = 0;
		ReloadBusiness(businessid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRobCash] = 0;
		PlayerInfo[playerid][pRobbingBiz] = -1;
		PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		RemovePlayerAttachedObject(playerid, 8);
		DisablePlayerCheckpoint(playerid);
		SavePlayerVariables(playerid);
	}
	if(IsPlayerInBankRobbery(playerid))
	{
		foreach(new i : Player)
		{
			if(IsPlayerInBankRobbery(i))
	        {
				if(PlayerInfo[i][pGang] >= 0)
				{
					GiveGangPoints(PlayerInfo[i][pGang], 200);
				}
				RobberyInfo[rStolen] += PlayerInfo[i][pRobCash];
				Settings[gVault] -= PlayerInfo[i][pRobCash];
				SaveServerInfo();
        		ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
				SCM(playerid, COLOR_WHITE, "15 minutes has passed, therefore you can no longer rob this business.");

				SM(i, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the bank robbery.", PlayerInfo[i][pRobCash]);
				SCM(i, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBankRobbery(i);
				PlayerInfo[i][pRobCash] = 0;
				PlayerInfo[i][pCP] = CHECKPOINT_NONE;
				RemovePlayerAttachedObject(playerid, 8);
				RemovePlayerAttachedObject(playerid, 9);
				DisablePlayerCheckpoint(i);
			}
		}
	}
	return 1;
}

CMD:s(playerid, params[]) return callcmd::shout(playerid, params);
CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(s)hout [text]");
	}
	if(Maskara[playerid] == 1) {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s!", MaskaraID[playerid], params);
		format(string, sizeof(string), "Stranger #%i shouts: %s!", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s!",params);
		format(string, sizeof(string), "%s shouts: %s!", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}

CMD:vcode(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vcode [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Car text removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, -1.5, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Car text attached. '/vcode none' to detach the Car text.");
	}
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /me [action]");
	}

	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger #%i %.*s...", MaskaraID[playerid], MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger #%i %s", MaskaraID[playerid], params);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %s", GetRPName(playerid), params);
		}
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /do [describe]");
	}
	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( Stranger #%i ))", params[MAX_SPLIT_LENGTH], MaskaraID[playerid]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( Stranger #%i ))", params, MaskaraID[playerid]);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( %s ))", params, GetRPName(playerid));
		}
	}
	return 1;
}

CMD:stomach(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /stomach [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified!");
	}
	SM(playerid, COLOR_AQUA, "%s (%i)'s Hunger: %i & Thirst: %i", GetRPName(targetid), targetid, PlayerInfo[targetid][pHunger], PlayerInfo[targetid][pThirst]);
	return 1;
}

CMD:joininfo(playerid, params[])
{
	new targetid, string[256];
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /joininfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified!");
	}
	new connect[128];
	if(PlayerInfo[targetid][pConnectTime] <= 60)
		format(connect, sizeof(connect), "%i seconds", PlayerInfo[targetid][pConnectTime]);
	else if(PlayerInfo[targetid][pConnectTime] <= 3600)
		format(connect, sizeof(connect), "%i minutes", floatround(PlayerInfo[targetid][pConnectTime]/60));
	else
		format(connect, sizeof(connect), "%i hours", floatround(PlayerInfo[targetid][pConnectTime]/3600));

	format(string, sizeof(string), "Registration Date & Time: %s%s%s - Level: %s%i%s\nConnected Time: %s%s%s - IP: %s%s%s", CXRP, PlayerInfo[targetid][pRegDate], WHITE, CXRP, PlayerInfo[targetid][pLevel], WHITE, CXRP, connect, WHITE, CXRP, GetPlayerIP(targetid), WHITE);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Join Info", string, "Okay", "");
	return 1;
}

CMD:hprofile(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hprofile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified!");
	}
	new allshots,hitshots,max_cont_shots,out_of_range_warns,random_aim_warns,proaim_tele_warns;
    BustAim::GetPlayerProfile(targetid,allshots,hitshots,max_cont_shots,out_of_range_warns,random_aim_warns,proaim_tele_warns);
	new string[255];
	format(string, sizeof(string), "%s's Aim Profile\n\nShots Fired: %d - Hits: %d\nAccuracy: %.2f% - Continous Shots: %d\nWarnings Triggered:\nAimbot: %d - Out Of Range Shots: %d - Proaim: %d", GetRPName(targetid), allshots, hitshots,((hitshots*100.0)/allshots), max_cont_shots, random_aim_warns, out_of_range_warns, proaim_tele_warns);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "HID Aimbot Profile", string, "Okay", "");
	return 1;
}


CMD:check(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /check [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	DisplayStats(targetid, playerid);
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}


CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(l)ow [text]");
	}
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "Stranger #%i quitely: %s",MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "%s quitely: %s", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	SetPlayerBubbleText(playerid, 5.0, COLOR_GREY1, "(Quietly) %s", params);
	return 1;
}

CMD:w(playerid, params[]) return callcmd::whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(w)hisper [playerid] [text]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming whispers.");
	}
	if(PlayerInfo[playerid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Whisper chat is currently disabled. /tog whisper to re-enable.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!PlayerInfo[playerid][pAdminDuty]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't whisper to yourself.");
	}

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "[L] %s whisper to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(targetid), text);

	SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Whispering)");

	if(PlayerInfo[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/rw [message]' to reply to this whisper.");
	}

	PlayerInfo[targetid][pWhisperFrom] = playerid;
	return 1;
}

CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rw [text]");
	}
	if(PlayerInfo[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, PlayerInfo[playerid][pWhisperFrom], 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	PlayerInfo[PlayerInfo[playerid][pWhisperFrom]][pWhisperFrom] = playerid;
	SM(PlayerInfo[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(PlayerInfo[playerid][pWhisperFrom]), params);

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
			SM(i, COLOR_YELLOW, "(L) %s whispers to %s: %s", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pWhisperFrom]), params);
        }
	}
	return 1;
}

CMD:carjack(playerid, params[]) return callcmd::jackcar(playerid, params);

CMD:jackcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(PlayerInfo[playerid][pCarJackCooldown] > 0)
	{
		return SM(playerid, COLOR_GREY, "You're on Car Jacker cooldown, please wait %i seconds!", PlayerInfo[playerid][pCarJackCooldown]);
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_GREY, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_GREY, "There is no fuel left in this vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
		return SCM(playerid, COLOR_GREY, "You can only jack player owned vehicles!");
	}
	SetPVarInt(playerid, "CarJack", vehicleid);
	PlayerInfo[playerid][pCP] = CHECKPOINT_CARJACK;
	SetPlayerCheckpoint(playerid, -1548.7299, 123.3618, 3.5547, 8.0);
	SM(playerid, COLOR_AQUA, "Car jacking started! Drop this vehicle under the crane at %s to collect money!", GetZoneName(-1548.7299, 123.3618, 3.5547));	
	return 1;
}

CMD:hotwire(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(PlayerInfo[playerid][pToolkit] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must need have at least 1 toolkit to hotwire this vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(PlayerInfo[playerid][pEngine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are already attempting to hotwire this vehicle.");
		}
	    GetVehicleHealth(vehicleid, health);

	    PlayerInfo[playerid][pEngine] = 1;
	    Freeze(playerid);
		SetTimerEx("SetVehicleEngineHotwire", 5010, 0, "dd",  vehicleid, playerid);
  		SCM(playerid,COLOR_WHITE,"You are currently hotwiring this vehicle.");
  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts hotwiring the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle's engine is already on.");
	}
	return 1;
}

forward EngineChange(playerid, vehicleid);
public EngineChange(playerid, vehicleid)
{
	new Float:health;
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		GetVehicleHealth(vehicleid, health);
		if(PlayerInfo[playerid][pEngine])
			return SCM(playerid, COLOR_SYNTAX, "You are already attempting to turn your engine on.");
		if(health <= 251.0)
			return SCM(playerid, COLOR_SYNTAX, "The vehicle engine won't start. This vehicle engine was wrecked!");

		PlayerInfo[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngine", 1010, 0, "dd",  vehicleid, playerid);
		SCM(playerid,COLOR_WHITE,"Vehicle engine starting, please wait..");
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
		vehicleEng[vehicleid] = false;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(!VehicleHasEngine(vehicleid)) return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	if(vehicleFuel[vehicleid] <= 0) return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	if(IsVehicleOwner(playerid, vehicleid))
	{
		EngineChange(playerid, vehicleid);
	}
	else if(PlayerInfo[playerid][pVehicleKeys] == vehicleid)
	{
	    EngineChange(playerid, vehicleid);
	}
	else if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    EngineChange(playerid, vehicleid);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You don't have the keys to start this vehicle.");
	}
	return 1;
}

CMD:flash(playerid, params[])
{
	new vehicleid,panels,doors,lights,tires;
	vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_WHITE, "You are not the driver.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
	}
	if(!IsAFlashingEXB(GetPlayerVehicleID(playerid)))
	{
		return SCM(playerid, COLOR_WHITE, "This vehicle doesn't support ELM lights.");
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
    }
	new string[256];
	new vehid = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehid);
	new vehicletype = IsVehicleModel(model);
	if(vehicletype != MODEL_CAR && vehicletype != MODEL_BIKE && vehicletype != MODEL_MBIKE)
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't have a seatbelt or a helmet!");
	}
    if(IsPlayerInAnyVehicle(playerid) == 1 && SB[playerid] == 0)
	{
		if(vehicletype == MODEL_BIKE)
		{
			SB[playerid] = 2;
			SetPlayerAttachedObject(playerid,9,ATTACH_PLAYER_HELMET2,2,0.15,0.00,0.00,0.0,0.0,0.0,1.14,1.10,1.11);
			format(string, sizeof(string), "* %s reaches for their helmet, and takes it on.", GetRPName(playerid));
		}
		else if(vehicletype == MODEL_MBIKE)
		{
			SB[playerid] = 2;
			SetPlayerAttachedObject(playerid,9,ATTACH_PLAYER_HELMET1,2,0.06,0.02,0.00,0.0,89.0,89.0,1.10,0.89,1.00);
			format(string, sizeof(string), "* %s reaches for their helmet, and takes it on.", GetRPName(playerid));
		}
		else if(vehicletype == MODEL_CAR)
		{
			SB[playerid] = 1;
			SetPlayerAttachedObject(playerid,9,ATTACH_PLAYER_SEATBELT,1,0.07,0.21,-0.00,-21.0,-54.0,183.0,0.39,0.40,0.31);
			format(string, sizeof(string), "* %s reaches for their seatbelt, and buckles it.", GetRPName(playerid));
		}
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);
    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && SB[playerid] != 0)
	{
        SB[playerid] = 0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
		{
			RemovePlayerAttachedObject(playerid, 9);
		}
		if(vehicletype == MODEL_BIKE)
			format(string, sizeof(string), "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
		else if (vehicletype == MODEL_MBIKE)
			format(string, sizeof(string), "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
		else if(vehicletype == MODEL_CAR)
			format(string, sizeof(string), "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) 
	{
		return SM(playerid, COLOR_SYNTAX, "Usage: /checkbelt [playerid]");
	}
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(GetPlayerState(giveplayerid) != PLAYER_STATE_DRIVER && GetPlayerState(giveplayerid) != PLAYER_STATE_PASSENGER)
	{
        return SCM(playerid, COLOR_GREY, "That player is not in any vehicle!");
    }
    new stext[12];

    if(SB[giveplayerid] == 0)
	{
		stext = "{FF0000}off";
	}
    else
	{
		stext = "{00FF00}on";
	}
    if(SB[giveplayerid] == 2)
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s looks at %s, checking to see if they are wearing a helmet.", GetRPName(playerid),GetRPName(giveplayerid));
        SM(playerid,COLOR_WHITE, "%s's helmet is currently %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetRPName(playerid),GetRPName(giveplayerid));
    	SM(playerid,COLOR_WHITE, "%s's seat belt is currently %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
	{
        return SCM(playerid, COLOR_GREY, "You are not in any vehicle!");
    }
    new stext[12];

    if(SB[playerid] == 0)
	{
		stext = "{FF0000}off";
	}
    else
	{
		stext = "{00FF00}on";
	}

    if(SB[playerid] == 2)
	{
        SM(playerid,COLOR_WHITE, "Your helmet is currently %s.", stext);
	}
	else
	{
    	SM(playerid,COLOR_WHITE, "Your seat-belt is currently %s.", stext);
    }
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no lights which can be turned on.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

IsAbicycle(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 481, 509, 510: return true;
	}
	return false;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid) && IsAMotorBike(vehicleid) && IsAbicycle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no hood.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid) && !IsAMotorBike(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_WHITE, "You've opened the vehicle's trunk, use /vstash for more.");
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
        SCM(playerid, COLOR_WHITE, "You've closed the vehicle's trunk.");
	}

	return 1;
}

CMD:myupgrades(playerid, params[])
{
    SM(playerid, COLOR_YELLOW, "_____ %s's upgrades (%i points available) _____", GetRPName(playerid), PlayerInfo[playerid][pUpgradePoints]);
	SM(playerid, SERVER_COLOR, "Health: %.0f/100{C8C8C8} You spawn with %.1f health at the hospital after death.", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnHealth]);
	SM(playerid, COLOR_YELLOW, "Armor: %.0f/100{C8C8C8} You spawn with %.1f armor at the hospital after death.", PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pSpawnArmor]);
	SM(playerid, SERVER_COLOR, "Addict: %i/3{C8C8C8} You gain an extra %.1f health and armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
	SM(playerid, COLOR_YELLOW, "Asset: %i/4{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
    SM(playerid, SERVER_COLOR, "Labor: %i/5{C8C8C8} You earn an extra %i percent cash to your paycheck when working.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
    SM(playerid, COLOR_YELLOW, "Inventory: %i/5{C8C8C8} This upgrade increases the capacity for your items. [/inv]", PlayerInfo[playerid][pInventoryUpgrade]);
	return 1;
}


CMD:upgrade(playerid, params[])
{
    new cost = 1000;
    new cost2 = cost - PlayerInfo[playerid][pCash];
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1396.2080,-4.1093,1000.8535))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(PlayerInfo[playerid][pUpgradePoints] < 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have no upgrade points available which you can spend.");
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
		return SM(playerid, COLOR_GREY, "You can't afford any upgrade. You need more %d to afford upgrade.", cost2);
	}
	if(isnull(params))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /upgrade [option] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
	    SCM(playerid, COLOR_WHITE, "List of options: Addict, Asset, SpawnHealth, SpawnArmor, Labor, Inventory");
	}
	else if(!strcmp(params, "inventory", true))
	{
	    if(PlayerInfo[playerid][pInventoryUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your inventory skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pInventoryUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i WHERE uid = %i", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_GREEN, "You upgraded your inventory skill to %i/5. Your inventory capacity was increased.", PlayerInfo[playerid][pInventoryUpgrade]);
 	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(PlayerInfo[playerid][pAddictUpgrade] >= 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your addict skill is already upgraded to its maximum level of 3.");
		}

  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

		PlayerInfo[playerid][pAddictUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_YELLOW, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "labor", true))
	{
	    if(PlayerInfo[playerid][pLaborUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your labor skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pLaborUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i WHERE uid = %i", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_GREEN, "You upgraded your labor skill to level %i/5. You now earn %i percent more extra cash when you work.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(PlayerInfo[playerid][pAssetUpgrade] >= 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your asset skill is already upgraded to its maximum level of 4.");
		}
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

		PlayerInfo[playerid][pAssetUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(PlayerInfo[playerid][pSpawnHealth] >= 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn health is at maximum (100).");
	    }
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

	    PlayerInfo[playerid][pSpawnHealth] += 0.5;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", PlayerInfo[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(PlayerInfo[playerid][pSpawnArmor] > 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn armor is at maximum (25).");
	    }
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

	    PlayerInfo[playerid][pSpawnArmor] += 0.5;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", PlayerInfo[playerid][pSpawnArmor]);
	}
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:buylevel(playerid, params[]) return callcmd::levelup(playerid, params);
CMD:levelup(playerid, params[])
{
	new
		exp = (PlayerInfo[playerid][pLevel] * 4),
		cost = (PlayerInfo[playerid][pLevel] + 1) * 3000,
		string[64];

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1396.2080,-4.1093,1000.8535))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(PlayerInfo[playerid][pEXP] < exp)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need %i more respect points in order to level up.", exp - PlayerInfo[playerid][pEXP]);
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to have at least %s on hand to buy your next level.", AddCommas(cost));
	}
	if(PlayerInfo[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}
	PlayerInfo[playerid][pEXP] -= exp;
	GivePlayerCash(playerid, -cost);
	PlayerInfo[playerid][pLevel]++;
	PlayerInfo[playerid][pUpgradePoints] += 2;

	if(PlayerInfo[playerid][pLevel] == 3 && PlayerInfo[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", PlayerInfo[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i, exp = exp - %i, cash = cash - %i, level = level + 1 WHERE uid = %i", PlayerInfo[playerid][pUpgradePoints], exp, cost, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_YELLOW, "You have moved up to level %i.", PlayerInfo[playerid][pLevel]);
	SM(playerid, COLOR_YELLOW, "You now have %i upgrade points. Use /upgrade to learn more.", PlayerInfo[playerid][pUpgradePoints]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if(PlayerInfo[playerid][pLevel] == 20)
	{
		SCM(playerid, COLOR_WHITE, "Congratulations! You just reached level 20, you can now earn loyality badge by using /loyalbadge");
	}
	return 1;
}

CMD:answer(playerid, params[])
{
	new param[32];
	if(sscanf(params, "S()[32]", param))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
		return 1;
	}
	if(isnull(quizAnswer))
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no active quiz!");
	}
	if(!isnull(param))
	{
		if(!strcmp(quizAnswer, param, true))
		{
			SMA(COLOR_LIGHTRED, "%s has answered the quiz correctly. answer: "CXRP"%s", GetRPName(playerid), quizAnswer);
			quizQuestion[0] = EOS;
			quizAnswer[0] = EOS;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Sorry bud, that ain't the right answer.");
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
	}
	return 1;
}

CMD:rp(playerid, params[])
{
	new option[10];
	if(sscanf(params, "s[10]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /rp [option]");
	    SCM(playerid, COLOR_WHITE, "Guns: GrabGun, HideGun, AimHead, AimBody, AimFeet, AimHand");
        SCM(playerid, COLOR_WHITE, "Player: handsup, handsdown");
        if(GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_ARMY && GetFactionType(playerid) == FACTION_FEDERAL)
  		{
			SCM(playerid, COLOR_BLUE, "Police RP: Tazer");
		}
		if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
			SCM(playerid, COLOR_DOCTOR, "Saving Patient Step: Rushpt, Stopbleed, Getst, Lowst, Rusham");
			SCM(playerid, COLOR_DOCTOR, "Medic RP: Heal");
		}
		
		SCM(playerid, COLOR_GREEN, "OpenL, GetTools, CarHood, Nitro, Hyd, GetWheels, InWheel, BodyKits");
		SCM(playerid, COLOR_GREEN, "Install");
		
	    return 1;
	}
	if(!strcmp(option, "bodykits", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install bodykits towards the car.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "inwheel", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s removes the old 4 wheels of the car as he/she installs new ones.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "getwheels", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes 4 pieces of wheels from the locker.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "hyd", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install the Hydraulics to the car.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "nitro", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install the nitro boost to the car.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "install", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** Installed. ((%s))", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "openl", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the locker with his/her right hand.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "gettools", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the tools/bodykits from the locker.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "carhood", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses his/her force to open the car's hood.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "handsup", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s raises both of his/her hands onto the air, levels it at his/her head.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "rushpt", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes towards the patient with the medkit.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "stopbleed", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses alcohol, cotton and bandage to stop the bleeding of the wound.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "getst", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes at the back of the ambulance, taking out a stretcher and rushes back towards the patient.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "lowst", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lowers the stretcher, levels it towards the patient and gently move the patient on it.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "rusham", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes towards at the back of the ambulance, loading the patient inside.", GetRPName(playerid));
		}
        else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}

	if(!strcmp(option, "handsdown", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s moves his hands down freely.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "grabgun", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs his/her gun out, loads it and switches the safety to OFF.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "hidegun", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s hides/slings his/her gun back to its old position and flicking the safety to ON.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimhead", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the head of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimbody", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the body of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimfeet", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the feet of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimhand", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the hand of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "tazer", true))
	{
	    if(IsLawEnforcement(playerid))
	    {
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s shoots the tazer towards the enemy.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "heal", true))
	{
	    if(GetFactionType(playerid) != FACTION_MEDIC)
	    {
	        SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
	    }
	    else
	    {
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses alcohol, cotton and bandage to cure the patient's wound.", GetRPName(playerid));
		}
		return 1;
	}
	return 1;
}

CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /quiz [option]");
			SCM(playerid, COLOR_WHITE, "Available options: create, end, edit");
		}
		else
		{
			return NotAuth(playerid);
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 4) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SMA(COLOR_LIGHTRED, "The quiz was ended by %s, answer: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s changed the quiz answer to %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /quiz edit [answer]");
		}
	}
	return 1;
}

CMD:job(playerid, params[])
{
	if(GetPlayerVehicleID(playerid) == JobVeh[playerid] && PlayerInfo[playerid][pJob] == JOB_BUS)
	{
		PlayerInfo[playerid][pBusCP] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_BUS;
		SetPlayerCheckpoint(playerid, bus_cps[PlayerInfo[playerid][pBusCP]][0], bus_cps[PlayerInfo[playerid][pBusCP]][1], bus_cps[PlayerInfo[playerid][pBusCP]][2], 5.0);
	}
	return 1;
}

CMD:jobhelp(playerid)
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE && PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You have no job and therefore no job commands to view.");
	}

	switch(PlayerInfo[playerid][pJob])
	{
		case JOB_YFOOD: SCM(playerid, COLOR_WHITE, "** Job Commands: /getfood, /cancelcp.");
		case JOB_TRUCKER: SCM(playerid, COLOR_WHITE, "** Job Commands: /job /cancelcp.");
		case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Job Commands: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Job Commands: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Job Commands: /getmats, /sellgun.");
		case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Job Commands: /mine, /cancelcp.");
        case JOB_MEATPACKAGER: SCM(playerid, COLOR_WHITE, "Job Commands: /packagemeat, /cancelcp.");
		case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Job Commands: /setfare, /takecall.");
        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Job Commands: /cookmeth, /getdrug, /planthelp, /getcrate.");
        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Job Commands: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Job Commands: /find.");
        //case JOB_MECHANIC: SCM(playerid, COLOR_WHITE, "** Job Commands: /upgradevehicle, /tune, /repair, /nos, /hyd, /trackcall");
 	}

 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			case JOB_YFOOD: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getfood, /cancelcp.");
			case JOB_TRUCKER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /job, /cancelcp.");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Secondary Job: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Secondary Job: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getmats, /sellgun.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /mine, /cancelcp");
			case JOB_MEATPACKAGER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /packagemeat, /cancelcp.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /setfare, /takecall");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /cookmeth, /getdrug, /planthelp, /getcrate.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Secondary Job: /find.");
			//case JOB_MECHANIC: SCM(playerid, COLOR_WHITE, "** Secondary Job: /upgradevehicle, /tune, /repair, /nos, /hyd, /trackcall");
	 	}
	}
	return 1;
}

CMD:vehiclehelp(playerid)
{
    SCM(playerid, COLOR_WHITE, "** Vehicle: /engine, /lights, /hood, /trunk, /buyvehicle, /(vst)orage, /park.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /lock, /vstash, /vstashtake, /vstashput, /neon, /carcolors /colorcar, /paintcar");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /findcar, /givekeys, /takekeys, /setradio, /paytickets, /windows, /unmod");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /seatbelt, /checkmybelt, /checkbelt, /sellcar, /sellmycar, /carinfo");
    return 1;
}

CMD:bankhelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "** Bank: /bank, /balance, /robbank, /invite, /setupvault.");
	return 1;
}

CMD:donatorhelp(playerid) return callcmd::viphelp(playerid);
CMD:viphelp(playerid)
{
	if(!PlayerInfo[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a donator subscription.");
	}
	SCM(playerid, COLOR_VIP, "** Donator: /(v)ip, /vipinfo, /vipinvite, /vipnumber, /sellgun");
	SCM(playerid, COLOR_VIP, "** Donator: /vcode, /locatevip, /vcolor, /changegender, /changeage");
	return 1;
}

CMD:locatevip(playerid, params[])
{
	LocateMethod(playerid,"viplocation");
	return 1;
}

CMD:fwsall(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(sscanf(params, "s[20]", "confirm"))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fwsall [confirm]");
			return 1;
		}
		foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pLogged])
		        continue;

			GiveWeapon(i, 24);
			GiveWeapon(i, 25);
			GiveWeapon(i, 27);
			GiveWeapon(i, 31);
			GiveWeapon(i, 34);
			SM(i, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
		}
		SMA(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to everyone.", GetRPName(playerid));
	}
	else
	{
		return NotAuth(playerid);
	}
	return 1;
}
CMD:fws(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}
		if(IsPlayerNPC(targetid) || !IsPlayerConnected(targetid) || !IsPlayerSpawned(targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
		}

		GiveWeapon(targetid, 24);
		GiveWeapon(targetid, 25);
		GiveWeapon(targetid, 27);
		GiveWeapon(targetid, 31);
		GiveWeapon(targetid, 34);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
	}
	else
	{
		return NotAuth(playerid);
	}
	return 1;
}

CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

	SCM(playerid, COLOR_WHITE, "** Radio: /fc, /(r)adio, /div, /faction, /division, /locker, /showbadge, /(m)egaphone.");

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SCM(playerid, COLOR_WHITE, "** Police: /open, /cell, /cells, /tazer, /unr, /cuff, /uncuff, /drag, /detain, /charge, /arrest");
	        SCM(playerid, COLOR_WHITE, "** Police: /wanted, /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall, /backup");
	        SCM(playerid, COLOR_WHITE, "** Police: /mdc, /releasejail, /clearwanted, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant");
	        SCM(playerid, COLOR_WHITE, "** Police: /showtlaws, /showslaws, /comserv, /destroysirens, /norob");
         	SCM(playerid, COLOR_WHITE, "** Auto: /po, /mir.");

			if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /listcalls, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    SCM(playerid, COLOR_WHITE, "** Federal: /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
		case FACTION_MEDIC:
		{
		    SCM(playerid, COLOR_WHITE, "** Medic: /firstaid, /stretcher(/loadpt), /deliverpt, /getpt, /deploy, /undeploy, /fmdc");
		    SCM(playerid, COLOR_WHITE, "** Medic: /movept, /badge, /gov, /backup, /listcallers, /trackcall, /d, /callsign, /undeployall, /heal");
  		}
		case FACTION_NEWS:
		{
		    SCM(playerid, COLOR_WHITE, "** News: /news, /live, /endlive, /liveban");
		}
		case FACTION_GOVERNMENT:
		{
		    SCM(playerid, COLOR_WHITE, "** Government: /gov, /settax, /factionpay, /tazer, /cuff, /uncuff, /detain, /taxdeposit, /taxwithdraw");
		    SCM(playerid, COLOR_WHITE, "** Government: /backup, /badge, /d, /flash");
		}
		case FACTION_HITMAN:
		{
		    SCM(playerid, COLOR_WHITE, "** Hitman: /contracts, /takehit, /profile, /passport, /plantbomb, /pickupbomb, /detonate, /hmole, /hfind");
		    SCM(playerid, COLOR_WHITE, "** Hitman: /poison, /headshot, /dart, /contract, /hmsg");
		}
	}

	return 1;
}

CMD:ganghelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	SCM(playerid, COLOR_WHITE, "** Gang: /f, /gang, /gstash, /bandana, /capture, /claim, /turfinfo, /points, /turfs, /turf");
    SCM(playerid, COLOR_WHITE, "** Gang: /gpark, /gbuyvehicle, /gfindcar, /grespawncars, /gsellcar, /lock, /endalliance");
	SCM(playerid, COLOR_WHITE, "** Gang: /getmats, /sellgun, /getdrug, /planthelp, /getcrate, /pointinfo, /ally");
	return 1;
}

CMD:planthelp(playerid, params[])
{
    SCM(playerid, COLOR_WHITE, "** Plant: /weed.");
    return 1;
}

CMD:o(playerid, params[]) return callcmd::ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(o)oc [global OOC]");
	}
	if(!enabledOOC && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global OOC channel is disabled at the moment.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pToggleOOC])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the OOC chat as you have it toggled.");
	}

	if(PlayerInfo[playerid][pAdmin] > 1) {
		format(string, sizeof(string), ""CXRP"%s"WHITE" %s", GetAdminRank(playerid), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), ""CXRP"Former Admin"WHITE" %s", GetRPName(playerid));
	} else if(PlayerInfo[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "{C2A2DA}%s Donator"WHITE" %s", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SM(i, COLOR_WHITE, "(( %s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

CMD:newb(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:n(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The newbie channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pNewbieMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel. /report for an unmute.");
	}
	if(gettime() - PlayerInfo[playerid][pLastNewbie] < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - PlayerInfo[playerid][pLastNewbie]));
	}
	if(PlayerInfo[playerid][pToggleNewbie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);

	PlayerInfo[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", PlayerInfo[playerid][pNewbies], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:id(playerid, params[])
{
	new 
		szMessage[256],
		szName[MAX_PLAYER_NAME],
		iTarget,
		iSuccess = 0;
		
	if(isnull(params))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /id [playerid/part-of-name]");
	
	foreach(new i : Player) {
		GetPlayerName(i, szName, sizeof(szName));
		if(strfind(szName, params, true) != -1) {
			new color = GetPlayerColor(i);
			new mask[MAX_PLAYER_NAME];
			format(mask, sizeof(mask), "Stranger_#%i", i);
			format(szMessage, sizeof(szMessage), "ID: %d | Name: {%06x}%s{FFFFFF} | Level: %d | Ping: %d", i, color >>> 8, (Maskara[i]) ? (mask) : (GetPlayerNameEx(i)),  PlayerInfo[i][pLevel], GetPlayerPing(i));
			SCM(playerid, COLOR_WHITE, szMessage);
			iSuccess ++;
		}
	}
	
	if(iSuccess == 0) {
		if(!sscanf(params, "u", iTarget)) {
			if(IsPlayerConnected(iTarget)) {
				new color = GetPlayerColor(iTarget);
				new mask[MAX_PLAYER_NAME];
				format(mask, sizeof(mask), "Stranger_#%i", iTarget);
				format(szMessage, sizeof(szMessage), "ID: %d | Name: {%06x}%s{FFFFFF} | Level: %d | Ping: %d", iTarget, color >>> 8, (Maskara[iTarget]) ? (mask) : (GetPlayerNameEx(iTarget)),  PlayerInfo[iTarget][pLevel], GetPlayerPing(iTarget));
				SCM(playerid, COLOR_WHITE, szMessage);
				iSuccess ++;
			}
		}
	} 
	
	if(iSuccess == 0)
		SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");

	return 1;
}

CMD:pay(playerid, params[])
{
    new targetid, amount;

	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command while in Admin Duty");
	}
    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /pay [playerid] [amount]");
    }
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(gettime() - PlayerInfo[playerid][pLastPay] < 3)
    {
        return SCM(playerid, COLOR_SYNTAX, "Please wait three seconds between each transaction.");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
    if(targetid == playerid)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't pay yourself.");
    }
    if(amount > PlayerInfo[playerid][pCash])
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have that much.");
    }
    if(amount > 1000 && PlayerInfo[playerid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can only pay up to $1,000 at a time as a level 1.");
    }
    if(!(1 <= amount <= 100000))
    {
        return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $100,000 at once.");
    }
    if(amount < 1)
    {
        return SM(playerid, COLOR_SYNTAX, "Invalid amount");
    }

    PlayerInfo[playerid][pLastPay] = gettime();

    GivePlayerCash(playerid, -amount);
    GivePlayerCash(targetid, amount);

    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out $%s and gives it to %s.", GetRPName(playerid), AddCommas(amount), GetRPName(targetid));
    Log_Write("log_give", "%s (uid: %i) (IP: %s) has given $%s to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), AddCommas(amount), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    SM(targetid, COLOR_AQUA, "You have been given $%s by %s.", AddCommas(amount), GetRPName(playerid));
    SM(playerid, COLOR_AQUA, "You have given "CXRP"$%s{CCFFFF} to %s.", AddCommas(amount), GetRPName(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
    {
        SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has given $%s to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), AddCommas(amount), GetRPName(targetid), GetPlayerIP(targetid));
    }

    return 1;
}

CMD:resetbackpack(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /resetbackpack [playerid]");
	    SCM(playerid, COLOR_SYNTAX, "** This command removes the player's backpack and all items inside it.");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	ResetBackpack(targetid);
	SM(targetid, COLOR_LIGHTRED, "Administrator %s has reset your backpack and all its items.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset %s's backpack and all its items.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:giveweaponlic(playerid, params[])
{
	new targetid;
	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_GREY2, "You are not a part of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /giveweaponlic [playerid]");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "The player has already have weapon license.");
	}

	PlayerInfo[targetid][pWeaponLicense] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[targetid][pWeaponLicense], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** %s has given you a weapon license.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a weapon license.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givebackpack(playerid, params[])
{
	new targetid, size[10];
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[14]S()[32]", targetid, size))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /givebackpack [playerid] [size]");
	    SCM(playerid, COLOR_WHITE, "Sizes:   Small, Medium, Large");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!strcmp(size, "small", true))
	{
		PlayerInfo[targetid][pBackpack] = 1;
	    SM(targetid, COLOR_WHITE, "** %s has given you a small backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a small backpack.", GetRPName(playerid), GetRPName(targetid));
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET backpack = 1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(!strcmp(size, "medium", true))
	{
		PlayerInfo[targetid][pBackpack] = 2;
	    SM(targetid, COLOR_WHITE, "** %s has given you a medium backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a medium backpack.", GetRPName(playerid), GetRPName(targetid));
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET backpack = 2 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(!strcmp(size, "large", true))
	{
		PlayerInfo[targetid][pBackpack] = 3;
	    SM(targetid, COLOR_WHITE, "** %s has given you a large backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a large backpack.", GetRPName(playerid), GetRPName(targetid));
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET backpack = 3 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Pot, Crack, Meth, Painkillers, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: Seeds, Ephedrine, DirtyCash, Diamonds, Cigars.");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to give away.");
	    }
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0 && PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can only give away weapons to your own faction members.");
	    }
		if(PlayerInfo[playerid][pDonator] != PlayerInfo[targetid][pDonator])
		{
			return SCM(playerid, COLOR_SYNTAX, "You can only giveaway weapons to the same donators as you.");
		}

	    RemovePlayerWeapon(playerid, weaponid);
        GiveWeapon(targetid, weaponid);
	    SM(targetid, COLOR_AQUA, "%s has given you their %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have given %s your %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more materials.");
		}

		PlayerInfo[playerid][pMaterials] -= amount;
		PlayerInfo[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[targetid][pMaterials], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i materials.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some materials to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [pot] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPot])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more pot.");
		}

		PlayerInfo[playerid][pPot] -= amount;
		PlayerInfo[targetid][pPot] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[targetid][pPot], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of pot.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of pot to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some pot to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i grams of pot to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [Crack] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more Crack.");
		}

		PlayerInfo[playerid][pCrack] -= amount;
		PlayerInfo[targetid][pCrack] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[targetid][pCrack], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of crack.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of crack to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some Crack to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i grams of Crack to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more meth.");
		}

		PlayerInfo[playerid][pMeth] -= amount;
		PlayerInfo[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some meth to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more painkillers.");
		}
		if(GetFactionType(playerid) == FACTION_MEDIC) return SCM(playerid, COLOR_SYNTAX, "You can't give painkillers as a Medic!");

		PlayerInfo[playerid][pPainkillers] -= amount;
		PlayerInfo[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some painkillers to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pCigars] -= amount;
		PlayerInfo[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[targetid][pCigars], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some cigars to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSpraycans])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pSpraycans] -= amount;
		PlayerInfo[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[targetid][pSpraycans], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some spraycans to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pGasCan] -= amount;
		PlayerInfo[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[targetid][pGasCan], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some gasoline to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more seeds.");
		}

		PlayerInfo[playerid][pSeeds] -= amount;
		PlayerInfo[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some seeds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more ephedrine.");
		}

		PlayerInfo[playerid][pEphedrine] -= amount;
		PlayerInfo[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[targetid][pEphedrine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some ephedrine to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [dirtycash] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDirtyCash])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pDirtyCash] -= amount;
		PlayerInfo[targetid][pDirtyCash] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[targetid][pDirtyCash], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of dirty cash.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of dirty cash to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some dirty cash to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i grams of dirty cash to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}

	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pDiamonds] -= amount;
		PlayerInfo[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[targetid][pDiamonds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some diamonds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) has given %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	return 1;
}

CMD:rpgun(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs his/her gun out, loads it and switches the safety to OFF.", GetRPName(playerid));
	return 1;
}

CMD:rpaim(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun to his/her enemy.", GetRPName(playerid));
	return 1;
}

CMD:washmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pDirtyCash] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have dirty money.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -2482.089599, -284.732391, 35.586711)
 	 && !IsPlayerInRangeOfPoint(playerid, 8.0, -2819.480224, 1077.036254, 27.742187)
	 && !IsPlayerInRangeOfPoint(playerid, 8.0, -2817.508056, 1147.814331, 19.536300)
 	 && !IsPlayerInRangeOfPoint(playerid, 8.0, -2396.320068, -245.353042, 35.622108)
  	 && !IsPlayerInRangeOfPoint(playerid, 8.0, -2400.009521, -261.165802, 35.653480))
	{
		return SCM(playerid, COLOR_GREY2, "You need to be at a washmoney point.");
	}
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
	SetTimerEx("TimerWashMoney", 10000, false, "i", playerid);
	return 1;
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Pot, Crack, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 ||  PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(GetFactionType(playerid) != FACTION_NONE)
		{
			return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons as a Faction Member");
		}

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

        PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEAPON;
		PlayerInfo[targetid][pSellExtra] = weaponid;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you their %s for $%i. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_MATERIALS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i materials for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i materials for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "pot", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [pot] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPot])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEED;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of pot for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of pot for $%i.", GetRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "crack", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [Crack] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_COCAINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of Crack for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of Crack for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_METH;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of meth for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of meth for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_PAINKILLERS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i painkillers for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i painkillers for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_SEEDS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i seeds for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i seeds for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_EPHEDRINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of ephedrine for $%i.", GetRPName(targetid), amount, price);
	}

	return 1;
}

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accent [accent ID]");
		SendClientMessage(playerid, COLOR_GREY2, "Available Accent IDs: No Accent [0], Bangali [1], British [2], Asian [3], Scottish [4], Irish [5], Russian [6]");
		SendClientMessage(playerid, COLOR_GREY2, "Available Accent IDs, American [7], Spanish [8], Southern [9], Cuban [10], Italian [11], Gangster [12]");
		SendClientMessage(playerid, COLOR_GREY2, "Available Accent IDs: Australian [13], Arabic [14], Balkan [15], Canadian [16], Jamaican [17], Israeli [18]");
        SendClientMessage(playerid, COLOR_GREY2, "Available Accent IDs: Indian [19], Welsh [20], French [21], German [22], Dutch [23], African [24]");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(PlayerInfo[playerid][pAccent], "None", 64);
		case 1: strcpy(PlayerInfo[playerid][pAccent], "Bangali", 64);
		case 2: strcpy(PlayerInfo[playerid][pAccent], "British", 64);
		case 3: strcpy(PlayerInfo[playerid][pAccent], "Asian", 64);
		case 4: strcpy(PlayerInfo[playerid][pAccent], "Scottish", 64);
		case 5: strcpy(PlayerInfo[playerid][pAccent], "Irish", 64);
		case 6: strcpy(PlayerInfo[playerid][pAccent], "Russian", 64);
		case 7: strcpy(PlayerInfo[playerid][pAccent], "American", 64);
		case 8: strcpy(PlayerInfo[playerid][pAccent], "Spanish", 64);
		case 9: strcpy(PlayerInfo[playerid][pAccent], "Southern", 64);
		case 10: strcpy(PlayerInfo[playerid][pAccent], "Cuban", 64);
		case 11: strcpy(PlayerInfo[playerid][pAccent], "Italian", 64);
		case 12: strcpy(PlayerInfo[playerid][pAccent], "Gangster", 64);
		case 13: strcpy(PlayerInfo[playerid][pAccent], "Australian", 64);
		case 14: strcpy(PlayerInfo[playerid][pAccent], "Arabic", 64);
		case 15: strcpy(PlayerInfo[playerid][pAccent], "Balkan", 64);
		case 16: strcpy(PlayerInfo[playerid][pAccent], "Canadian", 64);
		case 17: strcpy(PlayerInfo[playerid][pAccent], "Jamaican", 64);
		case 18: strcpy(PlayerInfo[playerid][pAccent], "Israeli", 64);
		case 19: strcpy(PlayerInfo[playerid][pAccent], "Indian", 64);
		case 20: strcpy(PlayerInfo[playerid][pAccent], "Welsh", 64);
		case 21: strcpy(PlayerInfo[playerid][pAccent], "French", 64);
		case 22: strcpy(PlayerInfo[playerid][pAccent], "German", 64);
		case 23: strcpy(PlayerInfo[playerid][pAccent], "Dutch", 64);
		case 24: strcpy(PlayerInfo[playerid][pAccent], "African", 64);
		default: SCM(playerid, COLOR_SYNTAX, "Invalid accent. Valid types range from 0 to 24.");
	}
	SM(playerid, COLOR_WHITE, "** You set your accent to \"%s\".", PlayerInfo[playerid][pAccent]);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = \"%e\" WHERE uid = %i", PlayerInfo[playerid][pAccent], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s flips a coin which lands on %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
	new
	    string[256],
		date[6];

	getdate(date[0], date[1], date[2]);
	//       yr        mo       dt
	gettime(date[3], date[4], date[5]);
	//       hr       min      sec

	format(string, sizeof(string), "%02d %s, %i %02d:%02d:%02d", date[2], GetMonthName(date[1]), date[0], date[3], date[4], date[5]);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s Jail Time: %i seconds", string, PlayerInfo[playerid][pJailTime]);
	}

	Dyuze(playerid, "Time", string, 4000);
	SM(playerid, COLOR_WHITE, "** Paychecks occur every hour. The next paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}

CMD:reportdm(playerid, params[]) return callcmd::rdm(playerid, params);
CMD:rdm(playerid, params[])
{
	new targetid;
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /rdm [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid playerid specified.");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddDMReportToQueue(playerid, targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your DM report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /report [playerid (optional)] [text]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:harvest(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, -988.0164,-1638.0801,76.3884))
	{
	    if(inharvesterjob[playerid] == 0)
	    {
		    startplant[playerid] = 0;
			onplant[playerid] = 1;
			harvesterskin[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 158);
			SendClientMessage(playerid, -1, "You got a job Harvester. {00FF00}Production site located near the flower of plant.");
	        inharvesterjob[playerid] = 1;
			return 1;
		}
		else if(inharvesterjob[playerid] == 1)
		{
			new string[128];
	        new money = countplant[playerid]*1 + countplantEx[playerid]*2;
	        if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    money = money*2;
			    SCM(playerid, COLOR_GREEN, "You recieved x2 of the salary.");
			}
			startplant[playerid] = 0;
			onplant[playerid] = 0;
			prinesplant[playerid] = 0;
			countplant[playerid] = 0;
			prinesplantEx[playerid] = 0;
			countplantEx[playerid] = 0;
			SetPlayerSkin(playerid, harvesterskin[playerid]);
			GivePlayerCash(playerid, money);
			format(string, 128, "You've successfully finished your job and earned earned %d.", money);
	        SendClientMessage(playerid, -1, string);
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
			DisablePlayerCheckpoint(playerid);
			inharvesterjob[playerid] = 0;
	        return 1;
		}
	}
	else
	{
		SCM(playerid, COLOR_WHITE, "You are not in the harvester sidejob!");
	}
	return 1;
}

CMD:lumber(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2, -1991.550659, -2389.910644, 30.625000))
	{
		if(onwood[playerid] == 0)
		{
		    startwood[playerid] = 0;
			onwood[playerid] = 1;
			lumberskin[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 16);
			SetPlayerAttachedObject(playerid, 3, 341, 6, -0.02604, -0.00600, -0.00701, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, -1, "You got a job lumberjack. {00FF00}Production site located near the wood of trees.");
			SendClientMessage(playerid, -1, "{00FF00}Spruce trees pay higher, they are up the hill.");
	        inlumberjob[playerid] = 1;
			return 1;
		}
		else if(onwood[playerid] == 1)
		{
		    new string[128];
	        new money = countwood[playerid]*1 + countwoodEx[playerid]*2;
	        if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    money = money*2;
			    SCM(playerid, COLOR_GREEN, "You recieved x2 of the salary.");
			}
			startwood[playerid] = 0;
			onwood[playerid] = 0;
			prineswood[playerid] = 0;
			countwood[playerid] = 0;
			prineswoodEx[playerid] = 0;
			countwoodEx[playerid] = 0;
			ExtraWoods[playerid] = 0;
			SetPlayerSkin(playerid, lumberskin[playerid]);
			GivePlayerCash(playerid, money);
			format(string, 128, "You've successfully finished your job and earned earned %d.", money);
	        SendClientMessage(playerid, -1, string);
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
			DisablePlayerCheckpoint(playerid);
			inlumberjob[playerid] = 0;
			return 1;
		}
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "You are not in the lumberjack sidejob!");
	}
	return 1;
}

CMD:meatchop(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2, -16.9641, 1543.6111, 12.7560))
	{
	    if(onmeat[playerid] == 0)
	    {
			meatstartjob[playerid] = 0;
			onmeat[playerid] = 1;
			meatskin[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 168);
			SetPlayerAttachedObject(playerid, 3, 19583, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, -1, "You are now hired as a meat chopper. {00FF00}Chop off those meat at chopping site.");
			SendClientMessage(playerid, -1, "When you are finished with your shift; come back to this place and clock out.");
	        meatjob[playerid] = 1;
			return 1;
	    }
	    else if(onmeat[playerid] == 1)
	    {
	        new string[128], money = countmeat[playerid]*1 + countmeatEx[playerid]*2;
	        if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    money = money*2;
			    SCM(playerid, COLOR_GREEN, "You recieved x2 of the salary.");
			}
			meatstartjob[playerid] = 0;
			onmeat[playerid] = 0;
			prinesmeat[playerid] = 0;
			countmeat[playerid] = 0;
			prinesmeatEx[playerid] = 0;
			countmeatEx[playerid] = 0;
			ExtraMeatall[playerid] = 0;
			SetPlayerSkin(playerid, meatskin[playerid]);
			GivePlayerCash(playerid, money);
			format(string, 128, "You've successfully finished your job and earned earned %d.", money);
	        SendClientMessage(playerid, -1, string);
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
			DisablePlayerCheckpoint(playerid);
			meatjob[playerid] = 0;
	    }
	 }
	 else
	{
		SendClientMessage(playerid, -1, "You are not in the Meat Chopper Job");
	}
	return 1;
}

CMD:gethelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:requesthelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethelp [help request]");
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a helper and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pHelpMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting help requests.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRequest] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastRequest]));
	}

	strcpy(PlayerInfo[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(playerid), playerid, params);

	PlayerInfo[playerid][pLastRequest] = gettime();
	SCM(playerid, COLOR_YELLOW, "Your help request was sent to all helpers. Please wait for a response.");
	#if defined DISCORD
		DCC_SendText(3, playerid, params, "1118611361493164164", INVALID_PLAYER_ID, -1);
	#endif
	return 1;
}

CMD:accept(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accept [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: House, Death, Garage, Business, Vest, Vehicle, Faction, Gang, Live");
		SCM(playerid, COLOR_WHITE, "Available options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, Allience, turf, kit");
	}
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pHouseOffer],
		    houseid = PlayerInfo[playerid][pHouseOffered],
		    price = PlayerInfo[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this house.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's house offer and paid $%i for their house.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your house offer and paid $%i for your house.", GetRPName(playerid), price);
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(PlayerInfo[playerid][pAcceptedEMS]) && !PlayerInfo[PlayerInfo[playerid][pAcceptedEMS]][pAFK])
		{
			return SCM(playerid, COLOR_SYNTAX, "There is a medic online and on the way to rescue you.");
		}
 		if(PlayerInfo[playerid][pDeathCooldown] > 0)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can give up.", PlayerInfo[playerid][pDeathCooldown]);
		}
	    if(!PlayerInfo[playerid][pInjured])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not injured and can't accept your death.");
	    }

	    SCM(playerid, COLOR_SYNTAX, "You have given up and accepted your fate.");
	    SetPlayerHealth(playerid, 0.0);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = PlayerInfo[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
		}
		if(PlayerInfo[playerid][pCash] < 5000 || PlayerInfo[offeredby][pCash] < 5000)
		{
			return SCM(playerid, COLOR_SYNTAX, "You both need to have $5,000 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -5000);
		GivePlayerCash(offeredby, -5000);
		BusinessInfo[id][bCash] += 10000;

		if((PlayerInfo[playerid][pGender] == 1 || PlayerInfo[playerid][pGender] == 4) && (PlayerInfo[offeredby][pGender] == 1 || PlayerInfo[offeredby][pGender] == 4))
		{
			SMA(COLOR_YELLOW, "Marriage News: A gay couple %s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));
		}
		else if((PlayerInfo[playerid][pGender] == 2 || PlayerInfo[playerid][pGender] == 3 || PlayerInfo[playerid][pGender] == 5) && (PlayerInfo[offeredby][pGender] == 2 || PlayerInfo[offeredby][pGender] == 3 || PlayerInfo[offeredby][pGender] == 5))
		{
			SMA(COLOR_YELLOW, "Marriage News: A lesbian couple %s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));
		}
		else
		{
			SMA(COLOR_YELLOW, "Marriage News: A lovely couple %s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));
		}

		PlayerInfo[playerid][pMarriedTo] = PlayerInfo[offeredby][pID];
		PlayerInfo[offeredby][pMarriedTo] = PlayerInfo[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[playerid][pMarriedTo], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[offeredby][pMarriedTo], PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = PlayerInfo[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(PlayerInfo[playerid][pMarriedTo] == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't even married ya naab.");
		}
		if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[offeredby][pID])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That isn't the person you're married to.");
		}

		PlayerInfo[playerid][pMarriedTo] = -1;
		PlayerInfo[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = PlayerInfo[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't accept offers from yourself.");
		}

		new gangid = PlayerInfo[playerid][pGang], allyid = PlayerInfo[offeredby][pGang];

	    SM(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has formed an alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGarageOffer],
		    garageid = PlayerInfo[playerid][pGarageOffered],
		    price = PlayerInfo[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this garage.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's garage offer and paid $%i for their garage.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your garage offer and paid $%i for your garage.", GetRPName(playerid), price);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pBizOffer],
		    businessid = PlayerInfo[playerid][pBizOffered],
		    price = PlayerInfo[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this business.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's business offer and paid $%i for their %s.", GetRPName(offeredby), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your business offer and paid $%i for your %s.", GetRPName(playerid), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pVestOffer],
		    price = PlayerInfo[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vest.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy the vest.");
	    }
	    new Float:armor = 50.0;

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vest and paid $%i for %.1f armor points.", GetRPName(offeredby), price, armor);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vest offer and paid $%i for %.1f armor points.", GetRPName(playerid), price, armor);

	    TurfTaxCheck(offeredby, price);

	    PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pCarOffer],
		    vehicleid = PlayerInfo[playerid][pCarOffered],
		    price = PlayerInfo[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this vehicle.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's vehicle.");
	    }

	    GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = PlayerInfo[playerid][pID];

		VehicleInfo[vehicleid][vCash] = 0;
		VehicleInfo[vehicleid][vMaterials] = 0;
		VehicleInfo[vehicleid][vPot] = 0;
		VehicleInfo[vehicleid][vCrack] = 0;
		VehicleInfo[vehicleid][vMeth] = 0;
		VehicleInfo[vehicleid][vPainkillers] = 0;
		VehicleInfo[vehicleid][vWeapons][0] = 0;
		VehicleInfo[vehicleid][vWeapons][1] = 0;
		VehicleInfo[vehicleid][vWeapons][2] = 0;
		VehicleInfo[vehicleid][vWeapons][3] = 0;
		VehicleInfo[vehicleid][vWeapons][4] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = \"%s\", weapon_1=0, weapon_2=0, weapon_3=0, weapon_4=0, weapon_5=0, materials=0, cash=0, pot=0, meth=0, crack=0, painkillers=0 WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vehicle offer and paid $%i for their %s.", GetRPName(offeredby), price, GetVehicleName(vehicleid));
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vehicle offer and paid $%i for your %s.", GetRPName(playerid), price, GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));


	    PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pFactionOffer],
		    factionid = PlayerInfo[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a faction.");
	    }
	    if(PlayerInfo[offeredby][pFaction] != factionid || PlayerInfo[offeredby][pFactionRank] < FactionInfo[factionid][fRankCount] - 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    PlayerInfo[playerid][pFaction] = factionid;
	    PlayerInfo[playerid][pFactionRank] = 0;
	    PlayerInfo[playerid][pDivision] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = 0, division = -1 WHERE uid = %i", factionid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's faction offer to join "CXRP"%s{CCFFFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your faction offer and is now apart of your faction.", GetRPName(playerid));

		if(GetFactionType(playerid) != FACTION_HITMAN)
			Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	    PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGangOffer],
		    gangid = PlayerInfo[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a gang.");
	    }
	    if(PlayerInfo[offeredby][pGang] != gangid || PlayerInfo[offeredby][pGangRank] < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    PlayerInfo[playerid][pGang] = gangid;
	    PlayerInfo[playerid][pGangRank] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0 WHERE uid = %i", gangid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's gang offer to join "CXRP"%s{CCFFFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your gang offer and is now apart of your gang.", GetRPName(playerid));

		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	    PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = PlayerInfo[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
	    PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = PlayerInfo[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerInfo[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

		PlayerInfo[playerid][pLiveBroadcast] = offeredby;
		PlayerInfo[offeredby][pLiveBroadcast] = playerid;
  		PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = PlayerInfo[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(PlayerInfo[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's handshake offer.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your handshake offer.", GetRPName(playerid));

		if(pGloves[offeredby] && GetFactionType(offeredby) == FACTION_HITMAN && PlayerInfo[playerid][pContracted] > 0 && PlayerInfo[offeredby][pContractTaken] == playerid)
		{
			SM(offeredby, COLOR_WHITE, "You shook hands with %s and poisoned their hand, your gloves are no longer poisoned.", GetRPName(playerid));
			PoisonMsg[playerid] = 10;
			Poisonedby[playerid] = offeredby;
			PoisonTimer[playerid] = SetTimerEx("PoisonUpdate", 1000, true, "i", playerid);
			pGloves[offeredby] = false;
		}

  		PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pSellOffer],
		    type = PlayerInfo[playerid][pSellType],
		    amount = PlayerInfo[playerid][pSellExtra],
		    price = PlayerInfo[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = PlayerInfo[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GiveWeapon(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SM(playerid, COLOR_AQUA, "** You have purchased %s's %s for $%i.", GetRPName(offeredby), GetWeaponNameEx(weaponid), price);
				SM(offeredby, COLOR_AQUA, "** %s has purchased your %s for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(PlayerInfo[offeredby][pMaterials] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMaterials] += amount;
			    PlayerInfo[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[offeredby][pMaterials], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i materials from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i materials for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(PlayerInfo[offeredby][pPot] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPot] += amount;
			    PlayerInfo[offeredby][pPot] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[offeredby][pPot], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of pot from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of pot for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(PlayerInfo[offeredby][pCrack] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pCrack] += amount;
			    PlayerInfo[offeredby][pCrack] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[offeredby][pCrack], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of Crack from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of Crack for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(PlayerInfo[offeredby][pMeth] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMeth] += amount;
			    PlayerInfo[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[offeredby][pMeth], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of meth from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of meth for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(PlayerInfo[offeredby][pPainkillers] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
				if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPainkillers] += amount;
			    PlayerInfo[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[offeredby][pPainkillers], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i painkillers from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i painkillers for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(PlayerInfo[offeredby][pSeeds] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pSeeds] += amount;
			    PlayerInfo[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[offeredby][pSeeds], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i seeds from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i seeds for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(PlayerInfo[offeredby][pEphedrine] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pEphedrine] += amount;
			    PlayerInfo[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[offeredby][pEphedrine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of ephedrine from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of ephedrine for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(PlayerInfo[playerid][pSellOffer] == INVALID_PLAYER_ID || PlayerInfo[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a weapon.");
	    }
	    if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pSellPrice])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(PlayerInfo[playerid][pSellOffer], playerid, PlayerInfo[playerid][pSellExtra], PlayerInfo[playerid][pSellPrice]);
		PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDefendOffer],
			price = PlayerInfo[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }
	    if(!PlayerInfo[playerid][pWantedLevel])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		PlayerInfo[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = wantedlevel - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's offer to reduce your wanted level for $%i.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your offer to reduce their wanted level for $%i.", GetRPName(playerid), price);

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDiceOffer],
			amount = PlayerInfo[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept this bet.");
	    }
	    if(PlayerInfo[offeredby][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't afford to accept this bet.");
	    }

		new
			rand[2];

		rand[0] = random(6) + 1;
		rand[1] = random(6) + 1;

		SendProximityMessage(offeredby, 20.0, COLOR_PURPLE, "** %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SM(offeredby, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(playerid));
		    SM(playerid, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		    SM(playerid, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SM(playerid, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(offeredby));
		    SM(offeredby, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}

	    PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pInviteOffer],
			houseid = PlayerInfo[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a house.");
	    }

		PlayerInfo[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);
	    SM(playerid, COLOR_AQUA, "** You have accepted %s's invitation to their house.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your invitation to your house.", GetRPName(playerid));

	    PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's bank robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your bank robbery invitation.", GetRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "turf", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 4)
		{
			return SCM(playerid, COLOR_SYNTAX, "Your rank is lower then 4. So you can't accept this turf");
		}
		if(PlayerInfo[playerid][pTurfOffered] == -1)
		{
			return SCM(playerid, COLOR_SYNTAX, "No one offered you any turf to accept.");
		}

		new turfid = PlayerInfo[playerid][pTurfOfferedId];
		new gangid = PlayerInfo[playerid][pGang];
		new cost = PlayerInfo[playerid][pTurfAmount];

		TurfInfo[turfid][tCapturedGang] = gangid;
		strcpy(TurfInfo[turfid][tCapturedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		GivePlayerCash(playerid, -cost);
		Settings[gMafiaCash] += cost;

		new string[128];
		format(string, sizeof(string), "Mafia got $%i in there cash by selling a turf", cost);
		SendMafiaMessage(COLOR_AQUA, string);
		
		SMA(COLOR_LIGHTGREEN, "%s is bought by %s for 1 month.", TurfInfo[turfid][tName], GangInfo[gangid][gName]);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = \"%s\", capturedgang = %i, time = 720 WHERE id = %i", TurfInfo[turfid][tCapturedGang], TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		TurfInfo[turfid][tCaptureTime] = 0;
		TurfInfo[turfid][tTime] = 24*30;
		DestroyFlag(turfid);
		ReloadTurf(turfid);

	}
	else if(!strcmp(params, "kit", true))
	{
		if(PlayerInfo[playerid][pMedOfferd] == playerid)
		{
			SetPlayerHealth(playerid, 100.0);
			GivePlayerCash(PlayerInfo[playerid][pMedOfferedby], PlayerInfo[playerid][pMedPrice]);
			GivePlayerCash(playerid, -PlayerInfo[playerid][pMedPrice]);
			SendProximityMessage(PlayerInfo[playerid][pMedOfferedby], 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(PlayerInfo[playerid][pMedOfferedby]), GetRPName(playerid));
			PlayerInfo[playerid][pLastHeal] = gettime();
			PlayerInfo[playerid][pMedOfferd] = -1;
			SM(playerid, COLOR_AQUA, "You have received first aid from %s. Your health is now on 100HP.", GetRPName(PlayerInfo[playerid][pMedOfferedby]));
			SM(PlayerInfo[playerid][pMedOfferedby], COLOR_AQUA, "You have healed %s.", GetRPName(playerid));
		}
		else {
			return SCM(playerid, COLOR_SYNTAX, "No one offered you any medkit.");
		}
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /e [executive chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 6 && !PlayerInfo[i][pToggleAdmin])
	    {
			SM(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ha [head admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 4 && !PlayerInfo[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /a [admin chat]");
	}
	if(!enabledAdmin && PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The admin channel is disabled by Nafiz.");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0 && !PlayerInfo[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %.*s... **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": ...%s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ah(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:ahelp(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:adminhelp(playerid, params[])
{
    //new str[4096];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    SCM(playerid, COLOR_GLOBAL, "_______________________________________");
			SCM(playerid, COLOR_GREY2, "*** SECRET ADMIN: /a, /sban, /pinfo, /spec, /reports, /admins, /listguns, /listjailed");
			SCM(playerid, COLOR_GREY2, "*** SECRET ADMIN: /flag, /removeflag, /listflagged, /listflags, /check, /relog, /checkdsc");
		}
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /aduty, /skick, /(o)check, /dm, /oflag, /kick, /ban, /warn, /slap, /belt");
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /entercar, /gotocoords");
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /freeze, /unfreeze, /rwarn, /nmute, /admute, /hmute, /gmute, /disarm, /c, /lastactive");
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /checkinv, /afklist, /acceptname, /denyname, /namechanges, /prisoninfo");
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /rr, /rtnc, /sth, /nro, /nao, /nor, /post, /mark, /gotomark, /listenpm, /ar, /tr, /reply");
			SCM(playerid, COLOR_GREY2, "*** JUNIOR ADMIN: /cr, /setint, /setvw /listen, /sendto, /jetpack, /nrn, /god, /gotoint, /hprofile");
		}
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			SCM(playerid, COLOR_GREY2, "*** GENERAL ADMIN: /prison, /oprison, /release, /resetcomserv, /fine, /pfine, /ofine, /joininfo");
			SCM(playerid, COLOR_GREY2, "*** GENERAL ADMIN: /broadcast, /fixveh, /clearchat, /healrange, /listpvehs, /despawnpveh, /stomach");
			SCM(playerid, COLOR_GREY2, "*** GENERAL ADMIN: /resetadtimer, /baninfo, /banhistory, /kills, /togooc, (/togn)ewbie, /togglobal, /duel");
			SCM(playerid, COLOR_GREY2, "*** GENERAL ADMIN: /aclearwanted, /removedm, /setwepres,/refilldrug, /startchat, /invitechat, /kickchat");
			SCM(playerid, COLOR_GREY2, "*** GENERAL ADMIN: /endchat, /(o)serial, /getip, /iplookup, /ogetip, /checkaim, /aimlist, /dox");
		}
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
			SCM(playerid, COLOR_GREY2, "*** SENIOR ADMIN: /givegun, /setname, /permaban, /oban, /unban, /unbanip, /banip");
			SCM(playerid, COLOR_GREY2, "*** SENIOR ADMIN: /give(nos/hyd), /sethp, /setarmor, /veh, /destroyveh, /respawncars, /explode, /event");
			SCM(playerid, COLOR_GREY2, "*** SENIOR ADMIN: /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent");
  		}
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    SCM(playerid, COLOR_GREY2, "*** HEAD ADMIN: /setmapper /setstat, /givemoney, /givemoneyall, /setdonator, /forcepayday, /givebackpack, /clearreports, /(give/take)boombox");
		    SCM(playerid, COLOR_GREY2, "*** HEAD ADMIN: /removedonator, /setatax, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /setscore, /resetbackpack, /reviveall");
		    SCM(playerid, COLOR_GREY2, "*** HEAD ADMIN: /(save/edit/remove)vehicle, /saveaccounts, /adestroyboombox, /setbanktimer, /resetrobbery, /givepayday, /givepveh, /givedoublexp, /setweather");
  		}
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    SCM(playerid, COLOR_GREY2, "*** EXECUTIVE ADMIN: /(create/edit/set/purge/remove)faction, /(create/edit/remove/set)gang, /gangstrike, /(create/edit/remove)point");
		    SCM(playerid, COLOR_GREY2, "*** EXECUTIVE ADMIN: /makehelper, /(o)setadmin, /setformeradmin, /omakehelper, /setadminname, /setmotd, /forceaduty, /contracts");
			SCM(playerid, COLOR_GREY2, "*** EXECUTIVE ADMIN: /unlockaccount, /caplimit, /baninfo, /denyhit, /olisthelpers, /sellinactive, /changelist, /fixplayerid");
			SCM(playerid, COLOR_GREY2, "*** EXECUTIVE ADMIN: /permban, /permsban");
  		}
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    SCM(playerid, COLOR_GREY2, "*** MANAGEMENT: /deleteaccount, /forcepayday, /setstat, /anticheat, /doublexp, /setstaff, /fixmaps");
  		}
		if(PlayerInfo[playerid][pFactionMod])
		{
		    SCM(playerid, COLOR_GREY2, "*** FACTION MODERATOR: /createfaction, /editfaction, /setfaction, /purgefaction, /removefaction");
		}
		if(PlayerInfo[playerid][pGangMod])
		{
		    SCM(playerid, COLOR_GREY2, "*** GANG MODERATOR: /creategang, /editgang, /removegang, /gangstrike, /setgang.");
		    SCM(playerid, COLOR_GREY2, "*** GANG MODERATOR: /caplimit, /createpoint, /editpoint, /removepoint.");
		}
		if(PlayerInfo[playerid][pBanAppealer])
		{
		    SCM(playerid, COLOR_GREY2, "*** BAN APPEALER: /banip, /baninfo, /banhistory, /unbanip, /unban.");
		}
		if(PlayerInfo[playerid][pAP])
		{
		    SCM(playerid, COLOR_GREY2, "*** STAFF MANAGER: /setadminname, /setstaff, /(o)setadmin, /setformeradmin");
		}
		if(PlayerInfo[playerid][pHM])
		{
		    SCM(playerid, COLOR_GREY2, "*** Helper Manager: /makehelper, /omakehelper, /hh");
		}
	}
	else return SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Pending Reports:");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SM(playerid, COLOR_GREY2, "(RID: %i) %s[%i] reports: %s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to newbie chat.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to the newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to helpers.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to all helpers online.", GetRPName(playerid));

    strcpy(PlayerInfo[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	PlayerInfo[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid, rchat;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "iI(1)", reportid, rchat))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a report active already. Use /cr to close it.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted report %i from %s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(rchat)
	{
		SCM(playerid, COLOR_WHITE, "** You can use /reply to whisper the reporter and /cr to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
		SCM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "You can use /reply to reply to the admin handling your report.");

		PlayerInfo[playerid][pActiveReport] = reportid;
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	PlayerInfo[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", PlayerInfo[playerid][pReports], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s, reason: %s", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	ShowPlayerDialog(ReportInfo[reportid][rReporter], 0, DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /nro [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at ("SERVER_URL") for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:rr(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /rr [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for already being reviewed.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report is already being reviewed.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it is already being reviewed", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nao [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

  	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their request for a revive is invalid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/call 911)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it needs to be handled on the discord.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our discord.", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our discord at ("SERVER_DISCORD") in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}



CMD:reply(playerid, params[])
{
	new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /reply [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Admin %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Administrator %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /skick [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has silently kicked %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:permsban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permsban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	Log_Write("log_punishments", "%s (uid: %i) permanent silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was permanent silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pinfo [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Admins Online");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0 && PlayerInfo[i][pPassport] == 0)
		{
			new division[5];
			strcpy(division, GetAdminDivision(i));
            if(strlen(division) < 1) division = "None";
            SM(playerid, COLOR_GREY2, "(ID: %i) %s {FFFFFF}%s - Division: %s - "CXRP"Reports Handled: %i{FFFFFF} - Tabbed: %s", i, GetColorARank(i), GetRPName(i), division, PlayerInfo[i][pReports], ((PlayerInfo[i][pAFK]) ? ("Yes") : ("No")));
		}
	}
	return 1;
}

CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checknewbies [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	SM(playerid, COLOR_SYNTAX, "Level %i Player %s has used newbie {00FF00}%s times.", PlayerInfo[targetid][pLevel], GetRPName(targetid), AddCommas(PlayerInfo[targetid][pNewbies]));
	return 1;
}

CMD:helpers(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
		return NotAuth(playerid);
	}
	SCM(playerid, SERVER_COLOR, "Helpers Online:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pHelper] > 0 && PlayerInfo[i][pPassport] == 0)
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	            SM(playerid, COLOR_WHITE, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetRPName(i), AddCommas(PlayerInfo[i][pHelpRequests]), AddCommas(PlayerInfo[i][pNewbies]));
	        else
				SM(playerid, COLOR_WHITE, "(ID: %i) %s %s", i, GetHelperRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /flag [playerid] [description]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, \"%s\", NOW(), \"%e\")", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s flagged %s's account for \"%s\".", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid, slot;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ui", targetid, slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeflag [playerid] [slot]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(slot < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot specified.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i ORDER BY id LIMIT %i, 1", PlayerInfo[targetid][pID], slot-1);
	mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "iii", playerid, targetid, slot);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listflags [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:speccam(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pAdminDuty])
	{
	    return NotAuth(playerid);
	}
	if(PlayerInfo[playerid][pSpectating] == INVALID_PLAYER_ID)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not spectating anyone");
	}
	if (spectateCameraON[playerid] == false) 
	{
	    CancelSelectTextDraw(playerid);
        GameTextForPlayer(playerid, "~w~Spectate Camera Mode: ~g~ON~n~~w~You are now on spectate camera mode", 5000, 3);
	}
	else {
        SelectTextDraw(playerid, 0xAA0000FF);
        
        GameTextForPlayer(playerid, "~w~Spectate Camera Mode: ~r~OFF~n~~w~You are now on spectate mouse mode", 5000, 3);
        
	    spectateCameraON[playerid] = false;
	}

	return 1;
}



CMD:spec(playerid, params[])
{
    new targetid;
    if(PlayerInfo[playerid][pAdmin] == 0)
	{
	    return NotAuth(playerid);
	}

    if(PlayerInfo[playerid][pAdmin] <6 && !PlayerInfo[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be on Admin Duty to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		StopSpectate(playerid);
		TeleportToCoords(playerid, oldPlayerPosition[playerid][0], oldPlayerPosition[playerid][1], oldPlayerPosition[playerid][2], oldPlayerPosition[playerid][3], oldPlayerInterior[playerid], oldPlayerVirtualWorld[playerid], true, false);
		SetPlayerHealth(playerid, oldPlayerHealth[playerid]);
		SetScriptArmour(playerid, oldPlayerArmour[playerid]);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	SavePlayerVariables(playerid);

	oldPlayerVirtualWorld[playerid] = GetPlayerVirtualWorld(playerid);
	oldPlayerInterior[playerid] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldPlayerPosition[playerid][0], oldPlayerPosition[playerid][1], oldPlayerPosition[playerid][2]);
	GetPlayerFacingAngle(playerid, oldPlayerPosition[playerid][3]);
	GetPlayerHealth(playerid, oldPlayerHealth[playerid]);
	GetPlayerArmour(playerid, oldPlayerArmour[playerid]);

    StartSpectate(playerid, targetid);
 
	return 1;
}

CMD:speclist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return 1;
	}
	SCM(playerid, SERVER_COLOR, "Current spectate list:");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pSpectating] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_GREY2, "(%i) - %s -> %s (%i)", i, GetRPName(i), GetRPName(PlayerInfo[i][pSpectating]), PlayerInfo[i][pSpectating]);
		}
	}
	return 1;
}

CMD:am(playerid, params[])
{
	return callcmd::amegaphone(playerid, params);
}

CMD:amegaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(am)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Admin Megaphone] %s: %s", GetRPName(playerid), params);
	return 1;
}

CMD:newbinfo(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1227.2714,-1816.7529,16.5938)) return SCM(playerid, -1, "You are not in the newbie spawn ((San Fierro Airport)).");
	new string[3500];
    strcat(string, "\n");
    strcat(string, "- "WHITE"Use "WHITE"/newb"WHITE" to ask your questions or "WHITE"/gethelp"WHITE" if you need more help.\n");
    strcat(string, "- "WHITE"Use "WHITE"/locate"WHITE" to a find a job and "WHITE"/jobhelp"WHITE" for more information about the available jobs.\n");
    strcat(string, "- {FF0000}Do not hack."WHITE" It is pointless as we have an extensive anti-cheat against hacks and admins that monitor the server 24/7.\n");
    strcat(string, "- "WHITE"Use "WHITE"/report"WHITE" if you see any rule-breakers.\n");
    strcat(string, "- "WHITE"Check "WHITE"/rules"WHITE" for a basic list of server rules.\n");
    strcat(string, "- "WHITE"Check "WHITE"/help"WHITE" to see available commands.\n\n");
    strcat(string, "Be sure to check out our website at "WHITE""SERVER_URL""WHITE".\n");
    strcat(string, "You can also join us on Discord at "WHITE""SERVER_DISCORD""WHITE"\n\n");
    strcat(string, ""WHITE"Have fun!");
    ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Welcome to "CXRP""SERVER_NAME"", string, "Close", "");
    return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kick [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}
	Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:permban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}
	Log_Write("log_punishments", "%s (uid: %i) permanent banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was permanent banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /warn [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] || PlayerInfo[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	PlayerInfo[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason, PlayerInfo[targetid][pWarnings]);

	if(PlayerInfo[targetid][pWarnings] < 3)
	{
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s was warned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	    SM(targetid, COLOR_YELLOW, "** %s issued a warning to your account, reason: %s", GetRPName(playerid), reason);
	}
	else
	{
	    PlayerInfo[targetid][pWarnings] = 0;

	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s (3/3 warnings)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

forward ComservEx(playerid);
public ComservEx(playerid)
{
	if(PlayerInfo[playerid][pComserv] >= 1)
	{
		Unfreeze(playerid);
		ClearAnimations(playerid, 1);
		SM(playerid,COLOR_GREY2, "** You have %i more actions to complete before you can finish your service.",PlayerInfo[playerid][pComserv]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET comserv = %i WHERE uid = %i", PlayerInfo[playerid][pComserv], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		PlayerInfo[playerid][pComserv] = 0;
        PlayerInfo[playerid][pComservSkin] = -1;
		SetScriptSkin(playerid, PlayerInfo[playerid][pComservSkin]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET comserv = 0, comservskin = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
        Unfreeze(playerid);
		SCM(playerid, COLOR_SYNTAX,"** Your service is finished.");
	}
	return 1;
}


CMD:comserv(playerid, params[])
{
	new targetid, months, string[128];
	if(!IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_GREY2, "You are not a Law Enforcement Officer.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 9) return SM(playerid, COLOR_GREY2, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 9);
	if(sscanf(params, "ui", targetid, months))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /comserv [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't community service yourself.");
	}

	PlayerInfo[targetid][pComservSkin] = PlayerInfo[targetid][pSkin];

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET comservskin = %i WHERE uid = %i", PlayerInfo[targetid][pComservSkin], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetScriptSkin(targetid, 50);

    PlayerInfo[targetid][pWantedLevel] = 0;

  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[targetid][pComserv] = months;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET comserv = %i WHERE uid = %i", PlayerInfo[targetid][pComserv], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SetPlayerVirtualWorld(targetid, 0);
	SetPlayerInterior(targetid, 0);
	TeleportToCoords(targetid, 1482.4253,-1717.5935,14.0469, 90.0, 0, 0, true, false);
	SetPlayerFacingAngle(targetid, 9.8095);
	GameTextForPlayer(targetid, "~w~Good Luck~n~~r~Cleaning!", 5000, 3);
    format(string, sizeof(string), "** Breaking News: %s %s put %s into Community Service for %i months.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), months);
	SAM(COLOR_LIGHTGREEN, string);
	SM(targetid, COLOR_AQUA, "** You have been put to Community Service for %i months by %s.", months, GetRPName(playerid));
	return 1;
}

CMD:resetcomserv(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /resetcomserv [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	PlayerInfo[targetid][pComserv] = 0;
	SetPlayerSkin(targetid, PlayerInfo[targetid][pComservSkin]);
	PlayerInfo[playerid][pComservSkin] = -1;
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has been reset community service.", GetRPName(targetid));
	return 1;
}

CMD:clean(playerid, params[]) {
	if (PlayerInfo[playerid][pComserv] < 1) {
		return SCM(playerid, COLOR_GREY2, "** You are not performing an community service.");
	}
	if(gettime() - PlayerInfo[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - PlayerInfo[playerid][pLastClean]));
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]))
	    {
	    	PlayerInfo[playerid][pComserv] -= 1;
			GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
			Freeze(playerid);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("ComservEx", 10000, false, "i", playerid);
			PlayerInfo[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	SCM(playerid, COLOR_GREY2, "You are not in range of cleaning areas.");
	return 1;
}

CMD:checkinv(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkinv [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /slap [playerid] [height (optional)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && targetid != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);
	TeleportToCoords(targetid, x, y, z + height, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), false, false);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was slapped by %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:cage(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cage [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && targetid != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}
	if(CagePlayer[targetid][0] == 0)
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(targetid, X, Y, Z);
		CagePlayer[targetid][0] = 1;
		CagePlayer[targetid][1] = CreateDynamicObject(985, X, Y+3, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid));
		CagePlayer[targetid][2] = CreateDynamicObject(985, X+3, Y, Z, 0.0, 0.0, 90.0, GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid));
		CagePlayer[targetid][3] = CreateDynamicObject(985, X-3, Y, Z, 0.0, 0.0, 270.0, GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid));
		CagePlayer[targetid][4] = CreateDynamicObject(985, X, Y-3, Z, 0.0, 0.0, 180.0, GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid));
		PlayerPlaySound(targetid, 1137, X, Y, Z);
		SM(playerid, COLOR_WHITE, "You've just caged %s", GetRPName(targetid));
	}
	else
	{
		CagePlayer[targetid][0] = 0;
		DestroyDynamicObject(CagePlayer[targetid][1]);
		DestroyDynamicObject(CagePlayer[targetid][2]);
		DestroyDynamicObject(CagePlayer[targetid][3]);
		DestroyDynamicObject(CagePlayer[targetid][4]);
		SM(playerid, COLOR_WHITE, "You've just un-caged %s", GetRPName(targetid));
	}
	return 1;
}

CMD:belt(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /belt [playerid] [height (optional)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be belted.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && targetid != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);
	TeleportToCoords(targetid, x, y, z - height, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was god-belted by %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}


CMD:charity(playerid, params[])
{
	new option[10], param[64];

	if(PlayerInfo[playerid][pLevel] < 5)
	{
		return SCM(playerid, COLOR_WHITE, "You cannot donate to charity if you're under level 5. /levelup to level up.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /charity [info | health | armor]");
	}
	if(!strcmp(option, "info", true))
	{
	    SCM(playerid, SERVER_COLOR, "Charity:");
		SCM(playerid, COLOR_WHITE, "If you have at least $1,000 on hand you can donate to charity.");
		SCM(playerid, COLOR_WHITE, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SM(playerid, COLOR_AQUA, "** $%s has been donated to charity so far.", AddCommas(gCharity));
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(PlayerInfo[playerid][pCash] < 100000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $100,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 100000;
		gCharityHealth = 1;
		AddToTaxVault(100000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $100,000 to heal everyone to 150 health!", GetRPName(playerid));
		GivePlayerCash(playerid, -100000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(PlayerInfo[playerid][pCash] < 120000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $120,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 120000;
		gCharityArmor = 1;
		AddToTaxVault(120000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $120,000 to give full armor to everyone!", GetRPName(playerid));
		GivePlayerCash(playerid, -120000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > PlayerInfo[playerid][pCash])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
		if(amount > 50000)
		{
		    SMA(COLOR_ROYALBLUE, "Charity: Thank you %s your generous donation of $%s to the charity!.", GetRPName(playerid), AddCommas(amount));
		}
		else
		{
		    SM(playerid, COLOR_ROYALBLUE, "Charity: Thank you for your generous donation of $%s.", AddCommas(amount));
			SCM(playerid, COLOR_WHITE, "If you donate more than $50,000 then it will be announced to the whole server and others will see the message!");
		}
	}

	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SCM(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplayurl [link]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, params);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of a custom URL.", GetRPName(playerid));
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

    foreach(new i: Player)
	{
	    if(!PlayerInfo[i][pToggleMusic])
	    {
		    StopAudioStreamForPlayer(i);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has stopped all active audio streams.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dm [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	PlayerInfo[targetid][pDMWarnings]++;

	if(PlayerInfo[targetid][pDMWarnings] < 5)
	{
	    new minutes = PlayerInfo[targetid][pDMWarnings] * 10;

	    PlayerInfo[targetid][pJailType] = 2;
    	PlayerInfo[targetid][pJailTime] = PlayerInfo[targetid][pDMWarnings] * 300;
    	PlayerInfo[targetid][pWeaponRestricted] = PlayerInfo[targetid][pDMWarnings] * 2;

		SetPlayerInJail(targetid);

		if(PlayerInfo[playerid][pAdmin] == 1)
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by an Admin (%i/5 Warnings)", GetRPName(targetid), minutes, PlayerInfo[targetid][pDMWarnings]);
			GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}
		else
		{
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by %s (%i/5 Warnings)", GetRPName(targetid), minutes, GetRPName(playerid), PlayerInfo[targetid][pDMWarnings]);
			GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = \"%e\", prisonreason = 'DM' WHERE uid = %i", PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SM(targetid, COLOR_WHITE, "** You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SM(targetid, COLOR_WHITE, "** Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i) for DM (5/5 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

		if(PlayerInfo[playerid][pAdmin] == 1)
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by an admin for deathmatching (5/5 warnings)", GetRPName(targetid));
		}
		else
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s for deathmatching (5/5 warnings)", GetRPName(targetid), GetRPName(playerid));
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerInfo[targetid][pJailType], PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:setwepres(playerid, params[])
{
	new targetid, amount;
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
    if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setwepres [playerid] [amount (Use '0' to remove)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_WHITE, "You need to be admin on-duty in order to use this command, /aduty.");
	}
	if(amount > 13 && amount < 0)
	{
	    return SCM(playerid, COLOR_GREY, "You can't set more than 12 hours or less than 0 hours.");
	}
	PlayerInfo[targetid][pWeaponRestricted] = amount;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s's Weapon Restriction were set to %i hours by %s", GetRPName(targetid), PlayerInfo[targetid][pWeaponRestricted], GetRPName(playerid));
	Log_Write("log_punishments", "%s (uid: %i) has set %i hours of Weapon Restrictions for %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[targetid][pWeaponRestricted], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	if(amount == 0)
	{
       	SM(targetid, COLOR_WHITE, "Your Weapon Restriction has been cleared by an Admin.");

	}
	else
	{
		SM(targetid, COLOR_WHITE, "You now have %i hours of Weapon Restriction set by an Admin.", PlayerInfo[targetid][pWeaponRestricted]);
	}
	return 1;
}

CMD:wepres(playerid, params[])
{
	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		SM(playerid, COLOR_WHITE, "Currently, you have %i hours of Weapon Restriction", PlayerInfo[playerid][pWeaponRestricted]);
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "You do not have any Weapon Restriction set by any Admin.");
	}
	return 1;
}

CMD:god(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(!PlayerInfo[playerid][pAdminDuty])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command as an off duty admin.");
		}
		if(God[playerid] == 1)
	    {
	        God[playerid] = 0;
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 100.0);
			SCM(playerid, COLOR_WHITE, "You've successfully turned "RED"off"WHITE" the god mode.");
		}
		else
		{
		    God[playerid] = 1;
	    	SetPlayerHealth(playerid, 100000.0);
        	SetPlayerArmour(playerid, 100000.0);
			SCM(playerid, COLOR_WHITE, "You've successfully turned "GREEN"on"WHITE" the god mode.");
		}
    }
	return 1;
}
CMD:aduty(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] <= 1)
	{
	    return NotAuth(playerid);
	}

	if(!PlayerInfo[playerid][pAdminDuty])
	{
	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s is now on admin duty.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** You are now on admin duty. Your stats will not be saved until you're off duty.");

        PlayerInfo[playerid][pAdminDuty] = 1;

        if(strcmp(PlayerInfo[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}

	    PlayerInfo[playerid][pDuty] = 0;
	    PlayerInfo[playerid][pTogglePhone] = 1;

		AdminSkin[playerid] = PlayerInfo[playerid][pSkin];
		SetPlayerSkin(playerid, 217);
		NameTagEnabled[playerid] = false;
	}
	else
	{
		God[playerid] = 0;
		NameTagEnabled[playerid] = true;
	    //TogglePlayerSpectating(playerid, 1);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	}

	return 1;
}

CMD:setadminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME], targetid;
	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pAP])
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setadminname [playerid] [name ('none' to reset)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(PlayerInfo[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not an admin.");
	}
	strcpy(PlayerInfo[targetid][pAdminName], name, MAX_PLAYER_NAME);
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, name);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = \"%e\" WHERE uid = %i", name, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: Admin %s has changed %s's administrator name to %s.", GetRPName(playerid), PlayerInfo[targetid][pUsername], name);

	return 1;
}

CMD:serial(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /serial [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	SM(playerid, COLOR_GREY2, "__ %s[%i]'s Client Serial:__", GetRPName(targetid), targetid);
	SM(playerid, COLOR_WHITE, "%s - Platform: {00FF00}%s", ReturnGPCI(targetid), (IsPlayerMobile(targetid)) ? ("Mobile") : ("PC"));
	return 1;
}

ReturnGPCI(playerid)
{
    new Serial[41];
 
    gpci(playerid, Serial, sizeof(Serial));
    return Serial;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getip [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

forward OnOfflineSerial(playerid, name[]);
public OnOfflineSerial(playerid, name[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
		new serial[41];

	    cache_get_value_name(0, "serial", serial, 41);

		SM(playerid, COLOR_GREY2, "__ %s's Client Serial:__", name);
		SM(playerid, COLOR_WHITE, "%s", serial);
	}
}

CMD:oserial(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oserial [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, serial FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnOfflineSerial", "is", playerid, name);
	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = \"%s\" ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, \"%s\") FROM users WHERE username = \"%e\"", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}
CMD:prisoners(playerid, params[])
{
	return callcmd::listjailed(playerid, params);
}

CMD:listjailed(playerid, params[])
{
	new type[14];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}

	SCM(playerid, SERVER_COLOR, "Jailed Players:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJailType] > 0)
	    {
	        switch(PlayerInfo[i][pJailType])
	        {
	            case 1: type = "OOC";
				case 2: type = "OOC";
				case 3: type = "IC";
			}

			SM(playerid, COLOR_GREY1, "%s: (%i) %s - By: %s - %i secs, reason: %s.", type, i, GetRPName(i), PlayerInfo[i][pPrisonedBy], PlayerInfo[i][pJailTime], PlayerInfo[i][pPrisonReason]);
		}
	}

	return 1;
}

CMD:inmates(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	SCM(playerid, SERVER_COLOR, "Current inmates:");
    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJailType] == 3)
	    {
			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Time: %i seconds left.", i, GetRPName(i), PlayerInfo[i][pJailTime]);
		}
	}
	return 1;
}

CMD:prisoner(playerid, params[])
{
	return callcmd::prisoninfo(playerid, params);
}
CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prisoninfo [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pJailType] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in OOC prison.");
	}

	SM(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetRPName(targetid), PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pPrisonReason], PlayerInfo[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;
	new string[64], playerIP[32];
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /relog [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	ClearChat(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to relog.", GetRPName(playerid), GetRPName(targetid));
	SCM(targetid, SERVER_COLOR, "NOTE:"WHITE" You are being reconnected to the server - please wait...");
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);
	PlayerInfo[targetid][pLogged] = 0;
	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
	Reconnecting[targetid] = true;
 	format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
  	format(string, sizeof(string), "banip %s", playerIP);
   	SendRconCommand(string);
	return 1;
}

CMD:sobiet(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sobiet [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i] %s playing with s0biet. (AI: %i, MD: %i, RD: %i)", GetPlayerNameEx(targetid), targetid, (GetPVarInt(playerid, "Sobiet") == 1) ? ("{FFFF00}is") : ("{00FF00}is not"), GetPVarInt(playerid, "AI"), GetPVarInt(playerid, "MD"), GetPVarInt(playerid, "RD"));
	return 1;
}

CMD:aimlist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	new count=0;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && IsPlayerHaveAutoaim(i))
		{
			count++;
		}
	}

	if(count==0)
	{
		return SCM(playerid, COLOR_SYNTAX, "There is currently no player using Android Aimlock.");
	}
	SCM(playerid, COLOR_ORANGE, "__ Current list of players using Android Aimlock __");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && IsPlayerHaveAutoaim(i))
		{
			SM(playerid, COLOR_WHITE, "[%i] - %s", i, GetPlayerNameEx(i));
		}
	}
	return 1;
}

CMD:checkaim(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkaim [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i]'s Android Aimlock is currently turned %s", GetPlayerNameEx(targetid), targetid, (IsPlayerHaveAutoaim(targetid)) ? ("{FF0000}on") : ("{00FF00}off"));
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setint [playerid] [int]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid interior. Valid interiors range from 0 to 255.");
	}

	SetPlayerInterior(targetid, interiorid);
	SM(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setvw [playerid] [vw]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SM(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setskin [playerid] [skinid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}

	PlayerInfo[targetid][pSkin] = skinid;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", skinid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetScriptSkin(targetid, skinid);
	SM(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetRPName(targetid), skinid);
	return 1;
}

CMD:reviveall(playerid, params[])
{
	new reason[64];

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[256]", reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /reviveall [reason]");
	}
	foreach(new i : Player)
	{
		if(!IsPlayerNPC(i) && !IsPlayerConnected(i) && PlayerInfo[i][pInjured])
		{
			PlayerInfo[i][pInjured] = 0;
			
			Unfreeze(i);
			
			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);
			UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

			PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;

			if(PlayerInfo[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
				SM(PlayerInfo[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(i));
				PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

			SCM(i, COLOR_YELLOW, "You have been revived by an admin!");
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived everyone. Reason: %s", GetRPName(playerid), reason);
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;
	new reason[64];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[256]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /revive [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}

	PlayerInfo[targetid][pInjured] = 0;
	
    Unfreeze(targetid);
    
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	if(PlayerInfo[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(PlayerInfo[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SCM(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived %s. Reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	return 1;
}

CMD:freezenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, false);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, true);			    
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}

CMD:revivenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reviverange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius) && PlayerInfo[i][pInjured])
		{
			PlayerInfo[i][pInjured] = 0;
			if(PlayerInfo[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
			    SM(PlayerInfo[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(i));
			    PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

            Unfreeze(i);
            
			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);
			UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

		    SendClientMessage(i, COLOR_WHITE, "An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heject [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pHospital])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not in hospital.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s ejected %s from the hospital.", GetRPName(playerid), GetRPName(targetid));

	PlayerInfo[targetid][pHospitalTime] = 1;
	SCM(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

CMD:goto(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /goto [playerid/location]");
	    SCM(playerid, COLOR_WHITE, "Locations: AI / AdminIsland, OOC, LS, SF, LV, Bank, Market, Grove, Idlewood, DMV");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, Paintball, Airport, Casino, Hospital, VIP, , Unity, Jefferson");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!strcmp(params, "adminisland", true))
    {
		TeleportToCoords(playerid, -4544.1538,-2170.2119,53.0198,328.3839, 0, 555, true, false);
        SCM(playerid, COLOR_GREY2, "Teleported to Admin Island.");
        SAM(COLOR_RED, "%s has teleported to Admin Island.", GetRPName(playerid));
    }
    if(!strcmp(params, "ai", true))
    {
		TeleportToCoords(playerid, -4544.1538,-2170.2119,53.0198,328.3839, 0, 555, true, false);
        SCM(playerid, COLOR_GREY2, "Teleported to Admin Island.");
        SAM(COLOR_RED, "%s has teleported to Admin Island.", GetRPName(playerid));
    }
    if(!strcmp(params, "ooc", true))
    {
		TeleportToCoords(playerid, 1835.6080,-1722.1687,5202.5859,271.1133, 15, 3, true);
        SCM(playerid, COLOR_GREY2, "Teleported to OOC Prison.");
        SAM(COLOR_RED, "%s has teleported to OOC Prison.", GetRPName(playerid));
    }
	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Los Santos.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Los Santos.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to San Fierro.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Las Venturas.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Groove Street.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Idlewood.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Unity Station.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Jefferson Motel.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Market.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to LS Airport.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to LS Bank.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
		SAM(COLOR_RED, "Teleport: %s Has Teleported to Grotti Dealership.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
    }
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 2489.2214,-1943.3082,13.5144, 180.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to DMV.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to DMV.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to Casino.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Casino.");
	}
	else if(!strcmp(params, "hospital", true))
    {
        TeleportToCoords(playerid, 1179.5540,-1323.4713,14.1752, 270.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to Allsaints.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Allsaints.");
	}
	else if(!strcmp(params, "mall", true))
    {
        TeleportToCoords(playerid, 1129.6364,-1425.1180,15.7969, 357.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to Mall.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to Mall.");
	}
	else if(!strcmp(params, "paintball", true))
    {
        TeleportToCoords(playerid, 1286.494262, -1349.717285, 13.569549, 315.0000, 0, 0);
        SAM(COLOR_RED, "Teleport: %s has teleported to Paintball.", GetRPName(playerid));
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Paintball.");
	}
	else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1290.095581,-1652.491821,13.546875,90.27, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to VIP Lounge.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to VIP LOUNGE.");
	}
	else if(!strcmp(params, "test", true))
    {
        TeleportToCoords(playerid, 1219.29980469, -1342.50000000, 784.02398682, 0, 0, 0);
        SAM(COLOR_RED, "Teleport: %s Has Teleported to interior.", GetRPName(playerid));
        SCM(playerid, COLOR_GREY2, "Teleported to interior.");
	}
	else
	{
		if(!IsPlayerSpawned(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(playerid, targetid);
		SM(playerid, COLOR_GREY2, "Teleported to %s's position.", GetRPName(targetid));
		SAM(COLOR_RED, "%s has teleported to %s's position.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethere [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}

	TeleportToPlayer(targetid, playerid);
	SM(playerid, COLOR_GREY2, "Teleported %s to your position.", GetRPName(targetid));
    SAM(COLOR_RED, "%s has been teleported to %s's position by using [/gethere]", GetRPName(targetid), GetRPName(playerid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SM(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SM(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:entercar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
		return NotAuth(playerid);

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	new
		carid,
		seatid;

	if(sscanf(params, "ii", carid, seatid))
		return SendClientMessage(playerid, COLOR_SYNTAX, "Usage: /entercar [carid] [seatid]");

	if(carid == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, COLOR_GREY, "That vehicle is invalid.");

	if(seatid > 3 || seatid < 0)
		return SendClientMessage(playerid, COLOR_GREY, "Seats must be between 0 and 3. (0 is driver)");

	PutPlayerInVehicle(playerid, carid, seatid);
	return 1;
}


CMD:gotoco(playerid, params[]) { return callcmd::gotocoords(playerid, params); }
CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:a, interiorid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocoords [x] [y] [z] [int (optional)]");
	}

	TeleportToCoords(playerid, x, y, z, a, interiorid, GetPlayerVirtualWorld(playerid), true, false);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new targetid;
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /jetpack [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    PlayerInfo[targetid][pJetpack] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(targetid, "~g~Jetpack", 3000, 3);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a jetpack to %s.", GetRPName(playerid), GetRPName(targetid));
	switch(random(4))
	{
	    case 0: SCM(targetid, COLOR_WHITE, "The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SCM(targetid, COLOR_WHITE, "You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SCM(targetid, COLOR_WHITE, "You probably don't need this anyway. All you hackers seem to do is airbreak around the map.");
	}
	return 1;
}

CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Locations: Player, Vehicle, LS, SF, LV, Bank, Market / Mall");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, Paintball, DMV, Airport, Casino, Hospital, VIP");
		return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is in jail so you can't teleport them.");
	}
	if(PlayerInfo[playerid][pAdmin] < 2 && isnull(PlayerInfo[targetid][pHelpRequest]) && PlayerInfo[playerid][pAcceptedHelp] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Los Santos.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1755.5676, 957.1321, 24.8828, 182.8251, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to San Fierro.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Las Venturas.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1457.2012,-1010.2146,26.8438, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Bank.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 1129.8845,-1429.5349,15.7969, 0.0, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Market.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Market.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Market.", GetRPName(playerid));
    }
    else if(!strcmp(option, "mall", true))
    {
		TeleportToCoords(targetid, 1129.8845,-1429.5349,15.7969, 0.0, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Mall.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Mall.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Mall.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 544.6011,-1289.2573,17.2422, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Dealership.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Vehicle car dealership.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Vehicle car dealership.", GetRPName(playerid));
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 1310.1492, -1366.7960, 13.5064, 315.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Paintball", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Paintball.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Paintball.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 2075.5127,-2092.9036,13.5524, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to DMV.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetRPName(playerid));
    }
    else if(!strcmp(option, "airport", true))
    {
        TeleportToCoords(targetid, 1950.0154,-2351.0227,13.5469, 327.3914, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Airport.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Airport.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Airport.", GetRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, -2419.1895, 334.0252, 35.1787, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Casino.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetRPName(playerid));
    }
	else if(!strcmp(option, "hopspital", true))
    {
        TeleportToCoords(targetid, 1181.5216,-1323.4808,13.5833, 270.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Hospital.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Hospital.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Hospital.", GetRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1213.6110,-1747.4381,13.5946, 357.3727, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to VIP Lounge.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to VIP Lounge.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to VIP Lounge.", GetRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is disconnected.");
		}
		if(!IsPlayerSpawned(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(targetid, sendtargetid);
        SAM(COLOR_RED, "%s has sent %s to player ID (%i).", GetRPName(playerid), GetRPName(targetid), sendtargetid);
		SM(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetRPName(targetid), GetRPName(sendtargetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetRPName(playerid), GetRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);
        SAM(COLOR_RED, "%s has sent %s to vehicle ID (%i).", GetRPName(playerid), GetRPName(targetid), vehicleid);
		SM(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetRPName(targetid), vehicleid);
		SM(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetRPName(playerid), vehicleid);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Locations: Player, Vehicle, LS, SF, LV, Bank, Market / Mall");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, Paintball, DMV, Airport, Casino, Hospital, VIP");
	}
	return 1;
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:listen(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pListen])
	{
		PlayerInfo[playerid][pListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		PlayerInfo[playerid][pListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:listenpm(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pPMListen])
	{
		PlayerInfo[playerid][pPMListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all PM's and whisper's chats.");
	}
	else
	{
		PlayerInfo[playerid][pPMListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to PM's and whisper's chats.");
	}

	return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rwarn [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	PlayerInfo[targetid][pReportWarns]++;

	SM(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetRPName(playerid), reason, PlayerInfo[targetid][pReportWarns]);
	SCM(targetid, COLOR_WHITE, "Please check /reporttips before you report again to avoid getting muted or warned!");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was given a report warning by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	
	if(PlayerInfo[targetid][pReportWarns] >= 3)
	{
		PlayerInfo[targetid][pReportWarns] = 0;
	    PlayerInfo[targetid][pReportMuted] += 12;
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from reports for %s playing hours.", PlayerInfo[playerid][pReportMuted]);
	}

	ShowPlayerDialog(targetid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	SavePlayerVariables(targetid);
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nmute [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pNewbieMuted])
	{
	    PlayerInfo[targetid][pNewbieMuted] = 1;

	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was muted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from newbie chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pNewbieMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from newbie chat by %s.", GetRPName(playerid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i WHERE uid = %d", PlayerInfo[targetid][pNewbieMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);	
	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hmute [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pHelpMuted])
	{
	    PlayerInfo[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from help requests by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from help requests by %s.", GetRPName(playerid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helpmuted = %i WHERE uid = %d", PlayerInfo[targetid][pHelpMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /admute [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pAdMuted])
	{
	    PlayerInfo[targetid][pAdMuted] = 1;

	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was muted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from advertisements by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from advertisements by %s.", GetRPName(playerid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET admuted = %i WHERE uid = %d", PlayerInfo[targetid][pAdMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gmute [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pGlobalMuted])
	{
	    PlayerInfo[targetid][pGlobalMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from global chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pGlobalMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from global chat by %s.", GetRPName(playerid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET globalmuted = %i WHERE uid = %d", PlayerInfo[targetid][pGlobalMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rmute [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pReportMuted])
	{
	    PlayerInfo[targetid][pReportMuted] = 99999;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from submitting reports by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pReportMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from submitting reports by %s.", GetRPName(playerid));
	}
	SCM(targetid, COLOR_WHITE, "Please check /reporttips before you report again to avoid these kinds of report mutes or warnings");
	ShowPlayerDialog(targetid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reportmuted = %i WHERE uid = %d", PlayerInfo[targetid][pReportMuted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:freeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freeze [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	Freeze(targetid);
	
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was frozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreeze [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(PlayerInfo[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		PlayerInfo[targetid][pTazedTime] = 0;
	}

    PlayerInfo[targetid][pTied] = 0;
	Unfreeze(targetid);
	
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was unfrozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listguns [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Weapons:", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
	    {
			if(!PlayerHasWeapon(targetid, weapon)) {
		        SM(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SM(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /disarm [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	ResetPlayerWeaponsEx(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has disarmed %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nrn [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pLevel] > 3 && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is level 3 or above and doesn't need a free namechange.");
	}

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:jail(playerid, params[])
{
	return callcmd::prison(playerid, params);
}

CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prison [playerid] [minutes] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

	if(Maskara[targetid])
	{
    	Maskara[targetid] = 0;
		MaskaraID[targetid] = INVALID_PLAYER_ID;
		SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		if(IsPlayerAttachedObjectSlotUsed(targetid, 9)) RemovePlayerAttachedObject(targetid, 9);
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = \"%e\", prisonreason = \"%e\" WHERE uid = %i", GetPlayerNameEx(playerid), reason, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(PlayerInfo[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /release [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not jailed.");
	}

	PlayerInfo[targetid][pJailTime] = 1;
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fine [playerid] [amount] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pfine [playerid] [percent] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The percentage value must be between 1 and 100.");
	}

	new amount = ((PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sethp [playerid] [amount]");
	    //SCM(playerid, COLOR_WHITE, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(God[targetid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in god mode, you cannot set their HP now.");
	}
	if(amount == 0.0)
	{
		SetPlayerHealth(targetid, 0.0);
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	//SMA(COLOR_RED, "%s's health set to %.1f by %s", GetRPName(targetid), amount, GetRPName(playerid));
	return 1;
}
CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmor [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(God[targetid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in god mode, you cannot set their armour now.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
//	SAM(COLOR_RED, "%s's armor set to %.1f by %s", GetRPName(targetid), amount, GetRPName(playerid));
	return 1;
}
CMD:refillcars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i))
	    {
	        vehicleFuel[i] = 100;
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s refilled all vehicles to maximum fuel.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /refilldrug [seeds | Crack | ephedrine]");
	    SCM(playerid, COLOR_WHITE, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the seeds in the drug den.", GetRPName(playerid));
	}
	else if(!strcmp(params, "crack", true))
	{
	    gCrackStock = 500;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the Crack in the crack house.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the ephedrine in the drug den.", GetRPName(playerid));
	}

	return 1;
}

CMD:stockbiz(playerid, params[])
{
	new type;
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(GetPlayerVirtualWorld(playerid) < 0 && GetPlayerInterior(playerid) != 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command now. You can't be inside an interior.");
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /restockbiz [type]");
	    SCM(playerid, COLOR_SYNTAX, "List of types: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	type--;
 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			if(BusinessInfo[i][bType] == type && !strcmp(GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), GetPlayerZoneName(playerid), true))
			BusinessInfo[i][bProducts] += 500;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[i][bProducts], BusinessInfo[i][bID]);
		    mysql_tquery(connectionID, queryBuffer);
			ReloadBusiness(i);
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has restocked all businesses in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	return 1;
}

CMD:purgeme(playerid, params[])
{
	if(!enabledpurge)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The purge is disabled at the moment.");
	}
	GiveWeapon(playerid, 5);
	GiveWeapon(playerid, 22);
	GiveWeapon(playerid, 30);
	SCM(playerid, COLOR_SYNTAX,""SERVER_BOT" given you 9mm, Baseball bat, and AK-47 for the purge.");
	return 1;
}

CMD:togpurge(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledpurge)
	{
	    enabledpurge = 1;
	    SAM(SERVER_COLOR, "(( Administrator %s enabled the Purge. ))", GetRPName(playerid));
	    SendMessageToAll(COLOR_GREEN, "Governor %s has pressed the button and the purge has just begin.", GetRPName(playerid));
	    SendMessageToAll(COLOR_RED, "Governor %s: This is your governor speaking, the purge has just start, stay in your homes.", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: Do everything you want just to survive this time, We want to reduce population!", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: OMASHALA! May God be with you in this fight!", GetRPName(playerid));
	}
	else
	{
	    enabledpurge = 0;
	    SAM(SERVER_COLOR, "(( Administrator %s disabled the Purge. ))", GetRPName(playerid));
	    SendMessageToAll(COLOR_GREEN, "Governor %s has stopped the purge.", GetRPName(playerid));
	    SendMessageToAll(COLOR_RED, "Governor %s: This is your governor speaking, the purge has come to its end.", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: Be back to your daily lives and we congratulate for those who survived!", GetRPName(playerid));
	}
	return 1;
}

CMD:togooc(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Out of Character channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Out of Character channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togn(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the newbie channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the newbie channel. ))", GetRPName(playerid));
	}
	return 1;
}
CMD:togvip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledVip)
	{
	    enabledVip = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the vip channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledVip = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the vip channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togglobal(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the global channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the global channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togadmin(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}

	if(!enabledAdmin)
	{
	    enabledAdmin = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the admin channel.", GetRPName(playerid));
	}
	else
	{
	    enabledAdmin = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the admin channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the report channel.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the report channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listpvehs [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Vehicles:", GetRPName(targetid));

    for(new i = 1; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(targetid, i))
        {
            SM(playerid, COLOR_GREY2, "ID: %i | Model: %s | Location: %s", i, GetVehicleName(i), GetVehicleZoneName(i));
		}
	}

	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or not owned by any player.");
	}

	SM(playerid, COLOR_WHITE, "** You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}
	ResetVehicleObjects(vehicleid);
	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	PutPlayerInVehicle(playerid, vehicleid, 0);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s spawned a %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_WHITE, "** %s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, donator, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "iiii", vehicleid, gangid, type, donator))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /savevehicle [vehicleid] [gangid (-1 = none)] [faction type] [donator rank (0 = none)]");
	    SCM(playerid, COLOR_GREY2, "Faction types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 9))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(donator > 3)
	{
	    return SCM(playerid, COLOR_GREY, "Invalid donator rank.");
	}
    SM(playerid, COLOR_WHITE, "** %s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, donator) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i)", GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, donator);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:tab(playerid) {
    new string[MAX_PLAYER_NAME * 100], title[80], count = 0, name[MAX_PLAYER_NAME+1];
    strcat(string, "ID\tName\tLevel\tPing");
    count++;
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, playerid, name, GetPlayerScore(playerid), GetPlayerPing(playerid));
    foreach(Player, i)
    {
        if(IsPlayerConnected(i) && i != playerid)
        {
            count++;
            GetPlayerName(i, name, sizeof(name));
            format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, i, name, GetPlayerScore(i), GetPlayerPing(i));
        }
    }
    format(title, sizeof(title), " CXRP |  Players Online: %d", count);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Closed", "");
    return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spawn, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SCM(playerid, COLOR_WHITE, "Available options: Fuel, Gang, Faction, Donator, Job, VIP, Rank");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] > 0 && GetPlayerInterior(playerid) > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't set the spawn of a faction vehicle indoors.");
	    }

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SM(playerid, COLOR_AQUA, "** You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = \"%e\" WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleNumberPlate(vehicleid, param);
		ResyncVehicle(vehicleid);
		SM(playerid, COLOR_AQUA, "** You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SCM(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SM(playerid, COLOR_AQUA, "** You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SM(playerid, COLOR_AQUA, "** You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
		SCM(playerid, COLOR_WHITE, "This command has been disabled for few days");
	}
	else if(!strcmp(option, "neon21566", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [neon] [color]");
		    SCM(playerid, COLOR_GREY2, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    // SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			// SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			// SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			// SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			// SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			// SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			// SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SCM(playerid, COLOR_SYNTAX, "Invalid color.");
		}

		SM(playerid, COLOR_AQUA, "** You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SM(playerid, COLOR_AQUA, "** You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "fuel", true))
	{
	    new amount;

		if(sscanf(param, "i", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [fuel] [amount]");
		}
		if(!(0 <= amount <= 100))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 0.0 to 100.0.");
		}

        vehicleFuel[vehicleid] = amount;

		SM(playerid, COLOR_AQUA, "** You have set the fuel of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SM(playerid, COLOR_AQUA, "** You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SM(playerid, COLOR_AQUA, "** You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "donator", true))
	{
	    new rank;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", rank))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [faction] [donator rank]");
	        SCM(playerid, COLOR_GREY2, "List of donator ranks: (0) None (1) Silver (2) Gold (3) Platinum");
	        return 1;
		}
		if(rank > 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

		VehicleInfo[vehicleid][vDonator] = rank;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET donator = %i WHERE id = %i", VehicleInfo[vehicleid][vDonator], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(rank == 0)
		    SM(playerid, COLOR_AQUA, "** You've reset the donator rank %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the donator rank of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetDonatorRank(rank), rank);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] job [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Pizza Man (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Meat Packager (7) Taxi Driver (8) Drug Dealer (9) Lawyer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (10) Detective (11) Mechanic");
			return 1;
		}
		if(!(-1 <= value <= 11))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SM(playerid, COLOR_WHITE, "** You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SM(playerid, COLOR_WHITE, "** You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /aclearwanted [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared %s's crimes and wanted level.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedm [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pDMWarnings] && !PlayerInfo[targetid][pWeaponRestricted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been punished for DM recently.");
	}

	PlayerInfo[targetid][pDMWarnings]--;
	PlayerInfo[targetid][pWeaponRestricted] = 0;

	if(PlayerInfo[targetid][pJailType] == 2)
	{
	    PlayerInfo[targetid][pJailType] = 0;
		PlayerInfo[targetid][pJailTime] = 0;

		TeleportToCoords(targetid, -1755.5676, 957.1321, 24.8828, 182.8251, 0, 0, true, false);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SM(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reversed %s's DM punishment.", GetRPName(playerid), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SCM(playerid, COLOR_SYNTAX, "Admin vehicle destroyed.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(adminVehicle{i})
	    {
	        DestroyVehicle(i);
	        adminVehicle{i} = false;
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s destroyed all admin spawned vehicles.", GetRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [job | faction | nearby | all]");
	}
	if(!strcmp(option, "job", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if(VehicleInfo[i][vJob] != JOB_NONE)
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied job vehicles.", GetRPName(playerid));
		Log_Write("log_admin", "%s (uid: %i) has respawned all unoccupied job vehicles", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of options: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	        return 1;
		}
		if(!(1 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction type.");
		}

		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied {F7A763}%s{FF6347} vehicles.", GetRPName(playerid), factionTypes[type]);
		Log_Write("log_admin", "%s (uid: %i) has respawned all unoccupied %s vehicles", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
		Log_Write("log_admin", "%s (uid: %i) has respawned all unoccupied vehicles in %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles.", GetRPName(playerid));
		Log_Write("log_admin", "%s (uid: %i) has respawned all unoccupied vehicles", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}

	return 1;
}

CMD:myangle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return 1;
    new myString[128], Float:a;
    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);
    return 1;
}

CMD:announce(playerid, params[])
{
	new text[128];
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /announce [text]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(ANN[2], text);
		for(new f = 0; f < 3; f ++)
		{
			TextDrawShowForPlayer(i, ANN[f]);
		}

		SetTimerEx("ANNHIDE", 10000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid style.");
	}
	if(style == 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	VehicleTire[GetPlayerVehicleID(playerid)][0]=0;
	VehicleTire[GetPlayerVehicleID(playerid)][1]=0;
	VehicleTire[GetPlayerVehicleID(playerid)][2]=0;
	VehicleTire[GetPlayerVehicleID(playerid)][3]=0;
	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}

CMD:cleanmyscreen(playerid, params[])
{
	ClearChat(playerid);
	return 1;
}

CMD:clearchat(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}

	foreach(new i : Player)
	{
	    ClearAllChat(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared the chat box.", GetRPName(playerid));
	return 1;
}

CMD:healnear(playerid, params[]) { return callcmd::healrange(playerid, params); }
CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);

			    if(GetArmor(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:lastdmg(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return NotAuth(playerid);
	}
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastdmg [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified!");
	}
	if(Damaged[targetid] == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "That specified player hasn't been shot since they logged in");
	}
	SM(playerid, COLOR_GREY, "_____ %s's Last Damage _____", GetRPName(targetid));
	SM(playerid, COLOR_GREY, "Damaged by: {FFFFFF}%s.", DamageBy[targetid]);
	SM(playerid, COLOR_GREY, "Weapon: {FFFFFF}%s %s- Amount: {FFFFFF}%.1f.", GetWeaponNameEx(DamageWep[targetid]), GREY, DamageAmount[targetid]);
	SM(playerid, COLOR_GREY, "Bone: {FFFFFF}%s:", GetBoneName(DamageBone[targetid]));
	SM(playerid, COLOR_GREY, "Time & Date: {FFFFFF}%s", DamageTime[targetid]);
	SCM(playerid, COLOR_GREY, " ");
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kills [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 10", PlayerInfo[targetid][pID], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	gLastAd = 0;
	SCM(playerid, COLOR_SYNTAX, "Advertisement timer reset.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setname [playerid] [name]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
 	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pAdminDuty] && strcmp(PlayerInfo[targetid][pAdminName], "None", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\"", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:blowup(playerid, params[]) return callcmd::explode(playerid, params);
CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /explode [playerid] [damage(amount)]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 0, 20.0);
    SM(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	SetTimerEx("CountdownAll", 1000, false, "ii", playerid, 3);
 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has initiated a countdown for all players.", GetRPName(playerid));
 	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /event [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules, FriendlyFire");
		SCM(playerid, COLOR_WHITE, "Available options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SCM(playerid, COLOR_SYNTAX, "Usage: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{CCFFFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{CCFFFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	    }

		EventInfo[eType] = type;
		EventInfo[eFriendlyFire] = false;
	    switch(type)
	    {
	        case 1:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "CXRP"Deathmatch{CCFFFF}.");
	        }
	        case 2:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "CXRP"Team Deathmatch{CCFFFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "CXRP"Race{CCFFFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "CXRP"Other{CCFFFF}.");
	        }
		}
	}
	else if(!strcmp(option, "friendlyfire", true))
	{
		if(EventInfo[eType] != 2)
		{
			return SCM(playerid, COLOR_GREY, "Friendly Fire is only available for TDM (type 2)");
		}
	    new toggle;

	    if(sscanf(param, "i", toggle))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [friendlyfire] [1/0]");
	    }
	    if(toggle != 1 && toggle != 0)
	    {
	        return SCM(playerid, COLOR_GREY, "Invalid input.");
	    }
		if(toggle == 1)
			EventInfo[eFriendlyFire] = true;
		else
			EventInfo[eFriendlyFire] = false;

		SM(playerid, COLOR_WHITE, "You've set the event's Friendly Fire system to %s", (EventInfo[eFriendlyFire] == true) ? ("{00FF00}true") : ("{FF0000}false"));
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SM(playerid, COLOR_AQUA, "You set the join text to \"%s\".", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	    }
	    if(!(2 <= weaponid <= 46))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SM(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{CCFFFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{CCFFFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SM(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "CXRP"allowed{CCFFFF} crackshooting in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "CXRP"disallowed{CCFFFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "CXRP"allowed{CCFFFF} quickswapping in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "CXRP"disallowed{CCFFFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "CXRP"allowed{CCFFFF} healing in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "CXRP"disallowed{CCFFFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /event [ready] [confirm]");
		    SCM(playerid, COLOR_WHITE, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SMA(COLOR_AQUA, "%s has started a Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 2: SMA(COLOR_AQUA, "%s has started a Team-Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 3: SMA(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetRPName(playerid));
	    	case 4: SMA(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetRPName(playerid));
	    }

	    SCM(playerid, COLOR_WHITE, "** Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SMA(COLOR_AQUA, "The event has been locked by %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SMA(COLOR_AQUA, "The event was unlocked by %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(PlayerInfo[i][pJoinedEvent])
	        {
				SCM(i, COLOR_AQUA, "The event has started. Good luck!");
    			for(new x = 0; x < 5; x ++)
    			{
        			if(EventInfo[eWeapons][x])
        			{
            			GiveWeapon(i, EventInfo[eWeapons][x], true);
					}
        		}
			}
			else
			{
			    SCM(i, COLOR_AQUA, "The event has started. Better luck next time!");
			}
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SCM(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pJoinedEvent])
		    {
				PlayerInfo[i][pEventTeam] = teamid;

				SetPlayerSkin(i, EventInfo[eSkin][teamid]);
				TeleportToCoords(i, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid], EventInfo[ePosA][teamid], EventInfo[eInterior], EventInfo[eWorld], true, false);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(PlayerInfo[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(PlayerInfo[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SM(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{CCFFFF} team.", GetRPName(playerid), (PlayerInfo[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SCM(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SMA(COLOR_AQUA, "The event was ended by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oban [username] [reason]");
	}
    if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(PlayerInfo[playerid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are in jail and therefore cannot participate in an event.");
	}
	if(PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The event is locked. Better luck next time!");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are playing paintball.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't join event while on a vehicle!");
	}
    if(!PlayerUseAnimsEx(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event at the moment.");
	}
    if((PlayerInfo[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SM(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permaban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] <= 5 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = \"%e\" OR ip = \"%e\"", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = \"%e\" ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = \"%s\"", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned IP \"%s\".", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128];

    if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banip [ip address] [reason (optional)]");
	}
	if(!IsAnIP(ip))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = \"%s\"", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:lockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = \"%e\"", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unlockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unlockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = \"%e\" AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetPlayerHealth(i, amount);
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's health to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetScriptArmour(i, amount);
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's armor to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:enter(playerid, params[])
{
	if(PlayerUseAnims(playerid) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't enter now.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1310.1492, -1366.7960, 13.5064))
	{
		if(PlayerInfo[playerid][pAcceptedHelp])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can not enter the paintball arena while on helper duty!");
	    }
	    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    	{
        	return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join paintball.");
    	}
	    ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:pbkills(playerid, params[]) return callcmd::paintballkills(playerid, params);

CMD:paintballkills(playerid, params[])
{
	if(PaintballKills[playerid] == 0)
	{
	    return SCM(playerid, COLOR_GREY2, "You haven't killed anyone in paintball since your last match.");
	}
	new string[256];
	format(string, sizeof(string), "{FFFFFF}Your total {FF0000}Paintball Kills {FFFFFF}since your last Match: {00FF00}%i", PaintballKills[playerid]/2);
	SCM(playerid, -1, string);
	return 1;
}

CMD:switchteam(playerid, params[])
{
	if(PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not playing paintball at the moment.");
	}
	if(PlayerInfo[playerid][pPaintball] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be in TDM mode in order to use this command.");
	}
	if(PlayerInfo[playerid][pPaintballTeam] == 1)
	{
		PlayerInfo[playerid][pPaintballTeam] = 0;
    	SetPlayerHealth(playerid, 0.0);
        SCM(playerid, COLOR_WHITE, "You're now marked as a member of the {FFFF99}Brown {FFFFFF}team!");
	}
	else
	{
		PlayerInfo[playerid][pPaintballTeam] = 1;
    	SetPlayerHealth(playerid, 0.0);
        SCM(playerid, COLOR_WHITE, "You're now marked as a member of the {33CCFF}Cyan {FFFFFF}team!");
	}
	return 1;
}

CMD:exit(playerid, params[])
{
    if(PlayerUseAnims(playerid) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't exit now.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
 		foreach(new i : Player)
		{
		    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s has left the paintball arena. ))", GetRPName(playerid));
			}
		}
        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
		SCM(playerid, COLOR_WHITE, "Thanks for playing a match on paintball, Use {00FF00}/pbkills {FFFFFF}to check your kills.");
		SetPlayerToSpawn(playerid);
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givegun [playerid] [weaponid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	}

	GiveWeapon(targetid, weaponid);

	SM(targetid, COLOR_AQUA, "You have received a "CXRP"%s{CCFFFF} from %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_admin", "%s (uid: %i) has given a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SM(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(gWorldTime);
	SMA(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:changeage(playerid, params[])
{
	new value;
	if(PlayerInfo[playerid][pDonator] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be at least Gold or Platinum Donator to use this.");
	}
	if(sscanf(params, "i", value))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /changeage [age 13-100]");
	}
	if((value < 13) || (value > 100))
	{
	    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 13 or above 100.");
	}

	PlayerInfo[playerid][pAge] = value;
	SM(playerid, COLOR_AQUA, "** You are now %i years old!.", value);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to %i.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], value);
	return 1;
}

CMD:changegender(playerid, params[])
{
	if(PlayerInfo[playerid][pDonator] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to be at least Gold or Platinum Donator to use this.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changegender [male | female | gay | shemale | lesbian]");
	}
	if(!strcmp(params, "male", true))
	{
	    PlayerInfo[playerid][pGender] = 1;
		SCM(playerid, COLOR_AQUA, "** You are now a Male!");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to Male.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else if(!strcmp(params, "female", true))
	{
	    PlayerInfo[playerid][pGender] = 2;
		SCM(playerid, COLOR_AQUA, "** You are now a Female!");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to Female.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

	}
	else if(!strcmp(params, "shemale", true))
	{
	    PlayerInfo[playerid][pGender] = 3;
		SCM(playerid, COLOR_AQUA, "** You are now a Shemale!");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 3 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to Shemale.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else if(!strcmp(params, "gay", true))
	{
	    PlayerInfo[playerid][pGender] = 4;
		SCM(playerid, COLOR_AQUA, "** You are now a Gay!");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 4 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to Gay.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else if(!strcmp(params, "lesbian", true))
	{
	    PlayerInfo[playerid][pGender] = 5;
		SCM(playerid, COLOR_AQUA, "** You are now a Lesbian!");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 5 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		Log_Write("log_vip", "%s Donator %s (uid: %i) has changed their age to Lesbian.", GetDonatorRank(PlayerInfo[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /changegender [male | female | gay | shemale | lesbian]");
	}
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [option]");
	    SM(playerid, COLOR_WHITE, "Available options: Gender, Age, Cash, Bank, Level, Respect, Hours, Warnings");
	    SM(playerid, COLOR_WHITE, "Available options: SpawnHealth, SpawnArmor, FightStyle, Accent, Number, Crimes, Arrested");
	    SM(playerid, COLOR_WHITE, "Available options: WantedLevel, Materials, Pot, Crack, Meth, Painkillers, Cigars, PortableRadio");
	    SM(playerid, COLOR_WHITE, "Available options: Channel, Spraycans, Boombox, Phonebook, CarLicense, Seeds, Ephedrine");
		SM(playerid, COLOR_WHITE, "Available options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, MP3Player, Job");
        SM(playerid, COLOR_WHITE, "Available options: Job2, MuriaticAcid, BakingSoda, DMWarnings, WeaponRestricted");
        SM(playerid, COLOR_WHITE, "Available options: Components, Watch, GPS, FishingSkill, TruckerSkill, WeaponSkill");
        SM(playerid, COLOR_WHITE, "Available options: LawyerSkill, SmugglerSkill, DetectiveSkill");
        SM(playerid, COLOR_WHITE, "Available options: Mask, Marriage, GunLicense, Hunger, Thirst");
        SM(playerid, COLOR_WHITE, "Available options: Diamonds, LaborUpgrade, UpgradePoints");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gender] [male | female | gay | shemale | lesbian]");
		}
		if(!strcmp(param, "male", true))
		{
		    PlayerInfo[targetid][pGender] = 1;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Male.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    PlayerInfo[targetid][pGender] = 2;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Female.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "shemale", true))
		{
		    PlayerInfo[targetid][pGender] = 3;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Shemale.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 3 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "gay", true))
		{
		    PlayerInfo[targetid][pGender] = 4;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Gay.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 4 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "lesbian", true))
		{
		    PlayerInfo[targetid][pGender] = 5;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Lesbian.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 5 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "thirst", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [thirst] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			PlayerInfo[playerid][pThirstTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		PlayerInfo[targetid][pThirst] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's thirst to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", PlayerInfo[playerid][pThirst], PlayerInfo[playerid][pThirstTimer], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "hunger", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [hunger] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			PlayerInfo[playerid][pHungerTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		PlayerInfo[targetid][pHunger] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's hunger to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pHungerTimer], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			PlayerInfo[targetid][pMarriedTo] = PlayerInfo[value][pID];
			strcpy(PlayerInfo[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetRPName(targetid), GetRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[value][pID], PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			PlayerInfo[targetid][pMarriedTo] = -1;
			strcpy(PlayerInfo[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [age] [value]");
		}
		if((value < 13) || (value > 100))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 13 or above 100.");
		}

		PlayerInfo[targetid][pAge] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's age to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cash] [value]");
		}

		PlayerInfo[targetid][pCash] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cash to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bank] [value]");
		}

		PlayerInfo[targetid][pBank] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bank money to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [level] [value]");
		}

		PlayerInfo[targetid][pLevel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [respect] [value]");
		}

		PlayerInfo[targetid][pEXP] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's respect points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "upgradepoints", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [upgradepoints] [value]");
		}

		PlayerInfo[targetid][pUpgradePoints] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's upgrade points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hours] [value]");
		}

		PlayerInfo[targetid][pHours] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 3.");
		}

		PlayerInfo[targetid][pWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnhealth] [value]");
		}

		PlayerInfo[targetid][pSpawnHealth] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn health to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnarmor] [value]");
		}

		PlayerInfo[targetid][pSpawnArmor] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn armor to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fightstyle] [option]");
	        SCM(playerid, COLOR_WHITE, "Available options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Normal.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Boxing.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kung Fu.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kneehead.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Grabkick.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Elbow.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [accent] [text]");
		}

		strcpy(PlayerInfo[targetid][pAccent], accent, 16);
		SM(playerid, COLOR_WHITE, "** You have set %s's accent to \"%s\".", GetRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = \"%e\" WHERE uid = %i", accent, PlayerInfo[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		PlayerInfo[targetid][pDiamonds] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "number", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [number] [number]");
		}
		if(value == 911 || value == 6397 || value == 6324 || value == 8294)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
		}

		PlayerInfo[targetid][pNumber] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phone number to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET number = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [crimes] [value]");
		}

		PlayerInfo[targetid][pCrimes] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's commited crimes to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [arrested] [value]");
		}

		PlayerInfo[targetid][pArrested] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's arrested count to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 6.");
		}

		PlayerInfo[targetid][pWantedLevel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's wanted level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [materials] [value]");
		}

		PlayerInfo[targetid][pMaterials] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's materials to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [pot] [value]");
		}

		PlayerInfo[targetid][pPot] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's pot to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [Crack] [value]");
		}

		PlayerInfo[targetid][pCrack] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Crack to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [meth] [value]");
		}

		PlayerInfo[targetid][pMeth] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's meth to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [painkillers] [value]");
		}

		PlayerInfo[targetid][pPainkillers] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's painkillers to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cigars] [value]");
		}

		PlayerInfo[targetid][pCigars] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cigars to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "portableradio", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [portableradio] [0/1]");
		}

		PlayerInfo[targetid][pWalkieTalkie] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Portable Radio to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [channel] [value]");
		}

		PlayerInfo[targetid][pChannel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's radio channel to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spraycans] [value]");
		}

		PlayerInfo[targetid][pSpraycans] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spraycans to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && PlayerInfo[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		PlayerInfo[targetid][pBoombox] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's boombox to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phonebook] [0/1]");
		}

		PlayerInfo[targetid][pPhonebook] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phonebook to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [carlicense] [0/1]");
		}

		PlayerInfo[targetid][pCarLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's car license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gunlicense] [0/1]");
		}

		PlayerInfo[targetid][pWeaponLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gun license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [seeds] [value]");
		}

		PlayerInfo[targetid][pSeeds] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's seeds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [ephedrine] [value]");
		}

		PlayerInfo[targetid][pEphedrine] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's ephedrine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [job] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Pizza Man (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Meat Packager (7) Taxi Driver (8) Drug Dealer (9) Lawyer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (10) Detective (11) Mechanic");
			return 1;
		}
		if(!(-1 <= value <= 11))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		PlayerInfo[targetid][pJob] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job2", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [job2] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Pizza Man (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Meat Packager (7) Taxi Driver (8) Drug Dealer (9) Lawyer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (10) Detective (11) Mechanic");
			return 1;
		}
		if(!(-1 <= value <= 11))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		PlayerInfo[targetid][pSecondJob] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's second job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		PlayerInfo[targetid][pMask] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's mask to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "laborupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [laborupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pLaborUpgrade] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's labor upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mp3player] [0/1]");
		}

		PlayerInfo[targetid][pMP3Player] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's MP3 player to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [muriaticacid] [value]");
		}

		PlayerInfo[targetid][pMuriaticAcid] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's muriatic acid to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bakingsoda] [value]");
		}

		PlayerInfo[targetid][pBakingSoda] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's baking soda to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pDMWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's DM warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponrestricted] [hours]");
		}

		PlayerInfo[targetid][pWeaponRestricted] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [watch] [0/1]");
		}

		PlayerInfo[targetid][pWatch] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's watch to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gps] [0/1]");
		}

		PlayerInfo[targetid][pGPS] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's GPS to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gascan] [value]");
		}

		PlayerInfo[targetid][pGasCan] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gas can to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "truckerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [truckerskill] [value]");
		}

		PlayerInfo[targetid][pTruckerSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's trucker skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET truckerskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fishingskill] [value]");
		}

		PlayerInfo[targetid][pFishingSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's fishing skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponskill] [value]");
		}

		PlayerInfo[targetid][pWeaponSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [lawyerskill] [value]");
		}

		PlayerInfo[targetid][pLawyerSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's lawyer skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [detectiveskill] [value]");
		}

		PlayerInfo[targetid][pDetectiveSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's detective skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    return 1;
	}
	return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoney [playerid] [amount]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	GivePlayerCash(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:givemoneyall(playerid, params[])
{
	new amount;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoneyall [amount]");
    }
	if(amount < 1 || amount > 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $1 and $100000.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
		{
		    GivePlayerCash(i, amount);
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to every player online.", GetRPName(playerid), amount);
	return 1;
}

CMD:products(playerid, parmas[]) {

    new businessid = GetInsideBusiness(playerid), string[1024], title[64];
    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing Rod\t%s\nFish Bait\t%s\nMuriatic Acid\t%s\nBaking Soda\t%s\nPocket Watch\t%s\nGPS System\t%s\nRope\t%s\nBlindfold\t%s\nToolkit\t%s\nFlashlight\t%s\nParachute\t%s\nMask\t%s\nRepairkit\t%s\nGascan\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]),
				AddCommas(BusinessInfo[businessid][bPrices][5]),
				AddCommas(BusinessInfo[businessid][bPrices][6]),
				AddCommas(BusinessInfo[businessid][bPrices][7]),
				AddCommas(BusinessInfo[businessid][bPrices][8]),
				AddCommas(BusinessInfo[businessid][bPrices][9]),
				AddCommas(BusinessInfo[businessid][bPrices][10]),
				AddCommas(BusinessInfo[businessid][bPrices][11]),
				AddCommas(BusinessInfo[businessid][bPrices][12]),
				AddCommas(BusinessInfo[businessid][bPrices][13]),
				AddCommas(BusinessInfo[businessid][bPrices][14]),
				AddCommas(BusinessInfo[businessid][bPrices][15]),
				AddCommas(BusinessInfo[businessid][bPrices][16]),
				AddCommas(BusinessInfo[businessid][bPrices][17]),
				AddCommas(BusinessInfo[businessid][bPrices][18]),
				AddCommas(BusinessInfo[businessid][bPrices][19]),
				AddCommas(BusinessInfo[businessid][bPrices][20]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "9mm Pistol\t%s\nRifle\t%s\nKevlar Vest\t%s\nShotgun\t%s\nTec-9\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nMountain Dew\t%s\nFuchka\t%s\nCha Porota\t%s\nKacchi Biriyani\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nMountain Dew\t%s\nBangla\t%s\nOscar\t%s\nWine\t%s",
				AddCommas(BusinessInfo[businessid][bPrices][0]),
				AddCommas(BusinessInfo[businessid][bPrices][1]),
				AddCommas(BusinessInfo[businessid][bPrices][2]),
				AddCommas(BusinessInfo[businessid][bPrices][3]),
				AddCommas(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Change", "Cancel");
		}
	}
	return 1;
}

CMD:setdonator(playerid, params[])
{
	new targetid, rank, days;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "uii", targetid, rank, days))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setdonator [playerid] [rank] [days]");
	    SCM(playerid, COLOR_GREY2, "List of ranks: (1) Silver (2) Gold (3) Platinum");
	    return 1;
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365.");
	}

	PlayerInfo[targetid][pDonator] = rank;
	PlayerInfo[targetid][pVIPTime] = gettime() + (days * 86400);
	PlayerInfo[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", PlayerInfo[targetid][pDonator], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i months.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days / 30);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i months.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
	}
	else
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i days.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s Donator package for %i days.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetDonatorRank(rank), days);
	return 1;
}

CMD:removedonator(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedonator [playerid]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!PlayerInfo[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have a donator subscription which you can remove.");
	}

	Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s donator package.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetDonatorRank(PlayerInfo[targetid][pDonator]));

	PlayerInfo[targetid][pDonator] = 0;
	PlayerInfo[targetid][pVIPTime] = 0;
	PlayerInfo[targetid][pVIPColor] = 0;
    PlayerInfo[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return NotAuth(playerid);
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rangeban [playerid] [reason]");
	}
	if(IsPlayerNPC(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid player specified");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was rangebanned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return NotAuth(playerid);
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128], text[128];
	if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
	{
		format(text, sizeof(text), "%s", GetRPName(playerid));
	}
	else
	{
	    format(text, sizeof(text), "(%s Accent) %s", PlayerInfo[playerid][pAccent], GetRPName(playerid));
	}
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: You have the right to remain silent.", text);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 3000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Anything you say can and will be used against you in a court of law.", text);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 4000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: You have the right to to an attorney, If you can not afford one, one will be appointed for you.", text);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

IsNearFlag(playerid, turf)
{
	if(IsValidDynamicObject(tFlag[turf][0]) && IsPlayerInRangeOfDynamicObject(playerid, tFlag[turf][0], 10.0))
		return 1;
	else
		return 0;
}

DestroyFlag(id)
{
	if(TurfInfo[id][tExists])
	{
		if(IsValidDynamicObject(tFlag[id][0]))
			DestroyDynamicObject(tFlag[id][0]);
		if(IsValidDynamicObject(tFlag[id][1]))
			DestroyDynamicObject(tFlag[id][1]);
		if(IsValidDynamicObject(tFlag[id][2]))
			DestroyDynamicObject(tFlag[id][2]);
		if(IsValidDynamicObject(tFlag[id][3]))
			DestroyDynamicObject(tFlag[id][3]);
		if(IsValidDynamicObject(tFlag[id][4]))
			DestroyDynamicObject(tFlag[id][4]);
		if(IsValidDynamicObject(tFlag[id][5]))
			DestroyDynamicObject(tFlag[id][5]);
		if(IsValidDynamicObject(tFlag[id][6]))
			DestroyDynamicObject(tFlag[id][6]);
		if(IsValidDynamicObject(tFlag[id][7]))
			DestroyDynamicObject(tFlag[id][7]);
		if(IsValidDynamic3DTextLabel(tFlagText[id]))
			DestroyDynamic3DTextLabel(tFlagText[id]);
	}
}

CreateFlag(id, playerid)
{
	new string[256];
	if(TurfInfo[id][tExists])
	{
		switch(id)
		{
			case 1: // Turf 1
			{
				if(playerid == INVALID_PLAYER_ID)
				{
					tFlag[id][0] = CreateDynamicObject(19943, 1479.789916, -1678.593261, 7.669510, -0.000038, 0.000001, 171.000122); 
					tFlag[id][2] = CreateDynamicObject(19307, 1479.057006, -1678.488525, 14.538495, -0.000038, 19.599996, 171.000122); 
					tFlag[id][3] = CreateDynamicObject(19306, 1479.918579, -1677.767944, 14.564436, -0.000003, 18.799962, 84.200027); 
					tFlag[id][4] = CreateDynamicObject(19306, 1479.647094, -1679.413452, 14.617812, 0.000003, 18.800043, -96.999839); 
					tFlag[id][5] = CreateDynamicObject(3524, 1479.749023, -1678.566650, 15.649526, 0.000038, -0.000006, -1.699976); 
					tFlag[id][6] = CreateDynamicObject(356, 1479.897460, -1678.701049, 16.269525, -0.000034, 42.400012, -166.299865); 
					tFlag[id][7] = CreateDynamicObject(356, 1479.819335, -1678.377685, 16.108295, -0.600034, -29.399921, -166.299865);
					format(string, sizeof(string), "%s%s\n(( Use %s'/claim'%s to claim ))", WHITE, TurfInfo[id][tName], ORANGE, WHITE);
					tFlagText[id] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 1479.647094, -1679.413452, 14.617812, 10.0); 
				}
				else
				{
					tFlag[id][1] = CreateDynamicObject(19307, 1480.585449, -1678.720581, 14.547803, -0.999960, 19.599992, -10.800219, .playerid=playerid); 
				} 
			}
			case 2: // Turf 2
			{
				if(playerid == INVALID_PLAYER_ID)
				{
					tFlag[id][0] = CreateDynamicObject(19943, 1129.002563, -1464.354125, 9.307840, -0.000062, 0.000028, 16.399848); 
					tFlag[id][1] = CreateDynamicObject(19307, 1128.230102, -1464.580078, 16.186138, -0.999929, 19.599971, -165.400558); 
					tFlag[id][2] = CreateDynamicObject(19307, 1129.708496, -1464.135864, 16.176830, -0.000062, 19.600021, 16.399848); 
					tFlag[id][3] = CreateDynamicObject(19306, 1129.239990, -1465.155029, 16.202770, -0.000031, 18.799940, -70.399887); 
					tFlag[id][4] = CreateDynamicObject(19306, 1128.780395, -1463.552978, 16.256143, 0.000029, 18.800065, 108.400138); 
					tFlag[id][5] = CreateDynamicObject(3524, 1129.051391, -1464.361206, 17.287866, 0.000059, -0.000034, -156.300369); 
					tFlag[id][6] = CreateDynamicObject(356, 1128.858764, -1464.302978, 17.907861, -0.000046, 42.400028, 39.100421); 
					tFlag[id][7] = CreateDynamicObject(356, 1129.068725, -1464.563232, 17.746639, -0.600044, -29.399881, 39.100368);
					format(string, sizeof(string), "%s%s\n(( Use %s'/claim'%s to claim ))", WHITE, TurfInfo[id][tName], ORANGE, WHITE);
					tFlagText[id] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 1128.780395, -1463.552978, 16.256143, 10.0); 
				}
				else
				{
					tFlag[id][1] = CreateDynamicObject(19307, 1128.230102, -1464.580078, 16.186138, -0.999929, 19.599971, -165.400558, .playerid=playerid); 
				} 
			}
			// Other Turf flags here with case 3 or 4 or 5 etc...
		}
	}
}

forward DestroyDroppedGun(objectid);
public DestroyDroppedGun(objectid)
{
    if(IsValidDynamicObject(objectid))
    {
   	    DestroyDynamicObject(objectid);
    }
	return 1;
}

GetVoiceName(playerid)
{
	new str[14];
	switch(PlayerInfo[playerid][pCurrVoice])
	{
		case 1: strcpy(str, "Faction Radio", sizeof(str));
		case 2: strcpy(str, "Gang Radio", sizeof(str));
		default: strcpy(str, "Local", sizeof(str));
	}
	return str;
}

CMD:voice(playerid, params[])
{
	new option;
	if(!PlayerUseAnimsEx(playerid))
	{
		return SCM(playerid, COLOR_GREY, "You can't use this command now!");
	}
	if(SvGetVersion(playerid) == SV_NULL)
    {
        return SCM(playerid, COLOR_GREY, "Could not find plugin sampvoice.");
    }
    if(SvHasMicro(playerid) == SV_FALSE)
    {
        return SCM(playerid, COLOR_GREY, "The microphone could not be found.");
    }
    if(sscanf(params, "i", option))
	{
		SM(playerid, COLOR_SYNTAX, "Usage: /voice [channel] (Your current channel is %s%s)", CXRP, GetVoiceName(playerid));
		SCM(playerid, COLOR_SYNTAX, "Available Channels: 0 - Local, 1 - Faction Radio");
		SCM(playerid, COLOR_SYNTAX, "Available Channels: 2 - Gang Radio");
		return 1;
	}
	if(option == PlayerInfo[playerid][pCurrVoice])
	{
		return SCM(playerid, COLOR_GREY, "You're already in that channel!");
	}
	else if(option == 0)
	{
		if(PlayerInfo[playerid][pCurrVoice] == 1)
		{
			SvDetachListenerFromStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
		}
		if(PlayerInfo[playerid][pCurrVoice] == 2)
		{
			SvDetachListenerFromStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
		}

		lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, MAX_PLAYERS+1, playerid, COLOR_WHITE, " ");
		PlayerInfo[playerid][pCurrVoice] = 0;
		SvAttachListenerToStream(lstream[playerid], playerid);
		SM(playerid, COLOR_WHITE, "You've successfully switched your voice channel to %s%s", CXRP, GetVoiceName(playerid));
	}
	else if(option == 1)
	{
		if(GetFactionType(playerid) == FACTION_NONE) 
		{
			return SCM(playerid, COLOR_GREY, "You're not in any faction!");
		}
		if(PlayerInfo[playerid][pCurrVoice] == 2)
		{
			SvDetachListenerFromStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
		}
		if(PlayerInfo[playerid][pCurrVoice] == 0)
		{
			SvDetachListenerFromStream(lstream[playerid], playerid);
			SvDeleteStream(lstream[playerid]);
			lstream[playerid] = SV_NULL;
		}

		PlayerInfo[playerid][pCurrVoice] = 1;
		SvAttachListenerToStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
		SM(playerid, COLOR_WHITE, "You've successfully switched your voice channel to %s%s", CXRP, GetVoiceName(playerid));
	}
	else if(option == 2)
	{
		if(PlayerInfo[playerid][pGang] == -1) 
		{
			return SCM(playerid, COLOR_GREY, "You're not in any gang!");
		}
		if(PlayerInfo[playerid][pCurrVoice] == 1)
		{
			SvDetachListenerFromStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
		}
		if(PlayerInfo[playerid][pCurrVoice] == 0)
		{
			SvDetachListenerFromStream(lstream[playerid], playerid);
			SvDeleteStream(lstream[playerid]);
			lstream[playerid] = SV_NULL;
		}

		PlayerInfo[playerid][pCurrVoice] = 2;
		SvAttachListenerToStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
		SM(playerid, COLOR_WHITE, "You've successfully switched your voice channel to %s%s", CXRP, GetVoiceName(playerid));
	}
	return 1;
}

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid)
{
    if(keyid == 0x42 || keyid == 0x5A)
    {
		switch(PlayerInfo[playerid][pCurrVoice])
		{
			case 0:
			{
		        if(lstream[playerid])
				{
					SvAttachSpeakerToStream(lstream[playerid], playerid);
				}
			}
			case 1:
			{
				SvAttachSpeakerToStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
			}
			case 2:
			{
				SvAttachSpeakerToStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
			}
		}
	}
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
    if(keyid == 0x42 || keyid == 0x5A)
    {
		switch(PlayerInfo[playerid][pCurrVoice])
		{
			case 0:
			{
		        if(lstream[playerid])
				{
					SvDetachSpeakerFromStream(lstream[playerid], playerid);
				}
			}
			case 1:
			{
				SvDetachSpeakerFromStream(FactionVC[PlayerInfo[playerid][pFaction]], playerid);
			}
			case 2:
			{
				SvDetachSpeakerFromStream(GangVC[PlayerInfo[playerid][pGang]], playerid);
			}		
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == PlayerInfo[playerid][pRobbingCP])
	{
		SCM(playerid, COLOR_WHITE, "You've moved away from your robbing position! Robbery has been stopped");
		FinishRobAtm(playerid, 0);
	}
	return 1;
}

forward LootAtm(playerid);
public LootAtm(playerid)
{
	if(PlayerInfo[playerid][pRobbingAtm] != INVALID_OBJECT_ID && IsValidDynamicObject(PlayerInfo[playerid][pRobbingAtm]) && ObjectData[PlayerInfo[playerid][pRobbingAtm]][mobjRob] == 1)
	{
		GameTextForPlayer(playerid, "~w~Looting ATM Machine vault...", 5000, 3);
		new amount = random(500) + 500;
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][pRobCash] += amount;
		PlayerInfo[playerid][pDirtyCash] += amount;
		Settings[gVault] -= amount;
		SaveServerInfo();
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_AQUA, "You have looted $%s and now have $%s. You can keep looting or wash the looted dirty money.", AddCommas(amount), AddCommas(PlayerInfo[playerid][pRobCash]));
	}
	else
	{
		KillTimer(PlayerInfo[playerid][pRobbingTimer]);
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(checkpointid == TrashCP[playerid])
	{
	    if(!HasTrash[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You're not carrying a trash bag.");
	    new vehicleid = GetPVarInt(playerid, "LastVehicleID");
	    if(LoadedTrash[vehicleid] >= TRASH_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}This vehicle is full, you can't load any more trash.");
	    LoadedTrash[vehicleid]++;
		ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}You've collected a trash bag.");
		
		if(TRASH_LIMIT - LoadedTrash[vehicleid] > 0)
		{
			new string[96];
			format(string, sizeof(string), "TRASHMASTER JOB: {FFFFFF}You can load {F39C12}%d {FFFFFF}more trash bags to this vehicle.", TRASH_LIMIT - LoadedTrash[vehicleid]);
			SendClientMessage(playerid, 0x2ECC71FF, string);
		}
		
		new driver = GetVehicleDriver(vehicleid);
		if(IsPlayerConnected(driver)) Trash_ShowCapacity(driver);
		Trash_ResetPlayer(playerid);
		return 1;
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(checkpointid == FactoryData[i][FactoryCP])
		    {
		        new string[128], vehicleid = GetPlayerVehicleID(playerid), cash = LoadedTrash[vehicleid] * TRASH_BAG_VALUE;
		        format(string, sizeof(string), "TRASHMASTER JOB: {FFFFFF}Sold {F39C12}%d {FFFFFF}bags of trash and earned {2ECC71}$%d.", LoadedTrash[vehicleid], cash);
		        SendClientMessage(playerid, 0x2ECC71FF, string);
		        GivePlayerCash(playerid, cash);
		        FactoryData[i][FactoryCurrent] += LoadedTrash[vehicleid];
		        LoadedTrash[vehicleid] = 0;
                Trash_ShowCapacity(playerid);
                format(string, sizeof(string), "Recycling Factory - %s\n\n{FFFFFF}Current Trash Bags: {F39C12}%d\n{FFFFFF}Bring trash here to earn money!", FactoryData[i][FactoryName], FactoryData[i][FactoryCurrent]);
                UpdateDynamic3DTextLabelText(FactoryData[i][FactoryLabel], 0x2ECC71FF, string);
                
		        for(new x; x < sizeof(FactoryData); x++)
				{
				    if(IsValidDynamicMapIcon(FactoryIcons[playerid][x]))
				    {
				        DestroyDynamicMapIcon(FactoryIcons[playerid][x]);
				        FactoryIcons[playerid][x] = -1;
				    }

					TogglePlayerDynamicCP(playerid, FactoryData[x][FactoryCP], 0);
				}

		        break;
		    }
		}
	}
	if(checkpointid == PlayerInfo[playerid][pRobbingCP])
	{
		SetPVarInt(playerid, "RobbingATM", 1);
		TogglePlayerControllable(playerid, false);
		
		SCM(playerid, COLOR_RED, "You've started looting the ATM Machine. If you leave the red area, the looting will stop!");

		TogglePlayerControllable(playerid, true);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 1, 0);
		
		GameTextForPlayer(playerid, "~w~Looting ATM Machine vault...", 5000, 3);
		SetPlayerAttachedObject(playerid, 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out his bag and starts looting the ATM vault", GetRPName(playerid));

		gCanRob = 10*60;
		SetTimerEx("LootAtm", 5000, true, "i", playerid);
		SetTimerEx("FinishRobAtm", 300000, false, "ii", playerid, 1);
		#if defined DISCORD
			DCC_SendText(13, playerid, "", "1118615914934436003", PlayerInfo[playerid][pRobbingAtm], -1);
		#endif
	}
	return 1;
}

forward HttpVPNInfo(playerid, response_code, data[]);
public HttpVPNInfo(playerid, response_code, data[])
{
    new vpnMessage[64], sdialog[512];
    
    if(response_code == 200 || response_code == 400) {
    	new Float:isVPN = floatstr(data);
	 	
	 	if(isVPN < 0) {
	 	    new tmp = floatround(isVPN);
	 	    
			switch(tmp) {
			    case -1: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Invalid No Input)");
			    }
			    case -2: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Invalid IP Address)");
			    }
			    case -3: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Unroutable Address / Private Address)");
			    }
			    case -4: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Unable to reach database)");
			    }
			    case -5: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Origin IP Banned)");
			    }
			    case -6: {
			        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Invalid contact information)");
			    }
				default: {
				    format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (Code: %d) (Data: %d)", response_code, tmp);
				}
			}
	 	}
	 	else if(isVPN == 0) {
       		format(vpnMessage, sizeof(vpnMessage), "{00FF00}Almost impossible");
	 	}
	 	else if(isVPN > 0 && isVPN < 0.6) {
	 	    format(vpnMessage, sizeof(vpnMessage), "{209120}Very unlikely");
		}
		else if(isVPN >= 0.6 && isVPN < 0.8) {
		    format(vpnMessage, sizeof(vpnMessage), "{E8A42E}Likely");
		}
		else if(isVPN >= 0.8 && isVPN < 1) {
		    format(vpnMessage, sizeof(vpnMessage), "{F7752F}Highly Likely");
		}
		else if(isVPN >= 1) {
		    format(vpnMessage, sizeof(vpnMessage), "{FF0000}Certain");
		}
    }
    else {
        format(vpnMessage, sizeof(vpnMessage), "{F74222}Error (%d)", response_code);
    }
    
	format(sdialog, sizeof(sdialog),
	"Index\tValue\n\
	Status\t%s\n\
	IP\t%s\n\
	Reverse DNS\t%s\n\
	Internet Username\t%s\n\
	City\t%s\n\
	Country\t%s\n\
	Country Code\t%s\n\
	ISP\t%s\n\
	Latitude\t%s\n\
	Longitude\t%s\n\
	Time Zone\t%s\n\
	Org\t%s\n\
	Region\t%s\n\
	Region Name\t%s\n\
	Postal Code\t%s\n\
	VPN/Proxy\t%s",
	dPlayerInfo[targetID[playerid]][Status],
	dPlayerInfo[targetID[playerid]][IP],
	dPlayerInfo[targetID[playerid]][Reverse],
	dPlayerInfo[targetID[playerid]][As],
	dPlayerInfo[targetID[playerid]][City],
	dPlayerInfo[targetID[playerid]][Country],
	dPlayerInfo[targetID[playerid]][CountryCode],
	dPlayerInfo[targetID[playerid]][Isp],
	dPlayerInfo[targetID[playerid]][Lat],
	dPlayerInfo[targetID[playerid]][Lon],
	dPlayerInfo[targetID[playerid]][TimeZone],
	dPlayerInfo[targetID[playerid]][Org],
	dPlayerInfo[targetID[playerid]][Region],
	dPlayerInfo[targetID[playerid]][RegionName],
	dPlayerInfo[targetID[playerid]][Zip],
	vpnMessage);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}Player Internet Status!", sdialog, "OK", "");

    return 1;
}


forward HttpIPInfo(playerid, response_code, data[]);
public HttpIPInfo(playerid, response_code, data[])
{
    if(response_code == 200) {
    	new output[14][64], string[160];
    	
    	strexplode(output, data, ",");
    	
		dPlayerInfo[targetID[playerid]][Status] = output[0];
		
		if(strfind(output[0], "sucess")) {
		    format(dPlayerInfo[targetID[playerid]][Status], 64, "{00FF00}Sucess");
		}
		else {
		    format(dPlayerInfo[targetID[playerid]][Status], 64, "{F74222}Fail");
		}
		
		dPlayerInfo[targetID[playerid]][Country] = output[1];
		dPlayerInfo[targetID[playerid]][CountryCode] = output[2];
		dPlayerInfo[targetID[playerid]][Region] = output[3];
		dPlayerInfo[targetID[playerid]][RegionName] = output[4];
		dPlayerInfo[targetID[playerid]][City] = output[5];
		dPlayerInfo[targetID[playerid]][Zip] = output[6];
		dPlayerInfo[targetID[playerid]][Lat] = output[7];
		dPlayerInfo[targetID[playerid]][Lon] = output[8];
		dPlayerInfo[targetID[playerid]][TimeZone] = output[9];
		dPlayerInfo[targetID[playerid]][Isp] = output[10];
		dPlayerInfo[targetID[playerid]][Org] = output[11];
		dPlayerInfo[targetID[playerid]][As] = output[12];
		dPlayerInfo[targetID[playerid]][Reverse] = output[13];
		
		RemoveChars(targetID[playerid]);

		format(string, sizeof(string), "%s%s", HTTP_VPN_API_URL, dPlayerInfo[targetID[playerid]][IP]);
		HTTP(playerid, HTTP_GET, string, "", "HttpVPNInfo");
    }
    else {
        new string[144];

  		format(string, sizeof(string), "[ERRO:] {FFFFFF}Error obtaining information on that IP. (Code: %d) (%s)", response_code, data);
  		SCM(playerid, 0xFF0000AA, string);
    }

    return 1;
}

RemoveChars(tID)
{
    strreplace(dPlayerInfo[tID][Country], "\"", "");
    strreplace(dPlayerInfo[tID][CountryCode], "\"", "");
    strreplace(dPlayerInfo[tID][Region], "\"", "");
    strreplace(dPlayerInfo[tID][RegionName], "\"", "");
    strreplace(dPlayerInfo[tID][City], "\"", "");
    strreplace(dPlayerInfo[tID][Zip], "\"", "");
    strreplace(dPlayerInfo[tID][Lat], "\"", "");
    strreplace(dPlayerInfo[tID][Lon], "\"", "");
    strreplace(dPlayerInfo[tID][TimeZone], "\"", "");
    strreplace(dPlayerInfo[tID][Isp], "\"", "");
    strreplace(dPlayerInfo[tID][Org], "\"", "");
    strreplace(dPlayerInfo[tID][As], "\"", "");
    strreplace(dPlayerInfo[tID][Reverse], "\"", "");
    
	return 1;
}

CMD:dox(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return NotAuth(playerid);
	}

	new targetid;

    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /dox <playerid>");
		
	if(!IsPlayerConnected(targetid))
		return SCM(playerid, COLOR_SYNTAX, "That player isn't connected.");
	
	new string[160], playerIP[16];
	
	targetID[playerid] = targetid;

	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
    
    format(dPlayerInfo[targetid][IP], 16, playerIP);

	format(string, sizeof(string), "%s/%s%s", HTTP_IP_API_URL, playerIP, HTTP_IP_API_END);
	HTTP(playerid, HTTP_GET, string, "", "HttpIPInfo");

	format(string, sizeof(string), "Recieving information of the player %s [%s]", GetPlayerNameEx(targetid), playerIP);
	SCM(playerid, COLOR_ORANGE, string);

	return 1;
}

//===================JOB================
GetRandomBiz(playerid, type) // For trucker job.
{
	new index, bizIDs[MAX_BUSINESSES] = {-1, ...};

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0 && BusinessInfo[i][bType] == type)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) <= 30000)
	        {
	        	bizIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return bizIDs[random(index)];
}


GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 30000)
	        {
	        	houseIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

CMD:getfood(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_YFOOD))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Pizza Manman.");
	}
	if(PlayerInfo[playerid][pLoadingFood] == 1)
	{
		return SCM(playerid, COLOR_GREY, "You're already picking up food!");
	}
	if(PlayerInfo[playerid][pYFoodCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another order.", PlayerInfo[playerid][pYFoodCooldown]);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 378.8622,-118.8034,1001.4922))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at the yFood Pickup Point.");
	}
	if((houseid = GetRandomHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no houses in the server to deliver food to. Ask an admin to set them up.");
	}
	Freeze(playerid);
	PlayerInfo[playerid][pLoadingFood] = 1;
	GameTextForPlayer(playerid,"~w~Picking up food\nPlease wait..", 8000, 3);
	SetTimerEx("LoadFood", 8000, false, "ii", playerid, houseid);
	return 1;
}

CMD:loadfood(playerid, params[])
{
	new houseid, string[128];
	new Float:x, Float:y, Float:z;
	new Float:x1, Float:y1, Float:z1;
	new Float:x2, Float:y2, Float:z2;

	GetVehiclePos(JobVeh[playerid], x, y, z);
	if(GetVehicleModel(JobVeh[playerid]) != 448) return SCM(playerid, COLOR_SYNTAX, "You didn't spawn any pizza vehicle.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, x, y, z)) return SCM( playerid, COLOR_SYNTAX, "You're not next to a pizza bike." );
	if(PlayerInfo[playerid][pFoodLoaded] == 0) return SCM(playerid, COLOR_SYNTAX, "You didn't took any food.");
	if(PlayerInfo[playerid][pFoodLoadVeh] != 0) return SCM(playerid, COLOR_SYNTAX, "You already load a package in your bike.");
	RemovePlayerAttachedObject( playerid, 4 );
	PlayAnimation( playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0 );
	houseid = GetRandomHouse(playerid);
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
	GetPlayerPos(playerid, x1, y1, z1);

	x2 = HouseInfo[houseid][hPosX];
	y2 = HouseInfo[houseid][hPosY];
	z2 = HouseInfo[houseid][hPosZ];

	new Float:distance = floatsqroot(floatpower(floatabs(floatsub(x2,x1)), 2)+floatpower(floatabs(floatsub(y2,y1)), 2)+floatpower(floatabs(floatsub(z2,z1)), 2));
	PlayerInfo[playerid][pCP] = CHECKPOINT_YFOOD;

	pizzatimer[playerid] = floatround(distance*0.06);
	PizzaPay[playerid] = floatround(distance*0.61) + random(200);
	ShowTimerTD(playerid);
	format(string, sizeof(string), "%d" ,pizzatimer[playerid]);
	PlayerTextDrawSetString( playerid, timer_td[playerid][2], string );
	GameTextForPlayer(playerid, "~w~Deliver to ~r~marker", 5000, 1);
	pizzatime = 1;
	PlayerInfo[playerid][pFoodLoadVeh] = 1;
	return 1;
}

CMD:collect(playerid, params[])
{
	if(PlayerHasJob(playerid, JOB_TRASHMASTER))
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You can't use this command in a vehicle.");
		new vehicleid = GetPVarInt(playerid, "LastVehicleID");
		if(GetVehicleModel(vehicleid) != 408) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Your last vehicle has to be a Trashmaster.");
		if(HasTrash[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You're already carrying a trash bag.");
		new id = Trash_Closest(playerid);
		if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You're not near any trash.");
		if(TrashData[id][TrashLevel] < 1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}There's nothing here.");
		new Float: x, Float: y, Float: z;
		GetVehicleBoot(vehicleid, x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 30.0) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You're not near your Trashmaster.");
		TrashData[id][TrashLevel]--;
		KillTimer(TrashData[id][TrashTimer]);
		TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
		TrashCP[playerid] = CreateDynamicCP(x, y, z, 3.0, .playerid = playerid);
		HasTrash[playerid] = true;
		ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, ATTACHMENT_INDEX, 1264, 6, 0.222, 0.024, 0.128, 1.90, -90.0, 0.0, 0.5,0.5, 0.5);
		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 0) ? 0xE74C3CFF : 0xF39C12FF);
		SendClientMessage(playerid, 0x2ECC71FF, "TRASHMASTER JOB: {FFFFFF}You can press {F39C12}~k~~CONVERSATION_NO~ {FFFFFF}to remove the trash bag.");
	}
	return 1;
}

//+++++++++++++++++++++FUEL++++++++++++++++++++++++

forward OnFuelCreate(playerid, fuelid, Float:x, Float:y, Float:z, level, price);
public OnFuelCreate(playerid, fuelid, Float:x, Float:y, Float:z, level, price)
{
	FuelStationInfo[fuelid][fExists] = 1;
	FuelStationInfo[fuelid][fid] = cache_insert_id();
	FuelStationInfo[fuelid][FuelX] = x;
	FuelStationInfo[fuelid][FuelY] = y;
	FuelStationInfo[fuelid][FuelZ] = z;
	FuelStationInfo[fuelid][fprice] = price; //in dollars per Liter
	FuelStationInfo[fuelid][flevel] = level;
	FuelStationInfo[fuelid][fcash] = 1000;
	FuelStationInfo[fuelid][fPickup] = -1;
	FuelStationInfo[fuelid][total_fuel] = 10000;
	FuelStationInfo[fuelid][fText] = Text3D:INVALID_3DTEXT_ID;
	new string[128];
	format(string, sizeof(string), "A new refuel pickup created (ID: %i)", fuelid);
	SCM(playerid, COLOR_LIGHTGREEN, string);
	ReloadFuelStation(fuelid);
}

CMD:createfuel(playerid, params[])
{
	new Float: x, Float: y, Float: z;
	new level, price;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "ii", level, price))
	{
		SCM(playerid, COLOR_SYNTAX, "/createfuel [level] [price]");
		return 1;
	}
	if(price > 180 || price < 100)
	{
		SCM(playerid, COLOR_SYNTAX, "Put a price between 100-150");
		return 1;
	}
	if(level > 5 || level < 0)
	{
		SCM(playerid, COLOR_SYNTAX, "Put a level between 0-5");
		return 1;
	}
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
    {
        if(!FuelStationInfo[i][fExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO fuelstations (pos_x, pos_y, pos_z, level, price) VALUES('%f', '%f', '%f', '%i', '%i')", x, y, z, level, price);
			mysql_tquery(connectionID, queryBuffer, "OnFuelCreate", "iifffii", playerid, i,  x, y, z, level, price);
			return 1;
		}
    }
	return 1;
}

CMD:editfuel(playerid, params[])
{
	new f_id, option[14], param[64];
	if(sscanf(params, "is[14]S()[64]", f_id, option, param))
	{
		SCM(playerid, COLOR_SYNTAX, "/editfuel [station id] [option]");
		SCM(playerid, COLOR_SYNTAX, "Option: level, cash, fuel, pos, stash, price");
		return 1;
	}
	if(!(0 <= f_id < MAX_FUEL_STATIONS) || !FuelStationInfo[f_id][fExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Id.");
	}
	if(!strcmp(option, "level", true))
	{
		new level;
		if(sscanf(param, "i", level))
		{
			SCM(playerid, COLOR_SYNTAX, "/editfuel [station id] [level] [value(0-5)]");
		}
		
		if(level > 5 || level < 0)
		{
			SCM(playerid, COLOR_SYNTAX, "Put a level between 0-5");
			return 1;
		}
		FuelStationInfo[f_id][flevel] = level;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET level = %i", level);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_GREEN, "You have set the station's level on %i", level);
		return 1;
		
	}
	else if(!strcmp(option,"cash",true))
	{
		new cash;
		if(sscanf(param, "i", cash))
		{
			SCM(playerid, COLOR_SYNTAX, "/editfuel [station id] [cash] [amount]");
		}
		
		FuelStationInfo[f_id][fcash] = cash;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET stash_cash = %i", cash);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_GREEN, "You have set the station's cash on $%i", cash);
		return 1;
		
	}
	else if(!strcmp(option, "fuel", true))
	{
		new fuel;
		if(sscanf(param, "i", fuel))
		{
			SCM(playerid, COLOR_SYNTAX, "/editfuel [station id] [fuel] [amount]");
		}
		FuelStationInfo[f_id][fcash] = fuel;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET net_fuel = %i", fuel);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_GREEN, "You have set the station's fuel on %i liters", fuel);
		return 1;
	}
	else if(!strcmp(option, "pos", true))
	{
		new x, y, z;
		FuelStationInfo[f_id][FuelX] = x;
		FuelStationInfo[f_id][FuelY] = y;
		FuelStationInfo[f_id][FuelZ] = z;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET pos_x = %f, pos_y = %f, pos_z = %f", x, y, z);
		mysql_tquery(connectionID, queryBuffer);
		SCM(playerid, COLOR_GREEN, "You have set the station's position");
		return 1;
	}
	else if(!strcmp(option, "stash", true))
	{
		new x, y, z;
		FuelStationInfo[f_id][Stash_X] = x;
		FuelStationInfo[f_id][Stash_Y] = y;
		FuelStationInfo[f_id][Stash_Z] = z;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET stash_x = %f, stash_y = %f, stash_z = %f", x, y, z);
		mysql_tquery(connectionID, queryBuffer);
		SCM(playerid, COLOR_GREEN, "You have set the station's stash position");
		return 1;
	}
	else if(!strcmp(option, "price", true))
	{
		new price;
		if(sscanf(param, "i", price))
		{
			SCM(playerid, COLOR_SYNTAX, "/editfuel [station id] [price] [value(100-200)]");
		}
		FuelStationInfo[f_id][fprice] = price;
		ReloadFuelStation(f_id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET price = %i", price);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_GREEN, "You have set the station's fuel rate on $%i per liters", price);
		return 1;
	}
	return 1;
}

CMD:removefuel(playerid, params[])
{
	new id;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	if(sscanf(params, "i", id))
	{
		SCM(playerid, COLOR_SYNTAX, "/removefuel [id]");
		return 1;
	}
	if(!(0 <= id < MAX_FUEL_STATIONS) || !FuelStationInfo[id][fExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Id.");
	}
	DestroyDynamic3DTextLabel(FuelStationInfo[id][fText]);
	DestroyDynamicPickup(FuelStationInfo[id][fPickup]);
	FuelStationInfo[id][fExists] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM fuelstations WHERE id = %i", FuelStationInfo[id][fid]);
	mysql_tquery(connectionID, queryBuffer);
	FuelStationInfo[id][fid] = -1;
	FuelStationInfo[id][FuelX] = 0.0;
	FuelStationInfo[id][FuelY] = 0.0;
	FuelStationInfo[id][FuelZ] = 0.0;
	return 1;
}

CMD:refillstations(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return NotAuth(playerid);
	}
	for(new i = 0; i < MAX_FUEL_STATIONS; i ++)
	{
		if(FuelStationInfo[i][fExists])
		{
			new l = 10000;
			FuelStationInfo[i][total_fuel] = l;
			ReloadFuelStation(i);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE fuelstations SET net_fuel = %i", l);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	SCM(playerid, COLOR_AQUA, "All stations are refilled.");
	return 1;
}

CMD:blackmarket(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2591.7256, -2175.2224,  0.2969))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in the Black Market.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pHurt] - 40 > 0)
	{
        return SM(playerid, COLOR_GREY, "You are too hurt to use this command. Please wait %i seconds before trying again.", (PlayerInfo[playerid][pHurt] - 40));
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command as you're an onduty administrator.");
	}

	new string[1536] = "Item\tDescription\tCost", title[64];

    strcat(string, "\nMask\tIt is mostly used for illegal.\t{F7A763}$10000{FFFFFF}");
	strcat(string, "\nNight vis Goggles\tA Goggle which help to in night.\t{F7A763}$15000{FFFFFF}");
	strcat(string, "\nThermal Goggles\tA Goggle which help you to find your enimes.\t{F7A763}$30000{FFFFFF}");
	strcat(string, "\nShotgun\tA powerful gun with overpowered blast.\t{F7A763}$20000{FFFFFF}");
	strcat(string, "\nFull Kevlar\tThe strongest armor of all time.\t{F7A763}$10000{FFFFFF}");
	strcat(string, "\nBaking Soda\tA soda for making drugs.\t{F7A763}$500{FFFFFF}");
	strcat(string, "\nMuriatic Acid\tTA acid for making drugs.\t{F7A763}$500{FFFFFF}");

	format(title, sizeof(title), "BlackMarket");
	ShowPlayerDialog(playerid, DIALOG_BLACKMARKET, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Cancel");

	return 1;
}

CMD:world(playerid, params[])
{
	SM(playerid, COLOR_AQUA, "world: %i", GetPlayerVirtualWorld(playerid));
	return 1;
}




#include "./modules/anims.pwn"
#if defined DISCORD
	#include "./modules/discord.pwn"
#endif